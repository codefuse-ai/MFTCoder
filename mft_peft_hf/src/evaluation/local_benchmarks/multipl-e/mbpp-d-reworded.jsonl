{"name": "mbpp_100_next_smallest_palindrome", "language": "d", "prompt": "import std.math;\n/*\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n*/\nlong next_smallest_palindrome(long num) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = next_smallest_palindrome;\n\n    assert(candidate(99L) == 101L);\n    assert(candidate(1221L) == 1331L);\n    assert(candidate(120L) == 121L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_101_kth_element", "language": "d", "prompt": "import std.math;\n/*\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n*/\nlong kth_element(long[] arr, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = kth_element;\n\n    assert(candidate([12L, 3L, 5L, 7L, 19L], 2L) == 3L);\n    assert(candidate([17L, 24L, 8L, 23L], 3L) == 8L);\n    assert(candidate([16L, 21L, 25L, 36L, 4L], 4L) == 36L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_102_snake_to_camel", "language": "d", "prompt": "import std.math;\n/*\n\tWrite a function to convert a snake case string to camel case string.\n*/\nstring snake_to_camel(string word) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"python_program\") == \"PythonProgram\");\n    assert(candidate(\"python_language\") == \"PythonLanguage\");\n    assert(candidate(\"programming_language\") == \"ProgrammingLanguage\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_103_eulerian_num", "language": "d", "prompt": "import std.math;\n/*\n\tWrite a function to find the Eulerian number a(n, m).\n*/\nlong eulerian_num(long n, long m) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = eulerian_num;\n\n    assert(candidate(3L, 1L) == 4L);\n    assert(candidate(4L, 1L) == 11L);\n    assert(candidate(5L, 3L) == 26L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_104_sort_sublists", "language": "d", "prompt": "import std.math;\n/*\n\tWrite a function to sort each subarray of strings in a given array of arrays.\n*/\nstring[][] sort_sublists(string[][] input_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_sublists;\n\n    assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);\n    assert(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]) == [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]);\n    assert(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]) == [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_105_count", "language": "d", "prompt": "import std.math;\n/*\n\tWrite a dthon function to count true booleans in the given array.\n*/\nlong count(bool[] lst) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count;\n\n    assert(candidate([true, false, true]) == 2L);\n    assert(candidate([false, false]) == 0L);\n    assert(candidate([true, true, true]) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_106_add_lists", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to append the given array to the given tuples.\n*/\nTuple!(long, long, long, long, long) add_lists(long[] test_list, Tuple!(long, long) test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add_lists;\n\n    assert(candidate([5L, 6L, 7L], tuple(9L, 10L)) == tuple(9L, 10L, 5L, 6L, 7L));\n    assert(candidate([6L, 7L, 8L], tuple(10L, 11L)) == tuple(10L, 11L, 6L, 7L, 8L));\n    assert(candidate([7L, 8L, 9L], tuple(11L, 12L)) == tuple(11L, 12L, 7L, 8L, 9L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_108_merge_sorted_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to merge three arrays into a single sorted array.\n*/\nlong[] merge_sorted_list(long[] num1, long[] num2, long[] num3) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = merge_sorted_list;\n\n    assert(candidate([25L, 24L, 15L, 4L, 5L, 29L, 110L], [19L, 20L, 11L, 56L, 25L, 233L, 154L], [24L, 26L, 54L, 48L]) == [4L, 5L, 11L, 15L, 19L, 20L, 24L, 24L, 25L, 25L, 26L, 29L, 48L, 54L, 56L, 110L, 154L, 233L]);\n    assert(candidate([1L, 3L, 5L, 6L, 8L, 9L], [2L, 5L, 7L, 11L], [1L, 4L, 7L, 8L, 12L]) == [1L, 1L, 2L, 3L, 4L, 5L, 5L, 6L, 7L, 7L, 8L, 8L, 9L, 11L, 12L]);\n    assert(candidate([18L, 14L, 10L, 9L, 8L, 7L, 9L, 3L, 2L, 4L, 1L], [25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L], [12L, 74L, 9L, 50L, 61L, 41L]) == [1L, 2L, 3L, 4L, 7L, 8L, 9L, 9L, 9L, 10L, 12L, 14L, 14L, 18L, 22L, 25L, 25L, 35L, 41L, 50L, 58L, 61L, 65L, 74L, 75L, 85L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_109_odd_Equivalent", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n*/\nlong odd_Equivalent(string s, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = odd_Equivalent;\n\n    assert(candidate(\"011001\", 6L) == 3L);\n    assert(candidate(\"11011\", 5L) == 4L);\n    assert(candidate(\"1010\", 4L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_113_check_integer", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if a string represents an integer or not.\n*/\nbool check_integer(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_integer;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"1\") == true);\n    assert(candidate(\"12345\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_116_tuple_to_int", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n*/\nlong tuple_to_int(Tuple!(long, long, long) nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tuple_to_int;\n\n    assert(candidate(tuple(1L, 2L, 3L)) == 123L);\n    assert(candidate(tuple(4L, 5L, 6L)) == 456L);\n    assert(candidate(tuple(5L, 6L, 7L)) == 567L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_117_list_to_float", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert all possible convertible elements in an array of arrays to floats.\n*/\nTuple!(float, float)[] list_to_float(Tuple!(string, string)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = list_to_float;\n\n    assert(candidate([tuple(\"3\", \"4\"), tuple(\"1\", \"26.45\"), tuple(\"7.32\", \"8\"), tuple(\"4\", \"8\")]) == [tuple(3.0, 4.0), tuple(1.0, 26.45), tuple(7.32, 8.0), tuple(4.0, 8.0)]);\n    assert(candidate([tuple(\"4\", \"4\"), tuple(\"2\", \"27\"), tuple(\"4.12\", \"9\"), tuple(\"7\", \"11\")]) == [tuple(4.0, 4.0), tuple(2.0, 27.0), tuple(4.12, 9.0), tuple(7.0, 11.0)]);\n    assert(candidate([tuple(\"6\", \"78\"), tuple(\"5\", \"26.45\"), tuple(\"1.33\", \"4\"), tuple(\"82\", \"13\")]) == [tuple(6.0, 78.0), tuple(5.0, 26.45), tuple(1.33, 4.0), tuple(82.0, 13.0)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_118_string_to_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a string to an array of strings split on the space character.\n*/\nstring[] string_to_list(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = string_to_list;\n\n    assert(candidate(\"python programming\") == [\"python\", \"programming\"]);\n    assert(candidate(\"lists tuples strings\") == [\"lists\", \"tuples\", \"strings\"]);\n    assert(candidate(\"write a program\") == [\"write\", \"a\", \"program\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_119_search", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the element that appears only once in a sorted array.\n*/\nlong search(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([1L, 1L, 2L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 1L, 3L, 3L, 4L, 4L, 5L, 5L, 7L, 7L, 8L]) == 8L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 4L, 4L]) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_11_remove_Occ", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove first and last occurrence of a given character from the string.\n*/\nstring remove_Occ(string s, string ch) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_Occ;\n\n    assert(candidate(\"hello\", \"l\") == \"heo\");\n    assert(candidate(\"abcda\", \"a\") == \"bcd\");\n    assert(candidate(\"PHP\", \"P\") == \"H\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_120_max_product_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given array.\n*/\nlong max_product_tuple(Tuple!(long, long)[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_product_tuple;\n\n    assert(candidate([tuple(2L, 7L), tuple(2L, 6L), tuple(1L, 8L), tuple(4L, 9L)]) == 36L);\n    assert(candidate([tuple(10L, 20L), tuple(15L, 2L), tuple(5L, 10L)]) == 200L);\n    assert(candidate([tuple(11L, 44L), tuple(10L, 15L), tuple(20L, 5L), tuple(12L, 9L)]) == 484L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n*/\nlong amicable_numbers_sum(long limit) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = amicable_numbers_sum;\n\n    assert(candidate(999L) == 504L);\n    assert(candidate(9999L) == 31626L);\n    assert(candidate(99L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_125_find_length", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n*/\nlong find_length(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_length;\n\n    assert(candidate(\"11000010001\") == 6L);\n    assert(candidate(\"10111\") == 1L);\n    assert(candidate(\"11011101100101\") == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_126_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of common divisors of two given numbers.\n*/\nlong sum(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum;\n\n    assert(candidate(10L, 15L) == 6L);\n    assert(candidate(100L, 150L) == 93L);\n    assert(candidate(4L, 6L) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_127_multiply_int", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to multiply two integers.\n*/\nlong multiply_int(long x, long y) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = multiply_int;\n\n    assert(candidate(10L, 20L) == 200L);\n    assert(candidate(5L, 10L) == 50L);\n    assert(candidate(4L, 8L) == 32L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_128_long_words", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find words that are longer than n characters from a given array of words.\n*/\nstring[] long_words(long n, string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = long_words;\n\n    assert(candidate(3L, \"python is a programming language\") == [\"python\", \"programming\", \"language\"]);\n    assert(candidate(2L, \"writing a program\") == [\"writing\", \"program\"]);\n    assert(candidate(5L, \"sorting list\") == [\"sorting\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_129_magic_square_test", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate whether the matrix is a magic square.\n*/\nbool magic_square_test(long[][] my_matrix) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = magic_square_test;\n\n    assert(candidate([[7L, 12L, 1L, 14L], [2L, 13L, 8L, 11L], [16L, 3L, 10L, 5L], [9L, 6L, 15L, 4L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 8L]]) == true);\n    assert(candidate([[2L, 7L, 6L], [9L, 5L, 1L], [4L, 3L, 7L]]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_12_sort_matrix", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n*/\nlong[][] sort_matrix(long[][] M) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_matrix;\n\n    assert(candidate([[1L, 2L, 3L], [2L, 4L, 5L], [1L, 1L, 1L]]) == [[1L, 1L, 1L], [1L, 2L, 3L], [2L, 4L, 5L]]);\n    assert(candidate([[1L, 2L, 3L], [-2L, 4L, -5L], [1L, -1L, 1L]]) == [[-2L, 4L, -5L], [1L, -1L, 1L], [1L, 2L, 3L]]);\n    assert(candidate([[5L, 8L, 9L], [6L, 4L, 3L], [2L, 1L, 4L]]) == [[2L, 1L, 4L], [6L, 4L, 3L], [5L, 8L, 9L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_130_max_occurrences", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the item with maximum frequency in a given array.\n*/\nlong max_occurrences(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_occurrences;\n\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 2L, 6L, 5L, 1L, 6L, 1L, 2L, 3L, 2L, 4L, 6L, 9L, 1L, 2L]) == 2L);\n    assert(candidate([2L, 3L, 8L, 4L, 7L, 9L, 8L, 7L, 9L, 15L, 14L, 10L, 12L, 13L, 16L, 18L]) == 8L);\n    assert(candidate([10L, 20L, 20L, 30L, 40L, 90L, 80L, 50L, 30L, 20L, 50L, 10L]) == 20L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_131_reverse_vowels", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to reverse only the vowels of a given string (where y is not a vowel).\n*/\nstring reverse_vowels(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = reverse_vowels;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"USA\") == \"ASU\");\n    assert(candidate(\"ab\") == \"ab\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_132_tup_string", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert an array to a string.\n*/\nstring tup_string(string[] tup1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tup_string;\n\n    assert(candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]) == \"exercises\");\n    assert(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]) == \"python\");\n    assert(candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]) == \"program\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_133_sum_negativenum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the sum of the negative numbers of a given array of numbers.\n*/\nlong sum_negativenum(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_negativenum;\n\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == -32L);\n    assert(candidate([10L, 15L, -14L, 13L, -18L, 12L, -20L]) == -52L);\n    assert(candidate([19L, -65L, 57L, 39L, 152L, -639L, 121L, 44L, 90L, -190L]) == -894L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_135_hexagonal_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth hexagonal number.\n*/\nlong hexagonal_num(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = hexagonal_num;\n\n    assert(candidate(10L) == 190L);\n    assert(candidate(5L) == 45L);\n    assert(candidate(7L) == 91L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n*/\nbool is_Sum_Of_Powers_Of_Two(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_Sum_Of_Powers_Of_Two;\n\n    assert(candidate(10L) == true);\n    assert(candidate(7L) == false);\n    assert(candidate(14L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_141_pancake_sort", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an array of elements.\n*/\nlong[] pancake_sort(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = pancake_sort;\n\n    assert(candidate([15L, 79L, 25L, 38L, 69L]) == [15L, 25L, 38L, 69L, 79L]);\n    assert(candidate([98L, 12L, 54L, 36L, 85L]) == [12L, 36L, 54L, 85L, 98L]);\n    assert(candidate([41L, 42L, 32L, 12L, 23L]) == [12L, 23L, 32L, 41L, 42L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_142_count_samepair", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count number items that are identical in the same position of three given arrays.\n*/\nlong count_samepair(long[] list1, long[] list2, long[] list3) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_samepair;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 9L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 9L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 8L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 2L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 8L], [2L, 1L, 3L, 1L, 2L, 6L, 7L, 8L]) == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the maximum difference between any two elements in a given array.\n*/\nlong max_Abs_Diff(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_Abs_Diff;\n\n    assert(candidate([2L, 1L, 5L, 3L]) == 4L);\n    assert(candidate([9L, 3L, 2L, 5L, 1L]) == 8L);\n    assert(candidate([3L, 2L, 1L]) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_14_find_Volume", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the volume of a triangular prism.\n*/\nlong find_Volume(long l, long b, long h) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Volume;\n\n    assert(candidate(10L, 8L, 6L) == 240L);\n    assert(candidate(3L, 2L, 2L) == 6L);\n    assert(candidate(1L, 2L, 1L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_160_find_solution", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return null if no solution exists.\n*/\nNullable!(Tuple!(long, long)) find_solution(long a, long b, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_solution;\n\n{\n        auto result = candidate(2L, 3L, 7L);\n        assert(!result.isNull && result.get == tuple(2L, 1L));\n}\n\n{\n        auto result = candidate(4L, 2L, 7L);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(1L, 13L, 17L);\n        assert(!result.isNull && result.get == tuple(4L, 1L));\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_161_remove_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all elements from a given array present in another array.\n*/\nlong[] remove_elements(long[] list1, long[] list2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_elements;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [2L, 4L, 6L, 8L]) == [1L, 3L, 5L, 7L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [1L, 3L, 5L, 7L]) == [2L, 4L, 6L, 8L, 9L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], [5L, 7L]) == [1L, 2L, 3L, 4L, 6L, 8L, 9L, 10L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_162_sum_series", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n*/\nlong sum_series(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_series;\n\n    assert(candidate(6L) == 12L);\n    assert(candidate(10L) == 30L);\n    assert(candidate(9L) == 25L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_164_are_equivalent", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n*/\nbool are_equivalent(long num1, long num2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = are_equivalent;\n\n    assert(candidate(36L, 57L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(23L, 47L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_165_count_char_position", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n*/\nlong count_char_position(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_char_position;\n\n    assert(candidate(\"xbcefg\") == 2L);\n    assert(candidate(\"ABcED\") == 3L);\n    assert(candidate(\"AbgdeF\") == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_166_find_even_pair", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that counts the number of pairs of integers in an array that xor to an even number.\n*/\nlong find_even_pair(long[] A) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_even_pair;\n\n    assert(candidate([5L, 4L, 7L, 2L, 1L]) == 4L);\n    assert(candidate([7L, 2L, 8L, 1L, 0L, 5L, 11L]) == 9L);\n    assert(candidate([1L, 2L, 3L]) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_167_next_power_of_2", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the smallest power of 2 greater than or equal to n.\n*/\nlong next_power_of_2(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = next_power_of_2;\n\n    assert(candidate(0L) == 1L);\n    assert(candidate(5L) == 8L);\n    assert(candidate(17L) == 32L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_168_frequency", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the number of occurrences of a number in a given array.\n*/\nlong frequency(long[] a, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = frequency;\n\n    assert(candidate([1L, 2L, 3L], 4L) == 0L);\n    assert(candidate([1L, 2L, 2L, 3L, 3L, 3L, 4L], 3L) == 3L);\n    assert(candidate([0L, 1L, 2L, 3L, 1L, 2L], 1L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n*/\nbool text_lowercase_underscore(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_170_sum_range_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the sum of numbers in an array within a range specified by two indices.\n*/\nlong sum_range_list(long[] list1, long m, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_range_list;\n\n    assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 8L, 10L) == 29L);\n    assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 5L, 7L) == 16L);\n    assert(candidate([2L, 1L, 5L, 6L, 8L, 3L, 4L, 9L, 10L, 11L, 8L, 12L], 7L, 10L) == 38L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n*/\nlong perimeter_pentagon(long a) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = perimeter_pentagon;\n\n    assert(candidate(5L) == 25L);\n    assert(candidate(10L) == 50L);\n    assert(candidate(15L) == 75L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_172_count_occurance", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n*/\nlong count_occurance(string s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_occurance;\n\n    assert(candidate(\"letstdlenstdporstd\") == 3L);\n    assert(candidate(\"truststdsolensporsd\") == 1L);\n    assert(candidate(\"makestdsostdworthit\") == 2L);\n    assert(candidate(\"stds\") == 1L);\n    assert(candidate(\"\") == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_17_square_perimeter", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that returns the perimeter of a square given its side length as input.\n*/\nlong square_perimeter(long a) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = square_perimeter;\n\n    assert(candidate(10L) == 40L);\n    assert(candidate(5L) == 20L);\n    assert(candidate(4L) == 16L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove characters from the first string which are present in the second string.\n*/\nstring remove_dirty_chars(string string, string second_string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_dirty_chars;\n\n    assert(candidate(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(candidate(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(candidate(\"exoticmiles\", \"toxic\") == \"emles\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_19_test_duplicate", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n*/\nbool test_duplicate(long[] arraynums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = test_duplicate;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == true);\n    assert(candidate([1L, 1L, 2L, 2L, 3L, 3L, 4L, 4L, 5L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_20_is_woodall", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given number is woodball or not.\n*/\nbool is_woodall(long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_woodall;\n\n    assert(candidate(383L) == true);\n    assert(candidate(254L) == false);\n    assert(candidate(200L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_223_is_majority", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n*/\nbool is_majority(long[] arr, long n, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_majority;\n\n    assert(candidate([1L, 2L, 3L, 3L, 3L, 3L, 10L], 7L, 3L) == true);\n    assert(candidate([1L, 1L, 2L, 4L, 4L, 4L, 6L, 6L], 8L, 4L) == false);\n    assert(candidate([1L, 1L, 1L, 2L, 2L], 5L, 1L) == true);\n    assert(candidate([1L, 1L, 2L, 2L], 5L, 1L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_224_count_Set_Bits", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of set bits (binary digits with value 1) in a given number.\n*/\nlong count_Set_Bits(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_Set_Bits;\n\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 1L);\n    assert(candidate(6L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_226_odd_values_string", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove the characters which have odd index values of a given string.\n*/\nstring odd_values_string(string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = odd_values_string;\n\n    assert(candidate(\"abcdef\") == \"ace\");\n    assert(candidate(\"python\") == \"pto\");\n    assert(candidate(\"data\") == \"dt\");\n    assert(candidate(\"lambs\") == \"lms\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_227_min_of_three", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find minimum of three numbers.\n*/\nlong min_of_three(long a, long b, long c) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = min_of_three;\n\n    assert(candidate(10L, 20L, 0L) == 0L);\n    assert(candidate(19L, 15L, 18L) == 15L);\n    assert(candidate(-10L, -20L, -30L) == -30L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether all the bits are unset in the given range or not.\n*/\nbool all_Bits_Set_In_The_Given_Range(long n, long l, long r) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = all_Bits_Set_In_The_Given_Range;\n\n    assert(candidate(4L, 1L, 2L) == true);\n    assert(candidate(17L, 2L, 4L) == true);\n    assert(candidate(39L, 4L, 6L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_229_re_arrange_array", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n*/\nlong[] re_arrange_array(long[] arr, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = re_arrange_array;\n\n    assert(candidate([-1L, 2L, -3L, 4L, 5L, 6L, -7L, 8L, 9L], 9L) == [-1L, -3L, -7L, 4L, 5L, 6L, 2L, 8L, 9L]);\n    assert(candidate([12L, -14L, -26L, 13L, 15L], 5L) == [-14L, -26L, 12L, 13L, 15L]);\n    assert(candidate([10L, 24L, 36L, -42L, -39L, -78L, 85L], 7L) == [-42L, -39L, -78L, 10L, 24L, 36L, 85L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_230_replace_blank", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n*/\nstring replace_blank(string str1, string char) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = replace_blank;\n\n    assert(candidate(\"hello people\", \"@\") == \"hello@people\");\n    assert(candidate(\"python program language\", \"$\") == \"python$program$language\");\n    assert(candidate(\"blank space\", \"-\") == \"blank-space\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_234_volume_cube", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the volume of a cube given its side length.\n*/\nlong volume_cube(long l) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = volume_cube;\n\n    assert(candidate(3L) == 27L);\n    assert(candidate(2L) == 8L);\n    assert(candidate(5L) == 125L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_238_number_of_substrings", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of non-empty substrings of a given string.\n*/\nlong number_of_substrings(string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = number_of_substrings;\n\n    assert(candidate(\"abc\") == 6L);\n    assert(candidate(\"abcd\") == 10L);\n    assert(candidate(\"abcde\") == 15L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n*/\nlong get_total_number_of_sequences(long m, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_total_number_of_sequences;\n\n    assert(candidate(10L, 4L) == 4L);\n    assert(candidate(5L, 2L) == 6L);\n    assert(candidate(16L, 3L) == 84L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_242_count_charac", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the total number of characters in a string.\n*/\nlong count_charac(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_charac;\n\n    assert(candidate(\"python programming\") == 18L);\n    assert(candidate(\"language\") == 8L);\n    assert(candidate(\"words\") == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the next perfect square greater than a given number.\n*/\nlong next_Perfect_Square(long N) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = next_Perfect_Square;\n\n    assert(candidate(35L) == 36L);\n    assert(candidate(6L) == 9L);\n    assert(candidate(9L) == 16L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_245_max_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n*/\nlong max_sum(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_sum;\n\n    assert(candidate([1L, 15L, 51L, 45L, 33L, 100L, 12L, 18L, 9L]) == 194L);\n    assert(candidate([80L, 60L, 30L, 40L, 20L, 10L]) == 210L);\n    assert(candidate([2L, 3L, 14L, 16L, 21L, 23L, 29L, 30L]) == 138L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_247_lps", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n*/\nlong lps(string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = lps;\n\n    assert(candidate(\"TENS FOR TENS\") == 5L);\n    assert(candidate(\"CARDIO FOR CARDS\") == 7L);\n    assert(candidate(\"PART OF THE JOURNEY IS PART\") == 9L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_249_intersection_array", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the intersection of two arrays.\n*/\nlong[] intersection_array(long[] array_nums1, long[] array_nums2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = intersection_array;\n\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [1L, 2L, 4L, 8L, 9L]) == [1L, 2L, 8L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [3L, 5L, 7L, 9L]) == [3L, 5L, 7L, 9L]);\n    assert(candidate([1L, 2L, 3L, 5L, 7L, 8L, 9L, 10L], [10L, 20L, 30L, 40L]) == [10L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_250_count_X", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in a tuple and an element and counts the occcurences of the element in the array.\n*/\nlong count_X(long[] tup, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_X;\n\n    assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 4L) == 0L);\n    assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 10L) == 3L);\n    assert(candidate([10L, 8L, 5L, 2L, 10L, 15L, 10L, 8L, 5L, 8L, 8L, 2L], 8L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_251_insert_element", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\n*/\nstring[] insert_element(string[] list, string element) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = insert_element;\n\n    assert(candidate([\"Red\", \"Green\", \"Black\"], \"c\") == [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]);\n    assert(candidate([\"python\", \"java\"], \"program\") == [\"program\", \"python\", \"program\", \"java\"]);\n    assert(candidate([\"happy\", \"sad\"], \"laugh\") == [\"laugh\", \"happy\", \"laugh\", \"sad\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_252_convert", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to convert complex numbers to polar coordinates.\n*/\nTuple!(float, float) convert(long numbers) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = convert;\n\n    assert(candidate(1L) == tuple(1.0, 0.0));\n    assert(candidate(4L) == tuple(4.0, 0.0));\n    assert(candidate(5L) == tuple(5.0, 0.0));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_255_combinations_colors", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\n*/\nstring[][] combinations_colors(string[] l, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = combinations_colors;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\"], 1L) == [[\"Red\"], [\"Green\"], [\"Blue\"]]);\n    assert(candidate([\"Red\", \"Green\", \"Blue\"], 2L) == [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);\n    assert(candidate([\"Red\", \"Green\", \"Blue\"], 3L) == [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_256_count_Primes_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n*/\nlong count_Primes_nums(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_Primes_nums;\n\n    assert(candidate(5L) == 2L);\n    assert(candidate(10L) == 4L);\n    assert(candidate(100L) == 25L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_257_swap_numbers", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in two numbers and returns an array with the second number and then the first number.\n*/\nlong[] swap_numbers(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = swap_numbers;\n\n    assert(candidate(10L, 20L) == [20L, 10L]);\n    assert(candidate(15L, 17L) == [17L, 15L]);\n    assert(candidate(100L, 200L) == [200L, 100L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_259_maximize_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to maximize the given two arrays.\n*/\nlong[][] maximize_elements(long[][] test_tup1, long[][] test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = maximize_elements;\n\n    assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[6L, 7L], [4L, 9L], [2L, 9L], [7L, 10L]]);\n    assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[7L, 8L], [5L, 10L], [3L, 10L], [8L, 11L]]);\n    assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[8L, 9L], [6L, 11L], [4L, 11L], [9L, 12L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_260_newman_prime", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n*/\nlong newman_prime(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = newman_prime;\n\n    assert(candidate(3L) == 7L);\n    assert(candidate(4L) == 17L);\n    assert(candidate(5L) == 41L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_261_division_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n*/\nTuple!(long, long, long, long) division_elements(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = division_elements;\n\n    assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(2L, 2L, 2L, 3L));\n    assert(candidate(tuple(12L, 6L, 8L, 16L), tuple(6L, 3L, 4L, 4L)) == tuple(2L, 2L, 2L, 4L));\n    assert(candidate(tuple(20L, 14L, 36L, 18L), tuple(5L, 7L, 6L, 9L)) == tuple(4L, 2L, 6L, 2L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_264_dog_age", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate a dog's age in dog's years.\n*/\nlong dog_age(long h_age) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = dog_age;\n\n    assert(candidate(12L) == 61L);\n    assert(candidate(15L) == 73L);\n    assert(candidate(24L) == 109L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the lateral surface area of a cube given its side length.\n*/\nlong lateralsurface_cube(long l) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = lateralsurface_cube;\n\n    assert(candidate(5L) == 100L);\n    assert(candidate(9L) == 324L);\n    assert(candidate(10L) == 400L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_267_square_Sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n*/\nlong square_Sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = square_Sum;\n\n    assert(candidate(2L) == 10L);\n    assert(candidate(3L) == 35L);\n    assert(candidate(4L) == 84L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_268_find_star_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n'th star number.\n*/\nlong find_star_num(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_star_num;\n\n    assert(candidate(3L) == 37L);\n    assert(candidate(4L) == 73L);\n    assert(candidate(5L) == 121L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_269_ascii_value", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the ascii value of a character.\n*/\nlong ascii_value(string k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = ascii_value;\n\n    assert(candidate(\"A\") == 65L);\n    assert(candidate(\"R\") == 82L);\n    assert(candidate(\"S\") == 83L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of even numbers at even positions of an array.\n*/\nlong sum_even_and_even_index(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_even_and_even_index;\n\n    assert(candidate([5L, 6L, 12L, 1L, 18L, 8L]) == 30L);\n    assert(candidate([3L, 20L, 17L, 9L, 2L, 10L, 18L, 13L, 6L, 18L]) == 26L);\n    assert(candidate([5L, 6L, 12L, 1L]) == 12L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_271_even_Power_Sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n*/\nlong even_Power_Sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = even_Power_Sum;\n\n    assert(candidate(2L) == 1056L);\n    assert(candidate(3L) == 8832L);\n    assert(candidate(1L) == 32L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_272_rear_extract", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array of tuples and returns an array containing the rear element of each tuple.\n*/\nlong[] rear_extract(Tuple!(long, string, long)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = rear_extract;\n\n    assert(candidate([tuple(1L, \"Rash\", 21L), tuple(2L, \"Varsha\", 20L), tuple(3L, \"Kil\", 19L)]) == [21L, 20L, 19L]);\n    assert(candidate([tuple(1L, \"Sai\", 36L), tuple(2L, \"Ayesha\", 25L), tuple(3L, \"Salman\", 45L)]) == [36L, 25L, 45L]);\n    assert(candidate([tuple(1L, \"Sudeep\", 14L), tuple(2L, \"Vandana\", 36L), tuple(3L, \"Dawood\", 56L)]) == [14L, 36L, 56L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_273_substract_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n*/\nTuple!(long, long, long) substract_elements(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = substract_elements;\n\n    assert(candidate(tuple(10L, 4L, 5L), tuple(2L, 5L, 18L)) == tuple(8L, -1L, -13L));\n    assert(candidate(tuple(11L, 2L, 3L), tuple(24L, 45L, 16L)) == tuple(-13L, -43L, -13L));\n    assert(candidate(tuple(7L, 18L, 9L), tuple(10L, 11L, 12L)) == tuple(-3L, 7L, -3L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n*/\nlong even_binomial_Coeff_Sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = even_binomial_Coeff_Sum;\n\n    assert(candidate(4L) == 8L);\n    assert(candidate(6L) == 32L);\n    assert(candidate(2L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_277_dict_filter", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an associative array and integer n and filters the associative array to only include entries with values greater than or equal to n.\n*/\nNullable!(long[string]) dict_filter(Nullable!(long[string]) dict, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = dict_filter;\n\n{\n        auto result = candidate([\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Kierra Gentry\": 165L, \"Pierre Cox\": 190L].nullable, 170L);\n        assert(!result.isNull && result.get == [\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Pierre Cox\": 190L]);\n}\n\n{\n        auto result = candidate([\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Kierra Gentry\": 165L, \"Pierre Cox\": 190L].nullable, 180L);\n        assert(!result.isNull && result.get == [\"Alden Cantrell\": 180L, \"Pierre Cox\": 190L]);\n}\n\n{\n        auto result = candidate([\"Cierra Vega\": 175L, \"Alden Cantrell\": 180L, \"Kierra Gentry\": 165L, \"Pierre Cox\": 190L].nullable, 190L);\n        assert(!result.isNull && result.get == [\"Pierre Cox\": 190L]);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_279_is_num_decagonal", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth decagonal number.\n*/\nlong is_num_decagonal(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_num_decagonal;\n\n    assert(candidate(3L) == 27L);\n    assert(candidate(7L) == 175L);\n    assert(candidate(10L) == 370L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_280_sequential_search", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n*/\nTuple!(bool, long) sequential_search(long[] dlist, long item) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sequential_search;\n\n    assert(candidate([11L, 23L, 58L, 31L, 56L, 77L, 43L, 12L, 65L, 19L], 31L) == tuple(true, 3L));\n    assert(candidate([12L, 32L, 45L, 62L, 35L, 47L, 44L, 61L], 61L) == tuple(true, 7L));\n    assert(candidate([9L, 10L, 17L, 19L, 22L, 39L, 48L, 56L], 48L) == tuple(true, 6L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_281_all_unique", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check if the elements of a given array are unique or not.\n*/\nbool all_unique(long[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = all_unique;\n\n    assert(candidate([1L, 2L, 3L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_282_sub_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to subtract two arrays element-wise.\n*/\nlong[] sub_list(long[] nums1, long[] nums2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sub_list;\n\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == [-3L, -3L, -3L]);\n    assert(candidate([1L, 2L], [3L, 4L]) == [-2L, -2L]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [40L, 50L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_283_validate", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n*/\nbool validate(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = validate;\n\n    assert(candidate(1234L) == true);\n    assert(candidate(51241L) == false);\n    assert(candidate(321L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_285_text_match_two_three", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n*/\nbool text_match_two_three(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_match_two_three;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abbbba\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n*/\nlong max_sub_array_sum_repeated(long[] a, long n, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_sub_array_sum_repeated;\n\n    assert(candidate([10L, 20L, -30L, -1L], 4L, 3L) == 30L);\n    assert(candidate([-1L, 10L, 20L], 3L, 2L) == 59L);\n    assert(candidate([-1L, -2L, -3L], 3L, 3L) == -1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_287_square_Sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n*/\nlong square_Sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = square_Sum;\n\n    assert(candidate(2L) == 20L);\n    assert(candidate(3L) == 56L);\n    assert(candidate(4L) == 120L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_290_max_length", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the array of maximum length in an array of arrays.\n*/\nTuple!(long, long[]) max_length(long[][] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_length;\n\n    assert(candidate([[0L], [1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == tuple(3L, [13L, 15L, 17L]));\n    assert(candidate([[1L], [5L, 7L], [10L, 12L, 14L, 15L]]) == tuple(4L, [10L, 12L, 14L, 15L]));\n    assert(candidate([[5L], [15L, 20L, 25L]]) == tuple(3L, [15L, 20L, 25L]));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_291_count_no_of_ways", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n*/\nlong count_no_of_ways(long n, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_no_of_ways;\n\n    assert(candidate(2L, 4L) == 16L);\n    assert(candidate(3L, 2L) == 6L);\n    assert(candidate(4L, 4L) == 228L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_292_find", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find quotient of two numbers (rounded down to the nearest integer).\n*/\nlong find(long n, long m) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find;\n\n    assert(candidate(10L, 3L) == 3L);\n    assert(candidate(4L, 2L) == 2L);\n    assert(candidate(20L, 5L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_293_otherside_rightangle", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the third side of a right angled triangle.\n*/\nfloat otherside_rightangle(long w, long h) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = otherside_rightangle;\n\n    assert(candidate(7L, 8L) == 10.63014581273465);\n    assert(candidate(3L, 4L) == 5L);\n    assert(candidate(7L, 15L) == 16.55294535724685);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_295_sum_div", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to return the sum of all divisors of a number.\n*/\nlong sum_div(long number) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_div;\n\n    assert(candidate(8L) == 7L);\n    assert(candidate(12L) == 16L);\n    assert(candidate(7L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_296_get_Inv_Count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count inversions in an array.\n*/\nlong get_Inv_Count(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_Inv_Count;\n\n    assert(candidate([1L, 20L, 6L, 4L, 5L]) == 5L);\n    assert(candidate([1L, 2L, 1L]) == 1L);\n    assert(candidate([1L, 2L, 5L, 6L, 1L]) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_299_max_aggregate", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the maximum aggregate from the array of tuples.\n*/\nTuple!(string, long) max_aggregate(Tuple!(string, long)[] stdata) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_aggregate;\n\n    assert(candidate([tuple(\"Juan Whelan\", 90L), tuple(\"Sabah Colley\", 88L), tuple(\"Peter Nichols\", 7L), tuple(\"Juan Whelan\", 122L), tuple(\"Sabah Colley\", 84L)]) == tuple(\"Juan Whelan\", 212L));\n    assert(candidate([tuple(\"Juan Whelan\", 50L), tuple(\"Sabah Colley\", 48L), tuple(\"Peter Nichols\", 37L), tuple(\"Juan Whelan\", 22L), tuple(\"Sabah Colley\", 14L)]) == tuple(\"Juan Whelan\", 72L));\n    assert(candidate([tuple(\"Juan Whelan\", 10L), tuple(\"Sabah Colley\", 20L), tuple(\"Peter Nichols\", 30L), tuple(\"Juan Whelan\", 40L), tuple(\"Sabah Colley\", 50L)]) == tuple(\"Sabah Colley\", 70L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_304_find_Element", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find element at a given index after number of rotations.\n*/\nlong find_Element(long[] arr, long[][] ranges, long rotations, long index) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Element;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [[0L, 2L], [0L, 3L]], 2L, 1L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L], [[0L, 1L], [0L, 2L]], 1L, 2L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [[0L, 1L], [0L, 2L]], 1L, 1L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_305_start_withp", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to return two words from an array of words starting with letter 'p'.\n*/\nTuple!(string, string) start_withp(string[] words) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = start_withp;\n\n    assert(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == tuple(\"Python\", \"PHP\"));\n    assert(candidate([\"Python Programming\", \"Java Programming\"]) == tuple(\"Python\", \"Programming\"));\n    assert(candidate([\"Pqrst Pqr\", \"qrstuv\"]) == tuple(\"Pqrst\", \"Pqr\"));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n*/\nlong max_sum_increasing_subseq(long[] a, long n, long index, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_sum_increasing_subseq;\n\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 4L, 6L) == 11L);\n    assert(candidate([1L, 101L, 2L, 3L, 100L, 4L, 5L], 7L, 2L, 5L) == 7L);\n    assert(candidate([11L, 15L, 19L, 21L, 26L, 28L, 31L], 7L, 2L, 4L) == 71L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_308_large_product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\n*/\nlong[] large_product(long[] nums1, long[] nums2, long N) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = large_product;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 3L) == [60L, 54L, 50L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 4L) == [60L, 54L, 50L, 48L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [3L, 6L, 8L, 9L, 10L, 6L], 5L) == [60L, 54L, 50L, 48L, 45L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_309_maximum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the maximum of two numbers.\n*/\nlong maximum(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate(5L, 10L) == 10L);\n    assert(candidate(-1L, -2L) == -1L);\n    assert(candidate(9L, 7L) == 9L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_310_string_to_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a given string to an array of characters.\n*/\nstring[] string_to_tuple(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = string_to_tuple;\n\n    assert(candidate(\"python 3.0\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]);\n    assert(candidate(\"item1\") == [\"i\", \"t\", \"e\", \"m\", \"1\"]);\n    assert(candidate(\"15.10\") == [\"1\", \"5\", \".\", \"1\", \"0\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the highest power of 2 that is less than or equal to n.\n*/\nlong highest_Power_of_2(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = highest_Power_of_2;\n\n    assert(candidate(10L) == 8L);\n    assert(candidate(19L) == 16L);\n    assert(candidate(32L) == 32L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_389_find_lucas", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n'th lucas number.\n*/\nlong find_lucas(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_lucas;\n\n    assert(candidate(9L) == 76L);\n    assert(candidate(4L) == 7L);\n    assert(candidate(3L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert more than one array to nested associative array.\n*/\nNone[] convert_list_dictionary(string[] l1, string[] l2, long[] l3) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = convert_list_dictionary;\n\n    assert(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85L, 98L, 89L, 92L]) == [[\"S001\": [\"Adina Park\": 85L].nullable].nullable, [\"S002\": [\"Leyton Marsh\": 98L].nullable].nullable, [\"S003\": [\"Duncan Boyle\": 89L].nullable].nullable, [\"S004\": [\"Saim Richards\": 92L].nullable].nullable]);\n    assert(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100L, 200L, 300L, 400L]) == [[\"abc\": [\"python\": 100L].nullable].nullable, [\"def\": [\"program\": 200L].nullable].nullable, [\"ghi\": [\"language\": 300L].nullable].nullable, [\"jkl\": [\"programs\": 400L].nullable].nullable]);\n    assert(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10L, 20L, 30L, 40L]) == [[\"A1\": [\"java\": 10L].nullable].nullable, [\"A2\": [\"C\": 20L].nullable].nullable, [\"A3\": [\"C++\": 30L].nullable].nullable, [\"A4\": [\"DBMS\": 40L].nullable].nullable]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_392_get_max_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n*/\nlong get_max_sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_max_sum;\n\n    assert(candidate(60L) == 106L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(2L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_393_max_length_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the array with maximum length.\n*/\nTuple!(long, long[]) max_length_list(long[][] input_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_length_list;\n\n    assert(candidate([[0L], [1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == tuple(3L, [13L, 15L, 17L]));\n    assert(candidate([[1L, 2L, 3L, 4L, 5L], [1L, 2L, 3L, 4L], [1L, 2L, 3L], [1L, 2L], [1L]]) == tuple(5L, [1L, 2L, 3L, 4L, 5L]));\n    assert(candidate([[3L, 4L, 5L], [6L, 7L, 8L, 9L], [10L, 11L, 12L]]) == tuple(4L, [6L, 7L, 8L, 9L]));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_394_check_distinct", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if given array contains no duplicates.\n*/\nbool check_distinct(long[] test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_distinct;\n\n    assert(candidate([1L, 4L, 5L, 6L, 1L, 4L]) == false);\n    assert(candidate([1L, 4L, 5L, 6L]) == true);\n    assert(candidate([2L, 3L, 4L, 5L, 6L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first non-repeated character in a given string.\n*/\nNullable!(string) first_non_repeating_character(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = first_non_repeating_character;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"ababc\");\n        assert(!result.isNull && result.get == \"c\");\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_396_check_char", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n*/\nstring check_char(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_char;\n\n    assert(candidate(\"abba\") == \"Valid\");\n    assert(candidate(\"a\") == \"Valid\");\n    assert(candidate(\"abcd\") == \"Invalid\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_397_median_numbers", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the median of three numbers.\n*/\nfloat median_numbers(long a, long b, long c) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = median_numbers;\n\n    assert(candidate(25L, 55L, 65L) == 55.0);\n    assert(candidate(20L, 10L, 30L) == 20.0);\n    assert(candidate(15L, 45L, 75L) == 45.0);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_399_bitwise_xor", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n*/\nTuple!(long, long, long, long) bitwise_xor(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = bitwise_xor;\n\n    assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(15L, 6L, 5L, 10L));\n    assert(candidate(tuple(11L, 5L, 7L, 10L), tuple(6L, 3L, 4L, 4L)) == tuple(13L, 6L, 3L, 14L));\n    assert(candidate(tuple(12L, 6L, 8L, 11L), tuple(7L, 4L, 5L, 6L)) == tuple(11L, 2L, 13L, 13L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_3_is_not_prime", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to identify non-prime numbers.\n*/\nbool is_not_prime(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_not_prime;\n\n    assert(candidate(2L) == false);\n    assert(candidate(10L) == true);\n    assert(candidate(35L) == true);\n    assert(candidate(37L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_400_extract_freq", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract the number of unique tuples in the given array.\n*/\nlong extract_freq(Tuple!(long, long)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = extract_freq;\n\n    assert(candidate([tuple(3L, 4L), tuple(1L, 2L), tuple(4L, 3L), tuple(5L, 6L)]) == 3L);\n    assert(candidate([tuple(4L, 15L), tuple(2L, 3L), tuple(5L, 4L), tuple(6L, 7L)]) == 4L);\n    assert(candidate([tuple(5L, 16L), tuple(2L, 3L), tuple(6L, 5L), tuple(6L, 9L)]) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_401_add_nested_tuples", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to perform index wise addition of array elements in the given two nested arrays.\n*/\nlong[][] add_nested_tuples(long[][] test_tup1, long[][] test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add_nested_tuples;\n\n    assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[7L, 10L], [7L, 14L], [3L, 10L], [8L, 13L]]);\n    assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[9L, 12L], [9L, 16L], [5L, 12L], [10L, 15L]]);\n    assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[11L, 14L], [11L, 18L], [7L, 14L], [12L, 17L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_404_minimum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the minimum of two numbers.\n*/\nlong minimum(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = minimum;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(-5L, -4L) == -5L);\n    assert(candidate(0L, 0L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_406_find_Parity", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find whether the parity of a given number is odd.\n*/\nbool find_Parity(long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Parity;\n\n    assert(candidate(12L) == false);\n    assert(candidate(7L) == true);\n    assert(candidate(10L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n*/\nlong[][] k_smallest_pairs(long[] nums1, long[] nums2, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = k_smallest_pairs;\n\n    assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 2L) == [[1L, 2L], [1L, 4L]]);\n    assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 1L) == [[1L, 2L]]);\n    assert(candidate([1L, 3L, 7L], [2L, 4L, 6L], 7L) == [[1L, 2L], [1L, 4L], [3L, 2L], [1L, 6L], [3L, 4L], [3L, 6L], [7L, 2L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_409_min_product_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the minimum product from the pairs of tuples within a given array.\n*/\nlong min_product_tuple(Tuple!(long, long)[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = min_product_tuple;\n\n    assert(candidate([tuple(2L, 7L), tuple(2L, 6L), tuple(1L, 8L), tuple(4L, 9L)]) == 8L);\n    assert(candidate([tuple(10L, 20L), tuple(15L, 2L), tuple(5L, 10L)]) == 30L);\n    assert(candidate([tuple(11L, 44L), tuple(10L, 15L), tuple(20L, 5L), tuple(12L, 9L)]) == 100L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_411_snake_to_camel", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert the given snake case string to camel case string.\n*/\nstring snake_to_camel(string word) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = snake_to_camel;\n\n    assert(candidate(\"android_tv\") == \"AndroidTv\");\n    assert(candidate(\"google_pixel\") == \"GooglePixel\");\n    assert(candidate(\"apple_watch\") == \"AppleWatch\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_412_remove_odd", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove odd numbers from a given array.\n*/\nlong[] remove_odd(long[] l) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_odd;\n\n    assert(candidate([1L, 2L, 3L]) == [2L]);\n    assert(candidate([2L, 4L, 6L]) == [2L, 4L, 6L]);\n    assert(candidate([10L, 20L, 3L]) == [10L, 20L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_414_overlapping", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n*/\nbool overlapping(long[] list1, long[] list2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_415_max_Product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find a pair with highest product from a given array of integers.\n*/\nTuple!(long, long) max_Product(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_Product;\n\n    assert(candidate([1L, 2L, 3L, 4L, 7L, 0L, 8L, 4L]) == tuple(7L, 8L));\n    assert(candidate([0L, -1L, -2L, -4L, 5L, 0L, -6L]) == tuple(-4L, -6L));\n    assert(candidate([1L, 2L, 3L]) == tuple(2L, 3L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_417_group_tuples", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find common first element in given array of arrays.\n*/\nstring[][] group_tuples(string[][] Input) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = group_tuples;\n\n    assert(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]) == [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]);\n    assert(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]);\n    assert(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]) == [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_420_cube_Sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the cube sum of first n even natural numbers.\n*/\nlong cube_Sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = cube_Sum;\n\n    assert(candidate(2L) == 72L);\n    assert(candidate(3L) == 288L);\n    assert(candidate(4L) == 800L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_421_concatenate_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to concatenate each element of tuple by the delimiter.\n*/\nstring concatenate_tuple(Tuple!(string, string, long, string) test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = concatenate_tuple;\n\n    assert(candidate(tuple(\"ID\", \"is\", 4L, \"UTS\")) == \"ID-is-4-UTS\");\n    assert(candidate(tuple(\"QWE\", \"is\", 4L, \"RTY\")) == \"QWE-is-4-RTY\");\n    assert(candidate(tuple(\"ZEN\", \"is\", 4L, \"OP\")) == \"ZEN-is-4-OP\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the average of cubes of first n natural numbers.\n*/\nfloat find_Average_Of_Cube(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Average_Of_Cube;\n\n    assert(candidate(2L) == 4.5);\n    assert(candidate(3L) == 12L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_424_extract_rear", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n*/\nstring[] extract_rear(Tuple!(string, string, string) test_tuple) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = extract_rear;\n\n    assert(candidate(tuple(\"Mers\", \"for\", \"Vers\")) == [\"s\", \"r\", \"s\"]);\n    assert(candidate(tuple(\"Avenge\", \"for\", \"People\")) == [\"e\", \"r\", \"e\"]);\n    assert(candidate(tuple(\"Gotta\", \"get\", \"go\")) == [\"a\", \"t\", \"o\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to filter odd numbers.\n*/\nlong[] filter_oddnumbers(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = filter_oddnumbers;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 3L, 5L, 7L, 9L]);\n    assert(candidate([10L, 20L, 45L, 67L, 84L, 93L]) == [45L, 67L, 93L]);\n    assert(candidate([5L, 7L, 9L, 8L, 6L, 4L, 3L]) == [5L, 7L, 9L, 3L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_427_change_date_format", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n*/\nstring change_date_format(string dt) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = change_date_format;\n\n    assert(candidate(\"2026-01-02\") == \"02-01-2026\");\n    assert(candidate(\"2020-11-13\") == \"13-11-2020\");\n    assert(candidate(\"2021-04-26\") == \"26-04-2021\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_428_shell_sort", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort the given array by using shell sort.\n*/\nlong[] shell_sort(long[] my_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = shell_sort;\n\n    assert(candidate([12L, 23L, 4L, 5L, 3L, 2L, 12L, 81L, 56L, 95L]) == [2L, 3L, 4L, 5L, 12L, 12L, 23L, 56L, 81L, 95L]);\n    assert(candidate([24L, 22L, 39L, 34L, 87L, 73L, 68L]) == [22L, 24L, 34L, 39L, 68L, 73L, 87L]);\n    assert(candidate([32L, 30L, 16L, 96L, 82L, 83L, 74L]) == [16L, 30L, 32L, 74L, 82L, 83L, 96L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_429_and_tuples", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n*/\nTuple!(long, long, long, long) and_tuples(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = and_tuples;\n\n    assert(candidate(tuple(10L, 4L, 6L, 9L), tuple(5L, 2L, 3L, 3L)) == tuple(0L, 0L, 2L, 1L));\n    assert(candidate(tuple(1L, 2L, 3L, 4L), tuple(5L, 6L, 7L, 8L)) == tuple(1L, 2L, 3L, 0L));\n    assert(candidate(tuple(8L, 9L, 11L, 12L), tuple(7L, 13L, 14L, 17L)) == tuple(0L, 9L, 10L, 0L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_430_parabola_directrix", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the directrix of a parabola.\n*/\nlong parabola_directrix(long a, long b, long c) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = parabola_directrix;\n\n    assert(candidate(5L, 3L, 2L) == -198L);\n    assert(candidate(9L, 8L, 4L) == -2336L);\n    assert(candidate(2L, 4L, 6L) == -130L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_432_median_trapezium", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the median length of a trapezium.\n*/\nfloat median_trapezium(long base1, long base2, long height) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = median_trapezium;\n\n    assert(candidate(15L, 25L, 35L) == 20L);\n    assert(candidate(10L, 20L, 30L) == 15L);\n    assert(candidate(6L, 9L, 4L) == 7.5);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_433_check_greater", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n*/\nbool check_greater(long[] arr, long number) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_greater;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], 4L) == false);\n    assert(candidate([2L, 3L, 4L, 5L, 6L], 8L) == true);\n    assert(candidate([9L, 7L, 4L, 8L, 6L, 1L], 11L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_434_text_match_one", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an a followed by one or more b's.\n*/\nbool text_match_one(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_match_one;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abba\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_435_last_Digit", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the last digit of a given number.\n*/\nlong last_Digit(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = last_Digit;\n\n    assert(candidate(123L) == 3L);\n    assert(candidate(25L) == 5L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_436_neg_nos", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to return the negative numbers in an array.\n*/\nlong[] neg_nos(long[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = neg_nos;\n\n    assert(candidate([-1L, 4L, 5L, -6L]) == [-1L, -6L]);\n    assert(candidate([-1L, -2L, 3L, 4L]) == [-1L, -2L]);\n    assert(candidate([-7L, -6L, 8L, 9L]) == [-7L, -6L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_437_remove_odd", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove odd characters in a string.\n*/\nstring remove_odd(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_odd;\n\n    assert(candidate(\"python\") == \"yhn\");\n    assert(candidate(\"program\") == \"rga\");\n    assert(candidate(\"language\") == \"agae\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_438_count_bidirectional", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count bidirectional tuple pairs.\n*/\nlong count_bidirectional(Tuple!(long, long)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_bidirectional;\n\n    assert(candidate([tuple(5L, 6L), tuple(1L, 2L), tuple(6L, 5L), tuple(9L, 1L), tuple(6L, 5L), tuple(2L, 1L)]) == 3L);\n    assert(candidate([tuple(5L, 6L), tuple(1L, 3L), tuple(6L, 5L), tuple(9L, 1L), tuple(6L, 5L), tuple(2L, 1L)]) == 2L);\n    assert(candidate([tuple(5L, 6L), tuple(1L, 2L), tuple(6L, 5L), tuple(9L, 2L), tuple(6L, 5L), tuple(2L, 1L)]) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_439_multiple_to_single", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to join an array of multiple integers into a single integer.\n*/\nlong multiple_to_single(long[] L) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = multiple_to_single;\n\n    assert(candidate([11L, 33L, 50L]) == 113350L);\n    assert(candidate([-1L, 2L, 3L, 4L, 5L, 6L]) == -123456L);\n    assert(candidate([10L, 15L, 20L, 25L]) == 10152025L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_440_find_adverb_position", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the first adverb and their positions in a given sentence.\n*/\nTuple!(long, long, string) find_adverb_position(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_adverb_position;\n\n    assert(candidate(\"clearly!! we can see the sky\") == tuple(0L, 7L, \"clearly\"));\n    assert(candidate(\"seriously!! there are many roses\") == tuple(0L, 9L, \"seriously\"));\n    assert(candidate(\"unfortunately!! sita is going to home\") == tuple(0L, 13L, \"unfortunately\"));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_441_surfacearea_cube", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the surface area of a cube of a given size.\n*/\nlong surfacearea_cube(long l) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = surfacearea_cube;\n\n    assert(candidate(5L) == 150L);\n    assert(candidate(3L) == 54L);\n    assert(candidate(10L) == 600L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_442_positive_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the ration of positive numbers in an array of integers.\n*/\nfloat positive_count(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = positive_count;\n\n    assert(candidate([0L, 1L, 2L, -1L, -5L, 6L, 0L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.54);\n    assert(candidate([2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 0.69);\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L]) == 0.56);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_443_largest_neg", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the largest negative number from the given array.\n*/\nlong largest_neg(long[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = largest_neg;\n\n    assert(candidate([1L, 2L, 3L, -4L, -6L]) == -6L);\n    assert(candidate([1L, 2L, 3L, -8L, -9L]) == -9L);\n    assert(candidate([1L, 2L, 3L, 4L, -1L]) == -1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_444_trim_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to trim each array by k in the given arrays.\n*/\nlong[][] trim_tuple(long[][] test_list, long K) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = trim_tuple;\n\n    assert(candidate([[5L, 3L, 2L, 1L, 4L], [3L, 4L, 9L, 2L, 1L], [9L, 1L, 2L, 3L, 5L], [4L, 8L, 2L, 1L, 7L]], 2L) == [[2L], [9L], [2L], [2L]]);\n    assert(candidate([[5L, 3L, 2L, 1L, 4L], [3L, 4L, 9L, 2L, 1L], [9L, 1L, 2L, 3L, 5L], [4L, 8L, 2L, 1L, 7L]], 1L) == [[3L, 2L, 1L], [4L, 9L, 2L], [1L, 2L, 3L], [8L, 2L, 1L]]);\n    assert(candidate([[7L, 8L, 4L, 9L], [11L, 8L, 12L, 4L], [4L, 1L, 7L, 8L], [3L, 6L, 9L, 7L]], 1L) == [[8L, 4L], [8L, 12L], [1L, 7L], [6L, 9L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_445_index_multiplication", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to perform index wise multiplication of array elements in the given two arrays.\n*/\nlong[][] index_multiplication(long[][] test_tup1, long[][] test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = index_multiplication;\n\n    assert(candidate([[1L, 3L], [4L, 5L], [2L, 9L], [1L, 10L]], [[6L, 7L], [3L, 9L], [1L, 1L], [7L, 3L]]) == [[6L, 21L], [12L, 45L], [2L, 9L], [7L, 30L]]);\n    assert(candidate([[2L, 4L], [5L, 6L], [3L, 10L], [2L, 11L]], [[7L, 8L], [4L, 10L], [2L, 2L], [8L, 4L]]) == [[14L, 32L], [20L, 60L], [6L, 20L], [16L, 44L]]);\n    assert(candidate([[3L, 5L], [6L, 7L], [4L, 11L], [3L, 12L]], [[8L, 9L], [5L, 11L], [3L, 3L], [9L, 5L]]) == [[24L, 45L], [30L, 77L], [12L, 33L], [27L, 60L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_447_cube_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find cubes of individual elements in an array.\n*/\nlong[] cube_nums(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = cube_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 8L, 27L, 64L, 125L, 216L, 343L, 512L, 729L, 1000L]);\n    assert(candidate([10L, 20L, 30L]) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L]) == [1728L, 3375L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_448_cal_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the sum of perrin numbers.\n*/\nlong cal_sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = cal_sum;\n\n    assert(candidate(9L) == 49L);\n    assert(candidate(10L) == 66L);\n    assert(candidate(11L) == 88L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_450_extract_string", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract specified size of strings from a given array of string values.\n*/\nstring[] extract_string(string[] str, long l) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = extract_string;\n\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8L) == [\"practice\", \"solution\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6L) == [\"Python\"]);\n    assert(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9L) == [\"exercises\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_451_remove_whitespaces", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all whitespaces from the given string.\n*/\nstring remove_whitespaces(string text1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_whitespaces;\n\n    assert(candidate(\" Google    Flutter \") == \"GoogleFlutter\");\n    assert(candidate(\" Google    Dart \") == \"GoogleDart\");\n    assert(candidate(\" iOS    Swift \") == \"iOSSwift\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_452_loss_amount", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n*/\nlong loss_amount(long actual_cost, long sale_amount) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = loss_amount;\n\n    assert(candidate(1500L, 1200L) == 0L);\n    assert(candidate(100L, 200L) == 100L);\n    assert(candidate(2000L, 5000L) == 3000L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_453_sumofFactors", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of even factors of a number.\n*/\nlong sumofFactors(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sumofFactors;\n\n    assert(candidate(18L) == 26L);\n    assert(candidate(30L) == 48L);\n    assert(candidate(6L) == 8L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_454_text_match_wordz", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a word containing 'z'.\n*/\nbool text_match_wordz(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_match_wordz;\n\n    assert(candidate(\"pythonz.\") == true);\n    assert(candidate(\"xyz.\") == true);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given month number contains 31 days or not.\n*/\nbool check_monthnumb_number(long monthnum2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_monthnumb_number;\n\n    assert(candidate(5L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(6L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_456_reverse_string_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to reverse each string in a given array of string values.\n*/\nstring[] reverse_string_list(string[] stringlist) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = reverse_string_list;\n\n    assert(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]) == [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);\n    assert(candidate([\"john\", \"amal\", \"joel\", \"george\"]) == [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);\n    assert(candidate([\"jack\", \"john\", \"mary\"]) == [\"kcaj\", \"nhoj\", \"yram\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_458_rectangle_area", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the area of a rectangle.\n*/\nlong rectangle_area(long l, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = rectangle_area;\n\n    assert(candidate(10L, 20L) == 200L);\n    assert(candidate(10L, 5L) == 50L);\n    assert(candidate(4L, 2L) == 8L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_459_remove_uppercase", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove uppercase substrings from a given string.\n*/\nstring remove_uppercase(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_uppercase;\n\n    assert(candidate(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\");\n    assert(candidate(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\");\n    assert(candidate(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_460_Extract", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to get the first element of each subarray.\n*/\nlong[] Extract(long[][] lst) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Extract;\n\n    assert(candidate([[1L, 2L], [3L, 4L, 5L], [6L, 7L, 8L, 9L]]) == [1L, 3L, 6L]);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L]]) == [1L, 4L]);\n    assert(candidate([[9L, 8L, 1L], [1L, 2L]]) == [9L, 1L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_461_upper_ctr", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the upper case characters in a given string.\n*/\nlong upper_ctr(string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = upper_ctr;\n\n    assert(candidate(\"PYthon\") == 1L);\n    assert(candidate(\"BigData\") == 1L);\n    assert(candidate(\"program\") == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_463_max_subarray_product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum product subarray of the given array.\n*/\nlong max_subarray_product(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_subarray_product;\n\n    assert(candidate([1L, -2L, -3L, 0L, 7L, -8L, -2L]) == 112L);\n    assert(candidate([6L, -3L, -10L, 0L, 2L]) == 180L);\n    assert(candidate([-2L, -40L, 0L, -2L, -3L]) == 80L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_464_check_value", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if all values are same in an associative array.\n*/\nbool check_value(Nullable!(long[string]) dict, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_value;\n\n    assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 10L) == false);\n    assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 12L) == true);\n    assert(candidate([\"Cierra Vega\": 12L, \"Alden Cantrell\": 12L, \"Kierra Gentry\": 12L, \"Pierre Cox\": 12L].nullable, 5L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_468_max_product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n*/\nlong max_product(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_470_add_pairwise", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n*/\nTuple!(long, long, long, long) add_pairwise(Tuple!(long, long, long, long, long) test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add_pairwise;\n\n    assert(candidate(tuple(1L, 5L, 7L, 8L, 10L)) == tuple(6L, 12L, 15L, 18L));\n    assert(candidate(tuple(2L, 6L, 8L, 9L, 11L)) == tuple(8L, 14L, 17L, 20L));\n    assert(candidate(tuple(3L, 7L, 9L, 10L, 12L)) == tuple(10L, 16L, 19L, 22L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_471_find_remainder", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the product of the array multiplication modulo n.\n*/\nlong find_remainder(long[] arr, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_remainder;\n\n    assert(candidate([100L, 10L, 5L, 25L, 35L, 14L], 11L) == 9L);\n    assert(candidate([1L, 1L, 1L], 1L) == 0L);\n    assert(candidate([1L, 2L, 1L], 2L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_472_check_Consecutive", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given array contains consecutive numbers or not.\n*/\nbool check_Consecutive(long[] l) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_Consecutive;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == true);\n    assert(candidate([1L, 2L, 3L, 5L, 6L]) == false);\n    assert(candidate([1L, 2L, 1L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_474_replace_char", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace characters in a string.\n*/\nstring replace_char(string str1, string ch, string newch) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_475_sort_counter", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an associative array by value.\n*/\nTuple!(string, long)[] sort_counter(Nullable!(long[string]) dict1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_counter;\n\n    assert(candidate([\"Math\": 81L, \"Physics\": 83L, \"Chemistry\": 87L].nullable) == [tuple(\"Chemistry\", 87L), tuple(\"Physics\", 83L), tuple(\"Math\", 81L)]);\n    assert(candidate([\"Math\": 400L, \"Physics\": 300L, \"Chemistry\": 250L].nullable) == [tuple(\"Math\", 400L), tuple(\"Physics\", 300L), tuple(\"Chemistry\", 250L)]);\n    assert(candidate([\"Math\": 900L, \"Physics\": 1000L, \"Chemistry\": 1250L].nullable) == [tuple(\"Chemistry\", 1250L), tuple(\"Physics\", 1000L), tuple(\"Math\", 900L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_476_big_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of the largest and smallest value in a given array.\n*/\nlong big_sum(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = big_sum;\n\n    assert(candidate([1L, 2L, 3L]) == 4L);\n    assert(candidate([-1L, 2L, 3L, 4L]) == 3L);\n    assert(candidate([2L, 3L, 6L]) == 8L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_477_is_lower", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to convert the given string to lower case.\n*/\nstring is_lower(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_lower;\n\n    assert(candidate(\"InValid\") == \"invalid\");\n    assert(candidate(\"TruE\") == \"true\");\n    assert(candidate(\"SenTenCE\") == \"sentence\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_478_remove_lowercase", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove lowercase substrings from a given string.\n*/\nstring remove_lowercase(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_lowercase;\n\n    assert(candidate(\"PYTHon\") == \"PYTH\");\n    assert(candidate(\"FInD\") == \"FID\");\n    assert(candidate(\"STRinG\") == \"STRG\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_479_first_Digit", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first digit of a given number.\n*/\nlong first_Digit(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = first_Digit;\n\n    assert(candidate(123L) == 1L);\n    assert(candidate(456L) == 4L);\n    assert(candidate(12L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_4_heap_queue_largest", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n largest integers from a given array of numbers, returned in descending order.\n*/\nlong[] heap_queue_largest(long[] nums, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = heap_queue_largest;\n\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 3L) == [85L, 75L, 65L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 2L) == [85L, 75L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 22L, 58L], 5L) == [85L, 75L, 65L, 58L, 35L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_554_Split", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function which takes an array of integers and only returns the odd ones.\n*/\nlong[] Split(long[] list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == [1L, 3L, 5L]);\n    assert(candidate([10L, 11L, 12L, 13L]) == [11L, 13L]);\n    assert(candidate([7L, 8L, 9L, 1L]) == [7L, 9L, 1L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_555_difference", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n*/\nlong difference(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = difference;\n\n    assert(candidate(3L) == 30L);\n    assert(candidate(5L) == 210L);\n    assert(candidate(2L) == 6L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of pairs whose xor value is odd.\n*/\nlong find_Odd_Pair(long[] A, long N) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Odd_Pair;\n\n    assert(candidate([5L, 4L, 7L, 2L, 1L], 5L) == 6L);\n    assert(candidate([7L, 2L, 8L, 1L, 0L, 5L, 11L], 7L) == 12L);\n    assert(candidate([1L, 2L, 3L], 3L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_557_toggle_string", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to toggle the case of all characters in a string.\n*/\nstring toggle_string(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = toggle_string;\n\n    assert(candidate(\"Python\") == \"pYTHON\");\n    assert(candidate(\"Pangram\") == \"pANGRAM\");\n    assert(candidate(\"LIttLE\") == \"liTTle\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_558_digit_distance_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of the per-digit difference between two integers.\n*/\nlong digit_distance_nums(long n1, long n2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = digit_distance_nums;\n\n    assert(candidate(1L, 2L) == 1L);\n    assert(candidate(23L, 56L) == 6L);\n    assert(candidate(123L, 256L) == 7L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the sum of the largest contiguous subarray in the given array.\n*/\nlong max_sub_array_sum(long[] a, long size) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_sub_array_sum;\n\n    assert(candidate([-2L, -3L, 4L, -1L, -2L, 1L, 5L, -3L], 8L) == 7L);\n    assert(candidate([-3L, -4L, 5L, -2L, -3L, 2L, 6L, -4L], 8L) == 8L);\n    assert(candidate([-4L, -5L, 6L, -3L, -4L, 3L, 7L, -5L], 8L) == 10L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_560_union_elements", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the union of the elements of two given arrays and output them in sorted order.\n*/\nlong[] union_elements(long[] test_tup1, long[] test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = union_elements;\n\n    assert(candidate([3L, 4L, 5L, 6L], [5L, 7L, 4L, 10L]) == [3L, 4L, 5L, 6L, 7L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], [3L, 4L, 5L, 6L]) == [1L, 2L, 3L, 4L, 5L, 6L]);\n    assert(candidate([11L, 12L, 13L, 14L], [13L, 15L, 16L, 17L]) == [11L, 12L, 13L, 14L, 15L, 16L, 17L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_562_Find_Max_Length", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the length of the longest subarrays.\n*/\nlong Find_Max_Length(long[][] lst) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Find_Max_Length;\n\n    assert(candidate([[1L], [1L, 4L], [5L, 6L, 7L, 8L]]) == 4L);\n    assert(candidate([[0L, 1L], [2L, 2L], [3L, 2L, 1L]]) == 3L);\n    assert(candidate([[7L], [22L, 23L], [13L, 14L, 15L], [10L, 20L, 30L, 40L, 50L]]) == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_563_extract_values", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract values between quotation marks from a string.\n*/\nstring[] extract_values(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = extract_values;\n\n    assert(candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"]);\n    assert(candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"]);\n    assert(candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_564_count_Pairs", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\n*/\nlong count_Pairs(long[] arr, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_Pairs;\n\n    assert(candidate([1L, 2L, 1L], 3L) == 2L);\n    assert(candidate([1L, 1L, 1L, 1L], 4L) == 0L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L], 5L) == 10L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_565_split", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to split a string into characters.\n*/\nstring[] split(string word) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = split;\n\n    assert(candidate(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);\n    assert(candidate(\"Name\") == [\"N\", \"a\", \"m\", \"e\"]);\n    assert(candidate(\"program\") == [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_566_sum_digits", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to get the sum of the digits of a non-negative integer.\n*/\nlong sum_digits(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_digits;\n\n    assert(candidate(345L) == 12L);\n    assert(candidate(12L) == 3L);\n    assert(candidate(97L) == 16L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_567_issort_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether a specified array is sorted or not.\n*/\nbool issort_list(long[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = issort_list;\n\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 16L, 17L]) == true);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 12L, 14L, 20L, 17L]) == false);\n    assert(candidate([1L, 2L, 4L, 6L, 8L, 10L, 15L, 14L, 20L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_568_empty_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to create an array of N empty dictionaries.\n*/\nNone[] empty_list(long length) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = empty_list;\n\n    assert(candidate(5L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);\n    assert(candidate(6L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);\n    assert(candidate(7L) == [___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___, ___null_dict___]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_569_sort_sublists", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort each subarray of strings in a given array of arrays.\n*/\nstring[][] sort_sublists(string[][] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_sublists;\n\n    assert(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);\n    assert(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]) == [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]);\n    assert(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]) == [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_56_checks", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check if a given number is one less than twice its reverse.\n*/\nbool checks(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = checks;\n\n    assert(candidate(70L) == false);\n    assert(candidate(23L) == false);\n    assert(candidate(73L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_572_two_unique_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to remove duplicate numbers from a given number of arrays.\n*/\nlong[] two_unique_nums(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = two_unique_nums;\n\n    assert(candidate([1L, 2L, 3L, 2L, 3L, 4L, 5L]) == [1L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 5L]) == [1L, 3L, 4L, 5L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_573_unique_product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to calculate the product of the unique numbers in a given array.\n*/\nlong unique_product(long[] list_data) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = unique_product;\n\n    assert(candidate([10L, 20L, 30L, 40L, 20L, 50L, 60L, 40L]) == 720000000L);\n    assert(candidate([1L, 2L, 3L, 1L]) == 6L);\n    assert(candidate([7L, 8L, 9L, 0L, 1L, 1L]) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the surface area of a cylinder.\n*/\nfloat surfacearea_cylinder(long r, long h) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = surfacearea_cylinder;\n\n    assert(candidate(10L, 5L) == 942.45);\n    assert(candidate(4L, 5L) == 226.18800000000002);\n    assert(candidate(4L, 10L) == 351.848);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_576_is_Sub_Array", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether an array is subarray of another or not.\n*/\nbool is_Sub_Array(long[] A, long[] B) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_Sub_Array;\n\n    assert(candidate([1L, 4L, 3L, 5L], [1L, 2L]) == false);\n    assert(candidate([1L, 2L, 1L], [1L, 2L, 1L]) == true);\n    assert(candidate([1L, 0L, 2L, 2L], [2L, 2L, 0L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the last digit in factorial of a given number.\n*/\nlong last_Digit_Factorial(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = last_Digit_Factorial;\n\n    assert(candidate(4L) == 4L);\n    assert(candidate(21L) == 0L);\n    assert(candidate(30L) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_578_interleave_lists", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to interleave 3 arrays of the same length into a single flat array.\n*/\nlong[] interleave_lists(long[] list1, long[] list2, long[] list3) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = interleave_lists;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L], [10L, 20L, 30L, 40L, 50L, 60L, 70L], [100L, 200L, 300L, 400L, 500L, 600L, 700L]) == [1L, 10L, 100L, 2L, 20L, 200L, 3L, 30L, 300L, 4L, 40L, 400L, 5L, 50L, 500L, 6L, 60L, 600L, 7L, 70L, 700L]);\n    assert(candidate([10L, 20L], [15L, 2L], [5L, 10L]) == [10L, 15L, 5L, 20L, 2L, 10L]);\n    assert(candidate([11L, 44L], [10L, 15L], [20L, 5L]) == [11L, 10L, 20L, 44L, 15L, 5L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_579_find_dissimilar", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the dissimilar elements in the given two tuples.\n*/\nTuple!(long, long, long, long) find_dissimilar(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_dissimilar;\n\n    assert(candidate(tuple(3L, 4L, 5L, 6L), tuple(5L, 7L, 4L, 10L)) == tuple(3L, 6L, 7L, 10L));\n    assert(candidate(tuple(1L, 2L, 3L, 4L), tuple(7L, 2L, 3L, 9L)) == tuple(1L, 4L, 7L, 9L));\n    assert(candidate(tuple(21L, 11L, 25L, 26L), tuple(26L, 34L, 21L, 36L)) == tuple(34L, 36L, 11L, 25L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_57_find_Max_Num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the largest number that can be formed with the given array of digits.\n*/\nlong find_Max_Num(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Max_Num;\n\n    assert(candidate([1L, 2L, 3L]) == 321L);\n    assert(candidate([4L, 5L, 6L, 1L]) == 6541L);\n    assert(candidate([1L, 2L, 3L, 9L]) == 9321L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_581_surface_Area", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the surface area of a square dramid with a given base edge and height.\n*/\nlong surface_Area(long b, long s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = surface_Area;\n\n    assert(candidate(3L, 4L) == 33L);\n    assert(candidate(4L, 5L) == 56L);\n    assert(candidate(1L, 2L) == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_583_catalan_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which returns nth catalan number.\n*/\nlong catalan_number(long num) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = catalan_number;\n\n    assert(candidate(10L) == 16796L);\n    assert(candidate(9L) == 4862L);\n    assert(candidate(7L) == 429L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_584_find_adverbs", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n*/\nstring find_adverbs(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_adverbs;\n\n    assert(candidate(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\");\n    assert(candidate(\"Please handle the situation carefuly\") == \"28-36: carefuly\");\n    assert(candidate(\"Complete the task quickly\") == \"18-25: quickly\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_585_expensive_items", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the n most expensive items in a given dataset.\n*/\nNone[] expensive_items(None[] items, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = expensive_items;\n\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable], 2L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-1\", \"price\": 101.1].nullable]);\n    assert(candidate([[\"name\": \"Item-1\", \"price\": 101.1].nullable, [\"name\": \"Item-2\", \"price\": 555.22].nullable, [\"name\": \"Item-3\", \"price\": 45.09].nullable, [\"name\": \"Item-4\", \"price\": 22.75].nullable], 1L) == [[\"name\": \"Item-2\", \"price\": 555.22].nullable]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_586_split_Arr", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to split an array at the nth eelment and add the first part to the end.\n*/\nlong[] split_Arr(long[] l, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = split_Arr;\n\n    assert(candidate([12L, 10L, 5L, 6L, 52L, 36L], 2L) == [5L, 6L, 52L, 36L, 12L, 10L]);\n    assert(candidate([1L, 2L, 3L, 4L], 1L) == [2L, 3L, 4L, 1L]);\n    assert(candidate([0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L], 3L) == [3L, 4L, 5L, 6L, 7L, 0L, 1L, 2L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_588_big_diff", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the difference between largest and smallest value in a given array.\n*/\nlong big_diff(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = big_diff;\n\n    assert(candidate([1L, 2L, 3L, 4L]) == 3L);\n    assert(candidate([4L, 5L, 12L]) == 8L);\n    assert(candidate([9L, 2L, 3L]) == 7L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_589_perfect_squares", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find perfect squares between two given numbers.\n*/\nlong[] perfect_squares(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = perfect_squares;\n\n    assert(candidate(1L, 30L) == [1L, 4L, 9L, 16L, 25L]);\n    assert(candidate(50L, 100L) == [64L, 81L, 100L]);\n    assert(candidate(100L, 200L) == [100L, 121L, 144L, 169L, 196L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_58_opposite_Signs", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given two integers have opposite sign or not.\n*/\nbool opposite_Signs(long x, long y) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = opposite_Signs;\n\n    assert(candidate(1L, -2L) == true);\n    assert(candidate(3L, 2L) == false);\n    assert(candidate(-10L, -10L) == false);\n    assert(candidate(-2L, 2L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_591_swap_List", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to interchange the first and last elements in an array.\n*/\nlong[] swap_List(long[] newList) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([12L, 35L, 9L, 56L, 24L]) == [24L, 35L, 9L, 56L, 12L]);\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_592_sum_Of_product", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of the product of consecutive binomial co-efficients.\n*/\nlong sum_Of_product(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_Of_product;\n\n    assert(candidate(3L) == 15L);\n    assert(candidate(4L) == 56L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_593_removezero_ip", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove leading zeroes from an ip address.\n*/\nstring removezero_ip(string ip) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = removezero_ip;\n\n    assert(candidate(\"216.08.094.196\") == \"216.8.94.196\");\n    assert(candidate(\"12.01.024\") == \"12.1.24\");\n    assert(candidate(\"216.08.094.0196\") == \"216.8.94.196\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_594_diff_even_odd", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the difference of the first even and first odd number of a given array.\n*/\nlong diff_even_odd(long[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = diff_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 1L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 9L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_597_find_kth", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find kth element from the given two sorted arrays.\n*/\nlong find_kth(long[] arr1, long[] arr2, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_kth;\n\n    assert(candidate([2L, 3L, 6L, 7L, 9L], [1L, 4L, 8L, 10L], 5L) == 6L);\n    assert(candidate([100L, 112L, 256L, 349L, 770L], [72L, 86L, 113L, 119L, 265L, 445L, 892L], 7L) == 256L);\n    assert(candidate([3L, 4L, 7L, 8L, 10L], [2L, 5L, 9L, 11L], 6L) == 8L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_598_armstrong_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given number is armstrong or not.\n*/\nbool armstrong_number(long number) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_599_sum_average", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find sum and average of first n natural numbers.\n*/\nTuple!(long, float) sum_average(long number) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_average;\n\n    assert(candidate(10L) == tuple(55L, 5.5));\n    assert(candidate(15L) == tuple(120L, 8.0));\n    assert(candidate(20L) == tuple(210L, 10.5));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_59_is_octagonal", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth octagonal number.\n*/\nlong is_octagonal(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_octagonal;\n\n    assert(candidate(5L) == 65L);\n    assert(candidate(10L) == 280L);\n    assert(candidate(15L) == 645L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_600_is_Even", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given number is even or not.\n*/\nbool is_Even(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_Even;\n\n    assert(candidate(1L) == false);\n    assert(candidate(2L) == true);\n    assert(candidate(3L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_602_first_repeated_char", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first repeated character in a given string.\n*/\nNullable!(string) first_repeated_char(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = first_repeated_char;\n\n{\n        auto result = candidate(\"abcabc\");\n        assert(!result.isNull && result.get == \"a\");\n}\n\n{\n        auto result = candidate(\"abc\");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"123123\");\n        assert(!result.isNull && result.get == \"1\");\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_603_get_ludic", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\n*/\nlong[] get_ludic(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_ludic;\n\n    assert(candidate(10L) == [1L, 2L, 3L, 5L, 7L]);\n    assert(candidate(25L) == [1L, 2L, 3L, 5L, 7L, 11L, 13L, 17L, 23L, 25L]);\n    assert(candidate(45L) == [1L, 2L, 3L, 5L, 7L, 11L, 13L, 17L, 23L, 25L, 29L, 37L, 41L, 43L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_604_reverse_words", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to reverse words seperated by spaces in a given string.\n*/\nstring reverse_words(string s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = reverse_words;\n\n    assert(candidate(\"python program\") == \"program python\");\n    assert(candidate(\"java language\") == \"language java\");\n    assert(candidate(\"indian man\") == \"man indian\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_605_prime_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given integer is a prime number.\n*/\nbool prime_num(long num) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = prime_num;\n\n    assert(candidate(13L) == true);\n    assert(candidate(7L) == true);\n    assert(candidate(-1010L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_606_radian_degree", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert degrees to radians.\n*/\nfloat radian_degree(long degree) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = radian_degree;\n\n    assert(candidate(90L) == 1.5707963267948966);\n    assert(candidate(60L) == 1.0471975511965976);\n    assert(candidate(120L) == 2.0943951023931953);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_607_find_literals", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n*/\nTuple!(string, long, long) find_literals(string text, string pattern) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_literals;\n\n    assert(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") == tuple(\"fox\", 16L, 19L));\n    assert(candidate(\"Its been a very crazy procedure right\", \"crazy\") == tuple(\"crazy\", 16L, 21L));\n    assert(candidate(\"Hardest choices required strongest will\", \"will\") == tuple(\"will\", 35L, 39L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_608_bell_Number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find nth bell number.\n*/\nlong bell_Number(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = bell_Number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(3L) == 5L);\n    assert(candidate(4L) == 15L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_610_remove_kth_element", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function which takes an array and returns an array with the same elements, but the k'th element removed.\n*/\nlong[] remove_kth_element(long[] list1, long L) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_kth_element;\n\n    assert(candidate([1L, 1L, 2L, 3L, 4L, 4L, 5L, 1L], 3L) == [1L, 1L, 3L, 4L, 4L, 5L, 1L]);\n    assert(candidate([0L, 0L, 1L, 2L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L], 4L) == [0L, 0L, 1L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 9L, 4L, 4L]);\n    assert(candidate([10L, 10L, 15L, 19L, 18L, 18L, 17L, 26L, 26L, 17L, 18L, 10L], 5L) == [10L, 10L, 15L, 19L, 18L, 17L, 26L, 26L, 17L, 18L, 10L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_611_max_of_nth", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which given a matrix represented as an array of arrays returns the max of the n'th column.\n*/\nlong max_of_nth(long[][] test_list, long N) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_of_nth;\n\n    assert(candidate([[5L, 6L, 7L], [1L, 3L, 5L], [8L, 9L, 19L]], 2L) == 19L);\n    assert(candidate([[6L, 7L, 8L], [2L, 4L, 6L], [9L, 10L, 20L]], 1L) == 10L);\n    assert(candidate([[7L, 8L, 9L], [3L, 5L, 7L], [10L, 11L, 21L]], 1L) == 11L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_614_cummulative_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the cumulative sum of all the values that are present in the given array of arrays.\n*/\nlong cummulative_sum(long[][] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = cummulative_sum;\n\n    assert(candidate([[1L, 3L], [5L, 6L, 7L], [2L, 6L]]) == 30L);\n    assert(candidate([[2L, 4L], [6L, 7L, 8L], [3L, 7L]]) == 37L);\n    assert(candidate([[3L, 5L], [7L, 8L, 9L], [4L, 8L]]) == 44L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_615_average_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which takes an arrays of arrays and returns the average value for each subarray as an array.\n*/\nfloat[] average_tuple(long[][] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = average_tuple;\n\n    assert(candidate([[10L, 10L, 10L, 12L], [30L, 45L, 56L, 45L], [81L, 80L, 39L, 32L], [1L, 2L, 3L, 4L]]) == [30.5, 34.25, 27.0, 23.25]);\n    assert(candidate([[1L, 1L, -5L], [30L, -15L, 56L], [81L, -60L, -39L], [-10L, 2L, 3L]]) == [25.5, -18.0, 3.75]);\n    assert(candidate([[100L, 100L, 100L, 120L], [300L, 450L, 560L, 450L], [810L, 800L, 390L, 320L], [10L, 20L, 30L, 40L]]) == [305.0, 342.5, 270.0, 232.5]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_616_tuple_modulo", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n*/\nTuple!(long, long, long, long) tuple_modulo(Tuple!(long, long, long, long) test_tup1, Tuple!(long, long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tuple_modulo;\n\n    assert(candidate(tuple(10L, 4L, 5L, 6L), tuple(5L, 6L, 7L, 5L)) == tuple(0L, 4L, 5L, 1L));\n    assert(candidate(tuple(11L, 5L, 6L, 7L), tuple(6L, 7L, 8L, 6L)) == tuple(5L, 5L, 6L, 1L));\n    assert(candidate(tuple(12L, 6L, 7L, 8L), tuple(7L, 8L, 9L, 7L)) == tuple(5L, 6L, 7L, 1L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_617_min_Jumps", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n*/\nfloat min_Jumps(Tuple!(long, long) steps, long d) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = min_Jumps;\n\n    assert(candidate(tuple(3L, 4L), 11L) == 3.5);\n    assert(candidate(tuple(3L, 4L), 0L) == 0L);\n    assert(candidate(tuple(11L, 14L), 11L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_618_div_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to divide two arrays element wise.\n*/\nfloat[] div_list(long[] nums1, long[] nums2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = div_list;\n\n    assert(candidate([4L, 5L, 6L], [1L, 2L, 3L]) == [4.0, 2.5, 2.0]);\n    assert(candidate([3L, 2L], [1L, 4L]) == [3.0, 0.5]);\n    assert(candidate([90L, 120L], [50L, 70L]) == [1.8, 1.7142857142857142]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_619_move_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to move all the numbers to the end of the given string.\n*/\nstring move_num(string test_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = move_num;\n\n    assert(candidate(\"I1love143you55three3000thousand\") == \"Iloveyouthreethousand1143553000\");\n    assert(candidate(\"Avengers124Assemble\") == \"AvengersAssemble124\");\n    assert(candidate(\"Its11our12path13to14see15things16do17things\") == \"Itsourpathtoseethingsdothings11121314151617\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_61_count_Substrings", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n*/\nlong count_Substrings(string s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_622_get_median", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the median of two sorted arrays of same size.\n*/\nfloat get_median(long[] arr1, long[] arr2, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_median;\n\n    assert(candidate([1L, 12L, 15L, 26L, 38L], [2L, 13L, 17L, 30L, 45L], 5L) == 16.0);\n    assert(candidate([2L, 4L, 8L, 9L], [7L, 13L, 19L, 28L], 4L) == 8.5);\n    assert(candidate([3L, 6L, 14L, 23L, 36L, 42L], [2L, 18L, 27L, 39L, 49L, 55L], 6L) == 25.0);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_623_nth_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to compute the n-th power of each number in an array.\n*/\nlong[] nth_nums(long[] nums, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = nth_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L], 3L) == [1000L, 8000L, 27000L]);\n    assert(candidate([12L, 15L], 5L) == [248832L, 759375L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_624_is_upper", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to convert a given string to uppercase.\n*/\nstring is_upper(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_upper;\n\n    assert(candidate(\"person\") == \"PERSON\");\n    assert(candidate(\"final\") == \"FINAL\");\n    assert(candidate(\"Valid\") == \"VALID\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_625_swap_List", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to interchange the first and last element in a given array.\n*/\nlong[] swap_List(long[] newList) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = swap_List;\n\n    assert(candidate([1L, 2L, 3L]) == [3L, 2L, 1L]);\n    assert(candidate([1L, 2L, 3L, 4L, 4L]) == [4L, 2L, 3L, 4L, 1L]);\n    assert(candidate([4L, 5L, 6L]) == [6L, 5L, 4L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_626_triangle_area", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n*/\nNullable!(long) triangle_area(long r) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = triangle_area;\n\n{\n        auto result = candidate(-1L);\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(0L);\n        assert(!result.isNull && result.get == 0L);\n}\n\n{\n        auto result = candidate(2L);\n        assert(!result.isNull && result.get == 4L);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_627_find_First_Missing", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the smallest missing number from a sorted array of natural numbers.\n*/\nlong find_First_Missing(long[] array) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_First_Missing;\n\n    assert(candidate([0L, 1L, 2L, 3L]) == 4L);\n    assert(candidate([0L, 1L, 2L, 6L, 9L]) == 3L);\n    assert(candidate([2L, 3L, 5L, 8L, 9L]) == 0L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_628_replace_spaces", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace all spaces in the given string with '%20'.\n*/\nstring replace_spaces(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"My Name is Dawood\") == \"My%20Name%20is%20Dawood\");\n    assert(candidate(\"I am a Programmer\") == \"I%20am%20a%20Programmer\");\n    assert(candidate(\"I love Coding\") == \"I%20love%20Coding\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_629_Split", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find even numbers from an array of numbers.\n*/\nlong[] Split(long[] list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Split;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == [2L, 4L]);\n    assert(candidate([4L, 5L, 6L, 7L, 8L, 0L, 1L]) == [4L, 6L, 8L, 0L]);\n    assert(candidate([8L, 12L, 15L, 19L]) == [8L, 12L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_62_smallest_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find smallest number in an array.\n*/\nlong smallest_num(long[] xs) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = smallest_num;\n\n    assert(candidate([10L, 20L, 1L, 45L, 99L]) == 1L);\n    assert(candidate([1L, 2L, 3L]) == 1L);\n    assert(candidate([45L, 46L, 50L, 60L]) == 45L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_630_get_coordinates", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n*/\nlong[][] get_coordinates(Tuple!(long, long) test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_coordinates;\n\n    assert(candidate(tuple(3L, 4L)) == [[2L, 3L], [2L, 4L], [2L, 5L], [3L, 3L], [3L, 4L], [3L, 5L], [4L, 3L], [4L, 4L], [4L, 5L]]);\n    assert(candidate(tuple(4L, 5L)) == [[3L, 4L], [3L, 5L], [3L, 6L], [4L, 4L], [4L, 5L], [4L, 6L], [5L, 4L], [5L, 5L], [5L, 6L]]);\n    assert(candidate(tuple(5L, 6L)) == [[4L, 5L], [4L, 6L], [4L, 7L], [5L, 5L], [5L, 6L], [5L, 7L], [6L, 5L], [6L, 6L], [6L, 7L]]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_631_replace_spaces", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n*/\nstring replace_spaces(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = replace_spaces;\n\n    assert(candidate(\"Jumanji The Jungle\") == \"Jumanji_The_Jungle\");\n    assert(candidate(\"The_Avengers\") == \"The Avengers\");\n    assert(candidate(\"Fast and Furious\") == \"Fast_and_Furious\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_632_move_zero", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to move all zeroes to the end of the given array.\n*/\nlong[] move_zero(long[] num_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = move_zero;\n\n    assert(candidate([1L, 0L, 2L, 0L, 3L, 4L]) == [1L, 2L, 3L, 4L, 0L, 0L]);\n    assert(candidate([2L, 3L, 2L, 0L, 0L, 4L, 0L, 5L, 0L]) == [2L, 3L, 2L, 4L, 5L, 0L, 0L, 0L, 0L]);\n    assert(candidate([0L, 1L, 0L, 1L, 1L]) == [1L, 1L, 1L, 0L, 0L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of xor of all pairs of numbers in the given array.\n*/\nlong pair_xor_Sum(long[] arr, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = pair_xor_Sum;\n\n    assert(candidate([5L, 9L, 7L, 6L], 4L) == 47L);\n    assert(candidate([7L, 3L, 5L], 3L) == 12L);\n    assert(candidate([7L, 3L], 2L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_635_heap_sort", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort the given array.\n*/\nlong[] heap_sort(long[] iterable) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = heap_sort;\n\n    assert(candidate([1L, 3L, 5L, 7L, 9L, 2L, 4L, 6L, 8L, 0L]) == [0L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([25L, 35L, 22L, 85L, 14L, 65L, 75L, 25L, 58L]) == [14L, 22L, 25L, 25L, 35L, 58L, 65L, 75L, 85L]);\n    assert(candidate([7L, 1L, 9L, 5L]) == [1L, 5L, 7L, 9L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_637_noprofit_noloss", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given amount has no profit and no loss\n*/\nbool noprofit_noloss(long actual_cost, long sale_amount) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = noprofit_noloss;\n\n    assert(candidate(1500L, 1200L) == false);\n    assert(candidate(100L, 100L) == true);\n    assert(candidate(2000L, 5000L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_638_wind_chill", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n*/\nlong wind_chill(long v, long t) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = wind_chill;\n\n    assert(candidate(120L, 35L) == 40L);\n    assert(candidate(40L, 20L) == 19L);\n    assert(candidate(10L, 8L) == 6L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_639_sample_nam", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\n*/\nlong sample_nam(string[] sample_names) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sample_nam;\n\n    assert(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]) == 16L);\n    assert(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10L);\n    assert(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_63_max_difference", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the maximum difference between available pairs in the given tuple array.\n*/\nlong max_difference(Tuple!(long, long)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_difference;\n\n    assert(candidate([tuple(3L, 5L), tuple(1L, 7L), tuple(10L, 3L), tuple(1L, 2L)]) == 7L);\n    assert(candidate([tuple(4L, 6L), tuple(2L, 17L), tuple(9L, 13L), tuple(11L, 12L)]) == 15L);\n    assert(candidate([tuple(12L, 35L), tuple(21L, 27L), tuple(13L, 23L), tuple(41L, 22L)]) == 23L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_640_remove_parenthesis", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n*/\nstring remove_parenthesis(string[] items) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_parenthesis;\n\n    assert(candidate([\"python (chrome)\"]) == \"python\");\n    assert(candidate([\"string(.abc)\"]) == \"string\");\n    assert(candidate([\"alpha(num)\"]) == \"alpha\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_641_is_nonagonal", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth nonagonal number.\n*/\nlong is_nonagonal(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_nonagonal;\n\n    assert(candidate(10L) == 325L);\n    assert(candidate(15L) == 750L);\n    assert(candidate(18L) == 1089L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n*/\nbool text_match_wordz_middle(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to reverse an array upto a given position.\n*/\nlong[] reverse_Array_Upto_K(long[] input, long k) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = reverse_Array_Upto_K;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 4L) == [4L, 3L, 2L, 1L, 5L, 6L]);\n    assert(candidate([4L, 5L, 6L, 7L], 2L) == [5L, 4L, 6L, 7L]);\n    assert(candidate([9L, 8L, 7L, 6L, 5L], 3L) == [7L, 8L, 9L, 6L, 5L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_64_subject_marks", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an array of tuples using the second value of each tuple.\n*/\nTuple!(string, long)[] subject_marks(Tuple!(string, long)[] subjectmarks) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = subject_marks;\n\n    assert(candidate([tuple(\"English\", 88L), tuple(\"Science\", 90L), tuple(\"Maths\", 97L), tuple(\"Social sciences\", 82L)]) == [tuple(\"Social sciences\", 82L), tuple(\"English\", 88L), tuple(\"Science\", 90L), tuple(\"Maths\", 97L)]);\n    assert(candidate([tuple(\"Telugu\", 49L), tuple(\"Hindhi\", 54L), tuple(\"Social\", 33L)]) == [tuple(\"Social\", 33L), tuple(\"Telugu\", 49L), tuple(\"Hindhi\", 54L)]);\n    assert(candidate([tuple(\"Physics\", 96L), tuple(\"Chemistry\", 97L), tuple(\"Biology\", 45L)]) == [tuple(\"Biology\", 45L), tuple(\"Physics\", 96L), tuple(\"Chemistry\", 97L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_66_pos_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of positive numbers in an array.\n*/\nlong pos_count(long[] list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = pos_count;\n\n    assert(candidate([1L, -2L, 3L, -4L]) == 2L);\n    assert(candidate([3L, 4L, 5L, -1L]) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_67_bell_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n*/\nlong bell_number(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = bell_number;\n\n    assert(candidate(2L) == 2L);\n    assert(candidate(10L) == 115975L);\n    assert(candidate(56L) == 6775685320645824322581483068371419745979053216268760300L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_68_is_Monotonic", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given array is monotonic or not.\n*/\nbool is_Monotonic(long[] A) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_Monotonic;\n\n    assert(candidate([6L, 5L, 4L, 4L]) == true);\n    assert(candidate([1L, 2L, 2L, 3L]) == true);\n    assert(candidate([1L, 3L, 2L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_69_is_sublist", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether an array contains the given subarray or not.\n*/\nbool is_sublist(long[] l, long[] s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_sublist;\n\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [3L, 7L]) == false);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [4L, 3L]) == true);\n    assert(candidate([2L, 4L, 3L, 5L, 7L], [1L, 6L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the two numbers differ at one bit position only or not.\n*/\nbool differ_At_One_Bit_Pos(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = differ_At_One_Bit_Pos;\n\n    assert(candidate(13L, 9L) == true);\n    assert(candidate(15L, 8L) == false);\n    assert(candidate(2L, 4L) == false);\n    assert(candidate(2L, 3L) == true);\n    assert(candidate(5L, 1L) == true);\n    assert(candidate(1L, 5L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_70_get_equal", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find whether all the given arrays have equal length or not.\n*/\nbool get_equal(long[][] Input) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_equal;\n\n    assert(candidate([[11L, 22L, 33L], [44L, 55L, 66L]]) == true);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L, 7L]]) == false);\n    assert(candidate([[1L, 2L], [3L, 4L]]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_71_comb_sort", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort an array of elements.\n*/\nlong[] comb_sort(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = comb_sort;\n\n    assert(candidate([5L, 15L, 37L, 25L, 79L]) == [5L, 15L, 25L, 37L, 79L]);\n    assert(candidate([41L, 32L, 15L, 19L, 22L]) == [15L, 19L, 22L, 32L, 41L]);\n    assert(candidate([99L, 15L, 13L, 47L]) == [13L, 15L, 47L, 99L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to add an associative array to the tuple. The output should be a tuple.\n*/\nTuple!(long, long, long, Nullable!(long[string])) add_dict_to_tuple(Tuple!(long, long, long) test_tup, Nullable!(long[string]) test_dict) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add_dict_to_tuple;\n\n    assert(candidate(tuple(4L, 5L, 6L), [\"MSAM\": 1L, \"is\": 2L, \"best\": 3L].nullable) == tuple(4L, 5L, 6L, [\"MSAM\": 1L, \"is\": 2L, \"best\": 3L].nullable));\n    assert(candidate(tuple(1L, 2L, 3L), [\"UTS\": 2L, \"is\": 3L, \"Worst\": 4L].nullable) == tuple(1L, 2L, 3L, [\"UTS\": 2L, \"is\": 3L, \"Worst\": 4L].nullable));\n    assert(candidate(tuple(8L, 9L, 10L), [\"POS\": 3L, \"is\": 4L, \"Okay\": 5L].nullable) == tuple(8L, 9L, 10L, [\"POS\": 3L, \"is\": 4L, \"Okay\": 5L].nullable));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n*/\nfloat maxAverageOfPath(long[][] cost) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_723_count_same_pair", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tThe input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\n*/\nlong count_same_pair(long[] nums1, long[] nums2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_same_pair;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L], [2L, 2L, 3L, 1L, 2L, 6L, 7L, 9L]) == 4L);\n    assert(candidate([0L, 1L, 2L, -1L, -5L, 6L, 0L, -3L, -2L, 3L, 4L, 6L, 8L], [2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 11L);\n    assert(candidate([2L, 4L, -6L, -9L, 11L, -12L, 14L, -5L, 17L], [2L, 1L, 2L, -1L, -5L, 6L, 4L, -3L, -2L, 3L, 4L, 6L, 8L]) == 1L);\n    assert(candidate([0L, 1L, 1L, 2L], [0L, 1L, 2L, 2L]) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_724_power_base_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n*/\nlong power_base_sum(long base, long power) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = power_base_sum;\n\n    assert(candidate(2L, 100L) == 115L);\n    assert(candidate(8L, 10L) == 37L);\n    assert(candidate(8L, 15L) == 62L);\n    assert(candidate(3L, 3L) == 9L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_728_sum_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n*/\nlong[] sum_list(long[] lst1, long[] lst2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_list;\n\n    assert(candidate([10L, 20L, 30L], [15L, 25L, 35L]) == [25L, 45L, 65L]);\n    assert(candidate([1L, 2L, 3L], [5L, 6L, 7L]) == [6L, 8L, 10L]);\n    assert(candidate([15L, 20L, 30L], [15L, 45L, 75L]) == [30L, 65L, 105L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_72_dif_Square", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the given number can be represented as the difference of two squares or not.\n*/\nbool dif_Square(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = dif_Square;\n\n    assert(candidate(5L) == true);\n    assert(candidate(10L) == false);\n    assert(candidate(15L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\n*/\nfloat lateralsurface_cone(long r, long h) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = lateralsurface_cone;\n\n    assert(candidate(5L, 12L) == 204.20352248333654);\n    assert(candidate(10L, 15L) == 566.3586699569488);\n    assert(candidate(19L, 17L) == 1521.8090132193388);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_732_replace_specialchar", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n*/\nstring replace_specialchar(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = replace_specialchar;\n\n    assert(candidate(\"Python language, Programming language.\") == \"Python:language::Programming:language:\");\n    assert(candidate(\"a b c,d e f\") == \"a:b:c:d:e:f\");\n    assert(candidate(\"ram reshma,ram rahim\") == \"ram:reshma:ram:rahim\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_733_find_first_occurrence", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\n*/\nlong find_first_occurrence(long[] A, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_first_occurrence;\n\n    assert(candidate([2L, 5L, 5L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 5L) == 1L);\n    assert(candidate([2L, 3L, 5L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 5L) == 2L);\n    assert(candidate([2L, 4L, 1L, 5L, 6L, 6L, 8L, 9L, 9L, 9L], 6L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n*/\nlong sum_Of_Subarray_Prod(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_Of_Subarray_Prod;\n\n    assert(candidate([1L, 2L, 3L]) == 20L);\n    assert(candidate([1L, 2L]) == 5L);\n    assert(candidate([1L, 2L, 3L, 4L]) == 84L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n*/\nlong toggle_middle_bits(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = toggle_middle_bits;\n\n    assert(candidate(9L) == 15L);\n    assert(candidate(10L) == 12L);\n    assert(candidate(11L) == 13L);\n    assert(candidate(65L) == 127L);\n    assert(candidate(77L) == 115L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_736_left_insertion", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/dthon-exercises/data-structures-and-algorithms/dthon-data-structure-exercise-24.php\n*/\nlong left_insertion(long[] a, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = left_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_737_check_str", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n*/\nbool check_str(string string) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_str;\n\n    assert(candidate(\"annie\") == true);\n    assert(candidate(\"dawood\") == false);\n    assert(candidate(\"Else\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_738_geometric_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/dthon-exercises/data-structures-and-algorithms/dthon-recursion-exercise-9.php\n*/\nfloat geometric_sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = geometric_sum;\n\n    assert(candidate(7L) == 1.9921875);\n    assert(candidate(4L) == 1.9375);\n    assert(candidate(8L) == 1.99609375);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_739_find_Index", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n*/\nlong find_Index(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Index;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 14L);\n    assert(candidate(4L) == 45L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_740_tuple_to_dict", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert the given tuple to a key-value associative array using adjacent elements. https://www.geeksforgeeks.org/dthon-convert-tuple-to-adjacent-pair-associative array/\n*/\nNullable!(long[long]) tuple_to_dict(Tuple!(long, long, long, long, long, long) test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tuple_to_dict;\n\n{\n        auto result = candidate(tuple(1L, 5L, 7L, 10L, 13L, 5L));\n        assert(!result.isNull && result.get == [1L: 5L, 7L: 10L, 13L: 5L]);\n}\n\n{\n        auto result = candidate(tuple(1L, 2L, 3L, 4L, 5L, 6L));\n        assert(!result.isNull && result.get == [1L: 2L, 3L: 4L, 5L: 6L]);\n}\n\n{\n        auto result = candidate(tuple(7L, 8L, 9L, 10L, 11L, 12L));\n        assert(!result.isNull && result.get == [7L: 8L, 9L: 10L, 11L: 12L]);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_741_all_Characters_Same", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether all the characters are same or not.\n*/\nbool all_Characters_Same(string s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = all_Characters_Same;\n\n    assert(candidate(\"python\") == false);\n    assert(candidate(\"aaa\") == true);\n    assert(candidate(\"data\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_742_area_tetrahedron", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to caluclate the area of a tetrahedron.\n*/\nfloat area_tetrahedron(long side) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = area_tetrahedron;\n\n    assert(candidate(3L) == 15.588457268119894);\n    assert(candidate(20L) == 692.8203230275509);\n    assert(candidate(10L) == 173.20508075688772);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_743_rotate_right", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/dthon-program-right-rotate-array-n/\n*/\nlong[] rotate_right(long[] list, long m) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = rotate_right;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 3L) == [8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 2L) == [9L, 10L, 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L], 5L) == [6L, 7L, 8L, 9L, 10L, 1L, 2L, 3L, 4L, 5L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_745_divisible_by_digits", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/dthon-exercises/lambda/dthon-lambda-exercise-24.php\n*/\nlong[] divisible_by_digits(long startnum, long endnum) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = divisible_by_digits;\n\n    assert(candidate(1L, 22L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L, 22L]);\n    assert(candidate(1L, 15L) == [1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 11L, 12L, 15L]);\n    assert(candidate(20L, 25L) == [22L, 24L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_746_sector_area", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.\n*/\nNullable!(float) sector_area(long r, long a) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sector_area;\n\n{\n        auto result = candidate(4L, 45L);\n        assert(!result.isNull && result.get == 6.283185307179586);\n}\n\n{\n        auto result = candidate(9L, 45L);\n        assert(!result.isNull && result.get == 31.808625617596654);\n}\n\n{\n        auto result = candidate(9L, 361L);\n        assert(result.isNull);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_747_lcs_of_three", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n*/\nlong lcs_of_three(string X, string Y, string Z) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = lcs_of_three;\n\n    assert(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") == 2L);\n    assert(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") == 5L);\n    assert(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_748_capital_words_spaces", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n*/\nstring capital_words_spaces(string str1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = capital_words_spaces;\n\n    assert(candidate(\"Python\") == \"Python\");\n    assert(candidate(\"PythonProgrammingExamples\") == \"Python Programming Examples\");\n    assert(candidate(\"GetReadyToBeCodingFreak\") == \"Get Ready To Be Coding Freak\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/dthon-sort-numeric-strings-in-a-array/\n*/\nlong[] sort_numeric_strings(string[] nums_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sort_numeric_strings;\n\n    assert(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]) == [-500L, -12L, 0L, 4L, 7L, 12L, 45L, 100L, 200L]);\n    assert(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]) == [1L, 1L, 1L, 2L, 2L, 2L, 2L, 3L, 3L, 4L, 4L, 5L, 6L, 6L, 6L, 7L, 8L, 8L, 9L, 9L]);\n    assert(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]) == [1L, 1L, 1L, 3L, 3L, 5L, 5L, 7L, 7L, 9L, 11L, 13L, 15L, 17L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_74_is_samepatterns", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n*/\nbool is_samepatterns(string[] colors, string[] patterns) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_samepatterns;\n\n    assert(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == true);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) == false);\n    assert(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_750_add_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to add the given tuple to the given array.\n*/\nlong[] add_tuple(long[] test_list, Tuple!(long, long) test_tup) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = add_tuple;\n\n    assert(candidate([5L, 6L, 7L], tuple(9L, 10L)) == [5L, 6L, 7L, 9L, 10L]);\n    assert(candidate([6L, 7L, 8L], tuple(10L, 11L)) == [6L, 7L, 8L, 10L, 11L]);\n    assert(candidate([7L, 8L, 9L], tuple(11L, 12L)) == [7L, 8L, 9L, 11L, 12L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_751_check_min_heap", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n*/\nbool check_min_heap(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_min_heap;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L]) == true);\n    assert(candidate([2L, 3L, 4L, 5L, 10L, 15L]) == true);\n    assert(candidate([2L, 10L, 4L, 5L, 3L, 15L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_752_jacobsthal_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n*/\nlong jacobsthal_num(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = jacobsthal_num;\n\n    assert(candidate(5L) == 11L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(4L) == 5L);\n    assert(candidate(13L) == 2731L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_753_min_k", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find minimum k records from tuple array. https://www.geeksforgeeks.org/dthon-find-minimum-k-records-from-tuple-array/ - in this case a verbatim cod of test cases\n*/\nTuple!(string, long)[] min_k(Tuple!(string, long)[] test_list, long K) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = min_k;\n\n    assert(candidate([tuple(\"Manjeet\", 10L), tuple(\"Akshat\", 4L), tuple(\"Akash\", 2L), tuple(\"Nikhil\", 8L)], 2L) == [tuple(\"Akash\", 2L), tuple(\"Akshat\", 4L)]);\n    assert(candidate([tuple(\"Sanjeev\", 11L), tuple(\"Angat\", 5L), tuple(\"Akash\", 3L), tuple(\"Nepin\", 9L)], 3L) == [tuple(\"Akash\", 3L), tuple(\"Angat\", 5L), tuple(\"Nepin\", 9L)]);\n    assert(candidate([tuple(\"tanmay\", 14L), tuple(\"Amer\", 11L), tuple(\"Ayesha\", 9L), tuple(\"SKD\", 16L)], 1L) == [tuple(\"Ayesha\", 9L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_756_text_match_zero_one", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/dthon-exercises/re/dthon-re-exercise-3.php\n*/\nbool text_match_zero_one(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_match_zero_one;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abbbba\") == true);\n    assert(candidate(\"dsabbbba\") == true);\n    assert(candidate(\"asbbbba\") == false);\n    assert(candidate(\"abaaa\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/dthon-program-to-count-the-pairs-of-reverse-strings/\n*/\nlong count_reverse_pairs(string[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_reverse_pairs;\n\n    assert(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2L);\n    assert(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1L);\n    assert(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_759_is_decimal", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n*/\nbool is_decimal(string num) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_decimal;\n\n    assert(candidate(\"123.11\") == true);\n    assert(candidate(\"e666.86\") == false);\n    assert(candidate(\"3.124587\") == false);\n    assert(candidate(\"1.11\") == true);\n    assert(candidate(\"1.1.11\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_75_find_tuples", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find tuples which have all elements divisible by k from the given array of tuples.\n*/\nTuple!(long, long, long)[] find_tuples(Tuple!(long, long, long)[] test_list, long K) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_tuples;\n\n    assert(candidate([tuple(6L, 24L, 12L), tuple(7L, 9L, 6L), tuple(12L, 18L, 21L)], 6L) == [tuple(6L, 24L, 12L)]);\n    assert(candidate([tuple(5L, 25L, 30L), tuple(4L, 2L, 3L), tuple(7L, 8L, 9L)], 5L) == [tuple(5L, 25L, 30L)]);\n    assert(candidate([tuple(7L, 9L, 16L), tuple(8L, 16L, 4L), tuple(19L, 17L, 18L)], 4L) == [tuple(8L, 16L, 4L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_760_unique_Element", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n*/\nbool unique_Element(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n*/\nbool check_monthnumber_number(long monthnum3) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_monthnumber_number;\n\n    assert(candidate(6L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(12L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_763_find_min_diff", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n*/\nlong find_min_diff(long[] arr, long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_min_diff;\n\n    assert(candidate([1L, 5L, 3L, 19L, 18L, 25L], 6L) == 1L);\n    assert(candidate([4L, 3L, 2L, 6L], 4L) == 1L);\n    assert(candidate([30L, 5L, 20L, 9L], 4L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_764_number_ctr", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count number of digits in a given string.\n*/\nlong number_ctr(string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = number_ctr;\n\n    assert(candidate(\"program2bedone\") == 1L);\n    assert(candidate(\"3wonders\") == 1L);\n    assert(candidate(\"123\") == 3L);\n    assert(candidate(\"3wond-1ers2\") == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_765_is_polite", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n*/\nlong is_polite(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_polite;\n\n    assert(candidate(7L) == 11L);\n    assert(candidate(4L) == 7L);\n    assert(candidate(9L) == 13L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_766_pair_wise", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to return an array of all pairs of consecutive items in a given array.\n*/\nTuple!(long, long)[] pair_wise(long[] l1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = pair_wise;\n\n    assert(candidate([1L, 1L, 2L, 3L, 3L, 4L, 4L, 5L]) == [tuple(1L, 1L), tuple(1L, 2L), tuple(2L, 3L), tuple(3L, 3L), tuple(3L, 4L), tuple(4L, 4L), tuple(4L, 5L)]);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == [tuple(1L, 5L), tuple(5L, 7L), tuple(7L, 9L), tuple(9L, 10L)]);\n    assert(candidate([5L, 1L, 9L, 7L, 10L]) == [tuple(5L, 1L), tuple(1L, 9L), tuple(9L, 7L), tuple(7L, 10L)]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [tuple(1L, 2L), tuple(2L, 3L), tuple(3L, 4L), tuple(4L, 5L), tuple(5L, 6L), tuple(6L, 7L), tuple(7L, 8L), tuple(8L, 9L), tuple(9L, 10L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_767_get_pairs_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\n*/\nlong get_pairs_count(long[] arr, long sum) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_pairs_count;\n\n    assert(candidate([1L, 1L, 1L, 1L], 2L) == 6L);\n    assert(candidate([1L, 5L, 7L, -1L, 5L], 6L) == 3L);\n    assert(candidate([1L, -2L, 3L], 1L) == 1L);\n    assert(candidate([-1L, -2L, 3L], -3L) == 1L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_769_Diff", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to get the difference between two arrays.\n*/\nlong[] Diff(long[] li1, long[] li2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Diff;\n\n    assert(candidate([10L, 15L, 20L, 25L, 30L, 35L, 40L], [25L, 40L, 35L]) == [10L, 20L, 30L, 15L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 1L]) == [2L, 3L, 4L, 5L, 6L, 7L]);\n    assert(candidate([1L, 2L, 3L], [6L, 7L, 1L]) == [2L, 3L, 6L, 7L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_770_odd_num_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of fourth power of first n odd natural numbers.\n*/\nlong odd_num_sum(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = odd_num_sum;\n\n    assert(candidate(2L) == 82L);\n    assert(candidate(3L) == 707L);\n    assert(candidate(4L) == 3108L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_771_check_expression", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n*/\nbool check_expression(string exp) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_expression;\n\n    assert(candidate(\"{()}[{}]\") == true);\n    assert(candidate(\"{()}[{]\") == false);\n    assert(candidate(\"{()}[{}][]({})\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_772_remove_length", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all the words with k length in the given string.\n*/\nstring remove_length(string test_str, long K) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_length;\n\n    assert(candidate(\"The person is most value tet\", 3L) == \"person is most value\");\n    assert(candidate(\"If you told me about this ok\", 4L) == \"If you me about ok\");\n    assert(candidate(\"Forces of darkeness is come into the play\", 4L) == \"Forces of darkeness is the\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_773_occurance_substring", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the occurrence and position of the substrings within a string. Return null if there is no match.\n*/\nNullable!(Tuple!(string, long, long)) occurance_substring(string text, string pattern) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = occurance_substring;\n\n{\n        auto result = candidate(\"python programming, python language\", \"python\");\n        assert(!result.isNull && result.get == tuple(\"python\", 0L, 6L));\n}\n\n{\n        auto result = candidate(\"python programming,programming language\", \"programming\");\n        assert(!result.isNull && result.get == tuple(\"programming\", 7L, 18L));\n}\n\n{\n        auto result = candidate(\"python programming,programming language\", \"language\");\n        assert(!result.isNull && result.get == tuple(\"language\", 31L, 39L));\n}\n\n{\n        auto result = candidate(\"c++ programming, c++ language\", \"python\");\n        assert(result.isNull);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_775_odd_position", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether every odd index contains odd numbers of a given array.\n*/\nbool odd_position(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = odd_position;\n\n    assert(candidate([2L, 1L, 4L, 3L, 6L, 7L, 6L, 3L]) == true);\n    assert(candidate([4L, 1L, 2L]) == true);\n    assert(candidate([1L, 2L, 3L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_776_count_vowels", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n*/\nlong count_vowels(string test_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_vowels;\n\n    assert(candidate(\"bestinstareels\") == 7L);\n    assert(candidate(\"partofthejourneyistheend\") == 12L);\n    assert(candidate(\"amazonprime\") == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_777_find_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of non-repeated elements in a given array.\n*/\nlong find_sum(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_sum;\n\n    assert(candidate([1L, 2L, 3L, 1L, 1L, 4L, 5L, 6L]) == 21L);\n    assert(candidate([1L, 10L, 9L, 4L, 2L, 10L, 10L, 45L, 4L]) == 71L);\n    assert(candidate([12L, 10L, 9L, 45L, 2L, 10L, 10L, 45L, 10L]) == 78L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_77_is_Diff", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find whether a number is divisible by 11.\n*/\nbool is_Diff(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_Diff;\n\n    assert(candidate(12345L) == false);\n    assert(candidate(1212112L) == true);\n    assert(candidate(1212L) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_780_find_combinations", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the combinations of sums with tuples in the given tuple array. https://www.geeksforgeeks.org/dthon-combinations-of-sum-with-tuples-in-tuple-array/\n*/\nTuple!(long, long)[] find_combinations(Tuple!(long, long)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_combinations;\n\n    assert(candidate([tuple(2L, 4L), tuple(6L, 7L), tuple(5L, 1L), tuple(6L, 10L)]) == [tuple(8L, 11L), tuple(7L, 5L), tuple(8L, 14L), tuple(11L, 8L), tuple(12L, 17L), tuple(11L, 11L)]);\n    assert(candidate([tuple(3L, 5L), tuple(7L, 8L), tuple(6L, 2L), tuple(7L, 11L)]) == [tuple(10L, 13L), tuple(9L, 7L), tuple(10L, 16L), tuple(13L, 10L), tuple(14L, 19L), tuple(13L, 13L)]);\n    assert(candidate([tuple(4L, 6L), tuple(8L, 9L), tuple(7L, 3L), tuple(8L, 12L)]) == [tuple(12L, 15L), tuple(11L, 9L), tuple(12L, 18L), tuple(15L, 12L), tuple(16L, 21L), tuple(15L, 15L)]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_781_count_divisors", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the count of divisors is even. https://www.w3resource.com/dthon-exercises/basic/dthon-basic-1-exercise-24.php\n*/\nbool count_divisors(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_divisors;\n\n    assert(candidate(10L) == true);\n    assert(candidate(100L) == false);\n    assert(candidate(125L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_782_odd_length_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n*/\nlong odd_length_sum(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = odd_length_sum;\n\n    assert(candidate([1L, 2L, 4L]) == 14L);\n    assert(candidate([1L, 2L, 1L, 2L]) == 15L);\n    assert(candidate([1L, 7L]) == 8L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n*/\nfloat[] rgb_to_hsv(long r, long g, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = rgb_to_hsv;\n\n    assert(candidate(255L, 255L, 255L) == [0.0, 0.0, 100.0]);\n    assert(candidate(0L, 215L, 0L) == [120.0, 100.0, 84.31372549019608]);\n    assert(candidate(10L, 215L, 110L) == [149.26829268292684, 95.34883720930233, 84.31372549019608]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_784_mul_even_odd", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the product of first even and odd number of a given array.\n*/\nlong mul_even_odd(long[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = mul_even_odd;\n\n    assert(candidate([1L, 3L, 5L, 7L, 4L, 1L, 6L, 8L]) == 4L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == 2L);\n    assert(candidate([1L, 5L, 7L, 9L, 10L]) == 10L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_785_tuple_str_int", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert tuple string to integer tuple.\n*/\nTuple!(long, long, long) tuple_str_int(string test_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tuple_str_int;\n\n    assert(candidate(\"(7, 8, 9)\") == tuple(7L, 8L, 9L));\n    assert(candidate(\"(1, 2, 3)\") == tuple(1L, 2L, 3L));\n    assert(candidate(\"(4, 5, 6)\") == tuple(4L, 5L, 6L));\n    assert(candidate(\"(7, 81, 19)\") == tuple(7L, 81L, 19L));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_786_right_insertion", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n*/\nlong right_insertion(long[] a, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = right_insertion;\n\n    assert(candidate([1L, 2L, 4L, 5L], 6L) == 4L);\n    assert(candidate([1L, 2L, 4L, 5L], 3L) == 2L);\n    assert(candidate([1L, 2L, 4L, 5L], 7L) == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_787_text_match_three", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an a followed by three 'b'.\n*/\nbool text_match_three(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_match_three;\n\n    assert(candidate(\"ac\") == false);\n    assert(candidate(\"dc\") == false);\n    assert(candidate(\"abbbba\") == true);\n    assert(candidate(\"caacabbbba\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_788_new_tuple", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to create a new tuple from the given string and array.\n*/\nTuple!(string, string, string) new_tuple(string[] test_list, string test_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = new_tuple;\n\n    assert(candidate([\"WEB\", \"is\"], \"best\") == tuple(\"WEB\", \"is\", \"best\"));\n    assert(candidate([\"We\", \"are\"], \"Developers\") == tuple(\"We\", \"are\", \"Developers\"));\n    assert(candidate([\"Part\", \"is\"], \"Wrong\") == tuple(\"Part\", \"is\", \"Wrong\"));\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_790_even_position", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether every even index contains even numbers of a given array.\n*/\nbool even_position(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = even_position;\n\n    assert(candidate([3L, 2L, 1L]) == false);\n    assert(candidate([1L, 2L, 3L]) == false);\n    assert(candidate([2L, 1L, 4L]) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_792_count_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of arrays in a given number of arrays.\n*/\nlong count_list(long[][] input_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_list;\n\n    assert(candidate([[1L, 3L], [5L, 7L], [9L, 11L], [13L, 15L, 17L]]) == 4L);\n    assert(candidate([[1L, 2L], [2L, 3L], [4L, 5L]]) == 3L);\n    assert(candidate([[1L, 0L], [2L, 0L]]) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_793_last", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the last position of an element in a sorted array.\n*/\nlong last(long[] arr, long x) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_794_text_starta_endb", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n*/\nbool text_starta_endb(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = text_starta_endb;\n\n    assert(candidate(\"aabbbb\") == true);\n    assert(candidate(\"aabAbbbc\") == false);\n    assert(candidate(\"accddbbjjj\") == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_796_return_sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite function to find the sum of all items in the given associative array.\n*/\nlong return_sum(Nullable!(long[string]) dict) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = return_sum;\n\n    assert(candidate([\"a\": 100L, \"b\": 200L, \"c\": 300L].nullable) == 600L);\n    assert(candidate([\"a\": 25L, \"b\": 18L, \"c\": 45L].nullable) == 88L);\n    assert(candidate([\"a\": 36L, \"b\": 39L, \"c\": 49L].nullable) == 124L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_797_sum_in_range", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of all odd natural numbers within the range l and r.\n*/\nlong sum_in_range(long l, long r) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sum_in_range;\n\n    assert(candidate(2L, 5L) == 8L);\n    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 13L) == 40L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_798__sum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the sum of an array.\n*/\nlong _sum(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = _sum;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([15L, 12L, 13L, 10L]) == 50L);\n    assert(candidate([0L, 1L, 2L]) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_799_left_rotate", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n*/\nlong left_rotate(long n, long d) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = left_rotate;\n\n    assert(candidate(16L, 2L) == 64L);\n    assert(candidate(10L, 2L) == 40L);\n    assert(candidate(99L, 3L) == 792L);\n    assert(candidate(99L, 3L) == 792L);\n    assert(candidate(1L, 3L) == 8L);\n    assert(candidate(5L, 3L) == 40L);\n    assert(candidate(29L, 3L) == 232L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_79_word_len", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to check whether the length of the word is odd or not.\n*/\nbool word_len(string s) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = word_len;\n\n    assert(candidate(\"Hadoop\") == false);\n    assert(candidate(\"great\") == true);\n    assert(candidate(\"structure\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_800_remove_all_spaces", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to remove all whitespaces from a string.\n*/\nstring remove_all_spaces(string text) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = remove_all_spaces;\n\n    assert(candidate(\"python  program\") == \"pythonprogram\");\n    assert(candidate(\"python   programming    language\") == \"pythonprogramminglanguage\");\n    assert(candidate(\"python                     program\") == \"pythonprogram\");\n    assert(candidate(\"   python                     program\") == \"pythonprogram\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_801_test_three_equal", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of equal numbers from three given integers.\n*/\nlong test_three_equal(long x, long y, long z) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = test_three_equal;\n\n    assert(candidate(1L, 1L, 1L) == 3L);\n    assert(candidate(-1L, -2L, -3L) == 0L);\n    assert(candidate(1L, 2L, 2L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_802_count_rotation", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n*/\nlong count_rotation(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_803_is_perfect_square", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n*/\nbool is_perfect_square(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_perfect_square;\n\n    assert(candidate(10L) == false);\n    assert(candidate(36L) == true);\n    assert(candidate(14L) == false);\n    assert(candidate(196L) == true);\n    assert(candidate(125L) == false);\n    assert(candidate(15625L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_804_is_product_even", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the product of numbers in an array is even or not.\n*/\nbool is_product_even(long[] arr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_product_even;\n\n    assert(candidate([1L, 2L, 3L]) == true);\n    assert(candidate([1L, 2L, 1L, 4L]) == true);\n    assert(candidate([1L, 1L]) == false);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_805_max_sum_list", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function that returns the array in an array of arrays whose sum of elements is the highest.\n*/\nlong[] max_sum_list(long[][] lists) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_sum_list;\n\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [10L, 11L, 12L], [7L, 8L, 9L]]) == [10L, 11L, 12L]);\n    assert(candidate([[3L, 2L, 1L], [6L, 5L, 4L], [12L, 11L, 10L]]) == [12L, 11L, 10L]);\n    assert(candidate([[2L, 3L, 1L]]) == [2L, 3L, 1L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_806_max_run_uppercase", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find maximum run of uppercase characters in the given string.\n*/\nlong max_run_uppercase(string test_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = max_run_uppercase;\n\n    assert(candidate(\"GeMKSForGERksISBESt\") == 5L);\n    assert(candidate(\"PrECIOusMOVemENTSYT\") == 6L);\n    assert(candidate(\"GooGLEFluTTER\") == 4L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_807_first_odd", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the first odd number in a given array of numbers.\n*/\nlong first_odd(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = first_odd;\n\n    assert(candidate([1L, 3L, 5L]) == 1L);\n    assert(candidate([2L, 4L, 1L, 3L]) == 1L);\n    assert(candidate([8L, 9L, 1L]) == 9L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_808_check_K", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if the given tuples contain the k or not.\n*/\nbool check_K(long[] test_tup, long K) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_K;\n\n    assert(candidate([10L, 4L, 5L, 6L, 8L], 6L) == true);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], 7L) == false);\n    assert(candidate([7L, 8L, 9L, 44L, 11L, 12L], 11L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_809_check_smaller", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n*/\nbool check_smaller(Tuple!(long, long, long) test_tup1, Tuple!(long, long, long) test_tup2) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = check_smaller;\n\n    assert(candidate(tuple(1L, 2L, 3L), tuple(2L, 3L, 4L)) == false);\n    assert(candidate(tuple(4L, 5L, 6L), tuple(3L, 4L, 5L)) == true);\n    assert(candidate(tuple(11L, 12L, 13L), tuple(10L, 11L, 12L)) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_80_tetrahedral_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth tetrahedral number.\n*/\nlong tetrahedral_number(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = tetrahedral_number;\n\n    assert(candidate(5L) == 35L);\n    assert(candidate(6L) == 56L);\n    assert(candidate(7L) == 84L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_83_get_Char", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n*/\nstring get_Char(string strr) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = get_Char;\n\n    assert(candidate(\"abc\") == \"f\");\n    assert(candidate(\"gfg\") == \"t\");\n    assert(candidate(\"ab\") == \"c\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_84_sequence", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the nth number in the newman conway sequence.\n*/\nlong sequence(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = sequence;\n\n    assert(candidate(10L) == 6L);\n    assert(candidate(2L) == 1L);\n    assert(candidate(3L) == 2L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find nth centered hexagonal number.\n*/\nlong centered_hexagonal_number(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = centered_hexagonal_number;\n\n    assert(candidate(10L) == 271L);\n    assert(candidate(2L) == 7L);\n    assert(candidate(9L) == 217L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to merge three dictionaries into a single associative array.\n*/\nNullable!(string[string]) merge_dictionaries_three(Nullable!(string[string]) dict1, Nullable!(string[string]) dict2, Nullable!(string[string]) dict3) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = merge_dictionaries_three;\n\n{\n        auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable, [\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"].nullable);\n        assert(!result.isNull && result.get == [\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"]);\n}\n\n{\n        auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable, [\"L\": \"lavender\", \"B\": \"Blue\"].nullable);\n        assert(!result.isNull && result.get == [\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"]);\n}\n\n{\n        auto result = candidate([\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"].nullable, [\"L\": \"lavender\", \"B\": \"Blue\"].nullable, [\"G\": \"Green\", \"W\": \"White\"].nullable);\n        assert(!result.isNull && result.get == [\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"]);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_88_freq_count", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to get the frequency of all the elements in an array, returned as an associative array.\n*/\nNullable!(long[long]) freq_count(long[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = freq_count;\n\n{\n        auto result = candidate([10L, 10L, 10L, 10L, 20L, 20L, 20L, 20L, 40L, 40L, 50L, 50L, 30L]);\n        assert(!result.isNull && result.get == [10L: 4L, 20L: 4L, 40L: 2L, 50L: 2L, 30L: 1L]);\n}\n\n{\n        auto result = candidate([1L, 2L, 3L, 4L, 3L, 2L, 4L, 1L, 3L, 1L, 4L]);\n        assert(!result.isNull && result.get == [1L: 3L, 2L: 2L, 3L: 3L, 4L: 3L]);\n}\n\n{\n        auto result = candidate([5L, 6L, 7L, 4L, 9L, 10L, 4L, 5L, 6L, 7L, 9L, 5L]);\n        assert(!result.isNull && result.get == [10L: 1L, 5L: 3L, 6L: 2L, 7L: 2L, 4L: 2L, 9L: 2L]);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_89_closest_num", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find the closest smaller number than n.\n*/\nlong closest_num(long N) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = closest_num;\n\n    assert(candidate(11L) == 10L);\n    assert(candidate(7L) == 6L);\n    assert(candidate(12L) == 11L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_8_square_nums", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find squares of individual elements in an array.\n*/\nlong[] square_nums(long[] nums) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = square_nums;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L]) == [1L, 4L, 9L, 16L, 25L, 36L, 49L, 64L, 81L, 100L]);\n    assert(candidate([10L, 20L, 30L]) == [100L, 400L, 900L]);\n    assert(candidate([12L, 15L]) == [144L, 225L]);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_90_len_log", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the length of the longest word.\n*/\nlong len_log(string[] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = len_log;\n\n    assert(candidate([\"python\", \"PHP\", \"bigdata\"]) == 7L);\n    assert(candidate([\"a\", \"ab\", \"abc\"]) == 3L);\n    assert(candidate([\"small\", \"big\", \"tall\"]) == 5L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_91_find_substring", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check if a string is present as a substring in a given array of string values.\n*/\nbool find_substring(string[] str1, string sub_str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_substring;\n\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == true);\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == false);\n    assert(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_92_is_undulating", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to check whether the given number is undulating or not.\n*/\nbool is_undulating(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_93_power", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n*/\nlong power(long a, long b) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = power;\n\n    assert(candidate(3L, 4L) == 81L);\n    assert(candidate(2L, 3L) == 8L);\n    assert(candidate(5L, 5L) == 3125L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_94_index_minimum", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tGiven an array of tuples, write a function that returns the first value of the tuple with the smallest second value.\n*/\nstring index_minimum(Tuple!(string, long)[] test_list) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = index_minimum;\n\n    assert(candidate([tuple(\"Rash\", 143L), tuple(\"Manjeet\", 200L), tuple(\"Varsha\", 100L)]) == \"Varsha\");\n    assert(candidate([tuple(\"Yash\", 185L), tuple(\"Dawood\", 125L), tuple(\"Sanya\", 175L)]) == \"Dawood\");\n    assert(candidate([tuple(\"Sai\", 345L), tuple(\"Salman\", 145L), tuple(\"Ayesha\", 96L)]) == \"Ayesha\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_95_Find_Min_Length", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the length of the smallest array in an array of arrays.\n*/\nlong Find_Min_Length(long[][] lst) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = Find_Min_Length;\n\n    assert(candidate([[1L], [1L, 2L]]) == 1L);\n    assert(candidate([[1L, 2L], [1L, 2L, 3L], [1L, 2L, 3L, 4L]]) == 2L);\n    assert(candidate([[3L, 3L, 3L], [4L, 4L, 4L, 4L]]) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_96_divisor", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the number of divisors of a given integer.\n*/\nlong divisor(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = divisor;\n\n    assert(candidate(15L) == 4L);\n    assert(candidate(12L) == 6L);\n    assert(candidate(9L) == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_97_frequency_lists", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to find frequency of each element in a flattened array of arrays, returned in an associative array.\n*/\nNullable!(long[long]) frequency_lists(long[][] list1) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = frequency_lists;\n\n{\n        auto result = candidate([[1L, 2L, 3L, 2L], [4L, 5L, 6L, 2L], [7L, 8L, 9L, 5L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 3L, 3L: 1L, 4L: 1L, 5L: 2L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L]);\n}\n\n{\n        auto result = candidate([[1L, 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L]]);\n        assert(!result.isNull && result.get == [1L: 1L, 2L: 1L, 3L: 1L, 4L: 1L, 5L: 1L, 6L: 1L, 7L: 1L, 8L: 1L, 9L: 1L, 10L: 1L, 11L: 1L, 12L: 1L]);\n}\n\n{\n        auto result = candidate([[20L, 30L, 40L, 17L], [18L, 16L, 14L, 13L], [10L, 20L, 30L, 40L]]);\n        assert(!result.isNull && result.get == [20L: 2L, 30L: 2L, 40L: 2L, 17L: 1L, 18L: 1L, 16L: 1L, 14L: 1L, 13L: 1L, 10L: 1L]);\n}\n\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_99_decimal_to_binary", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n*/\nstring decimal_to_binary(long n) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(8L) == \"1000\");\n    assert(candidate(18L) == \"10010\");\n    assert(candidate(7L) == \"111\");\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
{"name": "mbpp_9_find_Rotations", "language": "d", "prompt": "import std.math;\nimport std.typecons;\n/*\n\tWrite a dthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n*/\nlong find_Rotations(string str) \n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "tests": "unittest\n{\n    alias candidate = find_Rotations;\n\n    assert(candidate(\"aaaa\") == 1L);\n    assert(candidate(\"ab\") == 2L);\n    assert(candidate(\"abc\") == 3L);\n}\nvoid main(){}", "stop_tokens": ["\n\n", "\nvoid", "\nbool", "\nint"]}
