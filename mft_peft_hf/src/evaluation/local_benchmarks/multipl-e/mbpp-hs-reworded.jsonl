{"name": "mbpp_100_next_smallest_palindrome", "language": "hs", "prompt": "-- | Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nnextSmallestPalindrome :: Int -> Int\nnextSmallestPalindrome num =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = nextSmallestPalindrome\n  if candidate 99 == 101 then pure () else error \"assertion failed\"\n  if candidate 1221 == 1331 then pure () else error \"assertion failed\"\n  if candidate 120 == 121 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_101_kth_element", "language": "hs", "prompt": "-- | Write a function to find the kth element in the given list using 1-based indexing.\nkthElement :: [Int] -> Int -> Int\nkthElement arr k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_101_kth_element.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = kthElement\n  if candidate [12,3,5,7,19] 2 == 3 then pure () else error \"assertion failed\"\n  if candidate [17,24,8,23] 3 == 8 then pure () else error \"assertion failed\"\n  if candidate [16,21,25,36,4] 4 == 36 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_102_snake_to_camel", "language": "hs", "prompt": "-- | Write a function to convert a snake case string to camel case string.\nsnakeToCamel :: String -> String\nsnakeToCamel word =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = snakeToCamel\n  if candidate \"python_program\" == \"PythonProgram\" then pure () else error \"assertion failed\"\n  if candidate \"python_language\" == \"PythonLanguage\" then pure () else error \"assertion failed\"\n  if candidate \"programming_language\" == \"ProgrammingLanguage\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_103_eulerian_num", "language": "hs", "prompt": "-- | Write a function to find the Eulerian number a(n, m).\neulerianNum :: Int -> Int -> Int\neulerianNum n m =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = eulerianNum\n  if candidate 3 1 == 4 then pure () else error \"assertion failed\"\n  if candidate 4 1 == 11 then pure () else error \"assertion failed\"\n  if candidate 5 3 == 26 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_104_sort_sublists", "language": "hs", "prompt": "-- | Write a function to sort each sublist of strings in a given list of lists.\nsortSublists :: [[String]] -> [[String]]\nsortSublists input_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sortSublists\n  if candidate [[\"green\",\"orange\"],[\"black\",\"white\"],[\"white\",\"black\",\"orange\"]] == [[\"green\",\"orange\"],[\"black\",\"white\"],[\"black\",\"orange\",\"white\"]] then pure () else error \"assertion failed\"\n  if candidate [[\" red \",\"green\"],[\"blue \",\" black\"],[\" orange\",\"brown\"]] == [[\" red \",\"green\"],[\" black\",\"blue \"],[\" orange\",\"brown\"]] then pure () else error \"assertion failed\"\n  if candidate [[\"zilver\",\"gold\"],[\"magnesium\",\"aluminium\"],[\"steel\",\"bronze\"]] == [[\"gold\",\"zilver\"],[\"aluminium\",\"magnesium\"],[\"bronze\",\"steel\"]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_105_count", "language": "hs", "prompt": "-- | Write a hsthon function to count true booleans in the given list.\ncount :: [Bool] -> Int\ncount lst =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_105_count.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = count\n  if candidate [True,False,True] == 2 then pure () else error \"assertion failed\"\n  if candidate [False,False] == 0 then pure () else error \"assertion failed\"\n  if candidate [True,True,True] == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_106_add_lists", "language": "hs", "prompt": "-- | Write a function to append the given list to the given tuples.\naddLists :: [Int] -> (Int, Int) -> (Int, Int, Int, Int, Int)\naddLists test_list test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_106_add_lists.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = addLists\n  if candidate [5,6,7] (9, 10) == (9, 10, 5, 6, 7) then pure () else error \"assertion failed\"\n  if candidate [6,7,8] (10, 11) == (10, 11, 6, 7, 8) then pure () else error \"assertion failed\"\n  if candidate [7,8,9] (11, 12) == (11, 12, 7, 8, 9) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_108_merge_sorted_list", "language": "hs", "prompt": "-- | Write a function to merge three lists into a single sorted list.\nmergeSortedList :: [Int] -> [Int] -> [Int] -> [Int]\nmergeSortedList num1 num2 num3 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = mergeSortedList\n  if candidate [25,24,15,4,5,29,110] [19,20,11,56,25,233,154] [24,26,54,48] == [4,5,11,15,19,20,24,24,25,25,26,29,48,54,56,110,154,233] then pure () else error \"assertion failed\"\n  if candidate [1,3,5,6,8,9] [2,5,7,11] [1,4,7,8,12] == [1,1,2,3,4,5,5,6,7,7,8,8,9,11,12] then pure () else error \"assertion failed\"\n  if candidate [18,14,10,9,8,7,9,3,2,4,1] [25,35,22,85,14,65,75,25,58] [12,74,9,50,61,41] == [1,2,3,4,7,8,9,9,9,10,12,14,14,18,22,25,25,35,41,50,58,61,65,74,75,85] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_109_odd_Equivalent", "language": "hs", "prompt": "-- | Write a hsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\noddEquivalent :: String -> Int -> Int\noddEquivalent s n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = oddEquivalent\n  if candidate \"011001\" 6 == 3 then pure () else error \"assertion failed\"\n  if candidate \"11011\" 5 == 4 then pure () else error \"assertion failed\"\n  if candidate \"1010\" 4 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_113_check_integer", "language": "hs", "prompt": "-- | Write a function to check if a string represents an integer or not.\ncheckInteger :: String -> Bool\ncheckInteger text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_113_check_integer.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkInteger\n  if candidate \"python\" == False then pure () else error \"assertion failed\"\n  if candidate \"1\" == True then pure () else error \"assertion failed\"\n  if candidate \"12345\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_116_tuple_to_int", "language": "hs", "prompt": "-- | Write a function to convert a given tuple of positive integers into a single integer.\ntupleToInt :: (Int, Int, Int) -> Int\ntupleToInt nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = tupleToInt\n  if candidate (1, 2, 3) == 123 then pure () else error \"assertion failed\"\n  if candidate (4, 5, 6) == 456 then pure () else error \"assertion failed\"\n  if candidate (5, 6, 7) == 567 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_117_list_to_float", "language": "hs", "prompt": "-- | Write a function to convert all possible convertible elements in a list of lists to floats.\nlistToFloat :: [(String, String)] -> [(Float, Float)]\nlistToFloat test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = listToFloat\n  if candidate [(\"3\", \"4\"),(\"1\", \"26.45\"),(\"7.32\", \"8\"),(\"4\", \"8\")] == [(3.0, 4.0),(1.0, 26.45),(7.32, 8.0),(4.0, 8.0)] then pure () else error \"assertion failed\"\n  if candidate [(\"4\", \"4\"),(\"2\", \"27\"),(\"4.12\", \"9\"),(\"7\", \"11\")] == [(4.0, 4.0),(2.0, 27.0),(4.12, 9.0),(7.0, 11.0)] then pure () else error \"assertion failed\"\n  if candidate [(\"6\", \"78\"),(\"5\", \"26.45\"),(\"1.33\", \"4\"),(\"82\", \"13\")] == [(6.0, 78.0),(5.0, 26.45),(1.33, 4.0),(82.0, 13.0)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_118_string_to_list", "language": "hs", "prompt": "-- | Write a function to convert a string to a list of strings split on the space character.\nstringToList :: String -> [String]\nstringToList string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = stringToList\n  if candidate \"python programming\" == [\"python\",\"programming\"] then pure () else error \"assertion failed\"\n  if candidate \"lists tuples strings\" == [\"lists\",\"tuples\",\"strings\"] then pure () else error \"assertion failed\"\n  if candidate \"write a program\" == [\"write\",\"a\",\"program\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_119_search", "language": "hs", "prompt": "-- | Write a hsthon function to find the element that appears only once in a sorted list.\nsearch :: [Int] -> Int\nsearch arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_119_search.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = search\n  if candidate [1,1,2,2,3] == 3 then pure () else error \"assertion failed\"\n  if candidate [1,1,3,3,4,4,5,5,7,7,8] == 8 then pure () else error \"assertion failed\"\n  if candidate [1,2,2,3,3,4,4] == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_11_remove_Occ", "language": "hs", "prompt": "-- | Write a hsthon function to remove first and last occurrence of a given character from the string.\nremoveOcc :: String -> String -> String\nremoveOcc s ch =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeOcc\n  if candidate \"hello\" \"l\" == \"heo\" then pure () else error \"assertion failed\"\n  if candidate \"abcda\" \"a\" == \"bcd\" then pure () else error \"assertion failed\"\n  if candidate \"PHP\" \"P\" == \"H\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_120_max_product_tuple", "language": "hs", "prompt": "-- | Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nmaxProductTuple :: [(Int, Int)] -> Int\nmaxProductTuple list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxProductTuple\n  if candidate [(2, 7),(2, 6),(1, 8),(4, 9)] == 36 then pure () else error \"assertion failed\"\n  if candidate [(10, 20),(15, 2),(5, 10)] == 200 then pure () else error \"assertion failed\"\n  if candidate [(11, 44),(10, 15),(20, 5),(12, 9)] == 484 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "hs", "prompt": "-- | Write a function to sum all amicable numbers from 1 to a specified number.\namicableNumbersSum :: Int -> Int\namicableNumbersSum limit =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = amicableNumbersSum\n  if candidate 999 == 504 then pure () else error \"assertion failed\"\n  if candidate 9999 == 31626 then pure () else error \"assertion failed\"\n  if candidate 99 == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_125_find_length", "language": "hs", "prompt": "-- | Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfindLength :: String -> Int\nfindLength string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_125_find_length.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findLength\n  if candidate \"11000010001\" == 6 then pure () else error \"assertion failed\"\n  if candidate \"10111\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"11011101100101\" == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_126_sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of common divisors of two given numbers.\nsum :: Int -> Int -> Int\nsum a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_126_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sum\n  if candidate 10 15 == 6 then pure () else error \"assertion failed\"\n  if candidate 100 150 == 93 then pure () else error \"assertion failed\"\n  if candidate 4 6 == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_127_multiply_int", "language": "hs", "prompt": "-- | Write a function to multiply two integers.\nmultiplyInt :: Int -> Int -> Int\nmultiplyInt x y =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = multiplyInt\n  if candidate 10 20 == 200 then pure () else error \"assertion failed\"\n  if candidate 5 10 == 50 then pure () else error \"assertion failed\"\n  if candidate 4 8 == 32 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_128_long_words", "language": "hs", "prompt": "-- | Write a function to find words that are longer than n characters from a given list of words.\nlongWords :: Int -> String -> [String]\nlongWords n str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_128_long_words.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = longWords\n  if candidate 3 \"python is a programming language\" == [\"python\",\"programming\",\"language\"] then pure () else error \"assertion failed\"\n  if candidate 2 \"writing a program\" == [\"writing\",\"program\"] then pure () else error \"assertion failed\"\n  if candidate 5 \"sorting list\" == [\"sorting\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_129_magic_square_test", "language": "hs", "prompt": "-- | Write a function to calculate whether the matrix is a magic square.\nmagicSquareTest :: [[Int]] -> Bool\nmagicSquareTest my_matrix =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = magicSquareTest\n  if candidate [[7,12,1,14],[2,13,8,11],[16,3,10,5],[9,6,15,4]] == True then pure () else error \"assertion failed\"\n  if candidate [[2,7,6],[9,5,1],[4,3,8]] == True then pure () else error \"assertion failed\"\n  if candidate [[2,7,6],[9,5,1],[4,3,7]] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_12_sort_matrix", "language": "hs", "prompt": "-- | Write a function to sort a given matrix in ascending order according to the sum of its rows.\nsortMatrix :: [[Int]] -> [[Int]]\nsortMatrix M =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sortMatrix\n  if candidate [[1,2,3],[2,4,5],[1,1,1]] == [[1,1,1],[1,2,3],[2,4,5]] then pure () else error \"assertion failed\"\n  if candidate [[1,2,3],[(-2),4,(-5)],[1,(-1),1]] == [[(-2),4,(-5)],[1,(-1),1],[1,2,3]] then pure () else error \"assertion failed\"\n  if candidate [[5,8,9],[6,4,3],[2,1,4]] == [[2,1,4],[6,4,3],[5,8,9]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_130_max_occurrences", "language": "hs", "prompt": "-- | Write a function to find the item with maximum frequency in a given list.\nmaxOccurrences :: [Int] -> Int\nmaxOccurrences nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxOccurrences\n  if candidate [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2] == 2 then pure () else error \"assertion failed\"\n  if candidate [2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18] == 8 then pure () else error \"assertion failed\"\n  if candidate [10,20,20,30,40,90,80,50,30,20,50,10] == 20 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_131_reverse_vowels", "language": "hs", "prompt": "-- | Write a hsthon function to reverse only the vowels of a given string (where y is not a vowel).\nreverseVowels :: String -> String\nreverseVowels str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = reverseVowels\n  if candidate \"Python\" == \"Python\" then pure () else error \"assertion failed\"\n  if candidate \"USA\" == \"ASU\" then pure () else error \"assertion failed\"\n  if candidate \"ab\" == \"ab\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_132_tup_string", "language": "hs", "prompt": "-- | Write a function to convert a list to a string.\ntupString :: [String] -> String\ntupString tup1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_132_tup_string.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = tupString\n  if candidate [\"e\",\"x\",\"e\",\"r\",\"c\",\"i\",\"s\",\"e\",\"s\"] == \"exercises\" then pure () else error \"assertion failed\"\n  if candidate [\"p\",\"y\",\"t\",\"h\",\"o\",\"n\"] == \"python\" then pure () else error \"assertion failed\"\n  if candidate [\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\"] == \"program\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_133_sum_negativenum", "language": "hs", "prompt": "-- | Write a function to calculate the sum of the negative numbers of a given list of numbers.\nsumNegativenum :: [Int] -> Int\nsumNegativenum nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumNegativenum\n  if candidate [2,4,(-6),(-9),11,(-12),14,(-5),17] == (-32) then pure () else error \"assertion failed\"\n  if candidate [10,15,(-14),13,(-18),12,(-20)] == (-52) then pure () else error \"assertion failed\"\n  if candidate [19,(-65),57,39,152,(-639),121,44,90,(-190)] == (-894) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_135_hexagonal_num", "language": "hs", "prompt": "-- | Write a function to find the nth hexagonal number.\nhexagonalNum :: Int -> Int\nhexagonalNum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = hexagonalNum\n  if candidate 10 == 190 then pure () else error \"assertion failed\"\n  if candidate 5 == 45 then pure () else error \"assertion failed\"\n  if candidate 7 == 91 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nisSumOfPowersOfTwo :: Int -> Bool\nisSumOfPowersOfTwo n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isSumOfPowersOfTwo\n  if candidate 10 == True then pure () else error \"assertion failed\"\n  if candidate 7 == False then pure () else error \"assertion failed\"\n  if candidate 14 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_141_pancake_sort", "language": "hs", "prompt": "-- | Write a function to sort a list of elements.\npancakeSort :: [Int] -> [Int]\npancakeSort nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = pancakeSort\n  if candidate [15,79,25,38,69] == [15,25,38,69,79] then pure () else error \"assertion failed\"\n  if candidate [98,12,54,36,85] == [12,36,54,85,98] then pure () else error \"assertion failed\"\n  if candidate [41,42,32,12,23] == [12,23,32,41,42] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_142_count_samepair", "language": "hs", "prompt": "-- | Write a function to count number items that are identical in the same position of three given lists.\ncountSamepair :: [Int] -> [Int] -> [Int] -> Int\ncountSamepair list1 list2 list3 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countSamepair\n  if candidate [1,2,3,4,5,6,7,8] [2,2,3,1,2,6,7,9] [2,1,3,1,2,6,7,9] == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8] [2,2,3,1,2,6,7,8] [2,1,3,1,2,6,7,8] == 4 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,2,6,7,8] [2,2,3,1,2,6,7,8] [2,1,3,1,2,6,7,8] == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "hs", "prompt": "-- | Write a hsthon function to find the maximum difference between any two elements in a given list.\nmaxAbsDiff :: [Int] -> Int\nmaxAbsDiff arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxAbsDiff\n  if candidate [2,1,5,3] == 4 then pure () else error \"assertion failed\"\n  if candidate [9,3,2,5,1] == 8 then pure () else error \"assertion failed\"\n  if candidate [3,2,1] == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_14_find_Volume", "language": "hs", "prompt": "-- | Write a hsthon function to find the volume of a triangular prism.\nfindVolume :: Int -> Int -> Int -> Int\nfindVolume l b h =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findVolume\n  if candidate 10 8 6 == 240 then pure () else error \"assertion failed\"\n  if candidate 3 2 2 == 6 then pure () else error \"assertion failed\"\n  if candidate 1 2 1 == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_160_find_solution", "language": "hs", "prompt": "-- | Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return Nothing if no solution exists.\nfindSolution :: Int -> Int -> Int -> Maybe (Int, Int)\nfindSolution a b n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_160_find_solution.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findSolution\n  if candidate 2 3 7 == Just ((2, 1)) then pure () else error \"assertion failed\"\n  if candidate 4 2 7 == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate 1 13 17 == Just ((4, 1)) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_161_remove_elements", "language": "hs", "prompt": "-- | Write a function to remove all elements from a given list present in another list.\nremoveElements :: [Int] -> [Int] -> [Int]\nremoveElements list1 list2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeElements\n  if candidate [1,2,3,4,5,6,7,8,9,10] [2,4,6,8] == [1,3,5,7,9,10] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] [1,3,5,7] == [2,4,6,8,9,10] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] [5,7] == [1,2,3,4,6,8,9,10] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_162_sum_series", "language": "hs", "prompt": "-- | Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nsumSeries :: Int -> Int\nsumSeries n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_162_sum_series.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumSeries\n  if candidate 6 == 12 then pure () else error \"assertion failed\"\n  if candidate 10 == 30 then pure () else error \"assertion failed\"\n  if candidate 9 == 25 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_164_are_equivalent", "language": "hs", "prompt": "-- | Write a function to determine if the sum of the divisors of two integers are the same.\nareEquivalent :: Int -> Int -> Bool\nareEquivalent num1 num2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = areEquivalent\n  if candidate 36 57 == False then pure () else error \"assertion failed\"\n  if candidate 2 4 == False then pure () else error \"assertion failed\"\n  if candidate 23 47 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_165_count_char_position", "language": "hs", "prompt": "-- | Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ncountCharPosition :: String -> Int\ncountCharPosition str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countCharPosition\n  if candidate \"xbcefg\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"ABcED\" == 3 then pure () else error \"assertion failed\"\n  if candidate \"AbgdeF\" == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_166_find_even_pair", "language": "hs", "prompt": "-- | Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfindEvenPair :: [Int] -> Int\nfindEvenPair A =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findEvenPair\n  if candidate [5,4,7,2,1] == 4 then pure () else error \"assertion failed\"\n  if candidate [7,2,8,1,0,5,11] == 9 then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_167_next_power_of_2", "language": "hs", "prompt": "-- | Write a hsthon function to find the smallest power of 2 greater than or equal to n.\nnextPowerOf2 :: Int -> Int\nnextPowerOf2 n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = nextPowerOf2\n  if candidate 0 == 1 then pure () else error \"assertion failed\"\n  if candidate 5 == 8 then pure () else error \"assertion failed\"\n  if candidate 17 == 32 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_168_frequency", "language": "hs", "prompt": "-- | Write a function to count the number of occurrences of a number in a given list.\nfrequency :: [Int] -> Int -> Int\nfrequency a x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_168_frequency.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = frequency\n  if candidate [1,2,3] 4 == 0 then pure () else error \"assertion failed\"\n  if candidate [1,2,2,3,3,3,4] 3 == 3 then pure () else error \"assertion failed\"\n  if candidate [0,1,2,3,1,2] 1 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "hs", "prompt": "-- | Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ntextLowercaseUnderscore :: String -> Bool\ntextLowercaseUnderscore text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textLowercaseUnderscore\n  if candidate \"aab_cbbbc\" == True then pure () else error \"assertion failed\"\n  if candidate \"aab_Abbbc\" == False then pure () else error \"assertion failed\"\n  if candidate \"Aaab_abbbc\" == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_170_sum_range_list", "language": "hs", "prompt": "-- | Write a function to find the sum of numbers in a list within a range specified by two indices.\nsumRangeList :: [Int] -> Int -> Int -> Int\nsumRangeList list1 m n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumRangeList\n  if candidate [2,1,5,6,8,3,4,9,10,11,8,12] 8 10 == 29 then pure () else error \"assertion failed\"\n  if candidate [2,1,5,6,8,3,4,9,10,11,8,12] 5 7 == 16 then pure () else error \"assertion failed\"\n  if candidate [2,1,5,6,8,3,4,9,10,11,8,12] 7 10 == 38 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "hs", "prompt": "-- | Write a function to find the perimeter of a regular pentagon from the length of its sides.\nperimeterPentagon :: Int -> Int\nperimeterPentagon a =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = perimeterPentagon\n  if candidate 5 == 25 then pure () else error \"assertion failed\"\n  if candidate 10 == 50 then pure () else error \"assertion failed\"\n  if candidate 15 == 75 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_172_count_occurance", "language": "hs", "prompt": "-- | Write a function to count the number of occurence of the string 'std' in a given string.\ncountOccurance :: String -> Int\ncountOccurance s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countOccurance\n  if candidate \"letstdlenstdporstd\" == 3 then pure () else error \"assertion failed\"\n  if candidate \"truststdsolensporsd\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"makestdsostdworthit\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"stds\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"\" == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_17_square_perimeter", "language": "hs", "prompt": "-- | Write a function that returns the perimeter of a square given its side length as input.\nsquarePerimeter :: Int -> Int\nsquarePerimeter a =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = squarePerimeter\n  if candidate 10 == 40 then pure () else error \"assertion failed\"\n  if candidate 5 == 20 then pure () else error \"assertion failed\"\n  if candidate 4 == 16 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "hs", "prompt": "-- | Write a function to remove characters from the first string which are present in the second string.\nremoveDirtyChars :: String -> String -> String\nremoveDirtyChars string second_string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeDirtyChars\n  if candidate \"probasscurve\" \"pros\" == \"bacuve\" then pure () else error \"assertion failed\"\n  if candidate \"digitalindia\" \"talent\" == \"digiidi\" then pure () else error \"assertion failed\"\n  if candidate \"exoticmiles\" \"toxic\" == \"emles\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_19_test_duplicate", "language": "hs", "prompt": "-- | Write a function to find whether a given list of integers contains any duplicate element.\ntestDuplicate :: [Int] -> Bool\ntestDuplicate arraynums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = testDuplicate\n  if candidate [1,2,3,4,5] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,4] == True then pure () else error \"assertion failed\"\n  if candidate [1,1,2,2,3,3,4,4,5] == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_20_is_woodall", "language": "hs", "prompt": "-- | Write a function to check if the given number is woodball or not.\nisWoodall :: Int -> Bool\nisWoodall x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isWoodall\n  if candidate 383 == True then pure () else error \"assertion failed\"\n  if candidate 254 == False then pure () else error \"assertion failed\"\n  if candidate 200 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_223_is_majority", "language": "hs", "prompt": "-- | Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\nisMajority :: [Int] -> Int -> Int -> Bool\nisMajority arr n x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_223_is_majority.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isMajority\n  if candidate [1,2,3,3,3,3,10] 7 3 == True then pure () else error \"assertion failed\"\n  if candidate [1,1,2,4,4,4,6,6] 8 4 == False then pure () else error \"assertion failed\"\n  if candidate [1,1,1,2,2] 5 1 == True then pure () else error \"assertion failed\"\n  if candidate [1,1,2,2] 5 1 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_224_count_Set_Bits", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of set bits (binary digits with value 1) in a given number.\ncountSetBits :: Int -> Int\ncountSetBits n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countSetBits\n  if candidate 2 == 1 then pure () else error \"assertion failed\"\n  if candidate 4 == 1 then pure () else error \"assertion failed\"\n  if candidate 6 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_226_odd_values_string", "language": "hs", "prompt": "-- | Write a hsthon function to remove the characters which have odd index values of a given string.\noddValuesString :: String -> String\noddValuesString str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = oddValuesString\n  if candidate \"abcdef\" == \"ace\" then pure () else error \"assertion failed\"\n  if candidate \"python\" == \"pto\" then pure () else error \"assertion failed\"\n  if candidate \"data\" == \"dt\" then pure () else error \"assertion failed\"\n  if candidate \"lambs\" == \"lms\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_227_min_of_three", "language": "hs", "prompt": "-- | Write a function to find minimum of three numbers.\nminOfThree :: Int -> Int -> Int -> Int\nminOfThree a b c =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = minOfThree\n  if candidate 10 20 0 == 0 then pure () else error \"assertion failed\"\n  if candidate 19 15 18 == 15 then pure () else error \"assertion failed\"\n  if candidate (-10) (-20) (-30) == (-30) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "hs", "prompt": "-- | Write a hsthon function to check whether all the bits are unset in the given range or not.\nallBitsSetInTheGivenRange :: Int -> Int -> Int -> Bool\nallBitsSetInTheGivenRange n l r =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = allBitsSetInTheGivenRange\n  if candidate 4 1 2 == True then pure () else error \"assertion failed\"\n  if candidate 17 2 4 == True then pure () else error \"assertion failed\"\n  if candidate 39 4 6 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_229_re_arrange_array", "language": "hs", "prompt": "-- | Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nreArrangeArray :: [Int] -> Int -> [Int]\nreArrangeArray arr n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = reArrangeArray\n  if candidate [(-1),2,(-3),4,5,6,(-7),8,9] 9 == [(-1),(-3),(-7),4,5,6,2,8,9] then pure () else error \"assertion failed\"\n  if candidate [12,(-14),(-26),13,15] 5 == [(-14),(-26),12,13,15] then pure () else error \"assertion failed\"\n  if candidate [10,24,36,(-42),(-39),(-78),85] 7 == [(-42),(-39),(-78),10,24,36,85] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_230_replace_blank", "language": "hs", "prompt": "-- | Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nreplaceBlank :: String -> String -> String\nreplaceBlank str1 char =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = replaceBlank\n  if candidate \"hello people\" \"@\" == \"hello@people\" then pure () else error \"assertion failed\"\n  if candidate \"python program language\" \"$\" == \"python$program$language\" then pure () else error \"assertion failed\"\n  if candidate \"blank space\" \"-\" == \"blank-space\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_234_volume_cube", "language": "hs", "prompt": "-- | Write a function to find the volume of a cube given its side length.\nvolumeCube :: Int -> Int\nvolumeCube l =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = volumeCube\n  if candidate 3 == 27 then pure () else error \"assertion failed\"\n  if candidate 2 == 8 then pure () else error \"assertion failed\"\n  if candidate 5 == 125 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_238_number_of_substrings", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of non-empty substrings of a given string.\nnumberOfSubstrings :: String -> Int\nnumberOfSubstrings str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = numberOfSubstrings\n  if candidate \"abc\" == 6 then pure () else error \"assertion failed\"\n  if candidate \"abcd\" == 10 then pure () else error \"assertion failed\"\n  if candidate \"abcde\" == 15 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "hs", "prompt": "-- | Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ngetTotalNumberOfSequences :: Int -> Int -> Int\ngetTotalNumberOfSequences m n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getTotalNumberOfSequences\n  if candidate 10 4 == 4 then pure () else error \"assertion failed\"\n  if candidate 5 2 == 6 then pure () else error \"assertion failed\"\n  if candidate 16 3 == 84 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_242_count_charac", "language": "hs", "prompt": "-- | Write a function to count the total number of characters in a string.\ncountCharac :: String -> Int\ncountCharac str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_242_count_charac.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countCharac\n  if candidate \"python programming\" == 18 then pure () else error \"assertion failed\"\n  if candidate \"language\" == 8 then pure () else error \"assertion failed\"\n  if candidate \"words\" == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "hs", "prompt": "-- | Write a hsthon function to find the next perfect square greater than a given number.\nnextPerfectSquare :: Int -> Int\nnextPerfectSquare N =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = nextPerfectSquare\n  if candidate 35 == 36 then pure () else error \"assertion failed\"\n  if candidate 6 == 9 then pure () else error \"assertion failed\"\n  if candidate 9 == 16 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_245_max_sum", "language": "hs", "prompt": "-- | Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\nmaxSum :: [Int] -> Int\nmaxSum arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_245_max_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxSum\n  if candidate [1,15,51,45,33,100,12,18,9] == 194 then pure () else error \"assertion failed\"\n  if candidate [80,60,30,40,20,10] == 210 then pure () else error \"assertion failed\"\n  if candidate [2,3,14,16,21,23,29,30] == 138 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_247_lps", "language": "hs", "prompt": "-- | Write a function to find the length of the longest palindromic subsequence in the given string.\nlps :: String -> Int\nlps str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_247_lps.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lps\n  if candidate \"TENS FOR TENS\" == 5 then pure () else error \"assertion failed\"\n  if candidate \"CARDIO FOR CARDS\" == 7 then pure () else error \"assertion failed\"\n  if candidate \"PART OF THE JOURNEY IS PART\" == 9 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_249_intersection_array", "language": "hs", "prompt": "-- | Write a function to find the intersection of two lists.\nintersectionArray :: [Int] -> [Int] -> [Int]\nintersectionArray array_nums1 array_nums2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = intersectionArray\n  if candidate [1,2,3,5,7,8,9,10] [1,2,4,8,9] == [1,2,8,9] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,5,7,8,9,10] [3,5,7,9] == [3,5,7,9] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,5,7,8,9,10] [10,20,30,40] == [10] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_250_count_X", "language": "hs", "prompt": "-- | Write a hsthon function that takes in a tuple and an element and counts the occcurences of the element in the list.\ncountX :: [Int] -> Int -> Int\ncountX tup x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_250_count_X.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countX\n  if candidate [10,8,5,2,10,15,10,8,5,8,8,2] 4 == 0 then pure () else error \"assertion failed\"\n  if candidate [10,8,5,2,10,15,10,8,5,8,8,2] 10 == 3 then pure () else error \"assertion failed\"\n  if candidate [10,8,5,2,10,15,10,8,5,8,8,2] 8 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_251_insert_element", "language": "hs", "prompt": "-- | Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ninsertElement :: [String] -> String -> [String]\ninsertElement list element =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_251_insert_element.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = insertElement\n  if candidate [\"Red\",\"Green\",\"Black\"] \"c\" == [\"c\",\"Red\",\"c\",\"Green\",\"c\",\"Black\"] then pure () else error \"assertion failed\"\n  if candidate [\"python\",\"java\"] \"program\" == [\"program\",\"python\",\"program\",\"java\"] then pure () else error \"assertion failed\"\n  if candidate [\"happy\",\"sad\"] \"laugh\" == [\"laugh\",\"happy\",\"laugh\",\"sad\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_252_convert", "language": "hs", "prompt": "-- | Write a hsthon function to convert complex numbers to polar coordinates.\nconvert :: Int -> (Float, Float)\nconvert numbers =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_252_convert.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = convert\n  if candidate 1 == (1.0, 0.0) then pure () else error \"assertion failed\"\n  if candidate 4 == (4.0, 0.0) then pure () else error \"assertion failed\"\n  if candidate 5 == (5.0, 0.0) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_255_combinations_colors", "language": "hs", "prompt": "-- | Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\ncombinationsColors :: [String] -> Int -> [[String]]\ncombinationsColors l n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = combinationsColors\n  if candidate [\"Red\",\"Green\",\"Blue\"] 1 == [[\"Red\"],[\"Green\"],[\"Blue\"]] then pure () else error \"assertion failed\"\n  if candidate [\"Red\",\"Green\",\"Blue\"] 2 == [[\"Red\",\"Red\"],[\"Red\",\"Green\"],[\"Red\",\"Blue\"],[\"Green\",\"Green\"],[\"Green\",\"Blue\"],[\"Blue\",\"Blue\"]] then pure () else error \"assertion failed\"\n  if candidate [\"Red\",\"Green\",\"Blue\"] 3 == [[\"Red\",\"Red\",\"Red\"],[\"Red\",\"Red\",\"Green\"],[\"Red\",\"Red\",\"Blue\"],[\"Red\",\"Green\",\"Green\"],[\"Red\",\"Green\",\"Blue\"],[\"Red\",\"Blue\",\"Blue\"],[\"Green\",\"Green\",\"Green\"],[\"Green\",\"Green\",\"Blue\"],[\"Green\",\"Blue\",\"Blue\"],[\"Blue\",\"Blue\",\"Blue\"]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_256_count_Primes_nums", "language": "hs", "prompt": "-- | Write a hsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ncountPrimesNums :: Int -> Int\ncountPrimesNums n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countPrimesNums\n  if candidate 5 == 2 then pure () else error \"assertion failed\"\n  if candidate 10 == 4 then pure () else error \"assertion failed\"\n  if candidate 100 == 25 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_257_swap_numbers", "language": "hs", "prompt": "-- | Write a function that takes in two numbers and returns a list with the second number and then the first number.\nswapNumbers :: Int -> Int -> [Int]\nswapNumbers a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = swapNumbers\n  if candidate 10 20 == [20,10] then pure () else error \"assertion failed\"\n  if candidate 15 17 == [17,15] then pure () else error \"assertion failed\"\n  if candidate 100 200 == [200,100] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_259_maximize_elements", "language": "hs", "prompt": "-- | Write a function to maximize the given two lists.\nmaximizeElements :: [[Int]] -> [[Int]] -> [[Int]]\nmaximizeElements test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maximizeElements\n  if candidate [[1,3],[4,5],[2,9],[1,10]] [[6,7],[3,9],[1,1],[7,3]] == [[6,7],[4,9],[2,9],[7,10]] then pure () else error \"assertion failed\"\n  if candidate [[2,4],[5,6],[3,10],[2,11]] [[7,8],[4,10],[2,2],[8,4]] == [[7,8],[5,10],[3,10],[8,11]] then pure () else error \"assertion failed\"\n  if candidate [[3,5],[6,7],[4,11],[3,12]] [[8,9],[5,11],[3,3],[9,5]] == [[8,9],[6,11],[4,11],[9,12]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_260_newman_prime", "language": "hs", "prompt": "-- | Write a function to find the nth newman\u00e2\u20ac\u201cshanks\u00e2\u20ac\u201cwilliams prime number.\nnewmanPrime :: Int -> Int\nnewmanPrime n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = newmanPrime\n  if candidate 3 == 7 then pure () else error \"assertion failed\"\n  if candidate 4 == 17 then pure () else error \"assertion failed\"\n  if candidate 5 == 41 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_261_division_elements", "language": "hs", "prompt": "-- | Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndivisionElements :: (Int, Int, Int, Int) -> (Int, Int, Int, Int) -> (Int, Int, Int, Int)\ndivisionElements test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_261_division_elements.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = divisionElements\n  if candidate (10, 4, 6, 9) (5, 2, 3, 3) == (2, 2, 2, 3) then pure () else error \"assertion failed\"\n  if candidate (12, 6, 8, 16) (6, 3, 4, 4) == (2, 2, 2, 4) then pure () else error \"assertion failed\"\n  if candidate (20, 14, 36, 18) (5, 7, 6, 9) == (4, 2, 6, 2) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_264_dog_age", "language": "hs", "prompt": "-- | Write a function to calculate a dog's age in dog's years.\ndogAge :: Int -> Int\ndogAge h_age =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_264_dog_age.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = dogAge\n  if candidate 12 == 61 then pure () else error \"assertion failed\"\n  if candidate 15 == 73 then pure () else error \"assertion failed\"\n  if candidate 24 == 109 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "hs", "prompt": "-- | Write a function to find the lateral surface area of a cube given its side length.\nlateralsurfaceCube :: Int -> Int\nlateralsurfaceCube l =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lateralsurfaceCube\n  if candidate 5 == 100 then pure () else error \"assertion failed\"\n  if candidate 9 == 324 then pure () else error \"assertion failed\"\n  if candidate 10 == 400 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_267_square_Sum", "language": "hs", "prompt": "-- | Write a hsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nsquareSum :: Int -> Int\nsquareSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = squareSum\n  if candidate 2 == 10 then pure () else error \"assertion failed\"\n  if candidate 3 == 35 then pure () else error \"assertion failed\"\n  if candidate 4 == 84 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_268_find_star_num", "language": "hs", "prompt": "-- | Write a function to find the n'th star number.\nfindStarNum :: Int -> Int\nfindStarNum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findStarNum\n  if candidate 3 == 37 then pure () else error \"assertion failed\"\n  if candidate 4 == 73 then pure () else error \"assertion failed\"\n  if candidate 5 == 121 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_269_ascii_value", "language": "hs", "prompt": "-- | Write a function to find the ascii value of a character.\nasciiValue :: String -> Int\nasciiValue k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = asciiValue\n  if candidate \"A\" == 65 then pure () else error \"assertion failed\"\n  if candidate \"R\" == 82 then pure () else error \"assertion failed\"\n  if candidate \"S\" == 83 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of even numbers at even positions of a list.\nsumEvenAndEvenIndex :: [Int] -> Int\nsumEvenAndEvenIndex arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumEvenAndEvenIndex\n  if candidate [5,6,12,1,18,8] == 30 then pure () else error \"assertion failed\"\n  if candidate [3,20,17,9,2,10,18,13,6,18] == 26 then pure () else error \"assertion failed\"\n  if candidate [5,6,12,1] == 12 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_271_even_Power_Sum", "language": "hs", "prompt": "-- | Write a hsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nevenPowerSum :: Int -> Int\nevenPowerSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = evenPowerSum\n  if candidate 2 == 1056 then pure () else error \"assertion failed\"\n  if candidate 3 == 8832 then pure () else error \"assertion failed\"\n  if candidate 1 == 32 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_272_rear_extract", "language": "hs", "prompt": "-- | Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nrearExtract :: [(Int, String, Int)] -> [Int]\nrearExtract test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = rearExtract\n  if candidate [(1, \"Rash\", 21),(2, \"Varsha\", 20),(3, \"Kil\", 19)] == [21,20,19] then pure () else error \"assertion failed\"\n  if candidate [(1, \"Sai\", 36),(2, \"Ayesha\", 25),(3, \"Salman\", 45)] == [36,25,45] then pure () else error \"assertion failed\"\n  if candidate [(1, \"Sudeep\", 14),(2, \"Vandana\", 36),(3, \"Dawood\", 56)] == [14,36,56] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_273_substract_elements", "language": "hs", "prompt": "-- | Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nsubstractElements :: (Int, Int, Int) -> (Int, Int, Int) -> (Int, Int, Int)\nsubstractElements test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = substractElements\n  if candidate (10, 4, 5) (2, 5, 18) == (8, (-1), (-13)) then pure () else error \"assertion failed\"\n  if candidate (11, 2, 3) (24, 45, 16) == ((-13), (-43), (-13)) then pure () else error \"assertion failed\"\n  if candidate (7, 18, 9) (10, 11, 12) == ((-3), 7, (-3)) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "hs", "prompt": "-- | Write a hsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nevenBinomialCoeffSum :: Int -> Int\nevenBinomialCoeffSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = evenBinomialCoeffSum\n  if candidate 4 == 8 then pure () else error \"assertion failed\"\n  if candidate 6 == 32 then pure () else error \"assertion failed\"\n  if candidate 2 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_277_dict_filter", "language": "hs", "prompt": "-- | Write a function that takes in an association list and integer n and filters the association list to only include entries with values greater than or equal to n.\ndictFilter :: [(String, Int)] -> Int -> [(String, Int)]\ndictFilter dict n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = dictFilter\n  if candidate [(\"Cierra Vega\", 175), (\"Alden Cantrell\", 180), (\"Kierra Gentry\", 165), (\"Pierre Cox\", 190)] 170 == [(\"Cierra Vega\", 175), (\"Alden Cantrell\", 180), (\"Pierre Cox\", 190)] then pure () else error \"assertion failed\"\n  if candidate [(\"Cierra Vega\", 175), (\"Alden Cantrell\", 180), (\"Kierra Gentry\", 165), (\"Pierre Cox\", 190)] 180 == [(\"Alden Cantrell\", 180), (\"Pierre Cox\", 190)] then pure () else error \"assertion failed\"\n  if candidate [(\"Cierra Vega\", 175), (\"Alden Cantrell\", 180), (\"Kierra Gentry\", 165), (\"Pierre Cox\", 190)] 190 == [(\"Pierre Cox\", 190)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_279_is_num_decagonal", "language": "hs", "prompt": "-- | Write a function to find the nth decagonal number.\nisNumDecagonal :: Int -> Int\nisNumDecagonal n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isNumDecagonal\n  if candidate 3 == 27 then pure () else error \"assertion failed\"\n  if candidate 7 == 175 then pure () else error \"assertion failed\"\n  if candidate 10 == 370 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_280_sequential_search", "language": "hs", "prompt": "-- | Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\nsequentialSearch :: [Int] -> Int -> (Bool, Int)\nsequentialSearch dlist item =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sequentialSearch\n  if candidate [11,23,58,31,56,77,43,12,65,19] 31 == (True, 3) then pure () else error \"assertion failed\"\n  if candidate [12,32,45,62,35,47,44,61] 61 == (True, 7) then pure () else error \"assertion failed\"\n  if candidate [9,10,17,19,22,39,48,56] 48 == (True, 6) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_281_all_unique", "language": "hs", "prompt": "-- | Write a hsthon function to check if the elements of a given list are unique or not.\nallUnique :: [Int] -> Bool\nallUnique test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_281_all_unique.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = allUnique\n  if candidate [1,2,3] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,1,2] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_282_sub_list", "language": "hs", "prompt": "-- | Write a function to subtract two lists element-wise.\nsubList :: [Int] -> [Int] -> [Int]\nsubList nums1 nums2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_282_sub_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = subList\n  if candidate [1,2,3] [4,5,6] == [(-3),(-3),(-3)] then pure () else error \"assertion failed\"\n  if candidate [1,2] [3,4] == [(-2),(-2)] then pure () else error \"assertion failed\"\n  if candidate [90,120] [50,70] == [40,50] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_283_validate", "language": "hs", "prompt": "-- | Write a hsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nvalidate :: Int -> Bool\nvalidate n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_283_validate.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = validate\n  if candidate 1234 == True then pure () else error \"assertion failed\"\n  if candidate 51241 == False then pure () else error \"assertion failed\"\n  if candidate 321 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_285_text_match_two_three", "language": "hs", "prompt": "-- | Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ntextMatchTwoThree :: String -> Bool\ntextMatchTwoThree text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textMatchTwoThree\n  if candidate \"ac\" == False then pure () else error \"assertion failed\"\n  if candidate \"dc\" == False then pure () else error \"assertion failed\"\n  if candidate \"abbbba\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "hs", "prompt": "-- | Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\nmaxSubArraySumRepeated :: [Int] -> Int -> Int -> Int\nmaxSubArraySumRepeated a n k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxSubArraySumRepeated\n  if candidate [10,20,(-30),(-1)] 4 3 == 30 then pure () else error \"assertion failed\"\n  if candidate [(-1),10,20] 3 2 == 59 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),(-3)] 3 3 == (-1) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_287_square_Sum", "language": "hs", "prompt": "-- | Write a hsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nsquareSum :: Int -> Int\nsquareSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = squareSum\n  if candidate 2 == 20 then pure () else error \"assertion failed\"\n  if candidate 3 == 56 then pure () else error \"assertion failed\"\n  if candidate 4 == 120 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_290_max_length", "language": "hs", "prompt": "-- | Write a function to find the list of maximum length in a list of lists.\nmaxLength :: [[Int]] -> (Int, [Int])\nmaxLength list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_290_max_length.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxLength\n  if candidate [[0],[1,3],[5,7],[9,11],[13,15,17]] == (3, [13,15,17]) then pure () else error \"assertion failed\"\n  if candidate [[1],[5,7],[10,12,14,15]] == (4, [10,12,14,15]) then pure () else error \"assertion failed\"\n  if candidate [[5],[15,20,25]] == (3, [15,20,25]) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_291_count_no_of_ways", "language": "hs", "prompt": "-- | Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ncountNoOfWays :: Int -> Int -> Int\ncountNoOfWays n k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countNoOfWays\n  if candidate 2 4 == 16 then pure () else error \"assertion failed\"\n  if candidate 3 2 == 6 then pure () else error \"assertion failed\"\n  if candidate 4 4 == 228 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_292_find", "language": "hs", "prompt": "-- | Write a hsthon function to find quotient of two numbers (rounded down to the nearest integer).\nfind :: Int -> Int -> Int\nfind n m =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_292_find.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = find\n  if candidate 10 3 == 3 then pure () else error \"assertion failed\"\n  if candidate 4 2 == 2 then pure () else error \"assertion failed\"\n  if candidate 20 5 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_293_otherside_rightangle", "language": "hs", "prompt": "-- | Write a function to find the third side of a right angled triangle.\nothersideRightangle :: Int -> Int -> Float\nothersideRightangle w h =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = othersideRightangle\n  if candidate 7 8 == 10.63014581273465 then pure () else error \"assertion failed\"\n  if candidate 3 4 == 5.0 then pure () else error \"assertion failed\"\n  if candidate 7 15 == 16.55294535724685 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_295_sum_div", "language": "hs", "prompt": "-- | Write a function to return the sum of all divisors of a number.\nsumDiv :: Int -> Int\nsumDiv number =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_295_sum_div.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumDiv\n  if candidate 8 == 7 then pure () else error \"assertion failed\"\n  if candidate 12 == 16 then pure () else error \"assertion failed\"\n  if candidate 7 == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_296_get_Inv_Count", "language": "hs", "prompt": "-- | Write a hsthon function to count inversions in a list.\ngetInvCount :: [Int] -> Int\ngetInvCount arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getInvCount\n  if candidate [1,20,6,4,5] == 5 then pure () else error \"assertion failed\"\n  if candidate [1,2,1] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,2,5,6,1] == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_299_max_aggregate", "language": "hs", "prompt": "-- | Write a function to calculate the maximum aggregate from the list of tuples.\nmaxAggregate :: [(String, Int)] -> (String, Int)\nmaxAggregate stdata =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxAggregate\n  if candidate [(\"Juan Whelan\", 90),(\"Sabah Colley\", 88),(\"Peter Nichols\", 7),(\"Juan Whelan\", 122),(\"Sabah Colley\", 84)] == (\"Juan Whelan\", 212) then pure () else error \"assertion failed\"\n  if candidate [(\"Juan Whelan\", 50),(\"Sabah Colley\", 48),(\"Peter Nichols\", 37),(\"Juan Whelan\", 22),(\"Sabah Colley\", 14)] == (\"Juan Whelan\", 72) then pure () else error \"assertion failed\"\n  if candidate [(\"Juan Whelan\", 10),(\"Sabah Colley\", 20),(\"Peter Nichols\", 30),(\"Juan Whelan\", 40),(\"Sabah Colley\", 50)] == (\"Sabah Colley\", 70) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_304_find_Element", "language": "hs", "prompt": "-- | Write a hsthon function to find element at a given index after number of rotations.\nfindElement :: [Int] -> [[Int]] -> Int -> Int -> Int\nfindElement arr ranges rotations index =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_304_find_Element.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findElement\n  if candidate [1,2,3,4,5] [[0,2],[0,3]] 2 1 == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] [[0,1],[0,2]] 1 2 == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6] [[0,1],[0,2]] 1 1 == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_305_start_withp", "language": "hs", "prompt": "-- | Write a function to return two words from a list of words starting with letter 'p'.\nstartWithp :: [String] -> (String, String)\nstartWithp words =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_305_start_withp.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = startWithp\n  if candidate [\"Python PHP\",\"Java JavaScript\",\"c c++\"] == (\"Python\", \"PHP\") then pure () else error \"assertion failed\"\n  if candidate [\"Python Programming\",\"Java Programming\"] == (\"Python\", \"Programming\") then pure () else error \"assertion failed\"\n  if candidate [\"Pqrst Pqr\",\"qrstuv\"] == (\"Pqrst\", \"Pqr\") then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "hs", "prompt": "-- | Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nmaxSumIncreasingSubseq :: [Int] -> Int -> Int -> Int -> Int\nmaxSumIncreasingSubseq a n index k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxSumIncreasingSubseq\n  if candidate [1,101,2,3,100,4,5] 7 4 6 == 11 then pure () else error \"assertion failed\"\n  if candidate [1,101,2,3,100,4,5] 7 2 5 == 7 then pure () else error \"assertion failed\"\n  if candidate [11,15,19,21,26,28,31] 7 2 4 == 71 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_308_large_product", "language": "hs", "prompt": "-- | Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nlargeProduct :: [Int] -> [Int] -> Int -> [Int]\nlargeProduct nums1 nums2 N =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_308_large_product.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = largeProduct\n  if candidate [1,2,3,4,5,6] [3,6,8,9,10,6] 3 == [60,54,50] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6] [3,6,8,9,10,6] 4 == [60,54,50,48] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6] [3,6,8,9,10,6] 5 == [60,54,50,48,45] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_309_maximum", "language": "hs", "prompt": "-- | Write a hsthon function to find the maximum of two numbers.\nmaximum :: Int -> Int -> Int\nmaximum a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_309_maximum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maximum\n  if candidate 5 10 == 10 then pure () else error \"assertion failed\"\n  if candidate (-1) (-2) == (-1) then pure () else error \"assertion failed\"\n  if candidate 9 7 == 9 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_310_string_to_tuple", "language": "hs", "prompt": "-- | Write a function to convert a given string to a list of characters.\nstringToTuple :: String -> [String]\nstringToTuple str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = stringToTuple\n  if candidate \"python 3.0\" == [\"p\",\"y\",\"t\",\"h\",\"o\",\"n\",\"3\",\".\",\"0\"] then pure () else error \"assertion failed\"\n  if candidate \"item1\" == [\"i\",\"t\",\"e\",\"m\",\"1\"] then pure () else error \"assertion failed\"\n  if candidate \"15.10\" == [\"1\",\"5\",\".\",\"1\",\"0\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "hs", "prompt": "-- | Write a hsthon function to find the highest power of 2 that is less than or equal to n.\nhighestPowerOf2 :: Int -> Int\nhighestPowerOf2 n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = highestPowerOf2\n  if candidate 10 == 8 then pure () else error \"assertion failed\"\n  if candidate 19 == 16 then pure () else error \"assertion failed\"\n  if candidate 32 == 32 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_389_find_lucas", "language": "hs", "prompt": "-- | Write a function to find the n'th lucas number.\nfindLucas :: Int -> Int\nfindLucas n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findLucas\n  if candidate 9 == 76 then pure () else error \"assertion failed\"\n  if candidate 4 == 7 then pure () else error \"assertion failed\"\n  if candidate 3 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_392_get_max_sum", "language": "hs", "prompt": "-- | Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ngetMaxSum :: Int -> Int\ngetMaxSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getMaxSum\n  if candidate 60 == 106 then pure () else error \"assertion failed\"\n  if candidate 10 == 12 then pure () else error \"assertion failed\"\n  if candidate 2 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_393_max_length_list", "language": "hs", "prompt": "-- | Write a function to find the list with maximum length.\nmaxLengthList :: [[Int]] -> (Int, [Int])\nmaxLengthList input_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxLengthList\n  if candidate [[0],[1,3],[5,7],[9,11],[13,15,17]] == (3, [13,15,17]) then pure () else error \"assertion failed\"\n  if candidate [[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]] == (5, [1,2,3,4,5]) then pure () else error \"assertion failed\"\n  if candidate [[3,4,5],[6,7,8,9],[10,11,12]] == (4, [6,7,8,9]) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_394_check_distinct", "language": "hs", "prompt": "-- | Write a function to check if given list contains no duplicates.\ncheckDistinct :: [Int] -> Bool\ncheckDistinct test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkDistinct\n  if candidate [1,4,5,6,1,4] == False then pure () else error \"assertion failed\"\n  if candidate [1,4,5,6] == True then pure () else error \"assertion failed\"\n  if candidate [2,3,4,5,6] == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "hs", "prompt": "-- | Write a hsthon function to find the first non-repeated character in a given string.\nfirstNonRepeatingCharacter :: String -> Maybe String\nfirstNonRepeatingCharacter str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = firstNonRepeatingCharacter\n  if candidate \"abcabc\" == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate \"abc\" == Just (\"a\") then pure () else error \"assertion failed\"\n  if candidate \"ababc\" == Just (\"c\") then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_396_check_char", "language": "hs", "prompt": "-- | Write a function to check whether the given string starts and ends with the same character or not.\ncheckChar :: String -> String\ncheckChar string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_396_check_char.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkChar\n  if candidate \"abba\" == \"Valid\" then pure () else error \"assertion failed\"\n  if candidate \"a\" == \"Valid\" then pure () else error \"assertion failed\"\n  if candidate \"abcd\" == \"Invalid\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_397_median_numbers", "language": "hs", "prompt": "-- | Write a function to find the median of three numbers.\nmedianNumbers :: Int -> Int -> Int -> Float\nmedianNumbers a b c =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = medianNumbers\n  if candidate 25 55 65 == 55.0 then pure () else error \"assertion failed\"\n  if candidate 20 10 30 == 20.0 then pure () else error \"assertion failed\"\n  if candidate 15 45 75 == 45.0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_399_bitwise_xor", "language": "hs", "prompt": "-- | Write a function to perform the mathematical bitwise xor operation across the given tuples.\nbitwiseXor :: (Int, Int, Int, Int) -> (Int, Int, Int, Int) -> (Int, Int, Int, Int)\nbitwiseXor test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = bitwiseXor\n  if candidate (10, 4, 6, 9) (5, 2, 3, 3) == (15, 6, 5, 10) then pure () else error \"assertion failed\"\n  if candidate (11, 5, 7, 10) (6, 3, 4, 4) == (13, 6, 3, 14) then pure () else error \"assertion failed\"\n  if candidate (12, 6, 8, 11) (7, 4, 5, 6) == (11, 2, 13, 13) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_3_is_not_prime", "language": "hs", "prompt": "-- | Write a hsthon function to identify non-prime numbers.\nisNotPrime :: Int -> Bool\nisNotPrime n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isNotPrime\n  if candidate 2 == False then pure () else error \"assertion failed\"\n  if candidate 10 == True then pure () else error \"assertion failed\"\n  if candidate 35 == True then pure () else error \"assertion failed\"\n  if candidate 37 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_400_extract_freq", "language": "hs", "prompt": "-- | Write a function to extract the number of unique tuples in the given list.\nextractFreq :: [(Int, Int)] -> Int\nextractFreq test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = extractFreq\n  if candidate [(3, 4),(1, 2),(4, 3),(5, 6)] == 3 then pure () else error \"assertion failed\"\n  if candidate [(4, 15),(2, 3),(5, 4),(6, 7)] == 4 then pure () else error \"assertion failed\"\n  if candidate [(5, 16),(2, 3),(6, 5),(6, 9)] == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_401_add_nested_tuples", "language": "hs", "prompt": "-- | Write a function to perform index wise addition of list elements in the given two nested lists.\naddNestedTuples :: [[Int]] -> [[Int]] -> [[Int]]\naddNestedTuples test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = addNestedTuples\n  if candidate [[1,3],[4,5],[2,9],[1,10]] [[6,7],[3,9],[1,1],[7,3]] == [[7,10],[7,14],[3,10],[8,13]] then pure () else error \"assertion failed\"\n  if candidate [[2,4],[5,6],[3,10],[2,11]] [[7,8],[4,10],[2,2],[8,4]] == [[9,12],[9,16],[5,12],[10,15]] then pure () else error \"assertion failed\"\n  if candidate [[3,5],[6,7],[4,11],[3,12]] [[8,9],[5,11],[3,3],[9,5]] == [[11,14],[11,18],[7,14],[12,17]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_404_minimum", "language": "hs", "prompt": "-- | Write a hsthon function to find the minimum of two numbers.\nminimum :: Int -> Int -> Int\nminimum a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_404_minimum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = minimum\n  if candidate 1 2 == 1 then pure () else error \"assertion failed\"\n  if candidate (-5) (-4) == (-5) then pure () else error \"assertion failed\"\n  if candidate 0 0 == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_406_find_Parity", "language": "hs", "prompt": "-- | Write a hsthon function to find whether the parity of a given number is odd.\nfindParity :: Int -> Bool\nfindParity x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findParity\n  if candidate 12 == False then pure () else error \"assertion failed\"\n  if candidate 7 == True then pure () else error \"assertion failed\"\n  if candidate 10 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "hs", "prompt": "-- | Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\nkSmallestPairs :: [Int] -> [Int] -> Int -> [[Int]]\nkSmallestPairs nums1 nums2 k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = kSmallestPairs\n  if candidate [1,3,7] [2,4,6] 2 == [[1,2],[1,4]] then pure () else error \"assertion failed\"\n  if candidate [1,3,7] [2,4,6] 1 == [[1,2]] then pure () else error \"assertion failed\"\n  if candidate [1,3,7] [2,4,6] 7 == [[1,2],[1,4],[3,2],[1,6],[3,4],[3,6],[7,2]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_409_min_product_tuple", "language": "hs", "prompt": "-- | Write a function to find the minimum product from the pairs of tuples within a given list.\nminProductTuple :: [(Int, Int)] -> Int\nminProductTuple list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = minProductTuple\n  if candidate [(2, 7),(2, 6),(1, 8),(4, 9)] == 8 then pure () else error \"assertion failed\"\n  if candidate [(10, 20),(15, 2),(5, 10)] == 30 then pure () else error \"assertion failed\"\n  if candidate [(11, 44),(10, 15),(20, 5),(12, 9)] == 100 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_411_snake_to_camel", "language": "hs", "prompt": "-- | Write a function to convert the given snake case string to camel case string.\nsnakeToCamel :: String -> String\nsnakeToCamel word =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = snakeToCamel\n  if candidate \"android_tv\" == \"AndroidTv\" then pure () else error \"assertion failed\"\n  if candidate \"google_pixel\" == \"GooglePixel\" then pure () else error \"assertion failed\"\n  if candidate \"apple_watch\" == \"AppleWatch\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_412_remove_odd", "language": "hs", "prompt": "-- | Write a hsthon function to remove odd numbers from a given list.\nremoveOdd :: [Int] -> [Int]\nremoveOdd l =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeOdd\n  if candidate [1,2,3] == [2] then pure () else error \"assertion failed\"\n  if candidate [2,4,6] == [2,4,6] then pure () else error \"assertion failed\"\n  if candidate [10,20,3] == [10,20] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_414_overlapping", "language": "hs", "prompt": "-- | Write a hsthon function to check whether any value in a sequence exists in a sequence or not.\noverlapping :: [Int] -> [Int] -> Bool\noverlapping list1 list2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_414_overlapping.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = overlapping\n  if candidate [1,2,3,4,5] [6,7,8,9] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3] [4,5,6] == False then pure () else error \"assertion failed\"\n  if candidate [1,4,5] [1,4,5] == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_415_max_Product", "language": "hs", "prompt": "-- | Write a hsthon function to find a pair with highest product from a given list of integers.\nmaxProduct :: [Int] -> (Int, Int)\nmaxProduct arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_415_max_Product.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxProduct\n  if candidate [1,2,3,4,7,0,8,4] == (7, 8) then pure () else error \"assertion failed\"\n  if candidate [0,(-1),(-2),(-4),5,0,(-6)] == ((-4), (-6)) then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == (2, 3) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_417_group_tuples", "language": "hs", "prompt": "-- | Write a function to find common first element in given list of lists.\ngroupTuples :: [[String]] -> [[String]]\ngroupTuples Input =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = groupTuples\n  if candidate [[\"x\",\"y\"],[\"x\",\"z\"],[\"w\",\"t\"]] == [[\"x\",\"y\",\"z\"],[\"w\",\"t\"]] then pure () else error \"assertion failed\"\n  if candidate [[\"a\",\"b\"],[\"a\",\"c\"],[\"d\",\"e\"]] == [[\"a\",\"b\",\"c\"],[\"d\",\"e\"]] then pure () else error \"assertion failed\"\n  if candidate [[\"f\",\"g\"],[\"f\",\"g\"],[\"h\",\"i\"]] == [[\"f\",\"g\",\"g\"],[\"h\",\"i\"]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_420_cube_Sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the cube sum of first n even natural numbers.\ncubeSum :: Int -> Int\ncubeSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = cubeSum\n  if candidate 2 == 72 then pure () else error \"assertion failed\"\n  if candidate 3 == 288 then pure () else error \"assertion failed\"\n  if candidate 4 == 800 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_421_concatenate_tuple", "language": "hs", "prompt": "-- | Write a function to concatenate each element of tuple by the delimiter.\nconcatenateTuple :: (String, String, Int, String) -> String\nconcatenateTuple test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = concatenateTuple\n  if candidate (\"ID\", \"is\", 4, \"UTS\") == \"ID-is-4-UTS\" then pure () else error \"assertion failed\"\n  if candidate (\"QWE\", \"is\", 4, \"RTY\") == \"QWE-is-4-RTY\" then pure () else error \"assertion failed\"\n  if candidate (\"ZEN\", \"is\", 4, \"OP\") == \"ZEN-is-4-OP\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "hs", "prompt": "-- | Write a hsthon function to find the average of cubes of first n natural numbers.\nfindAverageOfCube :: Int -> Float\nfindAverageOfCube n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findAverageOfCube\n  if candidate 2 == 4.5 then pure () else error \"assertion failed\"\n  if candidate 3 == 12.0 then pure () else error \"assertion failed\"\n  if candidate 1 == 1.0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_424_extract_rear", "language": "hs", "prompt": "-- | Write a function to extract only the rear index element of each string in the given tuple.\nextractRear :: (String, String, String) -> [String]\nextractRear test_tuple =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = extractRear\n  if candidate (\"Mers\", \"for\", \"Vers\") == [\"s\",\"r\",\"s\"] then pure () else error \"assertion failed\"\n  if candidate (\"Avenge\", \"for\", \"People\") == [\"e\",\"r\",\"e\"] then pure () else error \"assertion failed\"\n  if candidate (\"Gotta\", \"get\", \"go\") == [\"a\",\"t\",\"o\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "hs", "prompt": "-- | Write a function to filter odd numbers.\nfilterOddnumbers :: [Int] -> [Int]\nfilterOddnumbers nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = filterOddnumbers\n  if candidate [1,2,3,4,5,6,7,8,9,10] == [1,3,5,7,9] then pure () else error \"assertion failed\"\n  if candidate [10,20,45,67,84,93] == [45,67,93] then pure () else error \"assertion failed\"\n  if candidate [5,7,9,8,6,4,3] == [5,7,9,3] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_427_change_date_format", "language": "hs", "prompt": "-- | Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nchangeDateFormat :: String -> String\nchangeDateFormat dt =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = changeDateFormat\n  if candidate \"2026-01-02\" == \"02-01-2026\" then pure () else error \"assertion failed\"\n  if candidate \"2020-11-13\" == \"13-11-2020\" then pure () else error \"assertion failed\"\n  if candidate \"2021-04-26\" == \"26-04-2021\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_428_shell_sort", "language": "hs", "prompt": "-- | Write a function to sort the given list by using shell sort.\nshellSort :: [Int] -> [Int]\nshellSort my_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = shellSort\n  if candidate [12,23,4,5,3,2,12,81,56,95] == [2,3,4,5,12,12,23,56,81,95] then pure () else error \"assertion failed\"\n  if candidate [24,22,39,34,87,73,68] == [22,24,34,39,68,73,87] then pure () else error \"assertion failed\"\n  if candidate [32,30,16,96,82,83,74] == [16,30,32,74,82,83,96] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_429_and_tuples", "language": "hs", "prompt": "-- | Write a function to extract the elementwise and tuples from the given two tuples.\nandTuples :: (Int, Int, Int, Int) -> (Int, Int, Int, Int) -> (Int, Int, Int, Int)\nandTuples test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = andTuples\n  if candidate (10, 4, 6, 9) (5, 2, 3, 3) == (0, 0, 2, 1) then pure () else error \"assertion failed\"\n  if candidate (1, 2, 3, 4) (5, 6, 7, 8) == (1, 2, 3, 0) then pure () else error \"assertion failed\"\n  if candidate (8, 9, 11, 12) (7, 13, 14, 17) == (0, 9, 10, 0) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_430_parabola_directrix", "language": "hs", "prompt": "-- | Write a function to find the directrix of a parabola.\nparabolaDirectrix :: Int -> Int -> Int -> Int\nparabolaDirectrix a b c =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = parabolaDirectrix\n  if candidate 5 3 2 == (-198) then pure () else error \"assertion failed\"\n  if candidate 9 8 4 == (-2336) then pure () else error \"assertion failed\"\n  if candidate 2 4 6 == (-130) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_432_median_trapezium", "language": "hs", "prompt": "-- | Write a function to find the median length of a trapezium.\nmedianTrapezium :: Int -> Int -> Int -> Float\nmedianTrapezium base1 base2 height =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = medianTrapezium\n  if candidate 15 25 35 == 20.0 then pure () else error \"assertion failed\"\n  if candidate 10 20 30 == 15.0 then pure () else error \"assertion failed\"\n  if candidate 6 9 4 == 7.5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_433_check_greater", "language": "hs", "prompt": "-- | Write a function to check whether the entered number is greater than the elements of the given list.\ncheckGreater :: [Int] -> Int -> Bool\ncheckGreater arr number =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_433_check_greater.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkGreater\n  if candidate [1,2,3,4,5] 4 == False then pure () else error \"assertion failed\"\n  if candidate [2,3,4,5,6] 8 == True then pure () else error \"assertion failed\"\n  if candidate [9,7,4,8,6,1] 11 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_434_text_match_one", "language": "hs", "prompt": "-- | Write a function that matches a string that has an a followed by one or more b's.\ntextMatchOne :: String -> Bool\ntextMatchOne text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textMatchOne\n  if candidate \"ac\" == False then pure () else error \"assertion failed\"\n  if candidate \"dc\" == False then pure () else error \"assertion failed\"\n  if candidate \"abba\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_435_last_Digit", "language": "hs", "prompt": "-- | Write a hsthon function to find the last digit of a given number.\nlastDigit :: Int -> Int\nlastDigit n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lastDigit\n  if candidate 123 == 3 then pure () else error \"assertion failed\"\n  if candidate 25 == 5 then pure () else error \"assertion failed\"\n  if candidate 30 == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_436_neg_nos", "language": "hs", "prompt": "-- | Write a hsthon function to return the negative numbers in a list.\nnegNos :: [Int] -> [Int]\nnegNos list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = negNos\n  if candidate [(-1),4,5,(-6)] == [(-1),(-6)] then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),3,4] == [(-1),(-2)] then pure () else error \"assertion failed\"\n  if candidate [(-7),(-6),8,9] == [(-7),(-6)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_437_remove_odd", "language": "hs", "prompt": "-- | Write a function to remove odd characters in a string.\nremoveOdd :: String -> String\nremoveOdd str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeOdd\n  if candidate \"python\" == \"yhn\" then pure () else error \"assertion failed\"\n  if candidate \"program\" == \"rga\" then pure () else error \"assertion failed\"\n  if candidate \"language\" == \"agae\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_438_count_bidirectional", "language": "hs", "prompt": "-- | Write a function to count bidirectional tuple pairs.\ncountBidirectional :: [(Int, Int)] -> Int\ncountBidirectional test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countBidirectional\n  if candidate [(5, 6),(1, 2),(6, 5),(9, 1),(6, 5),(2, 1)] == 3 then pure () else error \"assertion failed\"\n  if candidate [(5, 6),(1, 3),(6, 5),(9, 1),(6, 5),(2, 1)] == 2 then pure () else error \"assertion failed\"\n  if candidate [(5, 6),(1, 2),(6, 5),(9, 2),(6, 5),(2, 1)] == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_439_multiple_to_single", "language": "hs", "prompt": "-- | Write a function to join a list of multiple integers into a single integer.\nmultipleToSingle :: [Int] -> Int\nmultipleToSingle L =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = multipleToSingle\n  if candidate [11,33,50] == 113350 then pure () else error \"assertion failed\"\n  if candidate [(-1),2,3,4,5,6] == (-123456) then pure () else error \"assertion failed\"\n  if candidate [10,15,20,25] == 10152025 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_440_find_adverb_position", "language": "hs", "prompt": "-- | Write a function to find the first adverb and their positions in a given sentence.\nfindAdverbPosition :: String -> (Int, Int, String)\nfindAdverbPosition text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findAdverbPosition\n  if candidate \"clearly!! we can see the sky\" == (0, 7, \"clearly\") then pure () else error \"assertion failed\"\n  if candidate \"seriously!! there are many roses\" == (0, 9, \"seriously\") then pure () else error \"assertion failed\"\n  if candidate \"unfortunately!! sita is going to home\" == (0, 13, \"unfortunately\") then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_441_surfacearea_cube", "language": "hs", "prompt": "-- | Write a function to find the surface area of a cube of a given size.\nsurfaceareaCube :: Int -> Int\nsurfaceareaCube l =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = surfaceareaCube\n  if candidate 5 == 150 then pure () else error \"assertion failed\"\n  if candidate 3 == 54 then pure () else error \"assertion failed\"\n  if candidate 10 == 600 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_442_positive_count", "language": "hs", "prompt": "-- | Write a function to find the ration of positive numbers in a list of integers.\npositiveCount :: [Int] -> Float\npositiveCount nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_442_positive_count.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = positiveCount\n  if candidate [0,1,2,(-1),(-5),6,0,(-3),(-2),3,4,6,8] == 0.54 then pure () else error \"assertion failed\"\n  if candidate [2,1,2,(-1),(-5),6,4,(-3),(-2),3,4,6,8] == 0.69 then pure () else error \"assertion failed\"\n  if candidate [2,4,(-6),(-9),11,(-12),14,(-5),17] == 0.56 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_443_largest_neg", "language": "hs", "prompt": "-- | Write a hsthon function to find the largest negative number from the given list.\nlargestNeg :: [Int] -> Int\nlargestNeg list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = largestNeg\n  if candidate [1,2,3,(-4),(-6)] == (-6) then pure () else error \"assertion failed\"\n  if candidate [1,2,3,(-8),(-9)] == (-9) then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,(-1)] == (-1) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_444_trim_tuple", "language": "hs", "prompt": "-- | Write a function to trim each list by k in the given lists.\ntrimTuple :: [[Int]] -> Int -> [[Int]]\ntrimTuple test_list K =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = trimTuple\n  if candidate [[5,3,2,1,4],[3,4,9,2,1],[9,1,2,3,5],[4,8,2,1,7]] 2 == [[2],[9],[2],[2]] then pure () else error \"assertion failed\"\n  if candidate [[5,3,2,1,4],[3,4,9,2,1],[9,1,2,3,5],[4,8,2,1,7]] 1 == [[3,2,1],[4,9,2],[1,2,3],[8,2,1]] then pure () else error \"assertion failed\"\n  if candidate [[7,8,4,9],[11,8,12,4],[4,1,7,8],[3,6,9,7]] 1 == [[8,4],[8,12],[1,7],[6,9]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_445_index_multiplication", "language": "hs", "prompt": "-- | Write a function to perform index wise multiplication of list elements in the given two lists.\nindexMultiplication :: [[Int]] -> [[Int]] -> [[Int]]\nindexMultiplication test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = indexMultiplication\n  if candidate [[1,3],[4,5],[2,9],[1,10]] [[6,7],[3,9],[1,1],[7,3]] == [[6,21],[12,45],[2,9],[7,30]] then pure () else error \"assertion failed\"\n  if candidate [[2,4],[5,6],[3,10],[2,11]] [[7,8],[4,10],[2,2],[8,4]] == [[14,32],[20,60],[6,20],[16,44]] then pure () else error \"assertion failed\"\n  if candidate [[3,5],[6,7],[4,11],[3,12]] [[8,9],[5,11],[3,3],[9,5]] == [[24,45],[30,77],[12,33],[27,60]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_447_cube_nums", "language": "hs", "prompt": "-- | Write a function to find cubes of individual elements in a list.\ncubeNums :: [Int] -> [Int]\ncubeNums nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = cubeNums\n  if candidate [1,2,3,4,5,6,7,8,9,10] == [1,8,27,64,125,216,343,512,729,1000] then pure () else error \"assertion failed\"\n  if candidate [10,20,30] == [1000,8000,27000] then pure () else error \"assertion failed\"\n  if candidate [12,15] == [1728,3375] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_448_cal_sum", "language": "hs", "prompt": "-- | Write a function to calculate the sum of perrin numbers.\ncalSum :: Int -> Int\ncalSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = calSum\n  if candidate 9 == 49 then pure () else error \"assertion failed\"\n  if candidate 10 == 66 then pure () else error \"assertion failed\"\n  if candidate 11 == 88 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_450_extract_string", "language": "hs", "prompt": "-- | Write a function to extract specified size of strings from a given list of string values.\nextractString :: [String] -> Int -> [String]\nextractString str l =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_450_extract_string.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = extractString\n  if candidate [\"Python\",\"list\",\"exercises\",\"practice\",\"solution\"] 8 == [\"practice\",\"solution\"] then pure () else error \"assertion failed\"\n  if candidate [\"Python\",\"list\",\"exercises\",\"practice\",\"solution\"] 6 == [\"Python\"] then pure () else error \"assertion failed\"\n  if candidate [\"Python\",\"list\",\"exercises\",\"practice\",\"solution\"] 9 == [\"exercises\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_451_remove_whitespaces", "language": "hs", "prompt": "-- | Write a function to remove all whitespaces from the given string.\nremoveWhitespaces :: String -> String\nremoveWhitespaces text1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeWhitespaces\n  if candidate \" Google    Flutter \" == \"GoogleFlutter\" then pure () else error \"assertion failed\"\n  if candidate \" Google    Dart \" == \"GoogleDart\" then pure () else error \"assertion failed\"\n  if candidate \" iOS    Swift \" == \"iOSSwift\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_452_loss_amount", "language": "hs", "prompt": "-- | Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nlossAmount :: Int -> Int -> Int\nlossAmount actual_cost sale_amount =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lossAmount\n  if candidate 1500 1200 == 0 then pure () else error \"assertion failed\"\n  if candidate 100 200 == 100 then pure () else error \"assertion failed\"\n  if candidate 2000 5000 == 3000 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_453_sumofFactors", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of even factors of a number.\nsumoffactors :: Int -> Int\nsumoffactors n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumoffactors\n  if candidate 18 == 26 then pure () else error \"assertion failed\"\n  if candidate 30 == 48 then pure () else error \"assertion failed\"\n  if candidate 6 == 8 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_454_text_match_wordz", "language": "hs", "prompt": "-- | Write a function that matches a word containing 'z'.\ntextMatchWordz :: String -> Bool\ntextMatchWordz text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textMatchWordz\n  if candidate \"pythonz.\" == True then pure () else error \"assertion failed\"\n  if candidate \"xyz.\" == True then pure () else error \"assertion failed\"\n  if candidate \"  lang  .\" == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "hs", "prompt": "-- | Write a function to check whether the given month number contains 31 days or not.\ncheckMonthnumbNumber :: Int -> Bool\ncheckMonthnumbNumber monthnum2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkMonthnumbNumber\n  if candidate 5 == True then pure () else error \"assertion failed\"\n  if candidate 2 == False then pure () else error \"assertion failed\"\n  if candidate 6 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_456_reverse_string_list", "language": "hs", "prompt": "-- | Write a function to reverse each string in a given list of string values.\nreverseStringList :: [String] -> [String]\nreverseStringList stringlist =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = reverseStringList\n  if candidate [\"Red\",\"Green\",\"Blue\",\"White\",\"Black\"] == [\"deR\",\"neerG\",\"eulB\",\"etihW\",\"kcalB\"] then pure () else error \"assertion failed\"\n  if candidate [\"john\",\"amal\",\"joel\",\"george\"] == [\"nhoj\",\"lama\",\"leoj\",\"egroeg\"] then pure () else error \"assertion failed\"\n  if candidate [\"jack\",\"john\",\"mary\"] == [\"kcaj\",\"nhoj\",\"yram\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_458_rectangle_area", "language": "hs", "prompt": "-- | Write a function to find the area of a rectangle.\nrectangleArea :: Int -> Int -> Int\nrectangleArea l b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = rectangleArea\n  if candidate 10 20 == 200 then pure () else error \"assertion failed\"\n  if candidate 10 5 == 50 then pure () else error \"assertion failed\"\n  if candidate 4 2 == 8 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_459_remove_uppercase", "language": "hs", "prompt": "-- | Write a function to remove uppercase substrings from a given string.\nremoveUppercase :: String -> String\nremoveUppercase str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeUppercase\n  if candidate \"cAstyoUrFavoRitETVshoWs\" == \"cstyoravoitshos\" then pure () else error \"assertion failed\"\n  if candidate \"wAtchTheinTernEtrAdIo\" == \"wtchheinerntrdo\" then pure () else error \"assertion failed\"\n  if candidate \"VoicESeaRchAndreComMendaTionS\" == \"oiceachndreomendaion\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_460_Extract", "language": "hs", "prompt": "-- | Write a hsthon function to get the first element of each sublist.\nextract :: [[Int]] -> [Int]\nextract lst =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_460_Extract.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = extract\n  if candidate [[1,2],[3,4,5],[6,7,8,9]] == [1,3,6] then pure () else error \"assertion failed\"\n  if candidate [[1,2,3],[4,5]] == [1,4] then pure () else error \"assertion failed\"\n  if candidate [[9,8,1],[1,2]] == [9,1] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_461_upper_ctr", "language": "hs", "prompt": "-- | Write a hsthon function to count the upper case characters in a given string.\nupperCtr :: String -> Int\nupperCtr str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = upperCtr\n  if candidate \"PYthon\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"BigData\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"program\" == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_463_max_subarray_product", "language": "hs", "prompt": "-- | Write a function to find the maximum product sublist of the given list.\nmaxSubarrayProduct :: [Int] -> Int\nmaxSubarrayProduct arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxSubarrayProduct\n  if candidate [1,(-2),(-3),0,7,(-8),(-2)] == 112 then pure () else error \"assertion failed\"\n  if candidate [6,(-3),(-10),0,2] == 180 then pure () else error \"assertion failed\"\n  if candidate [(-2),(-40),0,(-2),(-3)] == 80 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_464_check_value", "language": "hs", "prompt": "-- | Write a function to check if all values are same in an association list.\ncheckValue :: [(String, Int)] -> Int -> Bool\ncheckValue dict n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_464_check_value.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkValue\n  if candidate [(\"Cierra Vega\", 12), (\"Alden Cantrell\", 12), (\"Kierra Gentry\", 12), (\"Pierre Cox\", 12)] 10 == False then pure () else error \"assertion failed\"\n  if candidate [(\"Cierra Vega\", 12), (\"Alden Cantrell\", 12), (\"Kierra Gentry\", 12), (\"Pierre Cox\", 12)] 12 == True then pure () else error \"assertion failed\"\n  if candidate [(\"Cierra Vega\", 12), (\"Alden Cantrell\", 12), (\"Kierra Gentry\", 12), (\"Pierre Cox\", 12)] 5 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_468_max_product", "language": "hs", "prompt": "-- | Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\nmaxProduct :: [Int] -> Int\nmaxProduct arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_468_max_product.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxProduct\n  if candidate [3,100,4,5,150,6] == 3000 then pure () else error \"assertion failed\"\n  if candidate [4,42,55,68,80] == 50265600 then pure () else error \"assertion failed\"\n  if candidate [10,22,9,33,21,50,41,60] == 2460 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_470_add_pairwise", "language": "hs", "prompt": "-- | Write a function to find the pairwise addition of the neighboring elements of the given tuple.\naddPairwise :: (Int, Int, Int, Int, Int) -> (Int, Int, Int, Int)\naddPairwise test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = addPairwise\n  if candidate (1, 5, 7, 8, 10) == (6, 12, 15, 18) then pure () else error \"assertion failed\"\n  if candidate (2, 6, 8, 9, 11) == (8, 14, 17, 20) then pure () else error \"assertion failed\"\n  if candidate (3, 7, 9, 10, 12) == (10, 16, 19, 22) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_471_find_remainder", "language": "hs", "prompt": "-- | Write a hsthon function to find the product of the list multiplication modulo n.\nfindRemainder :: [Int] -> Int -> Int\nfindRemainder arr n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findRemainder\n  if candidate [100,10,5,25,35,14] 11 == 9 then pure () else error \"assertion failed\"\n  if candidate [1,1,1] 1 == 0 then pure () else error \"assertion failed\"\n  if candidate [1,2,1] 2 == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_472_check_Consecutive", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the given list contains consecutive numbers or not.\ncheckConsecutive :: [Int] -> Bool\ncheckConsecutive l =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkConsecutive\n  if candidate [1,2,3,4,5] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,5,6] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,1] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_474_replace_char", "language": "hs", "prompt": "-- | Write a function to replace characters in a string.\nreplaceChar :: String -> String -> String -> String\nreplaceChar str1 ch newch =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_474_replace_char.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = replaceChar\n  if candidate \"polygon\" \"y\" \"l\" == \"pollgon\" then pure () else error \"assertion failed\"\n  if candidate \"character\" \"c\" \"a\" == \"aharaater\" then pure () else error \"assertion failed\"\n  if candidate \"python\" \"l\" \"a\" == \"python\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_475_sort_counter", "language": "hs", "prompt": "-- | Write a function to sort an association list by value.\nsortCounter :: [(String, Int)] -> [(String, Int)]\nsortCounter dict1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sortCounter\n  if candidate [(\"Math\", 81), (\"Physics\", 83), (\"Chemistry\", 87)] == [(\"Chemistry\", 87),(\"Physics\", 83),(\"Math\", 81)] then pure () else error \"assertion failed\"\n  if candidate [(\"Math\", 400), (\"Physics\", 300), (\"Chemistry\", 250)] == [(\"Math\", 400),(\"Physics\", 300),(\"Chemistry\", 250)] then pure () else error \"assertion failed\"\n  if candidate [(\"Math\", 900), (\"Physics\", 1000), (\"Chemistry\", 1250)] == [(\"Chemistry\", 1250),(\"Physics\", 1000),(\"Math\", 900)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_476_big_sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of the largest and smallest value in a given list.\nbigSum :: [Int] -> Int\nbigSum nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_476_big_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = bigSum\n  if candidate [1,2,3] == 4 then pure () else error \"assertion failed\"\n  if candidate [(-1),2,3,4] == 3 then pure () else error \"assertion failed\"\n  if candidate [2,3,6] == 8 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_477_is_lower", "language": "hs", "prompt": "-- | Write a hsthon function to convert the given string to lower case.\nisLower :: String -> String\nisLower string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_477_is_lower.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isLower\n  if candidate \"InValid\" == \"invalid\" then pure () else error \"assertion failed\"\n  if candidate \"TruE\" == \"true\" then pure () else error \"assertion failed\"\n  if candidate \"SenTenCE\" == \"sentence\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_478_remove_lowercase", "language": "hs", "prompt": "-- | Write a function to remove lowercase substrings from a given string.\nremoveLowercase :: String -> String\nremoveLowercase str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeLowercase\n  if candidate \"PYTHon\" == \"PYTH\" then pure () else error \"assertion failed\"\n  if candidate \"FInD\" == \"FID\" then pure () else error \"assertion failed\"\n  if candidate \"STRinG\" == \"STRG\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_479_first_Digit", "language": "hs", "prompt": "-- | Write a hsthon function to find the first digit of a given number.\nfirstDigit :: Int -> Int\nfirstDigit n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = firstDigit\n  if candidate 123 == 1 then pure () else error \"assertion failed\"\n  if candidate 456 == 4 then pure () else error \"assertion failed\"\n  if candidate 12 == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_4_heap_queue_largest", "language": "hs", "prompt": "-- | Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nheapQueueLargest :: [Int] -> Int -> [Int]\nheapQueueLargest nums n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = heapQueueLargest\n  if candidate [25,35,22,85,14,65,75,22,58] 3 == [85,75,65] then pure () else error \"assertion failed\"\n  if candidate [25,35,22,85,14,65,75,22,58] 2 == [85,75] then pure () else error \"assertion failed\"\n  if candidate [25,35,22,85,14,65,75,22,58] 5 == [85,75,65,58,35] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_554_Split", "language": "hs", "prompt": "-- | Write a hsthon function which takes a list of integers and only returns the odd ones.\nsplit :: [Int] -> [Int]\nsplit list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_554_Split.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = split\n  if candidate [1,2,3,4,5,6] == [1,3,5] then pure () else error \"assertion failed\"\n  if candidate [10,11,12,13] == [11,13] then pure () else error \"assertion failed\"\n  if candidate [7,8,9,1] == [7,9,1] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_555_difference", "language": "hs", "prompt": "-- | Write a hsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndifference :: Int -> Int\ndifference n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_555_difference.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = difference\n  if candidate 3 == 30 then pure () else error \"assertion failed\"\n  if candidate 5 == 210 then pure () else error \"assertion failed\"\n  if candidate 2 == 6 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of pairs whose xor value is odd.\nfindOddPair :: [Int] -> Int -> Int\nfindOddPair A N =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findOddPair\n  if candidate [5,4,7,2,1] 5 == 6 then pure () else error \"assertion failed\"\n  if candidate [7,2,8,1,0,5,11] 7 == 12 then pure () else error \"assertion failed\"\n  if candidate [1,2,3] 3 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_557_toggle_string", "language": "hs", "prompt": "-- | Write a function to toggle the case of all characters in a string.\ntoggleString :: String -> String\ntoggleString string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = toggleString\n  if candidate \"Python\" == \"pYTHON\" then pure () else error \"assertion failed\"\n  if candidate \"Pangram\" == \"pANGRAM\" then pure () else error \"assertion failed\"\n  if candidate \"LIttLE\" == \"liTTle\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_558_digit_distance_nums", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of the per-digit difference between two integers.\ndigitDistanceNums :: Int -> Int -> Int\ndigitDistanceNums n1 n2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = digitDistanceNums\n  if candidate 1 2 == 1 then pure () else error \"assertion failed\"\n  if candidate 23 56 == 6 then pure () else error \"assertion failed\"\n  if candidate 123 256 == 7 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "hs", "prompt": "-- | Write a function to find the sum of the largest contiguous sublist in the given list.\nmaxSubArraySum :: [Int] -> Int -> Int\nmaxSubArraySum a size =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxSubArraySum\n  if candidate [(-2),(-3),4,(-1),(-2),1,5,(-3)] 8 == 7 then pure () else error \"assertion failed\"\n  if candidate [(-3),(-4),5,(-2),(-3),2,6,(-4)] 8 == 8 then pure () else error \"assertion failed\"\n  if candidate [(-4),(-5),6,(-3),(-4),3,7,(-5)] 8 == 10 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_560_union_elements", "language": "hs", "prompt": "-- | Write a function to find the union of the elements of two given lists and output them in sorted order.\nunionElements :: [Int] -> [Int] -> [Int]\nunionElements test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_560_union_elements.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = unionElements\n  if candidate [3,4,5,6] [5,7,4,10] == [3,4,5,6,7,10] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] [3,4,5,6] == [1,2,3,4,5,6] then pure () else error \"assertion failed\"\n  if candidate [11,12,13,14] [13,15,16,17] == [11,12,13,14,15,16,17] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_562_Find_Max_Length", "language": "hs", "prompt": "-- | Write a hsthon function to find the length of the longest sublists.\nfindMaxLength :: [[Int]] -> Int\nfindMaxLength lst =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findMaxLength\n  if candidate [[1],[1,4],[5,6,7,8]] == 4 then pure () else error \"assertion failed\"\n  if candidate [[0,1],[2,2],[3,2,1]] == 3 then pure () else error \"assertion failed\"\n  if candidate [[7],[22,23],[13,14,15],[10,20,30,40,50]] == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_563_extract_values", "language": "hs", "prompt": "-- | Write a function to extract values between quotation marks from a string.\nextractValues :: String -> [String]\nextractValues text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_563_extract_values.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = extractValues\n  if candidate \"\"Python\", \"PHP\", \"Java\"\" == [\"Python\",\"PHP\",\"Java\"] then pure () else error \"assertion failed\"\n  if candidate \"\"python\",\"program\",\"language\"\" == [\"python\",\"program\",\"language\"] then pure () else error \"assertion failed\"\n  if candidate \"\"red\",\"blue\",\"green\",\"yellow\"\" == [\"red\",\"blue\",\"green\",\"yellow\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_564_count_Pairs", "language": "hs", "prompt": "-- | Write a hsthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ncountPairs :: [Int] -> Int -> Int\ncountPairs arr n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countPairs\n  if candidate [1,2,1] 3 == 2 then pure () else error \"assertion failed\"\n  if candidate [1,1,1,1] 4 == 0 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] 5 == 10 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_565_split", "language": "hs", "prompt": "-- | Write a hsthon function to split a string into characters.\nsplit :: String -> [String]\nsplit word =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_565_split.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = split\n  if candidate \"python\" == [\"p\",\"y\",\"t\",\"h\",\"o\",\"n\"] then pure () else error \"assertion failed\"\n  if candidate \"Name\" == [\"N\",\"a\",\"m\",\"e\"] then pure () else error \"assertion failed\"\n  if candidate \"program\" == [\"p\",\"r\",\"o\",\"g\",\"r\",\"a\",\"m\"] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_566_sum_digits", "language": "hs", "prompt": "-- | Write a function to get the sum of the digits of a non-negative integer.\nsumDigits :: Int -> Int\nsumDigits n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumDigits\n  if candidate 345 == 12 then pure () else error \"assertion failed\"\n  if candidate 12 == 3 then pure () else error \"assertion failed\"\n  if candidate 97 == 16 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_567_issort_list", "language": "hs", "prompt": "-- | Write a function to check whether a specified list is sorted or not.\nissortList :: [Int] -> Bool\nissortList list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_567_issort_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = issortList\n  if candidate [1,2,4,6,8,10,12,14,16,17] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,4,6,8,10,12,14,20,17] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,4,6,8,10,15,14,20] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_569_sort_sublists", "language": "hs", "prompt": "-- | Write a function to sort each sublist of strings in a given list of lists.\nsortSublists :: [[String]] -> [[String]]\nsortSublists list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sortSublists\n  if candidate [[\"green\",\"orange\"],[\"black\",\"white\"],[\"white\",\"black\",\"orange\"]] == [[\"green\",\"orange\"],[\"black\",\"white\"],[\"black\",\"orange\",\"white\"]] then pure () else error \"assertion failed\"\n  if candidate [[\"green\",\"orange\"],[\"black\"],[\"green\",\"orange\"],[\"white\"]] == [[\"green\",\"orange\"],[\"black\"],[\"green\",\"orange\"],[\"white\"]] then pure () else error \"assertion failed\"\n  if candidate [[\"a\",\"b\"],[\"d\",\"c\"],[\"g\",\"h\"],[\"f\",\"e\"]] == [[\"a\",\"b\"],[\"c\",\"d\"],[\"g\",\"h\"],[\"e\",\"f\"]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_56_checks", "language": "hs", "prompt": "-- | Write a hsthon function to check if a given number is one less than twice its reverse.\nchecks :: Int -> Bool\nchecks n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_56_checks.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checks\n  if candidate 70 == False then pure () else error \"assertion failed\"\n  if candidate 23 == False then pure () else error \"assertion failed\"\n  if candidate 73 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_572_two_unique_nums", "language": "hs", "prompt": "-- | Write a hsthon function to remove duplicate numbers from a given number of lists.\ntwoUniqueNums :: [Int] -> [Int]\ntwoUniqueNums nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = twoUniqueNums\n  if candidate [1,2,3,2,3,4,5] == [1,4,5] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,2,4,5] == [1,3,4,5] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] == [1,2,3,4,5] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_573_unique_product", "language": "hs", "prompt": "-- | Write a hsthon function to calculate the product of the unique numbers in a given list.\nuniqueProduct :: [Int] -> Int\nuniqueProduct list_data =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_573_unique_product.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = uniqueProduct\n  if candidate [10,20,30,40,20,50,60,40] == 720000000 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,1] == 6 then pure () else error \"assertion failed\"\n  if candidate [7,8,9,0,1,1] == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "hs", "prompt": "-- | Write a function to find the surface area of a cylinder.\nsurfaceareaCylinder :: Int -> Int -> Float\nsurfaceareaCylinder r h =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = surfaceareaCylinder\n  if candidate 10 5 == 942.45 then pure () else error \"assertion failed\"\n  if candidate 4 5 == 226.18800000000002 then pure () else error \"assertion failed\"\n  if candidate 4 10 == 351.848 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_576_is_Sub_Array", "language": "hs", "prompt": "-- | Write a hsthon function to check whether a list is sublist of another or not.\nisSubArray :: [Int] -> [Int] -> Bool\nisSubArray A B =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isSubArray\n  if candidate [1,4,3,5] [1,2] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,1] [1,2,1] == True then pure () else error \"assertion failed\"\n  if candidate [1,0,2,2] [2,2,0] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "hs", "prompt": "-- | Write a hsthon function to find the last digit in factorial of a given number.\nlastDigitFactorial :: Int -> Int\nlastDigitFactorial n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lastDigitFactorial\n  if candidate 4 == 4 then pure () else error \"assertion failed\"\n  if candidate 21 == 0 then pure () else error \"assertion failed\"\n  if candidate 30 == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_578_interleave_lists", "language": "hs", "prompt": "-- | Write a function to interleave 3 lists of the same length into a single flat list.\ninterleaveLists :: [Int] -> [Int] -> [Int] -> [Int]\ninterleaveLists list1 list2 list3 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = interleaveLists\n  if candidate [1,2,3,4,5,6,7] [10,20,30,40,50,60,70] [100,200,300,400,500,600,700] == [1,10,100,2,20,200,3,30,300,4,40,400,5,50,500,6,60,600,7,70,700] then pure () else error \"assertion failed\"\n  if candidate [10,20] [15,2] [5,10] == [10,15,5,20,2,10] then pure () else error \"assertion failed\"\n  if candidate [11,44] [10,15] [20,5] == [11,10,20,44,15,5] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_579_find_dissimilar", "language": "hs", "prompt": "-- | Write a function to find the dissimilar elements in the given two tuples.\nfindDissimilar :: (Int, Int, Int, Int) -> (Int, Int, Int, Int) -> (Int, Int, Int, Int)\nfindDissimilar test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findDissimilar\n  if candidate (3, 4, 5, 6) (5, 7, 4, 10) == (3, 6, 7, 10) then pure () else error \"assertion failed\"\n  if candidate (1, 2, 3, 4) (7, 2, 3, 9) == (1, 4, 7, 9) then pure () else error \"assertion failed\"\n  if candidate (21, 11, 25, 26) (26, 34, 21, 36) == (34, 36, 11, 25) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_57_find_Max_Num", "language": "hs", "prompt": "-- | Write a hsthon function to find the largest number that can be formed with the given list of digits.\nfindMaxNum :: [Int] -> Int\nfindMaxNum arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findMaxNum\n  if candidate [1,2,3] == 321 then pure () else error \"assertion failed\"\n  if candidate [4,5,6,1] == 6541 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,9] == 9321 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_581_surface_Area", "language": "hs", "prompt": "-- | Write a hsthon function to find the surface area of a square hsramid with a given base edge and height.\nsurfaceArea :: Int -> Int -> Int\nsurfaceArea b s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = surfaceArea\n  if candidate 3 4 == 33 then pure () else error \"assertion failed\"\n  if candidate 4 5 == 56 then pure () else error \"assertion failed\"\n  if candidate 1 2 == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_583_catalan_number", "language": "hs", "prompt": "-- | Write a function which returns nth catalan number.\ncatalanNumber :: Int -> Int\ncatalanNumber num =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = catalanNumber\n  if candidate 10 == 16796 then pure () else error \"assertion failed\"\n  if candidate 9 == 4862 then pure () else error \"assertion failed\"\n  if candidate 7 == 429 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_584_find_adverbs", "language": "hs", "prompt": "-- | Write a function to find the first adverb ending with ly and its positions in a given string.\nfindAdverbs :: String -> String\nfindAdverbs text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findAdverbs\n  if candidate \"Clearly, he has no excuse for such behavior.\" == \"0-7: Clearly\" then pure () else error \"assertion failed\"\n  if candidate \"Please handle the situation carefuly\" == \"28-36: carefuly\" then pure () else error \"assertion failed\"\n  if candidate \"Complete the task quickly\" == \"18-25: quickly\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_586_split_Arr", "language": "hs", "prompt": "-- | Write a hsthon function to split a list at the nth eelment and add the first part to the end.\nsplitArr :: [Int] -> Int -> [Int]\nsplitArr l n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = splitArr\n  if candidate [12,10,5,6,52,36] 2 == [5,6,52,36,12,10] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] 1 == [2,3,4,1] then pure () else error \"assertion failed\"\n  if candidate [0,1,2,3,4,5,6,7] 3 == [3,4,5,6,7,0,1,2] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_588_big_diff", "language": "hs", "prompt": "-- | Write a hsthon function to find the difference between largest and smallest value in a given list.\nbigDiff :: [Int] -> Int\nbigDiff nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_588_big_diff.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = bigDiff\n  if candidate [1,2,3,4] == 3 then pure () else error \"assertion failed\"\n  if candidate [4,5,12] == 8 then pure () else error \"assertion failed\"\n  if candidate [9,2,3] == 7 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_589_perfect_squares", "language": "hs", "prompt": "-- | Write a function to find perfect squares between two given numbers.\nperfectSquares :: Int -> Int -> [Int]\nperfectSquares a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = perfectSquares\n  if candidate 1 30 == [1,4,9,16,25] then pure () else error \"assertion failed\"\n  if candidate 50 100 == [64,81,100] then pure () else error \"assertion failed\"\n  if candidate 100 200 == [100,121,144,169,196] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_58_opposite_Signs", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the given two integers have opposite sign or not.\noppositeSigns :: Int -> Int -> Bool\noppositeSigns x y =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = oppositeSigns\n  if candidate 1 (-2) == True then pure () else error \"assertion failed\"\n  if candidate 3 2 == False then pure () else error \"assertion failed\"\n  if candidate (-10) (-10) == False then pure () else error \"assertion failed\"\n  if candidate (-2) 2 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_591_swap_List", "language": "hs", "prompt": "-- | Write a hsthon function to interchange the first and last elements in a list.\nswapList :: [Int] -> [Int]\nswapList newList =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_591_swap_List.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = swapList\n  if candidate [12,35,9,56,24] == [24,35,9,56,12] then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == [3,2,1] then pure () else error \"assertion failed\"\n  if candidate [4,5,6] == [6,5,4] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_592_sum_Of_product", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of the product of consecutive binomial co-efficients.\nsumOfProduct :: Int -> Int\nsumOfProduct n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumOfProduct\n  if candidate 3 == 15 then pure () else error \"assertion failed\"\n  if candidate 4 == 56 then pure () else error \"assertion failed\"\n  if candidate 1 == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_593_removezero_ip", "language": "hs", "prompt": "-- | Write a function to remove leading zeroes from an ip address.\nremovezeroIp :: String -> String\nremovezeroIp ip =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removezeroIp\n  if candidate \"216.08.094.196\" == \"216.8.94.196\" then pure () else error \"assertion failed\"\n  if candidate \"12.01.024\" == \"12.1.24\" then pure () else error \"assertion failed\"\n  if candidate \"216.08.094.0196\" == \"216.8.94.196\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_594_diff_even_odd", "language": "hs", "prompt": "-- | Write a function to find the difference of the first even and first odd number of a given list.\ndiffEvenOdd :: [Int] -> Int\ndiffEvenOdd list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = diffEvenOdd\n  if candidate [1,3,5,7,4,1,6,8] == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,5,7,9,10] == 9 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_597_find_kth", "language": "hs", "prompt": "-- | Write a function to find kth element from the given two sorted lists.\nfindKth :: [Int] -> [Int] -> Int -> Int\nfindKth arr1 arr2 k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_597_find_kth.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findKth\n  if candidate [2,3,6,7,9] [1,4,8,10] 5 == 6 then pure () else error \"assertion failed\"\n  if candidate [100,112,256,349,770] [72,86,113,119,265,445,892] 7 == 256 then pure () else error \"assertion failed\"\n  if candidate [3,4,7,8,10] [2,5,9,11] 6 == 8 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_598_armstrong_number", "language": "hs", "prompt": "-- | Write a function to check whether the given number is armstrong or not.\narmstrongNumber :: Int -> Bool\narmstrongNumber number =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = armstrongNumber\n  if candidate 153 == True then pure () else error \"assertion failed\"\n  if candidate 259 == False then pure () else error \"assertion failed\"\n  if candidate 4458 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_599_sum_average", "language": "hs", "prompt": "-- | Write a function to find sum and average of first n natural numbers.\nsumAverage :: Int -> (Int, Float)\nsumAverage number =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_599_sum_average.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumAverage\n  if candidate 10 == (55, 5.5) then pure () else error \"assertion failed\"\n  if candidate 15 == (120, 8.0) then pure () else error \"assertion failed\"\n  if candidate 20 == (210, 10.5) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_59_is_octagonal", "language": "hs", "prompt": "-- | Write a function to find the nth octagonal number.\nisOctagonal :: Int -> Int\nisOctagonal n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isOctagonal\n  if candidate 5 == 65 then pure () else error \"assertion failed\"\n  if candidate 10 == 280 then pure () else error \"assertion failed\"\n  if candidate 15 == 645 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_600_is_Even", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the given number is even or not.\nisEven :: Int -> Bool\nisEven n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_600_is_Even.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isEven\n  if candidate 1 == False then pure () else error \"assertion failed\"\n  if candidate 2 == True then pure () else error \"assertion failed\"\n  if candidate 3 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_602_first_repeated_char", "language": "hs", "prompt": "-- | Write a hsthon function to find the first repeated character in a given string.\nfirstRepeatedChar :: String -> Maybe String\nfirstRepeatedChar str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = firstRepeatedChar\n  if candidate \"abcabc\" == Just (\"a\") then pure () else error \"assertion failed\"\n  if candidate \"abc\" == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate \"123123\" == Just (\"1\") then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_603_get_ludic", "language": "hs", "prompt": "-- | Write a function to get all lucid numbers smaller than or equal to a given integer.\ngetLudic :: Int -> [Int]\ngetLudic n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getLudic\n  if candidate 10 == [1,2,3,5,7] then pure () else error \"assertion failed\"\n  if candidate 25 == [1,2,3,5,7,11,13,17,23,25] then pure () else error \"assertion failed\"\n  if candidate 45 == [1,2,3,5,7,11,13,17,23,25,29,37,41,43] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_604_reverse_words", "language": "hs", "prompt": "-- | Write a function to reverse words seperated by spaces in a given string.\nreverseWords :: String -> String\nreverseWords s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = reverseWords\n  if candidate \"python program\" == \"program python\" then pure () else error \"assertion failed\"\n  if candidate \"java language\" == \"language java\" then pure () else error \"assertion failed\"\n  if candidate \"indian man\" == \"man indian\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_605_prime_num", "language": "hs", "prompt": "-- | Write a function to check if the given integer is a prime number.\nprimeNum :: Int -> Bool\nprimeNum num =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_605_prime_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = primeNum\n  if candidate 13 == True then pure () else error \"assertion failed\"\n  if candidate 7 == True then pure () else error \"assertion failed\"\n  if candidate (-1010) == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_606_radian_degree", "language": "hs", "prompt": "-- | Write a function to convert degrees to radians.\nradianDegree :: Int -> Float\nradianDegree degree =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = radianDegree\n  if candidate 90 == 1.5707963267948966 then pure () else error \"assertion failed\"\n  if candidate 60 == 1.0471975511965976 then pure () else error \"assertion failed\"\n  if candidate 120 == 2.0943951023931953 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_607_find_literals", "language": "hs", "prompt": "-- | Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfindLiterals :: String -> String -> (String, Int, Int)\nfindLiterals text pattern =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_607_find_literals.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findLiterals\n  if candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\" == (\"fox\", 16, 19) then pure () else error \"assertion failed\"\n  if candidate \"Its been a very crazy procedure right\" \"crazy\" == (\"crazy\", 16, 21) then pure () else error \"assertion failed\"\n  if candidate \"Hardest choices required strongest will\" \"will\" == (\"will\", 35, 39) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_608_bell_Number", "language": "hs", "prompt": "-- | Write a hsthon function to find nth bell number.\nbellNumber :: Int -> Int\nbellNumber n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = bellNumber\n  if candidate 2 == 2 then pure () else error \"assertion failed\"\n  if candidate 3 == 5 then pure () else error \"assertion failed\"\n  if candidate 4 == 15 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_610_remove_kth_element", "language": "hs", "prompt": "-- | Write a hsthon function which takes a list and returns a list with the same elements, but the k'th element removed.\nremoveKthElement :: [Int] -> Int -> [Int]\nremoveKthElement list1 L =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeKthElement\n  if candidate [1,1,2,3,4,4,5,1] 3 == [1,1,3,4,4,5,1] then pure () else error \"assertion failed\"\n  if candidate [0,0,1,2,3,4,4,5,6,6,6,7,8,9,4,4] 4 == [0,0,1,3,4,4,5,6,6,6,7,8,9,4,4] then pure () else error \"assertion failed\"\n  if candidate [10,10,15,19,18,18,17,26,26,17,18,10] 5 == [10,10,15,19,18,17,26,26,17,18,10] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_611_max_of_nth", "language": "hs", "prompt": "-- | Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nmaxOfNth :: [[Int]] -> Int -> Int\nmaxOfNth test_list N =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxOfNth\n  if candidate [[5,6,7],[1,3,5],[8,9,19]] 2 == 19 then pure () else error \"assertion failed\"\n  if candidate [[6,7,8],[2,4,6],[9,10,20]] 1 == 10 then pure () else error \"assertion failed\"\n  if candidate [[7,8,9],[3,5,7],[10,11,21]] 1 == 11 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_614_cummulative_sum", "language": "hs", "prompt": "-- | Write a function to find the cumulative sum of all the values that are present in the given list of lists.\ncummulativeSum :: [[Int]] -> Int\ncummulativeSum test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = cummulativeSum\n  if candidate [[1,3],[5,6,7],[2,6]] == 30 then pure () else error \"assertion failed\"\n  if candidate [[2,4],[6,7,8],[3,7]] == 37 then pure () else error \"assertion failed\"\n  if candidate [[3,5],[7,8,9],[4,8]] == 44 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_615_average_tuple", "language": "hs", "prompt": "-- | Write a function which takes a lists of lists and returns the average value for each sublist as a list.\naverageTuple :: [[Int]] -> [Float]\naverageTuple nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = averageTuple\n  if candidate [[10,10,10,12],[30,45,56,45],[81,80,39,32],[1,2,3,4]] == [30.5,34.25,27.0,23.25] then pure () else error \"assertion failed\"\n  if candidate [[1,1,(-5)],[30,(-15),56],[81,(-60),(-39)],[(-10),2,3]] == [25.5,-18.0,3.75] then pure () else error \"assertion failed\"\n  if candidate [[100,100,100,120],[300,450,560,450],[810,800,390,320],[10,20,30,40]] == [305.0,342.5,270.0,232.5] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_616_tuple_modulo", "language": "hs", "prompt": "-- | Write a function which takes two tuples of the same length and performs the element wise modulo.\ntupleModulo :: (Int, Int, Int, Int) -> (Int, Int, Int, Int) -> (Int, Int, Int, Int)\ntupleModulo test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = tupleModulo\n  if candidate (10, 4, 5, 6) (5, 6, 7, 5) == (0, 4, 5, 1) then pure () else error \"assertion failed\"\n  if candidate (11, 5, 6, 7) (6, 7, 8, 6) == (5, 5, 6, 1) then pure () else error \"assertion failed\"\n  if candidate (12, 6, 7, 8) (7, 8, 9, 7) == (5, 6, 7, 1) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_617_min_Jumps", "language": "hs", "prompt": "-- | Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nminJumps :: (Int, Int) -> Int -> Float\nminJumps steps d =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = minJumps\n  if candidate (3, 4) 11 == 3.5 then pure () else error \"assertion failed\"\n  if candidate (3, 4) 0 == 0.0 then pure () else error \"assertion failed\"\n  if candidate (11, 14) 11 == 1.0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_618_div_list", "language": "hs", "prompt": "-- | Write a function to divide two lists element wise.\ndivList :: [Int] -> [Int] -> [Float]\ndivList nums1 nums2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_618_div_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = divList\n  if candidate [4,5,6] [1,2,3] == [4.0,2.5,2.0] then pure () else error \"assertion failed\"\n  if candidate [3,2] [1,4] == [3.0,0.5] then pure () else error \"assertion failed\"\n  if candidate [90,120] [50,70] == [1.8,1.7142857142857142] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_619_move_num", "language": "hs", "prompt": "-- | Write a function to move all the numbers to the end of the given string.\nmoveNum :: String -> String\nmoveNum test_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_619_move_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = moveNum\n  if candidate \"I1love143you55three3000thousand\" == \"Iloveyouthreethousand1143553000\" then pure () else error \"assertion failed\"\n  if candidate \"Avengers124Assemble\" == \"AvengersAssemble124\" then pure () else error \"assertion failed\"\n  if candidate \"Its11our12path13to14see15things16do17things\" == \"Itsourpathtoseethingsdothings11121314151617\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_61_count_Substrings", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of substrings with the sum of digits equal to their length.\ncountSubstrings :: String -> Int\ncountSubstrings s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countSubstrings\n  if candidate \"112112\" == 6 then pure () else error \"assertion failed\"\n  if candidate \"111\" == 6 then pure () else error \"assertion failed\"\n  if candidate \"1101112\" == 12 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_622_get_median", "language": "hs", "prompt": "-- | Write a function to find the median of two sorted lists of same size.\ngetMedian :: [Int] -> [Int] -> Int -> Float\ngetMedian arr1 arr2 n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_622_get_median.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getMedian\n  if candidate [1,12,15,26,38] [2,13,17,30,45] 5 == 16.0 then pure () else error \"assertion failed\"\n  if candidate [2,4,8,9] [7,13,19,28] 4 == 8.5 then pure () else error \"assertion failed\"\n  if candidate [3,6,14,23,36,42] [2,18,27,39,49,55] 6 == 25.0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_623_nth_nums", "language": "hs", "prompt": "-- | Write a function to compute the n-th power of each number in a list.\nnthNums :: [Int] -> Int -> [Int]\nnthNums nums n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = nthNums\n  if candidate [1,2,3,4,5,6,7,8,9,10] 2 == [1,4,9,16,25,36,49,64,81,100] then pure () else error \"assertion failed\"\n  if candidate [10,20,30] 3 == [1000,8000,27000] then pure () else error \"assertion failed\"\n  if candidate [12,15] 5 == [248832,759375] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_624_is_upper", "language": "hs", "prompt": "-- | Write a hsthon function to convert a given string to uppercase.\nisUpper :: String -> String\nisUpper string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_624_is_upper.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isUpper\n  if candidate \"person\" == \"PERSON\" then pure () else error \"assertion failed\"\n  if candidate \"final\" == \"FINAL\" then pure () else error \"assertion failed\"\n  if candidate \"Valid\" == \"VALID\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_625_swap_List", "language": "hs", "prompt": "-- | Write a hsthon function to interchange the first and last element in a given list.\nswapList :: [Int] -> [Int]\nswapList newList =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_625_swap_List.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = swapList\n  if candidate [1,2,3] == [3,2,1] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,4] == [4,2,3,4,1] then pure () else error \"assertion failed\"\n  if candidate [4,5,6] == [6,5,4] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_626_triangle_area", "language": "hs", "prompt": "-- | Write a hsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ntriangleArea :: Int -> Maybe Int\ntriangleArea r =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = triangleArea\n  if candidate (-1) == Just (Nothing) then pure () else error \"assertion failed\"\n  if candidate 0 == Just (0) then pure () else error \"assertion failed\"\n  if candidate 2 == Just (4) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_627_find_First_Missing", "language": "hs", "prompt": "-- | Write a hsthon function to find the smallest missing number from a sorted list of natural numbers.\nfindFirstMissing :: [Int] -> Int\nfindFirstMissing array =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findFirstMissing\n  if candidate [0,1,2,3] == 4 then pure () else error \"assertion failed\"\n  if candidate [0,1,2,6,9] == 3 then pure () else error \"assertion failed\"\n  if candidate [2,3,5,8,9] == 0 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_628_replace_spaces", "language": "hs", "prompt": "-- | Write a function to replace all spaces in the given string with '%20'.\nreplaceSpaces :: String -> String\nreplaceSpaces string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = replaceSpaces\n  if candidate \"My Name is Dawood\" == \"My%20Name%20is%20Dawood\" then pure () else error \"assertion failed\"\n  if candidate \"I am a Programmer\" == \"I%20am%20a%20Programmer\" then pure () else error \"assertion failed\"\n  if candidate \"I love Coding\" == \"I%20love%20Coding\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_629_Split", "language": "hs", "prompt": "-- | Write a hsthon function to find even numbers from a list of numbers.\nsplit :: [Int] -> [Int]\nsplit list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_629_Split.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = split\n  if candidate [1,2,3,4,5] == [2,4] then pure () else error \"assertion failed\"\n  if candidate [4,5,6,7,8,0,1] == [4,6,8,0] then pure () else error \"assertion failed\"\n  if candidate [8,12,15,19] == [8,12] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_62_smallest_num", "language": "hs", "prompt": "-- | Write a hsthon function to find smallest number in a list.\nsmallestNum :: [Int] -> Int\nsmallestNum xs =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = smallestNum\n  if candidate [10,20,1,45,99] == 1 then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == 1 then pure () else error \"assertion failed\"\n  if candidate [45,46,50,60] == 45 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_630_get_coordinates", "language": "hs", "prompt": "-- | Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ngetCoordinates :: (Int, Int) -> [[Int]]\ngetCoordinates test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getCoordinates\n  if candidate (3, 4) == [[2,3],[2,4],[2,5],[3,3],[3,4],[3,5],[4,3],[4,4],[4,5]] then pure () else error \"assertion failed\"\n  if candidate (4, 5) == [[3,4],[3,5],[3,6],[4,4],[4,5],[4,6],[5,4],[5,5],[5,6]] then pure () else error \"assertion failed\"\n  if candidate (5, 6) == [[4,5],[4,6],[4,7],[5,5],[5,6],[5,7],[6,5],[6,6],[6,7]] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_631_replace_spaces", "language": "hs", "prompt": "-- | Write a function to replace whitespaces with an underscore and vice versa in a given string.\nreplaceSpaces :: String -> String\nreplaceSpaces text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = replaceSpaces\n  if candidate \"Jumanji The Jungle\" == \"Jumanji_The_Jungle\" then pure () else error \"assertion failed\"\n  if candidate \"The_Avengers\" == \"The Avengers\" then pure () else error \"assertion failed\"\n  if candidate \"Fast and Furious\" == \"Fast_and_Furious\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_632_move_zero", "language": "hs", "prompt": "-- | Write a hsthon function to move all zeroes to the end of the given list.\nmoveZero :: [Int] -> [Int]\nmoveZero num_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_632_move_zero.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = moveZero\n  if candidate [1,0,2,0,3,4] == [1,2,3,4,0,0] then pure () else error \"assertion failed\"\n  if candidate [2,3,2,0,0,4,0,5,0] == [2,3,2,4,5,0,0,0,0] then pure () else error \"assertion failed\"\n  if candidate [0,1,0,1,1] == [1,1,1,0,0] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of xor of all pairs of numbers in the given list.\npairXorSum :: [Int] -> Int -> Int\npairXorSum arr n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = pairXorSum\n  if candidate [5,9,7,6] 4 == 47 then pure () else error \"assertion failed\"\n  if candidate [7,3,5] 3 == 12 then pure () else error \"assertion failed\"\n  if candidate [7,3] 2 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_635_heap_sort", "language": "hs", "prompt": "-- | Write a function to sort the given list.\nheapSort :: [Int] -> [Int]\nheapSort iterable =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = heapSort\n  if candidate [1,3,5,7,9,2,4,6,8,0] == [0,1,2,3,4,5,6,7,8,9] then pure () else error \"assertion failed\"\n  if candidate [25,35,22,85,14,65,75,25,58] == [14,22,25,25,35,58,65,75,85] then pure () else error \"assertion failed\"\n  if candidate [7,1,9,5] == [1,5,7,9] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_637_noprofit_noloss", "language": "hs", "prompt": "-- | Write a function to check whether the given amount has no profit and no loss\nnoprofitNoloss :: Int -> Int -> Bool\nnoprofitNoloss actual_cost sale_amount =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = noprofitNoloss\n  if candidate 1500 1200 == False then pure () else error \"assertion failed\"\n  if candidate 100 100 == True then pure () else error \"assertion failed\"\n  if candidate 2000 5000 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_638_wind_chill", "language": "hs", "prompt": "-- | Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nwindChill :: Int -> Int -> Int\nwindChill v t =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = windChill\n  if candidate 120 35 == 40 then pure () else error \"assertion failed\"\n  if candidate 40 20 == 19 then pure () else error \"assertion failed\"\n  if candidate 10 8 == 6 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_639_sample_nam", "language": "hs", "prompt": "-- | Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nsampleNam :: [String] -> Int\nsampleNam sample_names =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sampleNam\n  if candidate [\"sally\",\"Dylan\",\"rebecca\",\"Diana\",\"Joanne\",\"keith\"] == 16 then pure () else error \"assertion failed\"\n  if candidate [\"php\",\"res\",\"Python\",\"abcd\",\"Java\",\"aaa\"] == 10 then pure () else error \"assertion failed\"\n  if candidate [\"abcd\",\"Python\",\"abba\",\"aba\"] == 6 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_63_max_difference", "language": "hs", "prompt": "-- | Write a function to find the maximum difference between available pairs in the given tuple list.\nmaxDifference :: [(Int, Int)] -> Int\nmaxDifference test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_63_max_difference.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxDifference\n  if candidate [(3, 5),(1, 7),(10, 3),(1, 2)] == 7 then pure () else error \"assertion failed\"\n  if candidate [(4, 6),(2, 17),(9, 13),(11, 12)] == 15 then pure () else error \"assertion failed\"\n  if candidate [(12, 35),(21, 27),(13, 23),(41, 22)] == 23 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_640_remove_parenthesis", "language": "hs", "prompt": "-- | Write a function to remove the parenthesis and what is inbetween them from a string.\nremoveParenthesis :: [String] -> String\nremoveParenthesis items =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeParenthesis\n  if candidate [\"python (chrome)\"] == \"python\" then pure () else error \"assertion failed\"\n  if candidate [\"string(.abc)\"] == \"string\" then pure () else error \"assertion failed\"\n  if candidate [\"alpha(num)\"] == \"alpha\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_641_is_nonagonal", "language": "hs", "prompt": "-- | Write a function to find the nth nonagonal number.\nisNonagonal :: Int -> Int\nisNonagonal n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isNonagonal\n  if candidate 10 == 325 then pure () else error \"assertion failed\"\n  if candidate 15 == 750 then pure () else error \"assertion failed\"\n  if candidate 18 == 1089 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "hs", "prompt": "-- | Write a function that checks if a strings contains 'z', except at the start and end of the word.\ntextMatchWordzMiddle :: String -> Bool\ntextMatchWordzMiddle text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textMatchWordzMiddle\n  if candidate \"pythonzabc.\" == True then pure () else error \"assertion failed\"\n  if candidate \"zxyabc.\" == False then pure () else error \"assertion failed\"\n  if candidate \"  lang  .\" == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "hs", "prompt": "-- | Write a hsthon function to reverse a list upto a given position.\nreverseArrayUptoK :: [Int] -> Int -> [Int]\nreverseArrayUptoK input k =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = reverseArrayUptoK\n  if candidate [1,2,3,4,5,6] 4 == [4,3,2,1,5,6] then pure () else error \"assertion failed\"\n  if candidate [4,5,6,7] 2 == [5,4,6,7] then pure () else error \"assertion failed\"\n  if candidate [9,8,7,6,5] 3 == [7,8,9,6,5] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_64_subject_marks", "language": "hs", "prompt": "-- | Write a function to sort a list of tuples using the second value of each tuple.\nsubjectMarks :: [(String, Int)] -> [(String, Int)]\nsubjectMarks subjectmarks =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = subjectMarks\n  if candidate [(\"English\", 88),(\"Science\", 90),(\"Maths\", 97),(\"Social sciences\", 82)] == [(\"Social sciences\", 82),(\"English\", 88),(\"Science\", 90),(\"Maths\", 97)] then pure () else error \"assertion failed\"\n  if candidate [(\"Telugu\", 49),(\"Hindhi\", 54),(\"Social\", 33)] == [(\"Social\", 33),(\"Telugu\", 49),(\"Hindhi\", 54)] then pure () else error \"assertion failed\"\n  if candidate [(\"Physics\", 96),(\"Chemistry\", 97),(\"Biology\", 45)] == [(\"Biology\", 45),(\"Physics\", 96),(\"Chemistry\", 97)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_66_pos_count", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of positive numbers in a list.\nposCount :: [Int] -> Int\nposCount list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_66_pos_count.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = posCount\n  if candidate [1,(-2),3,(-4)] == 2 then pure () else error \"assertion failed\"\n  if candidate [3,4,5,(-1)] == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_67_bell_number", "language": "hs", "prompt": "-- | Write a function to find the number of ways to partition a set of Bell numbers.\nbellNumber :: Int -> Int\nbellNumber n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_67_bell_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = bellNumber\n  if candidate 2 == 2 then pure () else error \"assertion failed\"\n  if candidate 10 == 115975 then pure () else error \"assertion failed\"\n  if candidate 56 == 6775685320645824322581483068371419745979053216268760300 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_68_is_Monotonic", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the given list is monotonic or not.\nisMonotonic :: [Int] -> Bool\nisMonotonic A =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isMonotonic\n  if candidate [6,5,4,4] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,2,3] == True then pure () else error \"assertion failed\"\n  if candidate [1,3,2] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_69_is_sublist", "language": "hs", "prompt": "-- | Write a function to check whether a list contains the given sublist or not.\nisSublist :: [Int] -> [Int] -> Bool\nisSublist l s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isSublist\n  if candidate [2,4,3,5,7] [3,7] == False then pure () else error \"assertion failed\"\n  if candidate [2,4,3,5,7] [4,3] == True then pure () else error \"assertion failed\"\n  if candidate [2,4,3,5,7] [1,6] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the two numbers differ at one bit position only or not.\ndifferAtOneBitPos :: Int -> Int -> Bool\ndifferAtOneBitPos a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = differAtOneBitPos\n  if candidate 13 9 == True then pure () else error \"assertion failed\"\n  if candidate 15 8 == False then pure () else error \"assertion failed\"\n  if candidate 2 4 == False then pure () else error \"assertion failed\"\n  if candidate 2 3 == True then pure () else error \"assertion failed\"\n  if candidate 5 1 == True then pure () else error \"assertion failed\"\n  if candidate 1 5 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_70_get_equal", "language": "hs", "prompt": "-- | Write a function to find whether all the given lists have equal length or not.\ngetEqual :: [[Int]] -> Bool\ngetEqual Input =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_70_get_equal.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getEqual\n  if candidate [[11,22,33],[44,55,66]] == True then pure () else error \"assertion failed\"\n  if candidate [[1,2,3],[4,5,6,7]] == False then pure () else error \"assertion failed\"\n  if candidate [[1,2],[3,4]] == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_71_comb_sort", "language": "hs", "prompt": "-- | Write a function to sort a list of elements.\ncombSort :: [Int] -> [Int]\ncombSort nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = combSort\n  if candidate [5,15,37,25,79] == [5,15,25,37,79] then pure () else error \"assertion failed\"\n  if candidate [41,32,15,19,22] == [15,19,22,32,41] then pure () else error \"assertion failed\"\n  if candidate [99,15,13,47] == [13,15,47,99] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "hs", "prompt": "-- | Write a function to add an association list to the tuple. The output should be a tuple.\naddDictToTuple :: (Int, Int, Int) -> [(String, Int)] -> (Int, Int, Int, [(String, Int)])\naddDictToTuple test_tup test_dict =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = addDictToTuple\n  if candidate (4, 5, 6) [(\"MSAM\", 1), (\"is\", 2), (\"best\", 3)] == (4, 5, 6, [(\"MSAM\", 1), (\"is\", 2), (\"best\", 3)]) then pure () else error \"assertion failed\"\n  if candidate (1, 2, 3) [(\"UTS\", 2), (\"is\", 3), (\"Worst\", 4)] == (1, 2, 3, [(\"UTS\", 2), (\"is\", 3), (\"Worst\", 4)]) then pure () else error \"assertion failed\"\n  if candidate (8, 9, 10) [(\"POS\", 3), (\"is\", 4), (\"Okay\", 5)] == (8, 9, 10, [(\"POS\", 3), (\"is\", 4), (\"Okay\", 5)]) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "hs", "prompt": "-- | Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nmaxaverageofpath :: [[Int]] -> Float\nmaxaverageofpath cost =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxaverageofpath\n  if candidate [[1,2,3],[6,5,4],[7,3,9]] == 5.2 then pure () else error \"assertion failed\"\n  if candidate [[2,3,4],[7,6,5],[8,4,10]] == 6.2 then pure () else error \"assertion failed\"\n  if candidate [[3,4,5],[8,7,6],[9,5,11]] == 7.2 then pure () else error \"assertion failed\"\n  if candidate [[1,2,3],[4,5,6],[7,8,9]] == 5.8 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_723_count_same_pair", "language": "hs", "prompt": "-- | The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\ncountSamePair :: [Int] -> [Int] -> Int\ncountSamePair nums1 nums2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countSamePair\n  if candidate [1,2,3,4,5,6,7,8] [2,2,3,1,2,6,7,9] == 4 then pure () else error \"assertion failed\"\n  if candidate [0,1,2,(-1),(-5),6,0,(-3),(-2),3,4,6,8] [2,1,2,(-1),(-5),6,4,(-3),(-2),3,4,6,8] == 11 then pure () else error \"assertion failed\"\n  if candidate [2,4,(-6),(-9),11,(-12),14,(-5),17] [2,1,2,(-1),(-5),6,4,(-3),(-2),3,4,6,8] == 1 then pure () else error \"assertion failed\"\n  if candidate [0,1,1,2] [0,1,2,2] == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_724_power_base_sum", "language": "hs", "prompt": "-- | Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\npowerBaseSum :: Int -> Int -> Int\npowerBaseSum base power =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = powerBaseSum\n  if candidate 2 100 == 115 then pure () else error \"assertion failed\"\n  if candidate 8 10 == 37 then pure () else error \"assertion failed\"\n  if candidate 8 15 == 62 then pure () else error \"assertion failed\"\n  if candidate 3 3 == 9 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_728_sum_list", "language": "hs", "prompt": "-- | Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nsumList :: [Int] -> [Int] -> [Int]\nsumList lst1 lst2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_728_sum_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumList\n  if candidate [10,20,30] [15,25,35] == [25,45,65] then pure () else error \"assertion failed\"\n  if candidate [1,2,3] [5,6,7] == [6,8,10] then pure () else error \"assertion failed\"\n  if candidate [15,20,30] [15,45,75] == [30,65,105] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_72_dif_Square", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the given number can be represented as the difference of two squares or not.\ndifSquare :: Int -> Bool\ndifSquare n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = difSquare\n  if candidate 5 == True then pure () else error \"assertion failed\"\n  if candidate 10 == False then pure () else error \"assertion failed\"\n  if candidate 15 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "hs", "prompt": "-- | Write a function to find the lateral surface area of a cone given radius r and the height h.\nlateralsurfaceCone :: Int -> Int -> Float\nlateralsurfaceCone r h =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lateralsurfaceCone\n  if candidate 5 12 == 204.20352248333654 then pure () else error \"assertion failed\"\n  if candidate 10 15 == 566.3586699569488 then pure () else error \"assertion failed\"\n  if candidate 19 17 == 1521.8090132193388 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_732_replace_specialchar", "language": "hs", "prompt": "-- | Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nreplaceSpecialchar :: String -> String\nreplaceSpecialchar text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = replaceSpecialchar\n  if candidate \"Python language, Programming language.\" == \"Python:language::Programming:language:\" then pure () else error \"assertion failed\"\n  if candidate \"a b c,d e f\" == \"a:b:c:d:e:f\" then pure () else error \"assertion failed\"\n  if candidate \"ram reshma,ram rahim\" == \"ram:reshma:ram:rahim\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_733_find_first_occurrence", "language": "hs", "prompt": "-- | Write a function to find the index of the first occurrence of a given number in a sorted list.\nfindFirstOccurrence :: [Int] -> Int -> Int\nfindFirstOccurrence A x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findFirstOccurrence\n  if candidate [2,5,5,5,6,6,8,9,9,9] 5 == 1 then pure () else error \"assertion failed\"\n  if candidate [2,3,5,5,6,6,8,9,9,9] 5 == 2 then pure () else error \"assertion failed\"\n  if candidate [2,4,1,5,6,6,8,9,9,9] 6 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "hs", "prompt": "-- | Write a hsthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\nsumOfSubarrayProd :: [Int] -> Int\nsumOfSubarrayProd arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumOfSubarrayProd\n  if candidate [1,2,3] == 20 then pure () else error \"assertion failed\"\n  if candidate [1,2] == 5 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4] == 84 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "hs", "prompt": "-- | Write a hsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ntoggleMiddleBits :: Int -> Int\ntoggleMiddleBits n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = toggleMiddleBits\n  if candidate 9 == 15 then pure () else error \"assertion failed\"\n  if candidate 10 == 12 then pure () else error \"assertion failed\"\n  if candidate 11 == 13 then pure () else error \"assertion failed\"\n  if candidate 65 == 127 then pure () else error \"assertion failed\"\n  if candidate 77 == 115 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_736_left_insertion", "language": "hs", "prompt": "-- | Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/hsthon-exercises/data-structures-and-algorithms/hsthon-data-structure-exercise-24.php\nleftInsertion :: [Int] -> Int -> Int\nleftInsertion a x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = leftInsertion\n  if candidate [1,2,4,5] 6 == 4 then pure () else error \"assertion failed\"\n  if candidate [1,2,4,5] 3 == 2 then pure () else error \"assertion failed\"\n  if candidate [1,2,4,5] 7 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_737_check_str", "language": "hs", "prompt": "-- | Write a function to check whether the given string is starting with a vowel or not using regex.\ncheckStr :: String -> Bool\ncheckStr string =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_737_check_str.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkStr\n  if candidate \"annie\" == True then pure () else error \"assertion failed\"\n  if candidate \"dawood\" == False then pure () else error \"assertion failed\"\n  if candidate \"Else\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_738_geometric_sum", "language": "hs", "prompt": "-- | Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/hsthon-exercises/data-structures-and-algorithms/hsthon-recursion-exercise-9.php\ngeometricSum :: Int -> Float\ngeometricSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = geometricSum\n  if candidate 7 == 1.9921875 then pure () else error \"assertion failed\"\n  if candidate 4 == 1.9375 then pure () else error \"assertion failed\"\n  if candidate 8 == 1.99609375 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_739_find_Index", "language": "hs", "prompt": "-- | Write a hsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfindIndex :: Int -> Int\nfindIndex n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_739_find_Index.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findIndex\n  if candidate 2 == 4 then pure () else error \"assertion failed\"\n  if candidate 3 == 14 then pure () else error \"assertion failed\"\n  if candidate 4 == 45 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_740_tuple_to_dict", "language": "hs", "prompt": "-- | Write a function to convert the given tuple to a key-value association list using adjacent elements. https://www.geeksforgeeks.org/hsthon-convert-tuple-to-adjacent-pair-association list/\ntupleToDict :: (Int, Int, Int, Int, Int, Int) -> [(Int, Int)]\ntupleToDict test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = tupleToDict\n  if candidate (1, 5, 7, 10, 13, 5) == [(1, 5), (7, 10), (13, 5)] then pure () else error \"assertion failed\"\n  if candidate (1, 2, 3, 4, 5, 6) == [(1, 2), (3, 4), (5, 6)] then pure () else error \"assertion failed\"\n  if candidate (7, 8, 9, 10, 11, 12) == [(7, 8), (9, 10), (11, 12)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_741_all_Characters_Same", "language": "hs", "prompt": "-- | Write a hsthon function to check whether all the characters are same or not.\nallCharactersSame :: String -> Bool\nallCharactersSame s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = allCharactersSame\n  if candidate \"python\" == False then pure () else error \"assertion failed\"\n  if candidate \"aaa\" == True then pure () else error \"assertion failed\"\n  if candidate \"data\" == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_742_area_tetrahedron", "language": "hs", "prompt": "-- | Write a function to caluclate the area of a tetrahedron.\nareaTetrahedron :: Int -> Float\nareaTetrahedron side =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = areaTetrahedron\n  if candidate 3 == 15.588457268119894 then pure () else error \"assertion failed\"\n  if candidate 20 == 692.8203230275509 then pure () else error \"assertion failed\"\n  if candidate 10 == 173.20508075688772 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_743_rotate_right", "language": "hs", "prompt": "-- | Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/hsthon-program-right-rotate-list-n/\nrotateRight :: [Int] -> Int -> [Int]\nrotateRight list m =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = rotateRight\n  if candidate [1,2,3,4,5,6,7,8,9,10] 3 == [8,9,10,1,2,3,4,5,6,7] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] 2 == [9,10,1,2,3,4,5,6,7,8] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] 5 == [6,7,8,9,10,1,2,3,4,5] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_745_divisible_by_digits", "language": "hs", "prompt": "-- | Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/hsthon-exercises/lambda/hsthon-lambda-exercise-24.php\ndivisibleByDigits :: Int -> Int -> [Int]\ndivisibleByDigits startnum endnum =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = divisibleByDigits\n  if candidate 1 22 == [1,2,3,4,5,6,7,8,9,11,12,15,22] then pure () else error \"assertion failed\"\n  if candidate 1 15 == [1,2,3,4,5,6,7,8,9,11,12,15] then pure () else error \"assertion failed\"\n  if candidate 20 25 == [22,24] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_746_sector_area", "language": "hs", "prompt": "-- | Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return Nothing if the angle is larger than 360 degrees.\nsectorArea :: Int -> Int -> Maybe Float\nsectorArea r a =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_746_sector_area.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sectorArea\n  if candidate 4 45 == Just (6.283185307179586) then pure () else error \"assertion failed\"\n  if candidate 9 45 == Just (31.808625617596654) then pure () else error \"assertion failed\"\n  if candidate 9 361 == Just (Nothing) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_747_lcs_of_three", "language": "hs", "prompt": "-- | Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nlcsOfThree :: String -> String -> String -> Int\nlcsOfThree X Y Z =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lcsOfThree\n  if candidate \"AGGT12\" \"12TXAYB\" \"12XBA\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\" == 5 then pure () else error \"assertion failed\"\n  if candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\" == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_748_capital_words_spaces", "language": "hs", "prompt": "-- | Write a function to put spaces between words starting with capital letters in a given string.\ncapitalWordsSpaces :: String -> String\ncapitalWordsSpaces str1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = capitalWordsSpaces\n  if candidate \"Python\" == \"Python\" then pure () else error \"assertion failed\"\n  if candidate \"PythonProgrammingExamples\" == \"Python Programming Examples\" then pure () else error \"assertion failed\"\n  if candidate \"GetReadyToBeCodingFreak\" == \"Get Ready To Be Coding Freak\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "hs", "prompt": "-- | Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/hsthon-sort-numeric-strings-in-a-list/\nsortNumericStrings :: [String] -> [Int]\nsortNumericStrings nums_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sortNumericStrings\n  if candidate [\"4\",\"12\",\"45\",\"7\",\"0\",\"100\",\"200\",\"-12\",\"-500\"] == [(-500),(-12),0,4,7,12,45,100,200] then pure () else error \"assertion failed\"\n  if candidate [\"2\",\"3\",\"8\",\"4\",\"7\",\"9\",\"8\",\"2\",\"6\",\"5\",\"1\",\"6\",\"1\",\"2\",\"3\",\"4\",\"6\",\"9\",\"1\",\"2\"] == [1,1,1,2,2,2,2,3,3,4,4,5,6,6,6,7,8,8,9,9] then pure () else error \"assertion failed\"\n  if candidate [\"1\",\"3\",\"5\",\"7\",\"1\",\"3\",\"13\",\"15\",\"17\",\"5\",\"7 \",\"9\",\"1\",\"11\"] == [1,1,1,3,3,5,5,7,7,9,11,13,15,17] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_74_is_samepatterns", "language": "hs", "prompt": "-- | Write a function to check whether it follows the sequence given in the patterns list.\nisSamepatterns :: [String] -> [String] -> Bool\nisSamepatterns colors patterns =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isSamepatterns\n  if candidate [\"red\",\"green\",\"green\"] [\"a\",\"b\",\"b\"] == True then pure () else error \"assertion failed\"\n  if candidate [\"red\",\"green\",\"greenn\"] [\"a\",\"b\",\"b\"] == False then pure () else error \"assertion failed\"\n  if candidate [\"red\",\"green\",\"greenn\"] [\"a\",\"b\"] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_750_add_tuple", "language": "hs", "prompt": "-- | Write a function to add the given tuple to the given list.\naddTuple :: [Int] -> (Int, Int) -> [Int]\naddTuple test_list test_tup =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = addTuple\n  if candidate [5,6,7] (9, 10) == [5,6,7,9,10] then pure () else error \"assertion failed\"\n  if candidate [6,7,8] (10, 11) == [6,7,8,10,11] then pure () else error \"assertion failed\"\n  if candidate [7,8,9] (11, 12) == [7,8,9,11,12] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_751_check_min_heap", "language": "hs", "prompt": "-- | Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\ncheckMinHeap :: [Int] -> Bool\ncheckMinHeap arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkMinHeap\n  if candidate [1,2,3,4,5,6] == True then pure () else error \"assertion failed\"\n  if candidate [2,3,4,5,10,15] == True then pure () else error \"assertion failed\"\n  if candidate [2,10,4,5,3,15] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_752_jacobsthal_num", "language": "hs", "prompt": "-- | Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\njacobsthalNum :: Int -> Int\njacobsthalNum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = jacobsthalNum\n  if candidate 5 == 11 then pure () else error \"assertion failed\"\n  if candidate 2 == 1 then pure () else error \"assertion failed\"\n  if candidate 4 == 5 then pure () else error \"assertion failed\"\n  if candidate 13 == 2731 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_753_min_k", "language": "hs", "prompt": "-- | Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/hsthon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim cohs of test cases\nminK :: [(String, Int)] -> Int -> [(String, Int)]\nminK test_list K =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_753_min_k.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = minK\n  if candidate [(\"Manjeet\", 10),(\"Akshat\", 4),(\"Akash\", 2),(\"Nikhil\", 8)] 2 == [(\"Akash\", 2),(\"Akshat\", 4)] then pure () else error \"assertion failed\"\n  if candidate [(\"Sanjeev\", 11),(\"Angat\", 5),(\"Akash\", 3),(\"Nepin\", 9)] 3 == [(\"Akash\", 3),(\"Angat\", 5),(\"Nepin\", 9)] then pure () else error \"assertion failed\"\n  if candidate [(\"tanmay\", 14),(\"Amer\", 11),(\"Ayesha\", 9),(\"SKD\", 16)] 1 == [(\"Ayesha\", 9)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_756_text_match_zero_one", "language": "hs", "prompt": "-- | Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/hsthon-exercises/re/hsthon-re-exercise-3.php\ntextMatchZeroOne :: String -> Bool\ntextMatchZeroOne text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textMatchZeroOne\n  if candidate \"ac\" == False then pure () else error \"assertion failed\"\n  if candidate \"dc\" == False then pure () else error \"assertion failed\"\n  if candidate \"abbbba\" == True then pure () else error \"assertion failed\"\n  if candidate \"dsabbbba\" == True then pure () else error \"assertion failed\"\n  if candidate \"asbbbba\" == False then pure () else error \"assertion failed\"\n  if candidate \"abaaa\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "hs", "prompt": "-- | Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/hsthon-program-to-count-the-pairs-of-reverse-strings/\ncountReversePairs :: [String] -> Int\ncountReversePairs test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countReversePairs\n  if candidate [\"julia\",\"best\",\"tseb\",\"for\",\"ailuj\"] == 2 then pure () else error \"assertion failed\"\n  if candidate [\"geeks\",\"best\",\"for\",\"skeeg\"] == 1 then pure () else error \"assertion failed\"\n  if candidate [\"makes\",\"best\",\"sekam\",\"for\",\"rof\"] == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_759_is_decimal", "language": "hs", "prompt": "-- | Write a function to check whether a given string is a decimal number with a precision of 2.\nisDecimal :: String -> Bool\nisDecimal num =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isDecimal\n  if candidate \"123.11\" == True then pure () else error \"assertion failed\"\n  if candidate \"e666.86\" == False then pure () else error \"assertion failed\"\n  if candidate \"3.124587\" == False then pure () else error \"assertion failed\"\n  if candidate \"1.11\" == True then pure () else error \"assertion failed\"\n  if candidate \"1.1.11\" == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_75_find_tuples", "language": "hs", "prompt": "-- | Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nfindTuples :: [(Int, Int, Int)] -> Int -> [(Int, Int, Int)]\nfindTuples test_list K =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findTuples\n  if candidate [(6, 24, 12),(7, 9, 6),(12, 18, 21)] 6 == [(6, 24, 12)] then pure () else error \"assertion failed\"\n  if candidate [(5, 25, 30),(4, 2, 3),(7, 8, 9)] 5 == [(5, 25, 30)] then pure () else error \"assertion failed\"\n  if candidate [(7, 9, 16),(8, 16, 4),(19, 17, 18)] 4 == [(8, 16, 4)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_760_unique_Element", "language": "hs", "prompt": "-- | Write a hsthon function to check whether a list of numbers contains only one distinct element or not.\nuniqueElement :: [Int] -> Bool\nuniqueElement arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = uniqueElement\n  if candidate [1,1,1] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,1,2] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "hs", "prompt": "-- | Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ncheckMonthnumberNumber :: Int -> Bool\ncheckMonthnumberNumber monthnum3 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkMonthnumberNumber\n  if candidate 6 == True then pure () else error \"assertion failed\"\n  if candidate 2 == False then pure () else error \"assertion failed\"\n  if candidate 12 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_763_find_min_diff", "language": "hs", "prompt": "-- | Write a hsthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfindMinDiff :: [Int] -> Int -> Int\nfindMinDiff arr n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findMinDiff\n  if candidate [1,5,3,19,18,25] 6 == 1 then pure () else error \"assertion failed\"\n  if candidate [4,3,2,6] 4 == 1 then pure () else error \"assertion failed\"\n  if candidate [30,5,20,9] 4 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_764_number_ctr", "language": "hs", "prompt": "-- | Write a hsthon function to count number of digits in a given string.\nnumberCtr :: String -> Int\nnumberCtr str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = numberCtr\n  if candidate \"program2bedone\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"3wonders\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"123\" == 3 then pure () else error \"assertion failed\"\n  if candidate \"3wond-1ers2\" == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_765_is_polite", "language": "hs", "prompt": "-- | Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nisPolite :: Int -> Int\nisPolite n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_765_is_polite.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isPolite\n  if candidate 7 == 11 then pure () else error \"assertion failed\"\n  if candidate 4 == 7 then pure () else error \"assertion failed\"\n  if candidate 9 == 13 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_766_pair_wise", "language": "hs", "prompt": "-- | Write a function to return a list of all pairs of consecutive items in a given list.\npairWise :: [Int] -> [(Int, Int)]\npairWise l1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = pairWise\n  if candidate [1,1,2,3,3,4,4,5] == [(1, 1),(1, 2),(2, 3),(3, 3),(3, 4),(4, 4),(4, 5)] then pure () else error \"assertion failed\"\n  if candidate [1,5,7,9,10] == [(1, 5),(5, 7),(7, 9),(9, 10)] then pure () else error \"assertion failed\"\n  if candidate [5,1,9,7,10] == [(5, 1),(1, 9),(9, 7),(7, 10)] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] == [(1, 2),(2, 3),(3, 4),(4, 5),(5, 6),(6, 7),(7, 8),(8, 9),(9, 10)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_767_get_pairs_count", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of pairs whose sum is equal to \u00e2\u20ac\u02dcsum\u00e2\u20ac\u2122. The funtion gets as input a list of numbers and the sum,\ngetPairsCount :: [Int] -> Int -> Int\ngetPairsCount arr sum =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getPairsCount\n  if candidate [1,1,1,1] 2 == 6 then pure () else error \"assertion failed\"\n  if candidate [1,5,7,(-1),5] 6 == 3 then pure () else error \"assertion failed\"\n  if candidate [1,(-2),3] 1 == 1 then pure () else error \"assertion failed\"\n  if candidate [(-1),(-2),3] (-3) == 1 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_769_Diff", "language": "hs", "prompt": "-- | Write a hsthon function to get the difference between two lists.\ndiff :: [Int] -> [Int] -> [Int]\ndiff li1 li2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_769_Diff.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = diff\n  if candidate [10,15,20,25,30,35,40] [25,40,35] == [10,20,30,15] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5] [6,7,1] == [2,3,4,5,6,7] then pure () else error \"assertion failed\"\n  if candidate [1,2,3] [6,7,1] == [2,3,6,7] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_770_odd_num_sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of fourth power of first n odd natural numbers.\noddNumSum :: Int -> Int\noddNumSum n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = oddNumSum\n  if candidate 2 == 82 then pure () else error \"assertion failed\"\n  if candidate 3 == 707 then pure () else error \"assertion failed\"\n  if candidate 4 == 3108 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_771_check_expression", "language": "hs", "prompt": "-- | Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ncheckExpression :: String -> Bool\ncheckExpression exp =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_771_check_expression.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkExpression\n  if candidate \"{()}[{}]\" == True then pure () else error \"assertion failed\"\n  if candidate \"{()}[{]\" == False then pure () else error \"assertion failed\"\n  if candidate \"{()}[{}][]({})\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_772_remove_length", "language": "hs", "prompt": "-- | Write a function to remove all the words with k length in the given string.\nremoveLength :: String -> Int -> String\nremoveLength test_str K =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_772_remove_length.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeLength\n  if candidate \"The person is most value tet\" 3 == \"person is most value\" then pure () else error \"assertion failed\"\n  if candidate \"If you told me about this ok\" 4 == \"If you me about ok\" then pure () else error \"assertion failed\"\n  if candidate \"Forces of darkeness is come into the play\" 4 == \"Forces of darkeness is the\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_773_occurance_substring", "language": "hs", "prompt": "-- | Write a function to find the occurrence and position of the substrings within a string. Return Nothing if there is no match.\noccuranceSubstring :: String -> String -> Maybe (String, Int, Int)\noccuranceSubstring text pattern =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = occuranceSubstring\n  if candidate \"python programming, python language\" \"python\" == Just ((\"python\", 0, 6)) then pure () else error \"assertion failed\"\n  if candidate \"python programming,programming language\" \"programming\" == Just ((\"programming\", 7, 18)) then pure () else error \"assertion failed\"\n  if candidate \"python programming,programming language\" \"language\" == Just ((\"language\", 31, 39)) then pure () else error \"assertion failed\"\n  if candidate \"c++ programming, c++ language\" \"python\" == Just (Nothing) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_775_odd_position", "language": "hs", "prompt": "-- | Write a hsthon function to check whether every odd index contains odd numbers of a given list.\noddPosition :: [Int] -> Bool\noddPosition nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_775_odd_position.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = oddPosition\n  if candidate [2,1,4,3,6,7,6,3] == True then pure () else error \"assertion failed\"\n  if candidate [4,1,2] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_776_count_vowels", "language": "hs", "prompt": "-- | Write a function to count those characters which have vowels as their neighbors in the given string.\ncountVowels :: String -> Int\ncountVowels test_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countVowels\n  if candidate \"bestinstareels\" == 7 then pure () else error \"assertion failed\"\n  if candidate \"partofthejourneyistheend\" == 12 then pure () else error \"assertion failed\"\n  if candidate \"amazonprime\" == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_777_find_sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of non-repeated elements in a given list.\nfindSum :: [Int] -> Int\nfindSum arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_777_find_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findSum\n  if candidate [1,2,3,1,1,4,5,6] == 21 then pure () else error \"assertion failed\"\n  if candidate [1,10,9,4,2,10,10,45,4] == 71 then pure () else error \"assertion failed\"\n  if candidate [12,10,9,45,2,10,10,45,10] == 78 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_77_is_Diff", "language": "hs", "prompt": "-- | Write a hsthon function to find whether a number is divisible by 11.\nisDiff :: Int -> Bool\nisDiff n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isDiff\n  if candidate 12345 == False then pure () else error \"assertion failed\"\n  if candidate 1212112 == True then pure () else error \"assertion failed\"\n  if candidate 1212 == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_780_find_combinations", "language": "hs", "prompt": "-- | Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/hsthon-combinations-of-sum-with-tuples-in-tuple-list/\nfindCombinations :: [(Int, Int)] -> [(Int, Int)]\nfindCombinations test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findCombinations\n  if candidate [(2, 4),(6, 7),(5, 1),(6, 10)] == [(8, 11),(7, 5),(8, 14),(11, 8),(12, 17),(11, 11)] then pure () else error \"assertion failed\"\n  if candidate [(3, 5),(7, 8),(6, 2),(7, 11)] == [(10, 13),(9, 7),(10, 16),(13, 10),(14, 19),(13, 13)] then pure () else error \"assertion failed\"\n  if candidate [(4, 6),(8, 9),(7, 3),(8, 12)] == [(12, 15),(11, 9),(12, 18),(15, 12),(16, 21),(15, 15)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_781_count_divisors", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the count of divisors is even. https://www.w3resource.com/hsthon-exercises/basic/hsthon-basic-1-exercise-24.php\ncountDivisors :: Int -> Bool\ncountDivisors n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countDivisors\n  if candidate 10 == True then pure () else error \"assertion failed\"\n  if candidate 100 == False then pure () else error \"assertion failed\"\n  if candidate 125 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_782_odd_length_sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\noddLengthSum :: [Int] -> Int\noddLengthSum arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = oddLengthSum\n  if candidate [1,2,4] == 14 then pure () else error \"assertion failed\"\n  if candidate [1,2,1,2] == 15 then pure () else error \"assertion failed\"\n  if candidate [1,7] == 8 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "hs", "prompt": "-- | Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nrgbToHsv :: Int -> Int -> Int -> [Float]\nrgbToHsv r g b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = rgbToHsv\n  if candidate 255 255 255 == [0.0,0.0,100.0] then pure () else error \"assertion failed\"\n  if candidate 0 215 0 == [120.0,100.0,84.31372549019608] then pure () else error \"assertion failed\"\n  if candidate 10 215 110 == [149.26829268292684,95.34883720930233,84.31372549019608] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_784_mul_even_odd", "language": "hs", "prompt": "-- | Write a function to find the product of first even and odd number of a given list.\nmulEvenOdd :: [Int] -> Int\nmulEvenOdd list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = mulEvenOdd\n  if candidate [1,3,5,7,4,1,6,8] == 4 then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6,7,8,9,10] == 2 then pure () else error \"assertion failed\"\n  if candidate [1,5,7,9,10] == 10 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_785_tuple_str_int", "language": "hs", "prompt": "-- | Write a function to convert tuple string to integer tuple.\ntupleStrInt :: String -> (Int, Int, Int)\ntupleStrInt test_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = tupleStrInt\n  if candidate \"(7, 8, 9)\" == (7, 8, 9) then pure () else error \"assertion failed\"\n  if candidate \"(1, 2, 3)\" == (1, 2, 3) then pure () else error \"assertion failed\"\n  if candidate \"(4, 5, 6)\" == (4, 5, 6) then pure () else error \"assertion failed\"\n  if candidate \"(7, 81, 19)\" == (7, 81, 19) then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_786_right_insertion", "language": "hs", "prompt": "-- | Write a function to locate the right insertion point for a specified value in sorted order.\nrightInsertion :: [Int] -> Int -> Int\nrightInsertion a x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = rightInsertion\n  if candidate [1,2,4,5] 6 == 4 then pure () else error \"assertion failed\"\n  if candidate [1,2,4,5] 3 == 2 then pure () else error \"assertion failed\"\n  if candidate [1,2,4,5] 7 == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_787_text_match_three", "language": "hs", "prompt": "-- | Write a function that matches a string that has an a followed by three 'b'.\ntextMatchThree :: String -> Bool\ntextMatchThree text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textMatchThree\n  if candidate \"ac\" == False then pure () else error \"assertion failed\"\n  if candidate \"dc\" == False then pure () else error \"assertion failed\"\n  if candidate \"abbbba\" == True then pure () else error \"assertion failed\"\n  if candidate \"caacabbbba\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_788_new_tuple", "language": "hs", "prompt": "-- | Write a function to create a new tuple from the given string and list.\nnewTuple :: [String] -> String -> (String, String, String)\nnewTuple test_list test_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = newTuple\n  if candidate [\"WEB\",\"is\"] \"best\" == (\"WEB\", \"is\", \"best\") then pure () else error \"assertion failed\"\n  if candidate [\"We\",\"are\"] \"Developers\" == (\"We\", \"are\", \"Developers\") then pure () else error \"assertion failed\"\n  if candidate [\"Part\",\"is\"] \"Wrong\" == (\"Part\", \"is\", \"Wrong\") then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_790_even_position", "language": "hs", "prompt": "-- | Write a hsthon function to check whether every even index contains even numbers of a given list.\nevenPosition :: [Int] -> Bool\nevenPosition nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_790_even_position.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = evenPosition\n  if candidate [3,2,1] == False then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == False then pure () else error \"assertion failed\"\n  if candidate [2,1,4] == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_792_count_list", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of lists in a given number of lists.\ncountList :: [[Int]] -> Int\ncountList input_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_792_count_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countList\n  if candidate [[1,3],[5,7],[9,11],[13,15,17]] == 4 then pure () else error \"assertion failed\"\n  if candidate [[1,2],[2,3],[4,5]] == 3 then pure () else error \"assertion failed\"\n  if candidate [[1,0],[2,0]] == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_793_last", "language": "hs", "prompt": "-- | Write a hsthon function to find the last position of an element in a sorted list.\nlast :: [Int] -> Int -> Int\nlast arr x =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_793_last.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = last\n  if candidate [1,2,3] 1 == 0 then pure () else error \"assertion failed\"\n  if candidate [1,1,1,2,3,4] 1 == 2 then pure () else error \"assertion failed\"\n  if candidate [2,3,2,3,6,8,9] 3 == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_794_text_starta_endb", "language": "hs", "prompt": "-- | Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ntextStartaEndb :: String -> Bool\ntextStartaEndb text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = textStartaEndb\n  if candidate \"aabbbb\" == True then pure () else error \"assertion failed\"\n  if candidate \"aabAbbbc\" == False then pure () else error \"assertion failed\"\n  if candidate \"accddbbjjj\" == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_796_return_sum", "language": "hs", "prompt": "-- | Write function to find the sum of all items in the given association list.\nreturnSum :: [(String, Int)] -> Int\nreturnSum dict =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_796_return_sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = returnSum\n  if candidate [(\"a\", 100), (\"b\", 200), (\"c\", 300)] == 600 then pure () else error \"assertion failed\"\n  if candidate [(\"a\", 25), (\"b\", 18), (\"c\", 45)] == 88 then pure () else error \"assertion failed\"\n  if candidate [(\"a\", 36), (\"b\", 39), (\"c\", 49)] == 124 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_797_sum_in_range", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of all odd natural numbers within the range l and r.\nsumInRange :: Int -> Int -> Int\nsumInRange l r =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sumInRange\n  if candidate 2 5 == 8 then pure () else error \"assertion failed\"\n  if candidate 5 7 == 12 then pure () else error \"assertion failed\"\n  if candidate 7 13 == 40 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_798__sum", "language": "hs", "prompt": "-- | Write a hsthon function to find the sum of a list.\n_um :: [Int] -> Int\n_um arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_798__sum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = _um\n  if candidate [1,2,3] == 6 then pure () else error \"assertion failed\"\n  if candidate [15,12,13,10] == 50 then pure () else error \"assertion failed\"\n  if candidate [0,1,2] == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_799_left_rotate", "language": "hs", "prompt": "-- | Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nleftRotate :: Int -> Int -> Int\nleftRotate n d =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = leftRotate\n  if candidate 16 2 == 64 then pure () else error \"assertion failed\"\n  if candidate 10 2 == 40 then pure () else error \"assertion failed\"\n  if candidate 99 3 == 792 then pure () else error \"assertion failed\"\n  if candidate 99 3 == 792 then pure () else error \"assertion failed\"\n  if candidate 1 3 == 8 then pure () else error \"assertion failed\"\n  if candidate 5 3 == 40 then pure () else error \"assertion failed\"\n  if candidate 29 3 == 232 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_79_word_len", "language": "hs", "prompt": "-- | Write a hsthon function to check whether the length of the word is odd or not.\nwordLen :: String -> Bool\nwordLen s =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_79_word_len.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = wordLen\n  if candidate \"Hadoop\" == False then pure () else error \"assertion failed\"\n  if candidate \"great\" == True then pure () else error \"assertion failed\"\n  if candidate \"structure\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_800_remove_all_spaces", "language": "hs", "prompt": "-- | Write a function to remove all whitespaces from a string.\nremoveAllSpaces :: String -> String\nremoveAllSpaces text =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = removeAllSpaces\n  if candidate \"python  program\" == \"pythonprogram\" then pure () else error \"assertion failed\"\n  if candidate \"python   programming    language\" == \"pythonprogramminglanguage\" then pure () else error \"assertion failed\"\n  if candidate \"python                     program\" == \"pythonprogram\" then pure () else error \"assertion failed\"\n  if candidate \"   python                     program\" == \"pythonprogram\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_801_test_three_equal", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of equal numbers from three given integers.\ntestThreeEqual :: Int -> Int -> Int -> Int\ntestThreeEqual x y z =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = testThreeEqual\n  if candidate 1 1 1 == 3 then pure () else error \"assertion failed\"\n  if candidate (-1) (-2) (-3) == 0 then pure () else error \"assertion failed\"\n  if candidate 1 2 2 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_802_count_rotation", "language": "hs", "prompt": "-- | Write a hsthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\ncountRotation :: [Int] -> Int\ncountRotation arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = countRotation\n  if candidate [3,2,1] == 1 then pure () else error \"assertion failed\"\n  if candidate [4,5,1,2,3] == 2 then pure () else error \"assertion failed\"\n  if candidate [7,8,9,1,2,3] == 3 then pure () else error \"assertion failed\"\n  if candidate [1,2,3] == 0 then pure () else error \"assertion failed\"\n  if candidate [1,3,2] == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_803_is_perfect_square", "language": "hs", "prompt": "-- | Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nisPerfectSquare :: Int -> Bool\nisPerfectSquare n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isPerfectSquare\n  if candidate 10 == False then pure () else error \"assertion failed\"\n  if candidate 36 == True then pure () else error \"assertion failed\"\n  if candidate 14 == False then pure () else error \"assertion failed\"\n  if candidate 196 == True then pure () else error \"assertion failed\"\n  if candidate 125 == False then pure () else error \"assertion failed\"\n  if candidate 15625 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_804_is_product_even", "language": "hs", "prompt": "-- | Write a function to check whether the product of numbers in a list is even or not.\nisProductEven :: [Int] -> Bool\nisProductEven arr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isProductEven\n  if candidate [1,2,3] == True then pure () else error \"assertion failed\"\n  if candidate [1,2,1,4] == True then pure () else error \"assertion failed\"\n  if candidate [1,1] == False then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_805_max_sum_list", "language": "hs", "prompt": "-- | Write a function that returns the list in a list of lists whose sum of elements is the highest.\nmaxSumList :: [[Int]] -> [Int]\nmaxSumList lists =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxSumList\n  if candidate [[1,2,3],[4,5,6],[10,11,12],[7,8,9]] == [10,11,12] then pure () else error \"assertion failed\"\n  if candidate [[3,2,1],[6,5,4],[12,11,10]] == [12,11,10] then pure () else error \"assertion failed\"\n  if candidate [[2,3,1]] == [2,3,1] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_806_max_run_uppercase", "language": "hs", "prompt": "-- | Write a function to find maximum run of uppercase characters in the given string.\nmaxRunUppercase :: String -> Int\nmaxRunUppercase test_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = maxRunUppercase\n  if candidate \"GeMKSForGERksISBESt\" == 5 then pure () else error \"assertion failed\"\n  if candidate \"PrECIOusMOVemENTSYT\" == 6 then pure () else error \"assertion failed\"\n  if candidate \"GooGLEFluTTER\" == 4 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_807_first_odd", "language": "hs", "prompt": "-- | Write a hsthon function to find the first odd number in a given list of numbers.\nfirstOdd :: [Int] -> Int\nfirstOdd nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_807_first_odd.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = firstOdd\n  if candidate [1,3,5] == 1 then pure () else error \"assertion failed\"\n  if candidate [2,4,1,3] == 1 then pure () else error \"assertion failed\"\n  if candidate [8,9,1] == 9 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_808_check_K", "language": "hs", "prompt": "-- | Write a function to check if the given tuples contain the k or not.\ncheckK :: [Int] -> Int -> Bool\ncheckK test_tup K =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_808_check_K.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkK\n  if candidate [10,4,5,6,8] 6 == True then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,5,6] 7 == False then pure () else error \"assertion failed\"\n  if candidate [7,8,9,44,11,12] 11 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_809_check_smaller", "language": "hs", "prompt": "-- | Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ncheckSmaller :: (Int, Int, Int) -> (Int, Int, Int) -> Bool\ncheckSmaller test_tup1 test_tup2 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = checkSmaller\n  if candidate (1, 2, 3) (2, 3, 4) == False then pure () else error \"assertion failed\"\n  if candidate (4, 5, 6) (3, 4, 5) == True then pure () else error \"assertion failed\"\n  if candidate (11, 12, 13) (10, 11, 12) == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_80_tetrahedral_number", "language": "hs", "prompt": "-- | Write a function to find the nth tetrahedral number.\ntetrahedralNumber :: Int -> Int\ntetrahedralNumber n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = tetrahedralNumber\n  if candidate 5 == 35 then pure () else error \"assertion failed\"\n  if candidate 6 == 56 then pure () else error \"assertion failed\"\n  if candidate 7 == 84 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_83_get_Char", "language": "hs", "prompt": "-- | Write a hsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ngetChar :: String -> String\ngetChar strr =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_83_get_Char.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = getChar\n  if candidate \"abc\" == \"f\" then pure () else error \"assertion failed\"\n  if candidate \"gfg\" == \"t\" then pure () else error \"assertion failed\"\n  if candidate \"ab\" == \"c\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_84_sequence", "language": "hs", "prompt": "-- | Write a function to find the nth number in the newman conway sequence.\nsequence :: Int -> Int\nsequence n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_84_sequence.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = sequence\n  if candidate 10 == 6 then pure () else error \"assertion failed\"\n  if candidate 2 == 1 then pure () else error \"assertion failed\"\n  if candidate 3 == 2 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "hs", "prompt": "-- | Write a function to find nth centered hexagonal number.\ncenteredHexagonalNumber :: Int -> Int\ncenteredHexagonalNumber n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = centeredHexagonalNumber\n  if candidate 10 == 271 then pure () else error \"assertion failed\"\n  if candidate 2 == 7 then pure () else error \"assertion failed\"\n  if candidate 9 == 217 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "hs", "prompt": "-- | Write a function to merge three dictionaries into a single association list.\nmergeDictionariesThree :: [(String, String)] -> [(String, String)] -> [(String, String)] -> [(String, String)]\nmergeDictionariesThree dict1 dict2 dict3 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = mergeDictionariesThree\n  if candidate [(\"R\", \"Red\"), (\"B\", \"Black\"), (\"P\", \"Pink\")] [(\"G\", \"Green\"), (\"W\", \"White\")] [(\"O\", \"Orange\"), (\"W\", \"White\"), (\"B\", \"Black\")] == [(\"B\", \"Black\"), (\"R\", \"Red\"), (\"P\", \"Pink\"), (\"G\", \"Green\"), (\"W\", \"White\"), (\"O\", \"Orange\")] then pure () else error \"assertion failed\"\n  if candidate [(\"R\", \"Red\"), (\"B\", \"Black\"), (\"P\", \"Pink\")] [(\"G\", \"Green\"), (\"W\", \"White\")] [(\"L\", \"lavender\"), (\"B\", \"Blue\")] == [(\"W\", \"White\"), (\"P\", \"Pink\"), (\"B\", \"Black\"), (\"R\", \"Red\"), (\"G\", \"Green\"), (\"L\", \"lavender\")] then pure () else error \"assertion failed\"\n  if candidate [(\"R\", \"Red\"), (\"B\", \"Black\"), (\"P\", \"Pink\")] [(\"L\", \"lavender\"), (\"B\", \"Blue\")] [(\"G\", \"Green\"), (\"W\", \"White\")] == [(\"B\", \"Black\"), (\"P\", \"Pink\"), (\"R\", \"Red\"), (\"G\", \"Green\"), (\"L\", \"lavender\"), (\"W\", \"White\")] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_88_freq_count", "language": "hs", "prompt": "-- | Write a function to get the frequency of all the elements in a list, returned as an association list.\nfreqCount :: [Int] -> [(Int, Int)]\nfreqCount list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_88_freq_count.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = freqCount\n  if candidate [10,10,10,10,20,20,20,20,40,40,50,50,30] == [(10, 4), (20, 4), (40, 2), (50, 2), (30, 1)] then pure () else error \"assertion failed\"\n  if candidate [1,2,3,4,3,2,4,1,3,1,4] == [(1, 3), (2, 2), (3, 3), (4, 3)] then pure () else error \"assertion failed\"\n  if candidate [5,6,7,4,9,10,4,5,6,7,9,5] == [(10, 1), (5, 3), (6, 2), (7, 2), (4, 2), (9, 2)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_89_closest_num", "language": "hs", "prompt": "-- | Write a function to find the closest smaller number than n.\nclosestNum :: Int -> Int\nclosestNum N =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_89_closest_num.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = closestNum\n  if candidate 11 == 10 then pure () else error \"assertion failed\"\n  if candidate 7 == 6 then pure () else error \"assertion failed\"\n  if candidate 12 == 11 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_8_square_nums", "language": "hs", "prompt": "-- | Write a function to find squares of individual elements in a list.\nsquareNums :: [Int] -> [Int]\nsquareNums nums =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_8_square_nums.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = squareNums\n  if candidate [1,2,3,4,5,6,7,8,9,10] == [1,4,9,16,25,36,49,64,81,100] then pure () else error \"assertion failed\"\n  if candidate [10,20,30] == [100,400,900] then pure () else error \"assertion failed\"\n  if candidate [12,15] == [144,225] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_90_len_log", "language": "hs", "prompt": "-- | Write a hsthon function to find the length of the longest word.\nlenLog :: [String] -> Int\nlenLog list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_90_len_log.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = lenLog\n  if candidate [\"python\",\"PHP\",\"bigdata\"] == 7 then pure () else error \"assertion failed\"\n  if candidate [\"a\",\"ab\",\"abc\"] == 3 then pure () else error \"assertion failed\"\n  if candidate [\"small\",\"big\",\"tall\"] == 5 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_91_find_substring", "language": "hs", "prompt": "-- | Write a function to check if a string is present as a substring in a given list of string values.\nfindSubstring :: [String] -> String -> Bool\nfindSubstring str1 sub_str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_91_find_substring.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findSubstring\n  if candidate [\"red\",\"black\",\"white\",\"green\",\"orange\"] \"ack\" == True then pure () else error \"assertion failed\"\n  if candidate [\"red\",\"black\",\"white\",\"green\",\"orange\"] \"abc\" == False then pure () else error \"assertion failed\"\n  if candidate [\"red\",\"black\",\"white\",\"green\",\"orange\"] \"ange\" == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_92_is_undulating", "language": "hs", "prompt": "-- | Write a function to check whether the given number is undulating or not.\nisUndulating :: Int -> Bool\nisUndulating n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = isUndulating\n  if candidate 1212121 == True then pure () else error \"assertion failed\"\n  if candidate 1991 == False then pure () else error \"assertion failed\"\n  if candidate 121 == True then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_93_power", "language": "hs", "prompt": "-- | Write a function to calculate the value of 'a' to the power 'b'.\npower :: Int -> Int -> Int\npower a b =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_93_power.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = power\n  if candidate 3 4 == 81 then pure () else error \"assertion failed\"\n  if candidate 2 3 == 8 then pure () else error \"assertion failed\"\n  if candidate 5 5 == 3125 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_94_index_minimum", "language": "hs", "prompt": "-- | Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nindexMinimum :: [(String, Int)] -> String\nindexMinimum test_list =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = indexMinimum\n  if candidate [(\"Rash\", 143),(\"Manjeet\", 200),(\"Varsha\", 100)] == \"Varsha\" then pure () else error \"assertion failed\"\n  if candidate [(\"Yash\", 185),(\"Dawood\", 125),(\"Sanya\", 175)] == \"Dawood\" then pure () else error \"assertion failed\"\n  if candidate [(\"Sai\", 345),(\"Salman\", 145),(\"Ayesha\", 96)] == \"Ayesha\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_95_Find_Min_Length", "language": "hs", "prompt": "-- | Write a hsthon function to find the length of the smallest list in a list of lists.\nfindMinLength :: [[Int]] -> Int\nfindMinLength lst =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findMinLength\n  if candidate [[1],[1,2]] == 1 then pure () else error \"assertion failed\"\n  if candidate [[1,2],[1,2,3],[1,2,3,4]] == 2 then pure () else error \"assertion failed\"\n  if candidate [[3,3,3],[4,4,4,4]] == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_96_divisor", "language": "hs", "prompt": "-- | Write a hsthon function to find the number of divisors of a given integer.\ndivisor :: Int -> Int\ndivisor n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_96_divisor.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = divisor\n  if candidate 15 == 4 then pure () else error \"assertion failed\"\n  if candidate 12 == 6 then pure () else error \"assertion failed\"\n  if candidate 9 == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_97_frequency_lists", "language": "hs", "prompt": "-- | Write a function to find frequency of each element in a flattened list of lists, returned in an association list.\nfrequencyLists :: [[Int]] -> [(Int, Int)]\nfrequencyLists list1 =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = frequencyLists\n  if candidate [[1,2,3,2],[4,5,6,2],[7,8,9,5]] == [(1, 1), (2, 3), (3, 1), (4, 1), (5, 2), (6, 1), (7, 1), (8, 1), (9, 1)] then pure () else error \"assertion failed\"\n  if candidate [[1,2,3,4],[5,6,7,8],[9,10,11,12]] == [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)] then pure () else error \"assertion failed\"\n  if candidate [[20,30,40,17],[18,16,14,13],[10,20,30,40]] == [(20, 2), (30, 2), (40, 2), (17, 1), (18, 1), (16, 1), (14, 1), (13, 1), (10, 1)] then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_99_decimal_to_binary", "language": "hs", "prompt": "-- | Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndecimalToBinary :: Int -> String\ndecimalToBinary n =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = decimalToBinary\n  if candidate 8 == \"1000\" then pure () else error \"assertion failed\"\n  if candidate 18 == \"10010\" then pure () else error \"assertion failed\"\n  if candidate 7 == \"111\" then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
{"name": "mbpp_9_find_Rotations", "language": "hs", "prompt": "-- | Write a hsthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfindRotations :: String -> Int\nfindRotations str =", "doctests": "transform", "original": "C:\\Users\\Thomas\\PycharmProjects\\MultiPL-E\\datasets\\..\\datasets\\mbpp-typed\\mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "tests": "\nmain :: IO ()\nmain = do\n  let candidate = findRotations\n  if candidate \"aaaa\" == 1 then pure () else error \"assertion failed\"\n  if candidate \"ab\" == 2 then pure () else error \"assertion failed\"\n  if candidate \"abc\" == 3 then pure () else error \"assertion failed\"\n  pure ()", "stop_tokens": ["\n\n", "\n{-", "\n-- |", "\n--", "\ntype", "\ndata", "\nnewtype"]}
