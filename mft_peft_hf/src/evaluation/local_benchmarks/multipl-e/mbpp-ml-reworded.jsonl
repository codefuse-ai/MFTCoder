{"name": "mbpp_100_next_smallest_palindrome", "language": "ml", "prompt": "(**Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n*)\nlet next_smallest_palindrome (num : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = next_smallest_palindrome in\n  (assert ((candidate 99) = 101));\n  (assert ((candidate 1221) = 1331));\n  (assert ((candidate 120) = 121));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_101_kth_element", "language": "ml", "prompt": "(**Write a function to find the kth element in the given list using 1-based indexing.\n*)\nlet kth_element (arr : int list) (k : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = kth_element in\n  (assert ((candidate [12; 3; 5; 7; 19] 2) = 3));\n  (assert ((candidate [17; 24; 8; 23] 3) = 8));\n  (assert ((candidate [16; 21; 25; 36; 4] 4) = 36));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_102_snake_to_camel", "language": "ml", "prompt": "(**Write a function to convert a snake case string to camel case string.\n*)\nlet snake_to_camel (word : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = snake_to_camel in\n  (assert ((candidate \"python_program\") = \"PythonProgram\"));\n  (assert ((candidate \"python_language\") = \"PythonLanguage\"));\n  (assert ((candidate \"programming_language\") = \"ProgrammingLanguage\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_103_eulerian_num", "language": "ml", "prompt": "(**Write a function to find the Eulerian number a(n, m).\n*)\nlet eulerian_num (n : int) (m : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = eulerian_num in\n  (assert ((candidate 3 1) = 4));\n  (assert ((candidate 4 1) = 11));\n  (assert ((candidate 5 3) = 26));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_104_sort_sublists", "language": "ml", "prompt": "(**Write a function to sort each sublist of strings in a given list of lists.\n*)\nlet sort_sublists (input_list : string list list) : string list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sort_sublists in\n  (assert ((candidate [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"white\"; \"black\"; \"orange\"]]) = [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"black\"; \"orange\"; \"white\"]]));\n  (assert ((candidate [[\" red \"; \"green\"]; [\"blue \"; \" black\"]; [\" orange\"; \"brown\"]]) = [[\" red \"; \"green\"]; [\" black\"; \"blue \"]; [\" orange\"; \"brown\"]]));\n  (assert ((candidate [[\"zilver\"; \"gold\"]; [\"magnesium\"; \"aluminium\"]; [\"steel\"; \"bronze\"]]) = [[\"gold\"; \"zilver\"]; [\"aluminium\"; \"magnesium\"]; [\"bronze\"; \"steel\"]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_105_count", "language": "ml", "prompt": "(**Write a mlthon function to count true booleans in the given list.\n*)\nlet count (lst : bool list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count in\n  (assert ((candidate [true; false; true]) = 2));\n  (assert ((candidate [false; false]) = 0));\n  (assert ((candidate [true; true; true]) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_106_add_lists", "language": "ml", "prompt": "(**Write a function to append the given list to the given tuples.\n*)\nlet add_lists (test_list : int list) (test_tup :  int * int) :  int * int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = add_lists in\n  (assert ((candidate [5; 6; 7] (9, 10)) = (9, 10, 5, 6, 7)));\n  (assert ((candidate [6; 7; 8] (10, 11)) = (10, 11, 6, 7, 8)));\n  (assert ((candidate [7; 8; 9] (11, 12)) = (11, 12, 7, 8, 9)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_108_merge_sorted_list", "language": "ml", "prompt": "(**Write a function to merge three lists into a single sorted list.\n*)\nlet merge_sorted_list (num1 : int list) (num2 : int list) (num3 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = merge_sorted_list in\n  (assert ((candidate [25; 24; 15; 4; 5; 29; 110] [19; 20; 11; 56; 25; 233; 154] [24; 26; 54; 48]) = [4; 5; 11; 15; 19; 20; 24; 24; 25; 25; 26; 29; 48; 54; 56; 110; 154; 233]));\n  (assert ((candidate [1; 3; 5; 6; 8; 9] [2; 5; 7; 11] [1; 4; 7; 8; 12]) = [1; 1; 2; 3; 4; 5; 5; 6; 7; 7; 8; 8; 9; 11; 12]));\n  (assert ((candidate [18; 14; 10; 9; 8; 7; 9; 3; 2; 4; 1] [25; 35; 22; 85; 14; 65; 75; 25; 58] [12; 74; 9; 50; 61; 41]) = [1; 2; 3; 4; 7; 8; 9; 9; 9; 10; 12; 14; 14; 18; 22; 25; 25; 35; 41; 50; 58; 61; 65; 74; 75; 85]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_109_odd_Equivalent", "language": "ml", "prompt": "(**Write a mlthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n*)\nlet odd_Equivalent (s : string) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = odd_Equivalent in\n  (assert ((candidate \"011001\" 6) = 3));\n  (assert ((candidate \"11011\" 5) = 4));\n  (assert ((candidate \"1010\" 4) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_113_check_integer", "language": "ml", "prompt": "(**Write a function to check if a string represents an integer or not.\n*)\nlet check_integer (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_integer in\n  (assert ((candidate \"python\") = false));\n  (assert ((candidate \"1\") = true));\n  (assert ((candidate \"12345\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_116_tuple_to_int", "language": "ml", "prompt": "(**Write a function to convert a given tuple of positive integers into a single integer.\n*)\nlet tuple_to_int (nums :  int * int * int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = tuple_to_int in\n  (assert ((candidate (1, 2, 3)) = 123));\n  (assert ((candidate (4, 5, 6)) = 456));\n  (assert ((candidate (5, 6, 7)) = 567));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_117_list_to_float", "language": "ml", "prompt": "(**Write a function to convert all possible convertible elements in a list of lists to floats.\n*)\nlet list_to_float (test_list :  string * string list) :  float * float list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = list_to_float in\n  (assert ((candidate [(\"3\", \"4\"); (\"1\", \"26.45\"); (\"7.32\", \"8\"); (\"4\", \"8\")]) = [(3.0, 4.0); (1.0, 26.45); (7.32, 8.0); (4.0, 8.0)]));\n  (assert ((candidate [(\"4\", \"4\"); (\"2\", \"27\"); (\"4.12\", \"9\"); (\"7\", \"11\")]) = [(4.0, 4.0); (2.0, 27.0); (4.12, 9.0); (7.0, 11.0)]));\n  (assert ((candidate [(\"6\", \"78\"); (\"5\", \"26.45\"); (\"1.33\", \"4\"); (\"82\", \"13\")]) = [(6.0, 78.0); (5.0, 26.45); (1.33, 4.0); (82.0, 13.0)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_118_string_to_list", "language": "ml", "prompt": "(**Write a function to convert a string to a list of strings split on the space character.\n*)\nlet string_to_list (string : string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = string_to_list in\n  (assert ((candidate \"python programming\") = [\"python\"; \"programming\"]));\n  (assert ((candidate \"lists tuples strings\") = [\"lists\"; \"tuples\"; \"strings\"]));\n  (assert ((candidate \"write a program\") = [\"write\"; \"a\"; \"program\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_119_search", "language": "ml", "prompt": "(**Write a mlthon function to find the element that appears only once in a sorted list.\n*)\nlet search (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = search in\n  (assert ((candidate [1; 1; 2; 2; 3]) = 3));\n  (assert ((candidate [1; 1; 3; 3; 4; 4; 5; 5; 7; 7; 8]) = 8));\n  (assert ((candidate [1; 2; 2; 3; 3; 4; 4]) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_11_remove_Occ", "language": "ml", "prompt": "(**Write a mlthon function to remove first and last occurrence of a given character from the string.\n*)\nlet remove_Occ (s : string) (ch : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_Occ in\n  (assert ((candidate \"hello\" \"l\") = \"heo\"));\n  (assert ((candidate \"abcda\" \"a\") = \"bcd\"));\n  (assert ((candidate \"PHP\" \"P\") = \"H\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_120_max_product_tuple", "language": "ml", "prompt": "(**Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n*)\nlet max_product_tuple (list1 :  int * int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_product_tuple in\n  (assert ((candidate [(2, 7); (2, 6); (1, 8); (4, 9)]) = 36));\n  (assert ((candidate [(10, 20); (15, 2); (5, 10)]) = 200));\n  (assert ((candidate [(11, 44); (10, 15); (20, 5); (12, 9)]) = 484));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "ml", "prompt": "(**Write a function to sum all amicable numbers from 1 to a specified number.\n*)\nlet amicable_numbers_sum (limit : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = amicable_numbers_sum in\n  (assert ((candidate 999) = 504));\n  (assert ((candidate 9999) = 31626));\n  (assert ((candidate 99) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_125_find_length", "language": "ml", "prompt": "(**Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n*)\nlet find_length (string : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_length in\n  (assert ((candidate \"11000010001\") = 6));\n  (assert ((candidate \"10111\") = 1));\n  (assert ((candidate \"11011101100101\") = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_126_sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of common divisors of two given numbers.\n*)\nlet sum (a : int) (b : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum in\n  (assert ((candidate 10 15) = 6));\n  (assert ((candidate 100 150) = 93));\n  (assert ((candidate 4 6) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_127_multiply_int", "language": "ml", "prompt": "(**Write a function to multiply two integers.\n*)\nlet multiply_int (x : int) (y : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = multiply_int in\n  (assert ((candidate 10 20) = 200));\n  (assert ((candidate 5 10) = 50));\n  (assert ((candidate 4 8) = 32));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_128_long_words", "language": "ml", "prompt": "(**Write a function to find words that are longer than n characters from a given list of words.\n*)\nlet long_words (n : int) (str : string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = long_words in\n  (assert ((candidate 3 \"python is a programming language\") = [\"python\"; \"programming\"; \"language\"]));\n  (assert ((candidate 2 \"writing a program\") = [\"writing\"; \"program\"]));\n  (assert ((candidate 5 \"sorting list\") = [\"sorting\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_129_magic_square_test", "language": "ml", "prompt": "(**Write a function to calculate whether the matrix is a magic square.\n*)\nlet magic_square_test (my_matrix : int list list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = magic_square_test in\n  (assert ((candidate [[7; 12; 1; 14]; [2; 13; 8; 11]; [16; 3; 10; 5]; [9; 6; 15; 4]]) = true));\n  (assert ((candidate [[2; 7; 6]; [9; 5; 1]; [4; 3; 8]]) = true));\n  (assert ((candidate [[2; 7; 6]; [9; 5; 1]; [4; 3; 7]]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_12_sort_matrix", "language": "ml", "prompt": "(**Write a function to sort a given matrix in ascending order according to the sum of its rows.\n*)\nlet sort_matrix (M : int list list) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sort_matrix in\n  (assert ((candidate [[1; 2; 3]; [2; 4; 5]; [1; 1; 1]]) = [[1; 1; 1]; [1; 2; 3]; [2; 4; 5]]));\n  (assert ((candidate [[1; 2; 3]; [(~2); 4; (~5)]; [1; (~1); 1]]) = [[(~2); 4; (~5)]; [1; (~1); 1]; [1; 2; 3]]));\n  (assert ((candidate [[5; 8; 9]; [6; 4; 3]; [2; 1; 4]]) = [[2; 1; 4]; [6; 4; 3]; [5; 8; 9]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_130_max_occurrences", "language": "ml", "prompt": "(**Write a function to find the item with maximum frequency in a given list.\n*)\nlet max_occurrences (nums : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_occurrences in\n  (assert ((candidate [2; 3; 8; 4; 7; 9; 8; 2; 6; 5; 1; 6; 1; 2; 3; 2; 4; 6; 9; 1; 2]) = 2));\n  (assert ((candidate [2; 3; 8; 4; 7; 9; 8; 7; 9; 15; 14; 10; 12; 13; 16; 18]) = 8));\n  (assert ((candidate [10; 20; 20; 30; 40; 90; 80; 50; 30; 20; 50; 10]) = 20));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_131_reverse_vowels", "language": "ml", "prompt": "(**Write a mlthon function to reverse only the vowels of a given string (where y is not a vowel).\n*)\nlet reverse_vowels (str1 : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = reverse_vowels in\n  (assert ((candidate \"Python\") = \"Python\"));\n  (assert ((candidate \"USA\") = \"ASU\"));\n  (assert ((candidate \"ab\") = \"ab\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_132_tup_string", "language": "ml", "prompt": "(**Write a function to convert a list to a string.\n*)\nlet tup_string (tup1 : string list) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = tup_string in\n  (assert ((candidate [\"e\"; \"x\"; \"e\"; \"r\"; \"c\"; \"i\"; \"s\"; \"e\"; \"s\"]) = \"exercises\"));\n  (assert ((candidate [\"p\"; \"y\"; \"t\"; \"h\"; \"o\"; \"n\"]) = \"python\"));\n  (assert ((candidate [\"p\"; \"r\"; \"o\"; \"g\"; \"r\"; \"a\"; \"m\"]) = \"program\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_133_sum_negativenum", "language": "ml", "prompt": "(**Write a function to calculate the sum of the negative numbers of a given list of numbers.\n*)\nlet sum_negativenum (nums : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_negativenum in\n  (assert ((candidate [2; 4; (~6); (~9); 11; (~12); 14; (~5); 17]) = (~32)));\n  (assert ((candidate [10; 15; (~14); 13; (~18); 12; (~20)]) = (~52)));\n  (assert ((candidate [19; (~65); 57; 39; 152; (~639); 121; 44; 90; (~190)]) = (~894)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_135_hexagonal_num", "language": "ml", "prompt": "(**Write a function to find the nth hexagonal number.\n*)\nlet hexagonal_num (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = hexagonal_num in\n  (assert ((candidate 10) = 190));\n  (assert ((candidate 5) = 45));\n  (assert ((candidate 7) = 91));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "ml", "prompt": "(**Write a mlthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n*)\nlet is_Sum_Of_Powers_Of_Two (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_Sum_Of_Powers_Of_Two in\n  (assert ((candidate 10) = true));\n  (assert ((candidate 7) = false));\n  (assert ((candidate 14) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_141_pancake_sort", "language": "ml", "prompt": "(**Write a function to sort a list of elements.\n*)\nlet pancake_sort (nums : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = pancake_sort in\n  (assert ((candidate [15; 79; 25; 38; 69]) = [15; 25; 38; 69; 79]));\n  (assert ((candidate [98; 12; 54; 36; 85]) = [12; 36; 54; 85; 98]));\n  (assert ((candidate [41; 42; 32; 12; 23]) = [12; 23; 32; 41; 42]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_142_count_samepair", "language": "ml", "prompt": "(**Write a function to count number items that are identical in the same position of three given lists.\n*)\nlet count_samepair (list1 : int list) (list2 : int list) (list3 : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_samepair in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 9] [2; 1; 3; 1; 2; 6; 7; 9]) = 3));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 8] [2; 1; 3; 1; 2; 6; 7; 8]) = 4));\n  (assert ((candidate [1; 2; 3; 4; 2; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 8] [2; 1; 3; 1; 2; 6; 7; 8]) = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "ml", "prompt": "(**Write a mlthon function to find the maximum difference between any two elements in a given list.\n*)\nlet max_Abs_Diff (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_Abs_Diff in\n  (assert ((candidate [2; 1; 5; 3]) = 4));\n  (assert ((candidate [9; 3; 2; 5; 1]) = 8));\n  (assert ((candidate [3; 2; 1]) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_14_find_Volume", "language": "ml", "prompt": "(**Write a mlthon function to find the volume of a triangular prism.\n*)\nlet find_Volume (l : int) (b : int) (h : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Volume in\n  (assert ((candidate 10 8 6) = 240));\n  (assert ((candidate 3 2 2) = 6));\n  (assert ((candidate 1 2 1) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_160_find_solution", "language": "ml", "prompt": "(**Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n*)\nlet find_solution (a : int) (b : int) (n : int) :  int * int option =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_solution in\n  (assert ((candidate 2 3 7) = Some((2, 1))));\n  (assert ((candidate 4 2 7) = Some(None)));\n  (assert ((candidate 1 13 17) = Some((4, 1))));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_161_remove_elements", "language": "ml", "prompt": "(**Write a function to remove all elements from a given list present in another list.\n*)\nlet remove_elements (list1 : int list) (list2 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_elements in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] [2; 4; 6; 8]) = [1; 3; 5; 7; 9; 10]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] [1; 3; 5; 7]) = [2; 4; 6; 8; 9; 10]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] [5; 7]) = [1; 2; 3; 4; 6; 8; 9; 10]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_162_sum_series", "language": "ml", "prompt": "(**Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n*)\nlet sum_series (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_series in\n  (assert ((candidate 6) = 12));\n  (assert ((candidate 10) = 30));\n  (assert ((candidate 9) = 25));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_164_are_equivalent", "language": "ml", "prompt": "(**Write a function to determine if the sum of the divisors of two integers are the same.\n*)\nlet are_equivalent (num1 : int) (num2 : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = are_equivalent in\n  (assert ((candidate 36 57) = false));\n  (assert ((candidate 2 4) = false));\n  (assert ((candidate 23 47) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_165_count_char_position", "language": "ml", "prompt": "(**Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n*)\nlet count_char_position (str1 : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_char_position in\n  (assert ((candidate \"xbcefg\") = 2));\n  (assert ((candidate \"ABcED\") = 3));\n  (assert ((candidate \"AbgdeF\") = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_166_find_even_pair", "language": "ml", "prompt": "(**Write a function that counts the number of pairs of integers in a list that xor to an even number.\n*)\nlet find_even_pair (A : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_even_pair in\n  (assert ((candidate [5; 4; 7; 2; 1]) = 4));\n  (assert ((candidate [7; 2; 8; 1; 0; 5; 11]) = 9));\n  (assert ((candidate [1; 2; 3]) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_167_next_power_of_2", "language": "ml", "prompt": "(**Write a mlthon function to find the smallest power of 2 greater than or equal to n.\n*)\nlet next_power_of_2 (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = next_power_of_2 in\n  (assert ((candidate 0) = 1));\n  (assert ((candidate 5) = 8));\n  (assert ((candidate 17) = 32));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_168_frequency", "language": "ml", "prompt": "(**Write a function to count the number of occurrences of a number in a given list.\n*)\nlet frequency (a : int list) (x : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = frequency in\n  (assert ((candidate [1; 2; 3] 4) = 0));\n  (assert ((candidate [1; 2; 2; 3; 3; 3; 4] 3) = 3));\n  (assert ((candidate [0; 1; 2; 3; 1; 2] 1) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "ml", "prompt": "(**Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n*)\nlet text_lowercase_underscore (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_lowercase_underscore in\n  (assert ((candidate \"aab_cbbbc\") = true));\n  (assert ((candidate \"aab_Abbbc\") = false));\n  (assert ((candidate \"Aaab_abbbc\") = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_170_sum_range_list", "language": "ml", "prompt": "(**Write a function to find the sum of numbers in a list within a range specified by two indices.\n*)\nlet sum_range_list (list1 : int list) (m : int) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_range_list in\n  (assert ((candidate [2; 1; 5; 6; 8; 3; 4; 9; 10; 11; 8; 12] 8 10) = 29));\n  (assert ((candidate [2; 1; 5; 6; 8; 3; 4; 9; 10; 11; 8; 12] 5 7) = 16));\n  (assert ((candidate [2; 1; 5; 6; 8; 3; 4; 9; 10; 11; 8; 12] 7 10) = 38));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "ml", "prompt": "(**Write a function to find the perimeter of a regular pentagon from the length of its sides.\n*)\nlet perimeter_pentagon (a : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = perimeter_pentagon in\n  (assert ((candidate 5) = 25));\n  (assert ((candidate 10) = 50));\n  (assert ((candidate 15) = 75));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_172_count_occurance", "language": "ml", "prompt": "(**Write a function to count the number of occurence of the string 'std' in a given string.\n*)\nlet count_occurance (s : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_occurance in\n  (assert ((candidate \"letstdlenstdporstd\") = 3));\n  (assert ((candidate \"truststdsolensporsd\") = 1));\n  (assert ((candidate \"makestdsostdworthit\") = 2));\n  (assert ((candidate \"stds\") = 1));\n  (assert ((candidate \"\") = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_17_square_perimeter", "language": "ml", "prompt": "(**Write a function that returns the perimeter of a square given its side length as input.\n*)\nlet square_perimeter (a : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = square_perimeter in\n  (assert ((candidate 10) = 40));\n  (assert ((candidate 5) = 20));\n  (assert ((candidate 4) = 16));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "ml", "prompt": "(**Write a function to remove characters from the first string which are present in the second string.\n*)\nlet remove_dirty_chars (string : string) (second_string : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_dirty_chars in\n  (assert ((candidate \"probasscurve\" \"pros\") = \"bacuve\"));\n  (assert ((candidate \"digitalindia\" \"talent\") = \"digiidi\"));\n  (assert ((candidate \"exoticmiles\" \"toxic\") = \"emles\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_19_test_duplicate", "language": "ml", "prompt": "(**Write a function to find whether a given list of integers contains any duplicate element.\n*)\nlet test_duplicate (arraynums : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = test_duplicate in\n  (assert ((candidate [1; 2; 3; 4; 5]) = false));\n  (assert ((candidate [1; 2; 3; 4; 4]) = true));\n  (assert ((candidate [1; 1; 2; 2; 3; 3; 4; 4; 5]) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_20_is_woodall", "language": "ml", "prompt": "(**Write a function to check if the given number is woodball or not.\n*)\nlet is_woodall (x : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_woodall in\n  (assert ((candidate 383) = true));\n  (assert ((candidate 254) = false));\n  (assert ((candidate 200) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_223_is_majority", "language": "ml", "prompt": "(**Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n*)\nlet is_majority (arr : int list) (n : int) (x : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_majority in\n  (assert ((candidate [1; 2; 3; 3; 3; 3; 10] 7 3) = true));\n  (assert ((candidate [1; 1; 2; 4; 4; 4; 6; 6] 8 4) = false));\n  (assert ((candidate [1; 1; 1; 2; 2] 5 1) = true));\n  (assert ((candidate [1; 1; 2; 2] 5 1) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_224_count_Set_Bits", "language": "ml", "prompt": "(**Write a mlthon function to count the number of set bits (binary digits with value 1) in a given number.\n*)\nlet count_Set_Bits (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_Set_Bits in\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 4) = 1));\n  (assert ((candidate 6) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_226_odd_values_string", "language": "ml", "prompt": "(**Write a mlthon function to remove the characters which have odd index values of a given string.\n*)\nlet odd_values_string (str : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = odd_values_string in\n  (assert ((candidate \"abcdef\") = \"ace\"));\n  (assert ((candidate \"python\") = \"pto\"));\n  (assert ((candidate \"data\") = \"dt\"));\n  (assert ((candidate \"lambs\") = \"lms\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_227_min_of_three", "language": "ml", "prompt": "(**Write a function to find minimum of three numbers.\n*)\nlet min_of_three (a : int) (b : int) (c : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = min_of_three in\n  (assert ((candidate 10 20 0) = 0));\n  (assert ((candidate 19 15 18) = 15));\n  (assert ((candidate (~10) (~20) (~30)) = (~30)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "ml", "prompt": "(**Write a mlthon function to check whether all the bits are unset in the given range or not.\n*)\nlet all_Bits_Set_In_The_Given_Range (n : int) (l : int) (r : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = all_Bits_Set_In_The_Given_Range in\n  (assert ((candidate 4 1 2) = true));\n  (assert ((candidate 17 2 4) = true));\n  (assert ((candidate 39 4 6) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_229_re_arrange_array", "language": "ml", "prompt": "(**Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n*)\nlet re_arrange_array (arr : int list) (n : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = re_arrange_array in\n  (assert ((candidate [(~1); 2; (~3); 4; 5; 6; (~7); 8; 9] 9) = [(~1); (~3); (~7); 4; 5; 6; 2; 8; 9]));\n  (assert ((candidate [12; (~14); (~26); 13; 15] 5) = [(~14); (~26); 12; 13; 15]));\n  (assert ((candidate [10; 24; 36; (~42); (~39); (~78); 85] 7) = [(~42); (~39); (~78); 10; 24; 36; 85]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_230_replace_blank", "language": "ml", "prompt": "(**Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n*)\nlet replace_blank (str1 : string) (char : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = replace_blank in\n  (assert ((candidate \"hello people\" \"@\") = \"hello@people\"));\n  (assert ((candidate \"python program language\" \"$\") = \"python$program$language\"));\n  (assert ((candidate \"blank space\" \"-\") = \"blank-space\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_234_volume_cube", "language": "ml", "prompt": "(**Write a function to find the volume of a cube given its side length.\n*)\nlet volume_cube (l : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = volume_cube in\n  (assert ((candidate 3) = 27));\n  (assert ((candidate 2) = 8));\n  (assert ((candidate 5) = 125));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_238_number_of_substrings", "language": "ml", "prompt": "(**Write a mlthon function to count the number of non-empty substrings of a given string.\n*)\nlet number_of_substrings (str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = number_of_substrings in\n  (assert ((candidate \"abc\") = 6));\n  (assert ((candidate \"abcd\") = 10));\n  (assert ((candidate \"abcde\") = 15));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "ml", "prompt": "(**Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n*)\nlet get_total_number_of_sequences (m : int) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_total_number_of_sequences in\n  (assert ((candidate 10 4) = 4));\n  (assert ((candidate 5 2) = 6));\n  (assert ((candidate 16 3) = 84));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_242_count_charac", "language": "ml", "prompt": "(**Write a function to count the total number of characters in a string.\n*)\nlet count_charac (str1 : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_charac in\n  (assert ((candidate \"python programming\") = 18));\n  (assert ((candidate \"language\") = 8));\n  (assert ((candidate \"words\") = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "ml", "prompt": "(**Write a mlthon function to find the next perfect square greater than a given number.\n*)\nlet next_Perfect_Square (N : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = next_Perfect_Square in\n  (assert ((candidate 35) = 36));\n  (assert ((candidate 6) = 9));\n  (assert ((candidate 9) = 16));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_245_max_sum", "language": "ml", "prompt": "(**Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n*)\nlet max_sum (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_sum in\n  (assert ((candidate [1; 15; 51; 45; 33; 100; 12; 18; 9]) = 194));\n  (assert ((candidate [80; 60; 30; 40; 20; 10]) = 210));\n  (assert ((candidate [2; 3; 14; 16; 21; 23; 29; 30]) = 138));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_247_lps", "language": "ml", "prompt": "(**Write a function to find the length of the longest palindromic subsequence in the given string.\n*)\nlet lps (str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = lps in\n  (assert ((candidate \"TENS FOR TENS\") = 5));\n  (assert ((candidate \"CARDIO FOR CARDS\") = 7));\n  (assert ((candidate \"PART OF THE JOURNEY IS PART\") = 9));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_249_intersection_array", "language": "ml", "prompt": "(**Write a function to find the intersection of two lists.\n*)\nlet intersection_array (array_nums1 : int list) (array_nums2 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = intersection_array in\n  (assert ((candidate [1; 2; 3; 5; 7; 8; 9; 10] [1; 2; 4; 8; 9]) = [1; 2; 8; 9]));\n  (assert ((candidate [1; 2; 3; 5; 7; 8; 9; 10] [3; 5; 7; 9]) = [3; 5; 7; 9]));\n  (assert ((candidate [1; 2; 3; 5; 7; 8; 9; 10] [10; 20; 30; 40]) = [10]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_250_count_X", "language": "ml", "prompt": "(**Write a mlthon function that takes in a tuple and an element and counts the occcurences of the element in the list.\n*)\nlet count_X (tup : int list) (x : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_X in\n  (assert ((candidate [10; 8; 5; 2; 10; 15; 10; 8; 5; 8; 8; 2] 4) = 0));\n  (assert ((candidate [10; 8; 5; 2; 10; 15; 10; 8; 5; 8; 8; 2] 10) = 3));\n  (assert ((candidate [10; 8; 5; 2; 10; 15; 10; 8; 5; 8; 8; 2] 8) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_251_insert_element", "language": "ml", "prompt": "(**Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n*)\nlet insert_element (list : string list) (element : string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = insert_element in\n  (assert ((candidate [\"Red\"; \"Green\"; \"Black\"] \"c\") = [\"c\"; \"Red\"; \"c\"; \"Green\"; \"c\"; \"Black\"]));\n  (assert ((candidate [\"python\"; \"java\"] \"program\") = [\"program\"; \"python\"; \"program\"; \"java\"]));\n  (assert ((candidate [\"happy\"; \"sad\"] \"laugh\") = [\"laugh\"; \"happy\"; \"laugh\"; \"sad\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_252_convert", "language": "ml", "prompt": "(**Write a mlthon function to convert complex numbers to polar coordinates.\n*)\nlet convert (numbers : int) :  float * float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = convert in\n  (assert ((candidate 1) = (1.0, 0.0)));\n  (assert ((candidate 4) = (4.0, 0.0)));\n  (assert ((candidate 5) = (5.0, 0.0)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_255_combinations_colors", "language": "ml", "prompt": "(**Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n*)\nlet combinations_colors (l : string list) (n : int) : string list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = combinations_colors in\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"] 1) = [[\"Red\"]; [\"Green\"]; [\"Blue\"]]));\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"] 2) = [[\"Red\"; \"Red\"]; [\"Red\"; \"Green\"]; [\"Red\"; \"Blue\"]; [\"Green\"; \"Green\"]; [\"Green\"; \"Blue\"]; [\"Blue\"; \"Blue\"]]));\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"] 3) = [[\"Red\"; \"Red\"; \"Red\"]; [\"Red\"; \"Red\"; \"Green\"]; [\"Red\"; \"Red\"; \"Blue\"]; [\"Red\"; \"Green\"; \"Green\"]; [\"Red\"; \"Green\"; \"Blue\"]; [\"Red\"; \"Blue\"; \"Blue\"]; [\"Green\"; \"Green\"; \"Green\"]; [\"Green\"; \"Green\"; \"Blue\"]; [\"Green\"; \"Blue\"; \"Blue\"]; [\"Blue\"; \"Blue\"; \"Blue\"]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_256_count_Primes_nums", "language": "ml", "prompt": "(**Write a mlthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n*)\nlet count_Primes_nums (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_Primes_nums in\n  (assert ((candidate 5) = 2));\n  (assert ((candidate 10) = 4));\n  (assert ((candidate 100) = 25));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_257_swap_numbers", "language": "ml", "prompt": "(**Write a function that takes in two numbers and returns a list with the second number and then the first number.\n*)\nlet swap_numbers (a : int) (b : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = swap_numbers in\n  (assert ((candidate 10 20) = [20; 10]));\n  (assert ((candidate 15 17) = [17; 15]));\n  (assert ((candidate 100 200) = [200; 100]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_259_maximize_elements", "language": "ml", "prompt": "(**Write a function to maximize the given two lists.\n*)\nlet maximize_elements (test_tup1 : int list list) (test_tup2 : int list list) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = maximize_elements in\n  (assert ((candidate [[1; 3]; [4; 5]; [2; 9]; [1; 10]] [[6; 7]; [3; 9]; [1; 1]; [7; 3]]) = [[6; 7]; [4; 9]; [2; 9]; [7; 10]]));\n  (assert ((candidate [[2; 4]; [5; 6]; [3; 10]; [2; 11]] [[7; 8]; [4; 10]; [2; 2]; [8; 4]]) = [[7; 8]; [5; 10]; [3; 10]; [8; 11]]));\n  (assert ((candidate [[3; 5]; [6; 7]; [4; 11]; [3; 12]] [[8; 9]; [5; 11]; [3; 3]; [9; 5]]) = [[8; 9]; [6; 11]; [4; 11]; [9; 12]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_260_newman_prime", "language": "ml", "prompt": "(**Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n*)\nlet newman_prime (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = newman_prime in\n  (assert ((candidate 3) = 7));\n  (assert ((candidate 4) = 17));\n  (assert ((candidate 5) = 41));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_261_division_elements", "language": "ml", "prompt": "(**Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n*)\nlet division_elements (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = division_elements in\n  (assert ((candidate (10, 4, 6, 9) (5, 2, 3, 3)) = (2, 2, 2, 3)));\n  (assert ((candidate (12, 6, 8, 16) (6, 3, 4, 4)) = (2, 2, 2, 4)));\n  (assert ((candidate (20, 14, 36, 18) (5, 7, 6, 9)) = (4, 2, 6, 2)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_264_dog_age", "language": "ml", "prompt": "(**Write a function to calculate a dog's age in dog's years.\n*)\nlet dog_age (h_age : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = dog_age in\n  (assert ((candidate 12) = 61));\n  (assert ((candidate 15) = 73));\n  (assert ((candidate 24) = 109));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "ml", "prompt": "(**Write a function to find the lateral surface area of a cube given its side length.\n*)\nlet lateralsurface_cube (l : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = lateralsurface_cube in\n  (assert ((candidate 5) = 100));\n  (assert ((candidate 9) = 324));\n  (assert ((candidate 10) = 400));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_267_square_Sum", "language": "ml", "prompt": "(**Write a mlthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n*)\nlet square_Sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = square_Sum in\n  (assert ((candidate 2) = 10));\n  (assert ((candidate 3) = 35));\n  (assert ((candidate 4) = 84));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_268_find_star_num", "language": "ml", "prompt": "(**Write a function to find the n'th star number.\n*)\nlet find_star_num (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_star_num in\n  (assert ((candidate 3) = 37));\n  (assert ((candidate 4) = 73));\n  (assert ((candidate 5) = 121));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_269_ascii_value", "language": "ml", "prompt": "(**Write a function to find the ascii value of a character.\n*)\nlet ascii_value (k : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = ascii_value in\n  (assert ((candidate \"A\") = 65));\n  (assert ((candidate \"R\") = 82));\n  (assert ((candidate \"S\") = 83));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of even numbers at even positions of a list.\n*)\nlet sum_even_and_even_index (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_even_and_even_index in\n  (assert ((candidate [5; 6; 12; 1; 18; 8]) = 30));\n  (assert ((candidate [3; 20; 17; 9; 2; 10; 18; 13; 6; 18]) = 26));\n  (assert ((candidate [5; 6; 12; 1]) = 12));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_271_even_Power_Sum", "language": "ml", "prompt": "(**Write a mlthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n*)\nlet even_Power_Sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = even_Power_Sum in\n  (assert ((candidate 2) = 1056));\n  (assert ((candidate 3) = 8832));\n  (assert ((candidate 1) = 32));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_272_rear_extract", "language": "ml", "prompt": "(**Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n*)\nlet rear_extract (test_list :  int * string * int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = rear_extract in\n  (assert ((candidate [(1, \"Rash\", 21); (2, \"Varsha\", 20); (3, \"Kil\", 19)]) = [21; 20; 19]));\n  (assert ((candidate [(1, \"Sai\", 36); (2, \"Ayesha\", 25); (3, \"Salman\", 45)]) = [36; 25; 45]));\n  (assert ((candidate [(1, \"Sudeep\", 14); (2, \"Vandana\", 36); (3, \"Dawood\", 56)]) = [14; 36; 56]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_273_substract_elements", "language": "ml", "prompt": "(**Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n*)\nlet substract_elements (test_tup1 :  int * int * int) (test_tup2 :  int * int * int) :  int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = substract_elements in\n  (assert ((candidate (10, 4, 5) (2, 5, 18)) = (8, (~1), (~13))));\n  (assert ((candidate (11, 2, 3) (24, 45, 16)) = ((~13), (~43), (~13))));\n  (assert ((candidate (7, 18, 9) (10, 11, 12)) = ((~3), 7, (~3))));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "ml", "prompt": "(**Write a mlthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n*)\nlet even_binomial_Coeff_Sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = even_binomial_Coeff_Sum in\n  (assert ((candidate 4) = 8));\n  (assert ((candidate 6) = 32));\n  (assert ((candidate 2) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_277_dict_filter", "language": "ml", "prompt": "(**Write a function that takes in an association list and integer n and filters the association list to only include entries with values greater than or equal to n.\n*)\nlet dict_filter (dict : (string, int) list) (n : int) : (string, int) list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = dict_filter in\n  (assert ((candidate [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Kierra Gentry\", 165); (\"Pierre Cox\", 190)] 170) = [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Pierre Cox\", 190)]));\n  (assert ((candidate [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Kierra Gentry\", 165); (\"Pierre Cox\", 190)] 180) = [(\"Alden Cantrell\", 180); (\"Pierre Cox\", 190)]));\n  (assert ((candidate [(\"Cierra Vega\", 175); (\"Alden Cantrell\", 180); (\"Kierra Gentry\", 165); (\"Pierre Cox\", 190)] 190) = [(\"Pierre Cox\", 190)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_279_is_num_decagonal", "language": "ml", "prompt": "(**Write a function to find the nth decagonal number.\n*)\nlet is_num_decagonal (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_num_decagonal in\n  (assert ((candidate 3) = 27));\n  (assert ((candidate 7) = 175));\n  (assert ((candidate 10) = 370));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_280_sequential_search", "language": "ml", "prompt": "(**Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n*)\nlet sequential_search (dlist : int list) (item : int) :  bool * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sequential_search in\n  (assert ((candidate [11; 23; 58; 31; 56; 77; 43; 12; 65; 19] 31) = (true, 3)));\n  (assert ((candidate [12; 32; 45; 62; 35; 47; 44; 61] 61) = (true, 7)));\n  (assert ((candidate [9; 10; 17; 19; 22; 39; 48; 56] 48) = (true, 6)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_281_all_unique", "language": "ml", "prompt": "(**Write a mlthon function to check if the elements of a given list are unique or not.\n*)\nlet all_unique (test_list : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = all_unique in\n  (assert ((candidate [1; 2; 3]) = true));\n  (assert ((candidate [1; 2; 1; 2]) = false));\n  (assert ((candidate [1; 2; 3; 4; 5]) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_282_sub_list", "language": "ml", "prompt": "(**Write a function to subtract two lists element-wise.\n*)\nlet sub_list (nums1 : int list) (nums2 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sub_list in\n  (assert ((candidate [1; 2; 3] [4; 5; 6]) = [(~3); (~3); (~3)]));\n  (assert ((candidate [1; 2] [3; 4]) = [(~2); (~2)]));\n  (assert ((candidate [90; 120] [50; 70]) = [40; 50]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_283_validate", "language": "ml", "prompt": "(**Write a mlthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n*)\nlet validate (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = validate in\n  (assert ((candidate 1234) = true));\n  (assert ((candidate 51241) = false));\n  (assert ((candidate 321) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_285_text_match_two_three", "language": "ml", "prompt": "(**Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n*)\nlet text_match_two_three (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_match_two_three in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abbbba\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "ml", "prompt": "(**Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n*)\nlet max_sub_array_sum_repeated (a : int list) (n : int) (k : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_sub_array_sum_repeated in\n  (assert ((candidate [10; 20; (~30); (~1)] 4 3) = 30));\n  (assert ((candidate [(~1); 10; 20] 3 2) = 59));\n  (assert ((candidate [(~1); (~2); (~3)] 3 3) = (~1)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_287_square_Sum", "language": "ml", "prompt": "(**Write a mlthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n*)\nlet square_Sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = square_Sum in\n  (assert ((candidate 2) = 20));\n  (assert ((candidate 3) = 56));\n  (assert ((candidate 4) = 120));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_290_max_length", "language": "ml", "prompt": "(**Write a function to find the list of maximum length in a list of lists.\n*)\nlet max_length (list1 : int list list) :  int * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_length in\n  (assert ((candidate [[0]; [1; 3]; [5; 7]; [9; 11]; [13; 15; 17]]) = (3, [13; 15; 17])));\n  (assert ((candidate [[1]; [5; 7]; [10; 12; 14; 15]]) = (4, [10; 12; 14; 15])));\n  (assert ((candidate [[5]; [15; 20; 25]]) = (3, [15; 20; 25])));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_291_count_no_of_ways", "language": "ml", "prompt": "(**Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n*)\nlet count_no_of_ways (n : int) (k : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_no_of_ways in\n  (assert ((candidate 2 4) = 16));\n  (assert ((candidate 3 2) = 6));\n  (assert ((candidate 4 4) = 228));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_292_find", "language": "ml", "prompt": "(**Write a mlthon function to find quotient of two numbers (rounded down to the nearest integer).\n*)\nlet find (n : int) (m : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find in\n  (assert ((candidate 10 3) = 3));\n  (assert ((candidate 4 2) = 2));\n  (assert ((candidate 20 5) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_293_otherside_rightangle", "language": "ml", "prompt": "(**Write a function to find the third side of a right angled triangle.\n*)\nlet otherside_rightangle (w : int) (h : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = otherside_rightangle in\n  (assert ((candidate 7 8) = 10.63014581273465));\n  (assert ((candidate 3 4) = 5.0));\n  (assert ((candidate 7 15) = 16.55294535724685));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_295_sum_div", "language": "ml", "prompt": "(**Write a function to return the sum of all divisors of a number.\n*)\nlet sum_div (number : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_div in\n  (assert ((candidate 8) = 7));\n  (assert ((candidate 12) = 16));\n  (assert ((candidate 7) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_296_get_Inv_Count", "language": "ml", "prompt": "(**Write a mlthon function to count inversions in a list.\n*)\nlet get_Inv_Count (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_Inv_Count in\n  (assert ((candidate [1; 20; 6; 4; 5]) = 5));\n  (assert ((candidate [1; 2; 1]) = 1));\n  (assert ((candidate [1; 2; 5; 6; 1]) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_299_max_aggregate", "language": "ml", "prompt": "(**Write a function to calculate the maximum aggregate from the list of tuples.\n*)\nlet max_aggregate (stdata :  string * int list) :  string * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_aggregate in\n  (assert ((candidate [(\"Juan Whelan\", 90); (\"Sabah Colley\", 88); (\"Peter Nichols\", 7); (\"Juan Whelan\", 122); (\"Sabah Colley\", 84)]) = (\"Juan Whelan\", 212)));\n  (assert ((candidate [(\"Juan Whelan\", 50); (\"Sabah Colley\", 48); (\"Peter Nichols\", 37); (\"Juan Whelan\", 22); (\"Sabah Colley\", 14)]) = (\"Juan Whelan\", 72)));\n  (assert ((candidate [(\"Juan Whelan\", 10); (\"Sabah Colley\", 20); (\"Peter Nichols\", 30); (\"Juan Whelan\", 40); (\"Sabah Colley\", 50)]) = (\"Sabah Colley\", 70)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_304_find_Element", "language": "ml", "prompt": "(**Write a mlthon function to find element at a given index after number of rotations.\n*)\nlet find_Element (arr : int list) (ranges : int list list) (rotations : int) (index : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Element in\n  (assert ((candidate [1; 2; 3; 4; 5] [[0; 2]; [0; 3]] 2 1) = 3));\n  (assert ((candidate [1; 2; 3; 4] [[0; 1]; [0; 2]] 1 2) = 3));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [[0; 1]; [0; 2]] 1 1) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_305_start_withp", "language": "ml", "prompt": "(**Write a function to return two words from a list of words starting with letter 'p'.\n*)\nlet start_withp (words : string list) :  string * string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = start_withp in\n  (assert ((candidate [\"Python PHP\"; \"Java JavaScript\"; \"c c++\"]) = (\"Python\", \"PHP\")));\n  (assert ((candidate [\"Python Programming\"; \"Java Programming\"]) = (\"Python\", \"Programming\")));\n  (assert ((candidate [\"Pqrst Pqr\"; \"qrstuv\"]) = (\"Pqrst\", \"Pqr\")));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "ml", "prompt": "(**Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n*)\nlet max_sum_increasing_subseq (a : int list) (n : int) (index : int) (k : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_sum_increasing_subseq in\n  (assert ((candidate [1; 101; 2; 3; 100; 4; 5] 7 4 6) = 11));\n  (assert ((candidate [1; 101; 2; 3; 100; 4; 5] 7 2 5) = 7));\n  (assert ((candidate [11; 15; 19; 21; 26; 28; 31] 7 2 4) = 71));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_308_large_product", "language": "ml", "prompt": "(**Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n*)\nlet large_product (nums1 : int list) (nums2 : int list) (N : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = large_product in\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [3; 6; 8; 9; 10; 6] 3) = [60; 54; 50]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [3; 6; 8; 9; 10; 6] 4) = [60; 54; 50; 48]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] [3; 6; 8; 9; 10; 6] 5) = [60; 54; 50; 48; 45]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_309_maximum", "language": "ml", "prompt": "(**Write a mlthon function to find the maximum of two numbers.\n*)\nlet maximum (a : int) (b : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = maximum in\n  (assert ((candidate 5 10) = 10));\n  (assert ((candidate (~1) (~2)) = (~1)));\n  (assert ((candidate 9 7) = 9));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_310_string_to_tuple", "language": "ml", "prompt": "(**Write a function to convert a given string to a list of characters.\n*)\nlet string_to_tuple (str1 : string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = string_to_tuple in\n  (assert ((candidate \"python 3.0\") = [\"p\"; \"y\"; \"t\"; \"h\"; \"o\"; \"n\"; \"3\"; \".\"; \"0\"]));\n  (assert ((candidate \"item1\") = [\"i\"; \"t\"; \"e\"; \"m\"; \"1\"]));\n  (assert ((candidate \"15.10\") = [\"1\"; \"5\"; \".\"; \"1\"; \"0\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "ml", "prompt": "(**Write a mlthon function to find the highest power of 2 that is less than or equal to n.\n*)\nlet highest_Power_of_2 (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = highest_Power_of_2 in\n  (assert ((candidate 10) = 8));\n  (assert ((candidate 19) = 16));\n  (assert ((candidate 32) = 32));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_389_find_lucas", "language": "ml", "prompt": "(**Write a function to find the n'th lucas number.\n*)\nlet find_lucas (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_lucas in\n  (assert ((candidate 9) = 76));\n  (assert ((candidate 4) = 7));\n  (assert ((candidate 3) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_392_get_max_sum", "language": "ml", "prompt": "(**Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n*)\nlet get_max_sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_max_sum in\n  (assert ((candidate 60) = 106));\n  (assert ((candidate 10) = 12));\n  (assert ((candidate 2) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_393_max_length_list", "language": "ml", "prompt": "(**Write a function to find the list with maximum length.\n*)\nlet max_length_list (input_list : int list list) :  int * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_length_list in\n  (assert ((candidate [[0]; [1; 3]; [5; 7]; [9; 11]; [13; 15; 17]]) = (3, [13; 15; 17])));\n  (assert ((candidate [[1; 2; 3; 4; 5]; [1; 2; 3; 4]; [1; 2; 3]; [1; 2]; [1]]) = (5, [1; 2; 3; 4; 5])));\n  (assert ((candidate [[3; 4; 5]; [6; 7; 8; 9]; [10; 11; 12]]) = (4, [6; 7; 8; 9])));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_394_check_distinct", "language": "ml", "prompt": "(**Write a function to check if given list contains no duplicates.\n*)\nlet check_distinct (test_tup : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_distinct in\n  (assert ((candidate [1; 4; 5; 6; 1; 4]) = false));\n  (assert ((candidate [1; 4; 5; 6]) = true));\n  (assert ((candidate [2; 3; 4; 5; 6]) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "ml", "prompt": "(**Write a mlthon function to find the first non-repeated character in a given string.\n*)\nlet first_non_repeating_character (str1 : string) : string option =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = first_non_repeating_character in\n  (assert ((candidate \"abcabc\") = Some(None)));\n  (assert ((candidate \"abc\") = Some(\"a\")));\n  (assert ((candidate \"ababc\") = Some(\"c\")));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_396_check_char", "language": "ml", "prompt": "(**Write a function to check whether the given string starts and ends with the same character or not.\n*)\nlet check_char (string : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_char in\n  (assert ((candidate \"abba\") = \"Valid\"));\n  (assert ((candidate \"a\") = \"Valid\"));\n  (assert ((candidate \"abcd\") = \"Invalid\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_397_median_numbers", "language": "ml", "prompt": "(**Write a function to find the median of three numbers.\n*)\nlet median_numbers (a : int) (b : int) (c : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = median_numbers in\n  (assert ((candidate 25 55 65) = 55.0));\n  (assert ((candidate 20 10 30) = 20.0));\n  (assert ((candidate 15 45 75) = 45.0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_399_bitwise_xor", "language": "ml", "prompt": "(**Write a function to perform the mathematical bitwise xor operation across the given tuples.\n*)\nlet bitwise_xor (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = bitwise_xor in\n  (assert ((candidate (10, 4, 6, 9) (5, 2, 3, 3)) = (15, 6, 5, 10)));\n  (assert ((candidate (11, 5, 7, 10) (6, 3, 4, 4)) = (13, 6, 3, 14)));\n  (assert ((candidate (12, 6, 8, 11) (7, 4, 5, 6)) = (11, 2, 13, 13)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_3_is_not_prime", "language": "ml", "prompt": "(**Write a mlthon function to identify non-prime numbers.\n*)\nlet is_not_prime (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_not_prime in\n  (assert ((candidate 2) = false));\n  (assert ((candidate 10) = true));\n  (assert ((candidate 35) = true));\n  (assert ((candidate 37) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_400_extract_freq", "language": "ml", "prompt": "(**Write a function to extract the number of unique tuples in the given list.\n*)\nlet extract_freq (test_list :  int * int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = extract_freq in\n  (assert ((candidate [(3, 4); (1, 2); (4, 3); (5, 6)]) = 3));\n  (assert ((candidate [(4, 15); (2, 3); (5, 4); (6, 7)]) = 4));\n  (assert ((candidate [(5, 16); (2, 3); (6, 5); (6, 9)]) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_401_add_nested_tuples", "language": "ml", "prompt": "(**Write a function to perform index wise addition of list elements in the given two nested lists.\n*)\nlet add_nested_tuples (test_tup1 : int list list) (test_tup2 : int list list) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = add_nested_tuples in\n  (assert ((candidate [[1; 3]; [4; 5]; [2; 9]; [1; 10]] [[6; 7]; [3; 9]; [1; 1]; [7; 3]]) = [[7; 10]; [7; 14]; [3; 10]; [8; 13]]));\n  (assert ((candidate [[2; 4]; [5; 6]; [3; 10]; [2; 11]] [[7; 8]; [4; 10]; [2; 2]; [8; 4]]) = [[9; 12]; [9; 16]; [5; 12]; [10; 15]]));\n  (assert ((candidate [[3; 5]; [6; 7]; [4; 11]; [3; 12]] [[8; 9]; [5; 11]; [3; 3]; [9; 5]]) = [[11; 14]; [11; 18]; [7; 14]; [12; 17]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_404_minimum", "language": "ml", "prompt": "(**Write a mlthon function to find the minimum of two numbers.\n*)\nlet minimum (a : int) (b : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = minimum in\n  (assert ((candidate 1 2) = 1));\n  (assert ((candidate (~5) (~4)) = (~5)));\n  (assert ((candidate 0 0) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_406_find_Parity", "language": "ml", "prompt": "(**Write a mlthon function to find whether the parity of a given number is odd.\n*)\nlet find_Parity (x : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Parity in\n  (assert ((candidate 12) = false));\n  (assert ((candidate 7) = true));\n  (assert ((candidate 10) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "ml", "prompt": "(**Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n*)\nlet k_smallest_pairs (nums1 : int list) (nums2 : int list) (k : int) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = k_smallest_pairs in\n  (assert ((candidate [1; 3; 7] [2; 4; 6] 2) = [[1; 2]; [1; 4]]));\n  (assert ((candidate [1; 3; 7] [2; 4; 6] 1) = [[1; 2]]));\n  (assert ((candidate [1; 3; 7] [2; 4; 6] 7) = [[1; 2]; [1; 4]; [3; 2]; [1; 6]; [3; 4]; [3; 6]; [7; 2]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_409_min_product_tuple", "language": "ml", "prompt": "(**Write a function to find the minimum product from the pairs of tuples within a given list.\n*)\nlet min_product_tuple (list1 :  int * int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = min_product_tuple in\n  (assert ((candidate [(2, 7); (2, 6); (1, 8); (4, 9)]) = 8));\n  (assert ((candidate [(10, 20); (15, 2); (5, 10)]) = 30));\n  (assert ((candidate [(11, 44); (10, 15); (20, 5); (12, 9)]) = 100));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_411_snake_to_camel", "language": "ml", "prompt": "(**Write a function to convert the given snake case string to camel case string.\n*)\nlet snake_to_camel (word : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = snake_to_camel in\n  (assert ((candidate \"android_tv\") = \"AndroidTv\"));\n  (assert ((candidate \"google_pixel\") = \"GooglePixel\"));\n  (assert ((candidate \"apple_watch\") = \"AppleWatch\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_412_remove_odd", "language": "ml", "prompt": "(**Write a mlthon function to remove odd numbers from a given list.\n*)\nlet remove_odd (l : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_odd in\n  (assert ((candidate [1; 2; 3]) = [2]));\n  (assert ((candidate [2; 4; 6]) = [2; 4; 6]));\n  (assert ((candidate [10; 20; 3]) = [10; 20]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_414_overlapping", "language": "ml", "prompt": "(**Write a mlthon function to check whether any value in a sequence exists in a sequence or not.\n*)\nlet overlapping (list1 : int list) (list2 : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = overlapping in\n  (assert ((candidate [1; 2; 3; 4; 5] [6; 7; 8; 9]) = false));\n  (assert ((candidate [1; 2; 3] [4; 5; 6]) = false));\n  (assert ((candidate [1; 4; 5] [1; 4; 5]) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_415_max_Product", "language": "ml", "prompt": "(**Write a mlthon function to find a pair with highest product from a given list of integers.\n*)\nlet max_Product (arr : int list) :  int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_Product in\n  (assert ((candidate [1; 2; 3; 4; 7; 0; 8; 4]) = (7, 8)));\n  (assert ((candidate [0; (~1); (~2); (~4); 5; 0; (~6)]) = ((~4), (~6))));\n  (assert ((candidate [1; 2; 3]) = (2, 3)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_417_group_tuples", "language": "ml", "prompt": "(**Write a function to find common first element in given list of lists.\n*)\nlet group_tuples (Input : string list list) : string list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = group_tuples in\n  (assert ((candidate [[\"x\"; \"y\"]; [\"x\"; \"z\"]; [\"w\"; \"t\"]]) = [[\"x\"; \"y\"; \"z\"]; [\"w\"; \"t\"]]));\n  (assert ((candidate [[\"a\"; \"b\"]; [\"a\"; \"c\"]; [\"d\"; \"e\"]]) = [[\"a\"; \"b\"; \"c\"]; [\"d\"; \"e\"]]));\n  (assert ((candidate [[\"f\"; \"g\"]; [\"f\"; \"g\"]; [\"h\"; \"i\"]]) = [[\"f\"; \"g\"; \"g\"]; [\"h\"; \"i\"]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_420_cube_Sum", "language": "ml", "prompt": "(**Write a mlthon function to find the cube sum of first n even natural numbers.\n*)\nlet cube_Sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = cube_Sum in\n  (assert ((candidate 2) = 72));\n  (assert ((candidate 3) = 288));\n  (assert ((candidate 4) = 800));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_421_concatenate_tuple", "language": "ml", "prompt": "(**Write a function to concatenate each element of tuple by the delimiter.\n*)\nlet concatenate_tuple (test_tup :  string * string * int * string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = concatenate_tuple in\n  (assert ((candidate (\"ID\", \"is\", 4, \"UTS\")) = \"ID-is-4-UTS\"));\n  (assert ((candidate (\"QWE\", \"is\", 4, \"RTY\")) = \"QWE-is-4-RTY\"));\n  (assert ((candidate (\"ZEN\", \"is\", 4, \"OP\")) = \"ZEN-is-4-OP\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "ml", "prompt": "(**Write a mlthon function to find the average of cubes of first n natural numbers.\n*)\nlet find_Average_Of_Cube (n : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Average_Of_Cube in\n  (assert ((candidate 2) = 4.5));\n  (assert ((candidate 3) = 12.0));\n  (assert ((candidate 1) = 1.0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_424_extract_rear", "language": "ml", "prompt": "(**Write a function to extract only the rear index element of each string in the given tuple.\n*)\nlet extract_rear (test_tuple :  string * string * string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = extract_rear in\n  (assert ((candidate (\"Mers\", \"for\", \"Vers\")) = [\"s\"; \"r\"; \"s\"]));\n  (assert ((candidate (\"Avenge\", \"for\", \"People\")) = [\"e\"; \"r\"; \"e\"]));\n  (assert ((candidate (\"Gotta\", \"get\", \"go\")) = [\"a\"; \"t\"; \"o\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "ml", "prompt": "(**Write a function to filter odd numbers.\n*)\nlet filter_oddnumbers (nums : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = filter_oddnumbers in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [1; 3; 5; 7; 9]));\n  (assert ((candidate [10; 20; 45; 67; 84; 93]) = [45; 67; 93]));\n  (assert ((candidate [5; 7; 9; 8; 6; 4; 3]) = [5; 7; 9; 3]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_427_change_date_format", "language": "ml", "prompt": "(**Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n*)\nlet change_date_format (dt : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = change_date_format in\n  (assert ((candidate \"2026-01-02\") = \"02-01-2026\"));\n  (assert ((candidate \"2020-11-13\") = \"13-11-2020\"));\n  (assert ((candidate \"2021-04-26\") = \"26-04-2021\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_428_shell_sort", "language": "ml", "prompt": "(**Write a function to sort the given list by using shell sort.\n*)\nlet shell_sort (my_list : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = shell_sort in\n  (assert ((candidate [12; 23; 4; 5; 3; 2; 12; 81; 56; 95]) = [2; 3; 4; 5; 12; 12; 23; 56; 81; 95]));\n  (assert ((candidate [24; 22; 39; 34; 87; 73; 68]) = [22; 24; 34; 39; 68; 73; 87]));\n  (assert ((candidate [32; 30; 16; 96; 82; 83; 74]) = [16; 30; 32; 74; 82; 83; 96]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_429_and_tuples", "language": "ml", "prompt": "(**Write a function to extract the elementwise and tuples from the given two tuples.\n*)\nlet and_tuples (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = and_tuples in\n  (assert ((candidate (10, 4, 6, 9) (5, 2, 3, 3)) = (0, 0, 2, 1)));\n  (assert ((candidate (1, 2, 3, 4) (5, 6, 7, 8)) = (1, 2, 3, 0)));\n  (assert ((candidate (8, 9, 11, 12) (7, 13, 14, 17)) = (0, 9, 10, 0)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_430_parabola_directrix", "language": "ml", "prompt": "(**Write a function to find the directrix of a parabola.\n*)\nlet parabola_directrix (a : int) (b : int) (c : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = parabola_directrix in\n  (assert ((candidate 5 3 2) = (~198)));\n  (assert ((candidate 9 8 4) = (~2336)));\n  (assert ((candidate 2 4 6) = (~130)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_432_median_trapezium", "language": "ml", "prompt": "(**Write a function to find the median length of a trapezium.\n*)\nlet median_trapezium (base1 : int) (base2 : int) (height : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = median_trapezium in\n  (assert ((candidate 15 25 35) = 20.0));\n  (assert ((candidate 10 20 30) = 15.0));\n  (assert ((candidate 6 9 4) = 7.5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_433_check_greater", "language": "ml", "prompt": "(**Write a function to check whether the entered number is greater than the elements of the given list.\n*)\nlet check_greater (arr : int list) (number : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_greater in\n  (assert ((candidate [1; 2; 3; 4; 5] 4) = false));\n  (assert ((candidate [2; 3; 4; 5; 6] 8) = true));\n  (assert ((candidate [9; 7; 4; 8; 6; 1] 11) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_434_text_match_one", "language": "ml", "prompt": "(**Write a function that matches a string that has an a followed by one or more b's.\n*)\nlet text_match_one (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_match_one in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abba\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_435_last_Digit", "language": "ml", "prompt": "(**Write a mlthon function to find the last digit of a given number.\n*)\nlet last_Digit (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = last_Digit in\n  (assert ((candidate 123) = 3));\n  (assert ((candidate 25) = 5));\n  (assert ((candidate 30) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_436_neg_nos", "language": "ml", "prompt": "(**Write a mlthon function to return the negative numbers in a list.\n*)\nlet neg_nos (list1 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = neg_nos in\n  (assert ((candidate [(~1); 4; 5; (~6)]) = [(~1); (~6)]));\n  (assert ((candidate [(~1); (~2); 3; 4]) = [(~1); (~2)]));\n  (assert ((candidate [(~7); (~6); 8; 9]) = [(~7); (~6)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_437_remove_odd", "language": "ml", "prompt": "(**Write a function to remove odd characters in a string.\n*)\nlet remove_odd (str1 : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_odd in\n  (assert ((candidate \"python\") = \"yhn\"));\n  (assert ((candidate \"program\") = \"rga\"));\n  (assert ((candidate \"language\") = \"agae\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_438_count_bidirectional", "language": "ml", "prompt": "(**Write a function to count bidirectional tuple pairs.\n*)\nlet count_bidirectional (test_list :  int * int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_bidirectional in\n  (assert ((candidate [(5, 6); (1, 2); (6, 5); (9, 1); (6, 5); (2, 1)]) = 3));\n  (assert ((candidate [(5, 6); (1, 3); (6, 5); (9, 1); (6, 5); (2, 1)]) = 2));\n  (assert ((candidate [(5, 6); (1, 2); (6, 5); (9, 2); (6, 5); (2, 1)]) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_439_multiple_to_single", "language": "ml", "prompt": "(**Write a function to join a list of multiple integers into a single integer.\n*)\nlet multiple_to_single (L : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = multiple_to_single in\n  (assert ((candidate [11; 33; 50]) = 113350));\n  (assert ((candidate [(~1); 2; 3; 4; 5; 6]) = (~123456)));\n  (assert ((candidate [10; 15; 20; 25]) = 10152025));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_440_find_adverb_position", "language": "ml", "prompt": "(**Write a function to find the first adverb and their positions in a given sentence.\n*)\nlet find_adverb_position (text : string) :  int * int * string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_adverb_position in\n  (assert ((candidate \"clearly!! we can see the sky\") = (0, 7, \"clearly\")));\n  (assert ((candidate \"seriously!! there are many roses\") = (0, 9, \"seriously\")));\n  (assert ((candidate \"unfortunately!! sita is going to home\") = (0, 13, \"unfortunately\")));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_441_surfacearea_cube", "language": "ml", "prompt": "(**Write a function to find the surface area of a cube of a given size.\n*)\nlet surfacearea_cube (l : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = surfacearea_cube in\n  (assert ((candidate 5) = 150));\n  (assert ((candidate 3) = 54));\n  (assert ((candidate 10) = 600));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_442_positive_count", "language": "ml", "prompt": "(**Write a function to find the ration of positive numbers in a list of integers.\n*)\nlet positive_count (nums : int list) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = positive_count in\n  (assert ((candidate [0; 1; 2; (~1); (~5); 6; 0; (~3); (~2); 3; 4; 6; 8]) = 0.54));\n  (assert ((candidate [2; 1; 2; (~1); (~5); 6; 4; (~3); (~2); 3; 4; 6; 8]) = 0.69));\n  (assert ((candidate [2; 4; (~6); (~9); 11; (~12); 14; (~5); 17]) = 0.56));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_443_largest_neg", "language": "ml", "prompt": "(**Write a mlthon function to find the largest negative number from the given list.\n*)\nlet largest_neg (list1 : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = largest_neg in\n  (assert ((candidate [1; 2; 3; (~4); (~6)]) = (~6)));\n  (assert ((candidate [1; 2; 3; (~8); (~9)]) = (~9)));\n  (assert ((candidate [1; 2; 3; 4; (~1)]) = (~1)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_444_trim_tuple", "language": "ml", "prompt": "(**Write a function to trim each list by k in the given lists.\n*)\nlet trim_tuple (test_list : int list list) (K : int) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = trim_tuple in\n  (assert ((candidate [[5; 3; 2; 1; 4]; [3; 4; 9; 2; 1]; [9; 1; 2; 3; 5]; [4; 8; 2; 1; 7]] 2) = [[2]; [9]; [2]; [2]]));\n  (assert ((candidate [[5; 3; 2; 1; 4]; [3; 4; 9; 2; 1]; [9; 1; 2; 3; 5]; [4; 8; 2; 1; 7]] 1) = [[3; 2; 1]; [4; 9; 2]; [1; 2; 3]; [8; 2; 1]]));\n  (assert ((candidate [[7; 8; 4; 9]; [11; 8; 12; 4]; [4; 1; 7; 8]; [3; 6; 9; 7]] 1) = [[8; 4]; [8; 12]; [1; 7]; [6; 9]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_445_index_multiplication", "language": "ml", "prompt": "(**Write a function to perform index wise multiplication of list elements in the given two lists.\n*)\nlet index_multiplication (test_tup1 : int list list) (test_tup2 : int list list) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = index_multiplication in\n  (assert ((candidate [[1; 3]; [4; 5]; [2; 9]; [1; 10]] [[6; 7]; [3; 9]; [1; 1]; [7; 3]]) = [[6; 21]; [12; 45]; [2; 9]; [7; 30]]));\n  (assert ((candidate [[2; 4]; [5; 6]; [3; 10]; [2; 11]] [[7; 8]; [4; 10]; [2; 2]; [8; 4]]) = [[14; 32]; [20; 60]; [6; 20]; [16; 44]]));\n  (assert ((candidate [[3; 5]; [6; 7]; [4; 11]; [3; 12]] [[8; 9]; [5; 11]; [3; 3]; [9; 5]]) = [[24; 45]; [30; 77]; [12; 33]; [27; 60]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_447_cube_nums", "language": "ml", "prompt": "(**Write a function to find cubes of individual elements in a list.\n*)\nlet cube_nums (nums : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = cube_nums in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [1; 8; 27; 64; 125; 216; 343; 512; 729; 1000]));\n  (assert ((candidate [10; 20; 30]) = [1000; 8000; 27000]));\n  (assert ((candidate [12; 15]) = [1728; 3375]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_448_cal_sum", "language": "ml", "prompt": "(**Write a function to calculate the sum of perrin numbers.\n*)\nlet cal_sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = cal_sum in\n  (assert ((candidate 9) = 49));\n  (assert ((candidate 10) = 66));\n  (assert ((candidate 11) = 88));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_450_extract_string", "language": "ml", "prompt": "(**Write a function to extract specified size of strings from a given list of string values.\n*)\nlet extract_string (str : string list) (l : int) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = extract_string in\n  (assert ((candidate [\"Python\"; \"list\"; \"exercises\"; \"practice\"; \"solution\"] 8) = [\"practice\"; \"solution\"]));\n  (assert ((candidate [\"Python\"; \"list\"; \"exercises\"; \"practice\"; \"solution\"] 6) = [\"Python\"]));\n  (assert ((candidate [\"Python\"; \"list\"; \"exercises\"; \"practice\"; \"solution\"] 9) = [\"exercises\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_451_remove_whitespaces", "language": "ml", "prompt": "(**Write a function to remove all whitespaces from the given string.\n*)\nlet remove_whitespaces (text1 : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_whitespaces in\n  (assert ((candidate \" Google    Flutter \") = \"GoogleFlutter\"));\n  (assert ((candidate \" Google    Dart \") = \"GoogleDart\"));\n  (assert ((candidate \" iOS    Swift \") = \"iOSSwift\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_452_loss_amount", "language": "ml", "prompt": "(**Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n*)\nlet loss_amount (actual_cost : int) (sale_amount : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = loss_amount in\n  (assert ((candidate 1500 1200) = 0));\n  (assert ((candidate 100 200) = 100));\n  (assert ((candidate 2000 5000) = 3000));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_453_sumofFactors", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of even factors of a number.\n*)\nlet sumofFactors (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sumofFactors in\n  (assert ((candidate 18) = 26));\n  (assert ((candidate 30) = 48));\n  (assert ((candidate 6) = 8));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_454_text_match_wordz", "language": "ml", "prompt": "(**Write a function that matches a word containing 'z'.\n*)\nlet text_match_wordz (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_match_wordz in\n  (assert ((candidate \"pythonz.\") = true));\n  (assert ((candidate \"xyz.\") = true));\n  (assert ((candidate \"  lang  .\") = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "ml", "prompt": "(**Write a function to check whether the given month number contains 31 days or not.\n*)\nlet check_monthnumb_number (monthnum2 : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_monthnumb_number in\n  (assert ((candidate 5) = true));\n  (assert ((candidate 2) = false));\n  (assert ((candidate 6) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_456_reverse_string_list", "language": "ml", "prompt": "(**Write a function to reverse each string in a given list of string values.\n*)\nlet reverse_string_list (stringlist : string list) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = reverse_string_list in\n  (assert ((candidate [\"Red\"; \"Green\"; \"Blue\"; \"White\"; \"Black\"]) = [\"deR\"; \"neerG\"; \"eulB\"; \"etihW\"; \"kcalB\"]));\n  (assert ((candidate [\"john\"; \"amal\"; \"joel\"; \"george\"]) = [\"nhoj\"; \"lama\"; \"leoj\"; \"egroeg\"]));\n  (assert ((candidate [\"jack\"; \"john\"; \"mary\"]) = [\"kcaj\"; \"nhoj\"; \"yram\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_458_rectangle_area", "language": "ml", "prompt": "(**Write a function to find the area of a rectangle.\n*)\nlet rectangle_area (l : int) (b : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = rectangle_area in\n  (assert ((candidate 10 20) = 200));\n  (assert ((candidate 10 5) = 50));\n  (assert ((candidate 4 2) = 8));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_459_remove_uppercase", "language": "ml", "prompt": "(**Write a function to remove uppercase substrings from a given string.\n*)\nlet remove_uppercase (str1 : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_uppercase in\n  (assert ((candidate \"cAstyoUrFavoRitETVshoWs\") = \"cstyoravoitshos\"));\n  (assert ((candidate \"wAtchTheinTernEtrAdIo\") = \"wtchheinerntrdo\"));\n  (assert ((candidate \"VoicESeaRchAndreComMendaTionS\") = \"oiceachndreomendaion\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_460_Extract", "language": "ml", "prompt": "(**Write a mlthon function to get the first element of each sublist.\n*)\nlet Extract (lst : int list list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = Extract in\n  (assert ((candidate [[1; 2]; [3; 4; 5]; [6; 7; 8; 9]]) = [1; 3; 6]));\n  (assert ((candidate [[1; 2; 3]; [4; 5]]) = [1; 4]));\n  (assert ((candidate [[9; 8; 1]; [1; 2]]) = [9; 1]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_461_upper_ctr", "language": "ml", "prompt": "(**Write a mlthon function to count the upper case characters in a given string.\n*)\nlet upper_ctr (str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = upper_ctr in\n  (assert ((candidate \"PYthon\") = 1));\n  (assert ((candidate \"BigData\") = 1));\n  (assert ((candidate \"program\") = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_463_max_subarray_product", "language": "ml", "prompt": "(**Write a function to find the maximum product sublist of the given list.\n*)\nlet max_subarray_product (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_subarray_product in\n  (assert ((candidate [1; (~2); (~3); 0; 7; (~8); (~2)]) = 112));\n  (assert ((candidate [6; (~3); (~10); 0; 2]) = 180));\n  (assert ((candidate [(~2); (~40); 0; (~2); (~3)]) = 80));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_464_check_value", "language": "ml", "prompt": "(**Write a function to check if all values are same in an association list.\n*)\nlet check_value (dict : (string, int) list) (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_value in\n  (assert ((candidate [(\"Cierra Vega\", 12); (\"Alden Cantrell\", 12); (\"Kierra Gentry\", 12); (\"Pierre Cox\", 12)] 10) = false));\n  (assert ((candidate [(\"Cierra Vega\", 12); (\"Alden Cantrell\", 12); (\"Kierra Gentry\", 12); (\"Pierre Cox\", 12)] 12) = true));\n  (assert ((candidate [(\"Cierra Vega\", 12); (\"Alden Cantrell\", 12); (\"Kierra Gentry\", 12); (\"Pierre Cox\", 12)] 5) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_468_max_product", "language": "ml", "prompt": "(**Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n*)\nlet max_product (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_product in\n  (assert ((candidate [3; 100; 4; 5; 150; 6]) = 3000));\n  (assert ((candidate [4; 42; 55; 68; 80]) = 50265600));\n  (assert ((candidate [10; 22; 9; 33; 21; 50; 41; 60]) = 2460));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_470_add_pairwise", "language": "ml", "prompt": "(**Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n*)\nlet add_pairwise (test_tup :  int * int * int * int * int) :  int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = add_pairwise in\n  (assert ((candidate (1, 5, 7, 8, 10)) = (6, 12, 15, 18)));\n  (assert ((candidate (2, 6, 8, 9, 11)) = (8, 14, 17, 20)));\n  (assert ((candidate (3, 7, 9, 10, 12)) = (10, 16, 19, 22)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_471_find_remainder", "language": "ml", "prompt": "(**Write a mlthon function to find the product of the list multiplication modulo n.\n*)\nlet find_remainder (arr : int list) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_remainder in\n  (assert ((candidate [100; 10; 5; 25; 35; 14] 11) = 9));\n  (assert ((candidate [1; 1; 1] 1) = 0));\n  (assert ((candidate [1; 2; 1] 2) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_472_check_Consecutive", "language": "ml", "prompt": "(**Write a mlthon function to check whether the given list contains consecutive numbers or not.\n*)\nlet check_Consecutive (l : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_Consecutive in\n  (assert ((candidate [1; 2; 3; 4; 5]) = true));\n  (assert ((candidate [1; 2; 3; 5; 6]) = false));\n  (assert ((candidate [1; 2; 1]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_474_replace_char", "language": "ml", "prompt": "(**Write a function to replace characters in a string.\n*)\nlet replace_char (str1 : string) (ch : string) (newch : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = replace_char in\n  (assert ((candidate \"polygon\" \"y\" \"l\") = \"pollgon\"));\n  (assert ((candidate \"character\" \"c\" \"a\") = \"aharaater\"));\n  (assert ((candidate \"python\" \"l\" \"a\") = \"python\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_475_sort_counter", "language": "ml", "prompt": "(**Write a function to sort an association list by value.\n*)\nlet sort_counter (dict1 : (string, int) list) :  string * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sort_counter in\n  (assert ((candidate [(\"Math\", 81); (\"Physics\", 83); (\"Chemistry\", 87)]) = [(\"Chemistry\", 87); (\"Physics\", 83); (\"Math\", 81)]));\n  (assert ((candidate [(\"Math\", 400); (\"Physics\", 300); (\"Chemistry\", 250)]) = [(\"Math\", 400); (\"Physics\", 300); (\"Chemistry\", 250)]));\n  (assert ((candidate [(\"Math\", 900); (\"Physics\", 1000); (\"Chemistry\", 1250)]) = [(\"Chemistry\", 1250); (\"Physics\", 1000); (\"Math\", 900)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_476_big_sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of the largest and smallest value in a given list.\n*)\nlet big_sum (nums : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = big_sum in\n  (assert ((candidate [1; 2; 3]) = 4));\n  (assert ((candidate [(~1); 2; 3; 4]) = 3));\n  (assert ((candidate [2; 3; 6]) = 8));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_477_is_lower", "language": "ml", "prompt": "(**Write a mlthon function to convert the given string to lower case.\n*)\nlet is_lower (string : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_lower in\n  (assert ((candidate \"InValid\") = \"invalid\"));\n  (assert ((candidate \"TruE\") = \"true\"));\n  (assert ((candidate \"SenTenCE\") = \"sentence\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_478_remove_lowercase", "language": "ml", "prompt": "(**Write a function to remove lowercase substrings from a given string.\n*)\nlet remove_lowercase (str1 : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_lowercase in\n  (assert ((candidate \"PYTHon\") = \"PYTH\"));\n  (assert ((candidate \"FInD\") = \"FID\"));\n  (assert ((candidate \"STRinG\") = \"STRG\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_479_first_Digit", "language": "ml", "prompt": "(**Write a mlthon function to find the first digit of a given number.\n*)\nlet first_Digit (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = first_Digit in\n  (assert ((candidate 123) = 1));\n  (assert ((candidate 456) = 4));\n  (assert ((candidate 12) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_4_heap_queue_largest", "language": "ml", "prompt": "(**Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n*)\nlet heap_queue_largest (nums : int list) (n : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = heap_queue_largest in\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 22; 58] 3) = [85; 75; 65]));\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 22; 58] 2) = [85; 75]));\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 22; 58] 5) = [85; 75; 65; 58; 35]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_554_Split", "language": "ml", "prompt": "(**Write a mlthon function which takes a list of integers and only returns the odd ones.\n*)\nlet Split (list : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = Split in\n  (assert ((candidate [1; 2; 3; 4; 5; 6]) = [1; 3; 5]));\n  (assert ((candidate [10; 11; 12; 13]) = [11; 13]));\n  (assert ((candidate [7; 8; 9; 1]) = [7; 9; 1]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_555_difference", "language": "ml", "prompt": "(**Write a mlthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n*)\nlet difference (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = difference in\n  (assert ((candidate 3) = 30));\n  (assert ((candidate 5) = 210));\n  (assert ((candidate 2) = 6));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "ml", "prompt": "(**Write a mlthon function to count the number of pairs whose xor value is odd.\n*)\nlet find_Odd_Pair (A : int list) (N : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Odd_Pair in\n  (assert ((candidate [5; 4; 7; 2; 1] 5) = 6));\n  (assert ((candidate [7; 2; 8; 1; 0; 5; 11] 7) = 12));\n  (assert ((candidate [1; 2; 3] 3) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_557_toggle_string", "language": "ml", "prompt": "(**Write a function to toggle the case of all characters in a string.\n*)\nlet toggle_string (string : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = toggle_string in\n  (assert ((candidate \"Python\") = \"pYTHON\"));\n  (assert ((candidate \"Pangram\") = \"pANGRAM\"));\n  (assert ((candidate \"LIttLE\") = \"liTTle\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_558_digit_distance_nums", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of the per-digit difference between two integers.\n*)\nlet digit_distance_nums (n1 : int) (n2 : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = digit_distance_nums in\n  (assert ((candidate 1 2) = 1));\n  (assert ((candidate 23 56) = 6));\n  (assert ((candidate 123 256) = 7));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "ml", "prompt": "(**Write a function to find the sum of the largest contiguous sublist in the given list.\n*)\nlet max_sub_array_sum (a : int list) (size : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_sub_array_sum in\n  (assert ((candidate [(~2); (~3); 4; (~1); (~2); 1; 5; (~3)] 8) = 7));\n  (assert ((candidate [(~3); (~4); 5; (~2); (~3); 2; 6; (~4)] 8) = 8));\n  (assert ((candidate [(~4); (~5); 6; (~3); (~4); 3; 7; (~5)] 8) = 10));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_560_union_elements", "language": "ml", "prompt": "(**Write a function to find the union of the elements of two given lists and output them in sorted order.\n*)\nlet union_elements (test_tup1 : int list) (test_tup2 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = union_elements in\n  (assert ((candidate [3; 4; 5; 6] [5; 7; 4; 10]) = [3; 4; 5; 6; 7; 10]));\n  (assert ((candidate [1; 2; 3; 4] [3; 4; 5; 6]) = [1; 2; 3; 4; 5; 6]));\n  (assert ((candidate [11; 12; 13; 14] [13; 15; 16; 17]) = [11; 12; 13; 14; 15; 16; 17]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_562_Find_Max_Length", "language": "ml", "prompt": "(**Write a mlthon function to find the length of the longest sublists.\n*)\nlet Find_Max_Length (lst : int list list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = Find_Max_Length in\n  (assert ((candidate [[1]; [1; 4]; [5; 6; 7; 8]]) = 4));\n  (assert ((candidate [[0; 1]; [2; 2]; [3; 2; 1]]) = 3));\n  (assert ((candidate [[7]; [22; 23]; [13; 14; 15]; [10; 20; 30; 40; 50]]) = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_563_extract_values", "language": "ml", "prompt": "(**Write a function to extract values between quotation marks from a string.\n*)\nlet extract_values (text : string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = extract_values in\n  (assert ((candidate \"\"Python\", \"PHP\", \"Java\"\") = [\"Python\"; \"PHP\"; \"Java\"]));\n  (assert ((candidate \"\"python\",\"program\",\"language\"\") = [\"python\"; \"program\"; \"language\"]));\n  (assert ((candidate \"\"red\",\"blue\",\"green\",\"yellow\"\") = [\"red\"; \"blue\"; \"green\"; \"yellow\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_564_count_Pairs", "language": "ml", "prompt": "(**Write a mlthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n*)\nlet count_Pairs (arr : int list) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_Pairs in\n  (assert ((candidate [1; 2; 1] 3) = 2));\n  (assert ((candidate [1; 1; 1; 1] 4) = 0));\n  (assert ((candidate [1; 2; 3; 4; 5] 5) = 10));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_565_split", "language": "ml", "prompt": "(**Write a mlthon function to split a string into characters.\n*)\nlet split (word : string) : string list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = split in\n  (assert ((candidate \"python\") = [\"p\"; \"y\"; \"t\"; \"h\"; \"o\"; \"n\"]));\n  (assert ((candidate \"Name\") = [\"N\"; \"a\"; \"m\"; \"e\"]));\n  (assert ((candidate \"program\") = [\"p\"; \"r\"; \"o\"; \"g\"; \"r\"; \"a\"; \"m\"]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_566_sum_digits", "language": "ml", "prompt": "(**Write a function to get the sum of the digits of a non-negative integer.\n*)\nlet sum_digits (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_digits in\n  (assert ((candidate 345) = 12));\n  (assert ((candidate 12) = 3));\n  (assert ((candidate 97) = 16));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_567_issort_list", "language": "ml", "prompt": "(**Write a function to check whether a specified list is sorted or not.\n*)\nlet issort_list (list1 : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = issort_list in\n  (assert ((candidate [1; 2; 4; 6; 8; 10; 12; 14; 16; 17]) = true));\n  (assert ((candidate [1; 2; 4; 6; 8; 10; 12; 14; 20; 17]) = false));\n  (assert ((candidate [1; 2; 4; 6; 8; 10; 15; 14; 20]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_569_sort_sublists", "language": "ml", "prompt": "(**Write a function to sort each sublist of strings in a given list of lists.\n*)\nlet sort_sublists (list1 : string list list) : string list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sort_sublists in\n  (assert ((candidate [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"white\"; \"black\"; \"orange\"]]) = [[\"green\"; \"orange\"]; [\"black\"; \"white\"]; [\"black\"; \"orange\"; \"white\"]]));\n  (assert ((candidate [[\"green\"; \"orange\"]; [\"black\"]; [\"green\"; \"orange\"]; [\"white\"]]) = [[\"green\"; \"orange\"]; [\"black\"]; [\"green\"; \"orange\"]; [\"white\"]]));\n  (assert ((candidate [[\"a\"; \"b\"]; [\"d\"; \"c\"]; [\"g\"; \"h\"]; [\"f\"; \"e\"]]) = [[\"a\"; \"b\"]; [\"c\"; \"d\"]; [\"g\"; \"h\"]; [\"e\"; \"f\"]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_56_checks", "language": "ml", "prompt": "(**Write a mlthon function to check if a given number is one less than twice its reverse.\n*)\nlet checks (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = checks in\n  (assert ((candidate 70) = false));\n  (assert ((candidate 23) = false));\n  (assert ((candidate 73) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_572_two_unique_nums", "language": "ml", "prompt": "(**Write a mlthon function to remove duplicate numbers from a given number of lists.\n*)\nlet two_unique_nums (nums : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = two_unique_nums in\n  (assert ((candidate [1; 2; 3; 2; 3; 4; 5]) = [1; 4; 5]));\n  (assert ((candidate [1; 2; 3; 2; 4; 5]) = [1; 3; 4; 5]));\n  (assert ((candidate [1; 2; 3; 4; 5]) = [1; 2; 3; 4; 5]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_573_unique_product", "language": "ml", "prompt": "(**Write a mlthon function to calculate the product of the unique numbers in a given list.\n*)\nlet unique_product (list_data : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = unique_product in\n  (assert ((candidate [10; 20; 30; 40; 20; 50; 60; 40]) = 720000000));\n  (assert ((candidate [1; 2; 3; 1]) = 6));\n  (assert ((candidate [7; 8; 9; 0; 1; 1]) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "ml", "prompt": "(**Write a function to find the surface area of a cylinder.\n*)\nlet surfacearea_cylinder (r : int) (h : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = surfacearea_cylinder in\n  (assert ((candidate 10 5) = 942.45));\n  (assert ((candidate 4 5) = 226.18800000000002));\n  (assert ((candidate 4 10) = 351.848));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_576_is_Sub_Array", "language": "ml", "prompt": "(**Write a mlthon function to check whether a list is sublist of another or not.\n*)\nlet is_Sub_Array (A : int list) (B : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_Sub_Array in\n  (assert ((candidate [1; 4; 3; 5] [1; 2]) = false));\n  (assert ((candidate [1; 2; 1] [1; 2; 1]) = true));\n  (assert ((candidate [1; 0; 2; 2] [2; 2; 0]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "ml", "prompt": "(**Write a mlthon function to find the last digit in factorial of a given number.\n*)\nlet last_Digit_Factorial (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = last_Digit_Factorial in\n  (assert ((candidate 4) = 4));\n  (assert ((candidate 21) = 0));\n  (assert ((candidate 30) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_578_interleave_lists", "language": "ml", "prompt": "(**Write a function to interleave 3 lists of the same length into a single flat list.\n*)\nlet interleave_lists (list1 : int list) (list2 : int list) (list3 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = interleave_lists in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7] [10; 20; 30; 40; 50; 60; 70] [100; 200; 300; 400; 500; 600; 700]) = [1; 10; 100; 2; 20; 200; 3; 30; 300; 4; 40; 400; 5; 50; 500; 6; 60; 600; 7; 70; 700]));\n  (assert ((candidate [10; 20] [15; 2] [5; 10]) = [10; 15; 5; 20; 2; 10]));\n  (assert ((candidate [11; 44] [10; 15] [20; 5]) = [11; 10; 20; 44; 15; 5]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_579_find_dissimilar", "language": "ml", "prompt": "(**Write a function to find the dissimilar elements in the given two tuples.\n*)\nlet find_dissimilar (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_dissimilar in\n  (assert ((candidate (3, 4, 5, 6) (5, 7, 4, 10)) = (3, 6, 7, 10)));\n  (assert ((candidate (1, 2, 3, 4) (7, 2, 3, 9)) = (1, 4, 7, 9)));\n  (assert ((candidate (21, 11, 25, 26) (26, 34, 21, 36)) = (34, 36, 11, 25)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_57_find_Max_Num", "language": "ml", "prompt": "(**Write a mlthon function to find the largest number that can be formed with the given list of digits.\n*)\nlet find_Max_Num (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Max_Num in\n  (assert ((candidate [1; 2; 3]) = 321));\n  (assert ((candidate [4; 5; 6; 1]) = 6541));\n  (assert ((candidate [1; 2; 3; 9]) = 9321));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_581_surface_Area", "language": "ml", "prompt": "(**Write a mlthon function to find the surface area of a square mlramid with a given base edge and height.\n*)\nlet surface_Area (b : int) (s : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = surface_Area in\n  (assert ((candidate 3 4) = 33));\n  (assert ((candidate 4 5) = 56));\n  (assert ((candidate 1 2) = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_583_catalan_number", "language": "ml", "prompt": "(**Write a function which returns nth catalan number.\n*)\nlet catalan_number (num : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = catalan_number in\n  (assert ((candidate 10) = 16796));\n  (assert ((candidate 9) = 4862));\n  (assert ((candidate 7) = 429));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_584_find_adverbs", "language": "ml", "prompt": "(**Write a function to find the first adverb ending with ly and its positions in a given string.\n*)\nlet find_adverbs (text : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_adverbs in\n  (assert ((candidate \"Clearly, he has no excuse for such behavior.\") = \"0-7: Clearly\"));\n  (assert ((candidate \"Please handle the situation carefuly\") = \"28-36: carefuly\"));\n  (assert ((candidate \"Complete the task quickly\") = \"18-25: quickly\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_586_split_Arr", "language": "ml", "prompt": "(**Write a mlthon function to split a list at the nth eelment and add the first part to the end.\n*)\nlet split_Arr (l : int list) (n : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = split_Arr in\n  (assert ((candidate [12; 10; 5; 6; 52; 36] 2) = [5; 6; 52; 36; 12; 10]));\n  (assert ((candidate [1; 2; 3; 4] 1) = [2; 3; 4; 1]));\n  (assert ((candidate [0; 1; 2; 3; 4; 5; 6; 7] 3) = [3; 4; 5; 6; 7; 0; 1; 2]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_588_big_diff", "language": "ml", "prompt": "(**Write a mlthon function to find the difference between largest and smallest value in a given list.\n*)\nlet big_diff (nums : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = big_diff in\n  (assert ((candidate [1; 2; 3; 4]) = 3));\n  (assert ((candidate [4; 5; 12]) = 8));\n  (assert ((candidate [9; 2; 3]) = 7));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_589_perfect_squares", "language": "ml", "prompt": "(**Write a function to find perfect squares between two given numbers.\n*)\nlet perfect_squares (a : int) (b : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = perfect_squares in\n  (assert ((candidate 1 30) = [1; 4; 9; 16; 25]));\n  (assert ((candidate 50 100) = [64; 81; 100]));\n  (assert ((candidate 100 200) = [100; 121; 144; 169; 196]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_58_opposite_Signs", "language": "ml", "prompt": "(**Write a mlthon function to check whether the given two integers have opposite sign or not.\n*)\nlet opposite_Signs (x : int) (y : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = opposite_Signs in\n  (assert ((candidate 1 (~2)) = true));\n  (assert ((candidate 3 2) = false));\n  (assert ((candidate (~10) (~10)) = false));\n  (assert ((candidate (~2) 2) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_591_swap_List", "language": "ml", "prompt": "(**Write a mlthon function to interchange the first and last elements in a list.\n*)\nlet swap_List (newList : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = swap_List in\n  (assert ((candidate [12; 35; 9; 56; 24]) = [24; 35; 9; 56; 12]));\n  (assert ((candidate [1; 2; 3]) = [3; 2; 1]));\n  (assert ((candidate [4; 5; 6]) = [6; 5; 4]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_592_sum_Of_product", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of the product of consecutive binomial co-efficients.\n*)\nlet sum_Of_product (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_Of_product in\n  (assert ((candidate 3) = 15));\n  (assert ((candidate 4) = 56));\n  (assert ((candidate 1) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_593_removezero_ip", "language": "ml", "prompt": "(**Write a function to remove leading zeroes from an ip address.\n*)\nlet removezero_ip (ip : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = removezero_ip in\n  (assert ((candidate \"216.08.094.196\") = \"216.8.94.196\"));\n  (assert ((candidate \"12.01.024\") = \"12.1.24\"));\n  (assert ((candidate \"216.08.094.0196\") = \"216.8.94.196\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_594_diff_even_odd", "language": "ml", "prompt": "(**Write a function to find the difference of the first even and first odd number of a given list.\n*)\nlet diff_even_odd (list1 : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = diff_even_odd in\n  (assert ((candidate [1; 3; 5; 7; 4; 1; 6; 8]) = 3));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = 1));\n  (assert ((candidate [1; 5; 7; 9; 10]) = 9));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_597_find_kth", "language": "ml", "prompt": "(**Write a function to find kth element from the given two sorted lists.\n*)\nlet find_kth (arr1 : int list) (arr2 : int list) (k : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_kth in\n  (assert ((candidate [2; 3; 6; 7; 9] [1; 4; 8; 10] 5) = 6));\n  (assert ((candidate [100; 112; 256; 349; 770] [72; 86; 113; 119; 265; 445; 892] 7) = 256));\n  (assert ((candidate [3; 4; 7; 8; 10] [2; 5; 9; 11] 6) = 8));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_598_armstrong_number", "language": "ml", "prompt": "(**Write a function to check whether the given number is armstrong or not.\n*)\nlet armstrong_number (number : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = armstrong_number in\n  (assert ((candidate 153) = true));\n  (assert ((candidate 259) = false));\n  (assert ((candidate 4458) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_599_sum_average", "language": "ml", "prompt": "(**Write a function to find sum and average of first n natural numbers.\n*)\nlet sum_average (number : int) :  int * float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_average in\n  (assert ((candidate 10) = (55, 5.5)));\n  (assert ((candidate 15) = (120, 8.0)));\n  (assert ((candidate 20) = (210, 10.5)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_59_is_octagonal", "language": "ml", "prompt": "(**Write a function to find the nth octagonal number.\n*)\nlet is_octagonal (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_octagonal in\n  (assert ((candidate 5) = 65));\n  (assert ((candidate 10) = 280));\n  (assert ((candidate 15) = 645));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_600_is_Even", "language": "ml", "prompt": "(**Write a mlthon function to check whether the given number is even or not.\n*)\nlet is_Even (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_Even in\n  (assert ((candidate 1) = false));\n  (assert ((candidate 2) = true));\n  (assert ((candidate 3) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_602_first_repeated_char", "language": "ml", "prompt": "(**Write a mlthon function to find the first repeated character in a given string.\n*)\nlet first_repeated_char (str1 : string) : string option =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = first_repeated_char in\n  (assert ((candidate \"abcabc\") = Some(\"a\")));\n  (assert ((candidate \"abc\") = Some(None)));\n  (assert ((candidate \"123123\") = Some(\"1\")));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_603_get_ludic", "language": "ml", "prompt": "(**Write a function to get all lucid numbers smaller than or equal to a given integer.\n*)\nlet get_ludic (n : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_ludic in\n  (assert ((candidate 10) = [1; 2; 3; 5; 7]));\n  (assert ((candidate 25) = [1; 2; 3; 5; 7; 11; 13; 17; 23; 25]));\n  (assert ((candidate 45) = [1; 2; 3; 5; 7; 11; 13; 17; 23; 25; 29; 37; 41; 43]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_604_reverse_words", "language": "ml", "prompt": "(**Write a function to reverse words seperated by spaces in a given string.\n*)\nlet reverse_words (s : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = reverse_words in\n  (assert ((candidate \"python program\") = \"program python\"));\n  (assert ((candidate \"java language\") = \"language java\"));\n  (assert ((candidate \"indian man\") = \"man indian\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_605_prime_num", "language": "ml", "prompt": "(**Write a function to check if the given integer is a prime number.\n*)\nlet prime_num (num : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = prime_num in\n  (assert ((candidate 13) = true));\n  (assert ((candidate 7) = true));\n  (assert ((candidate (~1010)) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_606_radian_degree", "language": "ml", "prompt": "(**Write a function to convert degrees to radians.\n*)\nlet radian_degree (degree : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = radian_degree in\n  (assert ((candidate 90) = 1.5707963267948966));\n  (assert ((candidate 60) = 1.0471975511965976));\n  (assert ((candidate 120) = 2.0943951023931953));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_607_find_literals", "language": "ml", "prompt": "(**Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n*)\nlet find_literals (text : string) (pattern : string) :  string * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_literals in\n  (assert ((candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") = (\"fox\", 16, 19)));\n  (assert ((candidate \"Its been a very crazy procedure right\" \"crazy\") = (\"crazy\", 16, 21)));\n  (assert ((candidate \"Hardest choices required strongest will\" \"will\") = (\"will\", 35, 39)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_608_bell_Number", "language": "ml", "prompt": "(**Write a mlthon function to find nth bell number.\n*)\nlet bell_Number (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = bell_Number in\n  (assert ((candidate 2) = 2));\n  (assert ((candidate 3) = 5));\n  (assert ((candidate 4) = 15));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_610_remove_kth_element", "language": "ml", "prompt": "(**Write a mlthon function which takes a list and returns a list with the same elements, but the k'th element removed.\n*)\nlet remove_kth_element (list1 : int list) (L : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_kth_element in\n  (assert ((candidate [1; 1; 2; 3; 4; 4; 5; 1] 3) = [1; 1; 3; 4; 4; 5; 1]));\n  (assert ((candidate [0; 0; 1; 2; 3; 4; 4; 5; 6; 6; 6; 7; 8; 9; 4; 4] 4) = [0; 0; 1; 3; 4; 4; 5; 6; 6; 6; 7; 8; 9; 4; 4]));\n  (assert ((candidate [10; 10; 15; 19; 18; 18; 17; 26; 26; 17; 18; 10] 5) = [10; 10; 15; 19; 18; 17; 26; 26; 17; 18; 10]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_611_max_of_nth", "language": "ml", "prompt": "(**Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n*)\nlet max_of_nth (test_list : int list list) (N : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_of_nth in\n  (assert ((candidate [[5; 6; 7]; [1; 3; 5]; [8; 9; 19]] 2) = 19));\n  (assert ((candidate [[6; 7; 8]; [2; 4; 6]; [9; 10; 20]] 1) = 10));\n  (assert ((candidate [[7; 8; 9]; [3; 5; 7]; [10; 11; 21]] 1) = 11));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_614_cummulative_sum", "language": "ml", "prompt": "(**Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n*)\nlet cummulative_sum (test_list : int list list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = cummulative_sum in\n  (assert ((candidate [[1; 3]; [5; 6; 7]; [2; 6]]) = 30));\n  (assert ((candidate [[2; 4]; [6; 7; 8]; [3; 7]]) = 37));\n  (assert ((candidate [[3; 5]; [7; 8; 9]; [4; 8]]) = 44));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_615_average_tuple", "language": "ml", "prompt": "(**Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n*)\nlet average_tuple (nums : int list list) : float list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = average_tuple in\n  (assert ((candidate [[10; 10; 10; 12]; [30; 45; 56; 45]; [81; 80; 39; 32]; [1; 2; 3; 4]]) = [30.5; 34.25; 27.0; 23.25]));\n  (assert ((candidate [[1; 1; (~5)]; [30; (~15); 56]; [81; (~60); (~39)]; [(~10); 2; 3]]) = [25.5; -18.0; 3.75]));\n  (assert ((candidate [[100; 100; 100; 120]; [300; 450; 560; 450]; [810; 800; 390; 320]; [10; 20; 30; 40]]) = [305.0; 342.5; 270.0; 232.5]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_616_tuple_modulo", "language": "ml", "prompt": "(**Write a function which takes two tuples of the same length and performs the element wise modulo.\n*)\nlet tuple_modulo (test_tup1 :  int * int * int * int) (test_tup2 :  int * int * int * int) :  int * int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = tuple_modulo in\n  (assert ((candidate (10, 4, 5, 6) (5, 6, 7, 5)) = (0, 4, 5, 1)));\n  (assert ((candidate (11, 5, 6, 7) (6, 7, 8, 6)) = (5, 5, 6, 1)));\n  (assert ((candidate (12, 6, 7, 8) (7, 8, 9, 7)) = (5, 6, 7, 1)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_617_min_Jumps", "language": "ml", "prompt": "(**Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n*)\nlet min_Jumps (steps :  int * int) (d : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = min_Jumps in\n  (assert ((candidate (3, 4) 11) = 3.5));\n  (assert ((candidate (3, 4) 0) = 0.0));\n  (assert ((candidate (11, 14) 11) = 1.0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_618_div_list", "language": "ml", "prompt": "(**Write a function to divide two lists element wise.\n*)\nlet div_list (nums1 : int list) (nums2 : int list) : float list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = div_list in\n  (assert ((candidate [4; 5; 6] [1; 2; 3]) = [4.0; 2.5; 2.0]));\n  (assert ((candidate [3; 2] [1; 4]) = [3.0; 0.5]));\n  (assert ((candidate [90; 120] [50; 70]) = [1.8; 1.7142857142857142]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_619_move_num", "language": "ml", "prompt": "(**Write a function to move all the numbers to the end of the given string.\n*)\nlet move_num (test_str : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = move_num in\n  (assert ((candidate \"I1love143you55three3000thousand\") = \"Iloveyouthreethousand1143553000\"));\n  (assert ((candidate \"Avengers124Assemble\") = \"AvengersAssemble124\"));\n  (assert ((candidate \"Its11our12path13to14see15things16do17things\") = \"Itsourpathtoseethingsdothings11121314151617\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_61_count_Substrings", "language": "ml", "prompt": "(**Write a mlthon function to count the number of substrings with the sum of digits equal to their length.\n*)\nlet count_Substrings (s : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_Substrings in\n  (assert ((candidate \"112112\") = 6));\n  (assert ((candidate \"111\") = 6));\n  (assert ((candidate \"1101112\") = 12));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_622_get_median", "language": "ml", "prompt": "(**Write a function to find the median of two sorted lists of same size.\n*)\nlet get_median (arr1 : int list) (arr2 : int list) (n : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_median in\n  (assert ((candidate [1; 12; 15; 26; 38] [2; 13; 17; 30; 45] 5) = 16.0));\n  (assert ((candidate [2; 4; 8; 9] [7; 13; 19; 28] 4) = 8.5));\n  (assert ((candidate [3; 6; 14; 23; 36; 42] [2; 18; 27; 39; 49; 55] 6) = 25.0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_623_nth_nums", "language": "ml", "prompt": "(**Write a function to compute the n-th power of each number in a list.\n*)\nlet nth_nums (nums : int list) (n : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = nth_nums in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 2) = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]));\n  (assert ((candidate [10; 20; 30] 3) = [1000; 8000; 27000]));\n  (assert ((candidate [12; 15] 5) = [248832; 759375]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_624_is_upper", "language": "ml", "prompt": "(**Write a mlthon function to convert a given string to uppercase.\n*)\nlet is_upper (string : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_upper in\n  (assert ((candidate \"person\") = \"PERSON\"));\n  (assert ((candidate \"final\") = \"FINAL\"));\n  (assert ((candidate \"Valid\") = \"VALID\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_625_swap_List", "language": "ml", "prompt": "(**Write a mlthon function to interchange the first and last element in a given list.\n*)\nlet swap_List (newList : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = swap_List in\n  (assert ((candidate [1; 2; 3]) = [3; 2; 1]));\n  (assert ((candidate [1; 2; 3; 4; 4]) = [4; 2; 3; 4; 1]));\n  (assert ((candidate [4; 5; 6]) = [6; 5; 4]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_626_triangle_area", "language": "ml", "prompt": "(**Write a mlthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n*)\nlet triangle_area (r : int) : int option =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = triangle_area in\n  (assert ((candidate (~1)) = Some(None)));\n  (assert ((candidate 0) = Some(0)));\n  (assert ((candidate 2) = Some(4)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_627_find_First_Missing", "language": "ml", "prompt": "(**Write a mlthon function to find the smallest missing number from a sorted list of natural numbers.\n*)\nlet find_First_Missing (array : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_First_Missing in\n  (assert ((candidate [0; 1; 2; 3]) = 4));\n  (assert ((candidate [0; 1; 2; 6; 9]) = 3));\n  (assert ((candidate [2; 3; 5; 8; 9]) = 0));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_628_replace_spaces", "language": "ml", "prompt": "(**Write a function to replace all spaces in the given string with '%20'.\n*)\nlet replace_spaces (string : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = replace_spaces in\n  (assert ((candidate \"My Name is Dawood\") = \"My%20Name%20is%20Dawood\"));\n  (assert ((candidate \"I am a Programmer\") = \"I%20am%20a%20Programmer\"));\n  (assert ((candidate \"I love Coding\") = \"I%20love%20Coding\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_629_Split", "language": "ml", "prompt": "(**Write a mlthon function to find even numbers from a list of numbers.\n*)\nlet Split (list : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = Split in\n  (assert ((candidate [1; 2; 3; 4; 5]) = [2; 4]));\n  (assert ((candidate [4; 5; 6; 7; 8; 0; 1]) = [4; 6; 8; 0]));\n  (assert ((candidate [8; 12; 15; 19]) = [8; 12]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_62_smallest_num", "language": "ml", "prompt": "(**Write a mlthon function to find smallest number in a list.\n*)\nlet smallest_num (xs : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = smallest_num in\n  (assert ((candidate [10; 20; 1; 45; 99]) = 1));\n  (assert ((candidate [1; 2; 3]) = 1));\n  (assert ((candidate [45; 46; 50; 60]) = 45));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_630_get_coordinates", "language": "ml", "prompt": "(**Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n*)\nlet get_coordinates (test_tup :  int * int) : int list list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_coordinates in\n  (assert ((candidate (3, 4)) = [[2; 3]; [2; 4]; [2; 5]; [3; 3]; [3; 4]; [3; 5]; [4; 3]; [4; 4]; [4; 5]]));\n  (assert ((candidate (4, 5)) = [[3; 4]; [3; 5]; [3; 6]; [4; 4]; [4; 5]; [4; 6]; [5; 4]; [5; 5]; [5; 6]]));\n  (assert ((candidate (5, 6)) = [[4; 5]; [4; 6]; [4; 7]; [5; 5]; [5; 6]; [5; 7]; [6; 5]; [6; 6]; [6; 7]]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_631_replace_spaces", "language": "ml", "prompt": "(**Write a function to replace whitespaces with an underscore and vice versa in a given string.\n*)\nlet replace_spaces (text : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = replace_spaces in\n  (assert ((candidate \"Jumanji The Jungle\") = \"Jumanji_The_Jungle\"));\n  (assert ((candidate \"The_Avengers\") = \"The Avengers\"));\n  (assert ((candidate \"Fast and Furious\") = \"Fast_and_Furious\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_632_move_zero", "language": "ml", "prompt": "(**Write a mlthon function to move all zeroes to the end of the given list.\n*)\nlet move_zero (num_list : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = move_zero in\n  (assert ((candidate [1; 0; 2; 0; 3; 4]) = [1; 2; 3; 4; 0; 0]));\n  (assert ((candidate [2; 3; 2; 0; 0; 4; 0; 5; 0]) = [2; 3; 2; 4; 5; 0; 0; 0; 0]));\n  (assert ((candidate [0; 1; 0; 1; 1]) = [1; 1; 1; 0; 0]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of xor of all pairs of numbers in the given list.\n*)\nlet pair_xor_Sum (arr : int list) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = pair_xor_Sum in\n  (assert ((candidate [5; 9; 7; 6] 4) = 47));\n  (assert ((candidate [7; 3; 5] 3) = 12));\n  (assert ((candidate [7; 3] 2) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_635_heap_sort", "language": "ml", "prompt": "(**Write a function to sort the given list.\n*)\nlet heap_sort (iterable : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = heap_sort in\n  (assert ((candidate [1; 3; 5; 7; 9; 2; 4; 6; 8; 0]) = [0; 1; 2; 3; 4; 5; 6; 7; 8; 9]));\n  (assert ((candidate [25; 35; 22; 85; 14; 65; 75; 25; 58]) = [14; 22; 25; 25; 35; 58; 65; 75; 85]));\n  (assert ((candidate [7; 1; 9; 5]) = [1; 5; 7; 9]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_637_noprofit_noloss", "language": "ml", "prompt": "(**Write a function to check whether the given amount has no profit and no loss\n*)\nlet noprofit_noloss (actual_cost : int) (sale_amount : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = noprofit_noloss in\n  (assert ((candidate 1500 1200) = false));\n  (assert ((candidate 100 100) = true));\n  (assert ((candidate 2000 5000) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_638_wind_chill", "language": "ml", "prompt": "(**Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n*)\nlet wind_chill (v : int) (t : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = wind_chill in\n  (assert ((candidate 120 35) = 40));\n  (assert ((candidate 40 20) = 19));\n  (assert ((candidate 10 8) = 6));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_639_sample_nam", "language": "ml", "prompt": "(**Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n*)\nlet sample_nam (sample_names : string list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sample_nam in\n  (assert ((candidate [\"sally\"; \"Dylan\"; \"rebecca\"; \"Diana\"; \"Joanne\"; \"keith\"]) = 16));\n  (assert ((candidate [\"php\"; \"res\"; \"Python\"; \"abcd\"; \"Java\"; \"aaa\"]) = 10));\n  (assert ((candidate [\"abcd\"; \"Python\"; \"abba\"; \"aba\"]) = 6));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_63_max_difference", "language": "ml", "prompt": "(**Write a function to find the maximum difference between available pairs in the given tuple list.\n*)\nlet max_difference (test_list :  int * int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_difference in\n  (assert ((candidate [(3, 5); (1, 7); (10, 3); (1, 2)]) = 7));\n  (assert ((candidate [(4, 6); (2, 17); (9, 13); (11, 12)]) = 15));\n  (assert ((candidate [(12, 35); (21, 27); (13, 23); (41, 22)]) = 23));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_640_remove_parenthesis", "language": "ml", "prompt": "(**Write a function to remove the parenthesis and what is inbetween them from a string.\n*)\nlet remove_parenthesis (items : string list) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_parenthesis in\n  (assert ((candidate [\"python (chrome)\"]) = \"python\"));\n  (assert ((candidate [\"string(.abc)\"]) = \"string\"));\n  (assert ((candidate [\"alpha(num)\"]) = \"alpha\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_641_is_nonagonal", "language": "ml", "prompt": "(**Write a function to find the nth nonagonal number.\n*)\nlet is_nonagonal (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_nonagonal in\n  (assert ((candidate 10) = 325));\n  (assert ((candidate 15) = 750));\n  (assert ((candidate 18) = 1089));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "ml", "prompt": "(**Write a function that checks if a strings contains 'z', except at the start and end of the word.\n*)\nlet text_match_wordz_middle (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_match_wordz_middle in\n  (assert ((candidate \"pythonzabc.\") = true));\n  (assert ((candidate \"zxyabc.\") = false));\n  (assert ((candidate \"  lang  .\") = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "ml", "prompt": "(**Write a mlthon function to reverse a list upto a given position.\n*)\nlet reverse_Array_Upto_K (input : int list) (k : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = reverse_Array_Upto_K in\n  (assert ((candidate [1; 2; 3; 4; 5; 6] 4) = [4; 3; 2; 1; 5; 6]));\n  (assert ((candidate [4; 5; 6; 7] 2) = [5; 4; 6; 7]));\n  (assert ((candidate [9; 8; 7; 6; 5] 3) = [7; 8; 9; 6; 5]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_64_subject_marks", "language": "ml", "prompt": "(**Write a function to sort a list of tuples using the second value of each tuple.\n*)\nlet subject_marks (subjectmarks :  string * int list) :  string * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = subject_marks in\n  (assert ((candidate [(\"English\", 88); (\"Science\", 90); (\"Maths\", 97); (\"Social sciences\", 82)]) = [(\"Social sciences\", 82); (\"English\", 88); (\"Science\", 90); (\"Maths\", 97)]));\n  (assert ((candidate [(\"Telugu\", 49); (\"Hindhi\", 54); (\"Social\", 33)]) = [(\"Social\", 33); (\"Telugu\", 49); (\"Hindhi\", 54)]));\n  (assert ((candidate [(\"Physics\", 96); (\"Chemistry\", 97); (\"Biology\", 45)]) = [(\"Biology\", 45); (\"Physics\", 96); (\"Chemistry\", 97)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_66_pos_count", "language": "ml", "prompt": "(**Write a mlthon function to count the number of positive numbers in a list.\n*)\nlet pos_count (list : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = pos_count in\n  (assert ((candidate [1; (~2); 3; (~4)]) = 2));\n  (assert ((candidate [3; 4; 5; (~1)]) = 3));\n  (assert ((candidate [1; 2; 3; 4]) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_67_bell_number", "language": "ml", "prompt": "(**Write a function to find the number of ways to partition a set of Bell numbers.\n*)\nlet bell_number (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = bell_number in\n  (assert ((candidate 2) = 2));\n  (assert ((candidate 10) = 115975));\n  (assert ((candidate 56) = 6775685320645824322581483068371419745979053216268760300));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_68_is_Monotonic", "language": "ml", "prompt": "(**Write a mlthon function to check whether the given list is monotonic or not.\n*)\nlet is_Monotonic (A : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_Monotonic in\n  (assert ((candidate [6; 5; 4; 4]) = true));\n  (assert ((candidate [1; 2; 2; 3]) = true));\n  (assert ((candidate [1; 3; 2]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_69_is_sublist", "language": "ml", "prompt": "(**Write a function to check whether a list contains the given sublist or not.\n*)\nlet is_sublist (l : int list) (s : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_sublist in\n  (assert ((candidate [2; 4; 3; 5; 7] [3; 7]) = false));\n  (assert ((candidate [2; 4; 3; 5; 7] [4; 3]) = true));\n  (assert ((candidate [2; 4; 3; 5; 7] [1; 6]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "ml", "prompt": "(**Write a mlthon function to check whether the two numbers differ at one bit position only or not.\n*)\nlet differ_At_One_Bit_Pos (a : int) (b : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = differ_At_One_Bit_Pos in\n  (assert ((candidate 13 9) = true));\n  (assert ((candidate 15 8) = false));\n  (assert ((candidate 2 4) = false));\n  (assert ((candidate 2 3) = true));\n  (assert ((candidate 5 1) = true));\n  (assert ((candidate 1 5) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_70_get_equal", "language": "ml", "prompt": "(**Write a function to find whether all the given lists have equal length or not.\n*)\nlet get_equal (Input : int list list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_equal in\n  (assert ((candidate [[11; 22; 33]; [44; 55; 66]]) = true));\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6; 7]]) = false));\n  (assert ((candidate [[1; 2]; [3; 4]]) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_71_comb_sort", "language": "ml", "prompt": "(**Write a function to sort a list of elements.\n*)\nlet comb_sort (nums : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = comb_sort in\n  (assert ((candidate [5; 15; 37; 25; 79]) = [5; 15; 25; 37; 79]));\n  (assert ((candidate [41; 32; 15; 19; 22]) = [15; 19; 22; 32; 41]));\n  (assert ((candidate [99; 15; 13; 47]) = [13; 15; 47; 99]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "ml", "prompt": "(**Write a function to add an association list to the tuple. The output should be a tuple.\n*)\nlet add_dict_to_tuple (test_tup :  int * int * int) (test_dict : (string, int) list) :  int * int * int * (string, int) list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = add_dict_to_tuple in\n  (assert ((candidate (4, 5, 6) [(\"MSAM\", 1); (\"is\", 2); (\"best\", 3)]) = (4, 5, 6, [(\"MSAM\", 1); (\"is\", 2); (\"best\", 3)])));\n  (assert ((candidate (1, 2, 3) [(\"UTS\", 2); (\"is\", 3); (\"Worst\", 4)]) = (1, 2, 3, [(\"UTS\", 2); (\"is\", 3); (\"Worst\", 4)])));\n  (assert ((candidate (8, 9, 10) [(\"POS\", 3); (\"is\", 4); (\"Okay\", 5)]) = (8, 9, 10, [(\"POS\", 3); (\"is\", 4); (\"Okay\", 5)])));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "ml", "prompt": "(**Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n*)\nlet maxAverageOfPath (cost : int list list) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = maxAverageOfPath in\n  (assert ((candidate [[1; 2; 3]; [6; 5; 4]; [7; 3; 9]]) = 5.2));\n  (assert ((candidate [[2; 3; 4]; [7; 6; 5]; [8; 4; 10]]) = 6.2));\n  (assert ((candidate [[3; 4; 5]; [8; 7; 6]; [9; 5; 11]]) = 7.2));\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6]; [7; 8; 9]]) = 5.8));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_723_count_same_pair", "language": "ml", "prompt": "(**The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n*)\nlet count_same_pair (nums1 : int list) (nums2 : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_same_pair in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8] [2; 2; 3; 1; 2; 6; 7; 9]) = 4));\n  (assert ((candidate [0; 1; 2; (~1); (~5); 6; 0; (~3); (~2); 3; 4; 6; 8] [2; 1; 2; (~1); (~5); 6; 4; (~3); (~2); 3; 4; 6; 8]) = 11));\n  (assert ((candidate [2; 4; (~6); (~9); 11; (~12); 14; (~5); 17] [2; 1; 2; (~1); (~5); 6; 4; (~3); (~2); 3; 4; 6; 8]) = 1));\n  (assert ((candidate [0; 1; 1; 2] [0; 1; 2; 2]) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_724_power_base_sum", "language": "ml", "prompt": "(**Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n*)\nlet power_base_sum (base : int) (power : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = power_base_sum in\n  (assert ((candidate 2 100) = 115));\n  (assert ((candidate 8 10) = 37));\n  (assert ((candidate 8 15) = 62));\n  (assert ((candidate 3 3) = 9));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_728_sum_list", "language": "ml", "prompt": "(**Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n*)\nlet sum_list (lst1 : int list) (lst2 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_list in\n  (assert ((candidate [10; 20; 30] [15; 25; 35]) = [25; 45; 65]));\n  (assert ((candidate [1; 2; 3] [5; 6; 7]) = [6; 8; 10]));\n  (assert ((candidate [15; 20; 30] [15; 45; 75]) = [30; 65; 105]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_72_dif_Square", "language": "ml", "prompt": "(**Write a mlthon function to check whether the given number can be represented as the difference of two squares or not.\n*)\nlet dif_Square (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = dif_Square in\n  (assert ((candidate 5) = true));\n  (assert ((candidate 10) = false));\n  (assert ((candidate 15) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "ml", "prompt": "(**Write a function to find the lateral surface area of a cone given radius r and the height h.\n*)\nlet lateralsurface_cone (r : int) (h : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = lateralsurface_cone in\n  (assert ((candidate 5 12) = 204.20352248333654));\n  (assert ((candidate 10 15) = 566.3586699569488));\n  (assert ((candidate 19 17) = 1521.8090132193388));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_732_replace_specialchar", "language": "ml", "prompt": "(**Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n*)\nlet replace_specialchar (text : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = replace_specialchar in\n  (assert ((candidate \"Python language, Programming language.\") = \"Python:language::Programming:language:\"));\n  (assert ((candidate \"a b c,d e f\") = \"a:b:c:d:e:f\"));\n  (assert ((candidate \"ram reshma,ram rahim\") = \"ram:reshma:ram:rahim\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_733_find_first_occurrence", "language": "ml", "prompt": "(**Write a function to find the index of the first occurrence of a given number in a sorted list.\n*)\nlet find_first_occurrence (A : int list) (x : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_first_occurrence in\n  (assert ((candidate [2; 5; 5; 5; 6; 6; 8; 9; 9; 9] 5) = 1));\n  (assert ((candidate [2; 3; 5; 5; 6; 6; 8; 9; 9; 9] 5) = 2));\n  (assert ((candidate [2; 4; 1; 5; 6; 6; 8; 9; 9; 9] 6) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "ml", "prompt": "(**Write a mlthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n*)\nlet sum_Of_Subarray_Prod (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_Of_Subarray_Prod in\n  (assert ((candidate [1; 2; 3]) = 20));\n  (assert ((candidate [1; 2]) = 5));\n  (assert ((candidate [1; 2; 3; 4]) = 84));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "ml", "prompt": "(**Write a mlthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n*)\nlet toggle_middle_bits (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = toggle_middle_bits in\n  (assert ((candidate 9) = 15));\n  (assert ((candidate 10) = 12));\n  (assert ((candidate 11) = 13));\n  (assert ((candidate 65) = 127));\n  (assert ((candidate 77) = 115));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_736_left_insertion", "language": "ml", "prompt": "(**Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/mlthon-exercises/data-structures-and-algorithms/mlthon-data-structure-exercise-24.php\n*)\nlet left_insertion (a : int list) (x : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = left_insertion in\n  (assert ((candidate [1; 2; 4; 5] 6) = 4));\n  (assert ((candidate [1; 2; 4; 5] 3) = 2));\n  (assert ((candidate [1; 2; 4; 5] 7) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_737_check_str", "language": "ml", "prompt": "(**Write a function to check whether the given string is starting with a vowel or not using regex.\n*)\nlet check_str (string : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_str in\n  (assert ((candidate \"annie\") = true));\n  (assert ((candidate \"dawood\") = false));\n  (assert ((candidate \"Else\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_738_geometric_sum", "language": "ml", "prompt": "(**Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/mlthon-exercises/data-structures-and-algorithms/mlthon-recursion-exercise-9.php\n*)\nlet geometric_sum (n : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = geometric_sum in\n  (assert ((candidate 7) = 1.9921875));\n  (assert ((candidate 4) = 1.9375));\n  (assert ((candidate 8) = 1.99609375));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_739_find_Index", "language": "ml", "prompt": "(**Write a mlthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n*)\nlet find_Index (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Index in\n  (assert ((candidate 2) = 4));\n  (assert ((candidate 3) = 14));\n  (assert ((candidate 4) = 45));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_740_tuple_to_dict", "language": "ml", "prompt": "(**Write a function to convert the given tuple to a key-value association list using adjacent elements. https://www.geeksforgeeks.org/mlthon-convert-tuple-to-adjacent-pair-association list/\n*)\nlet tuple_to_dict (test_tup :  int * int * int * int * int * int) : (int, int) list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = tuple_to_dict in\n  (assert ((candidate (1, 5, 7, 10, 13, 5)) = [(1, 5); (7, 10); (13, 5)]));\n  (assert ((candidate (1, 2, 3, 4, 5, 6)) = [(1, 2); (3, 4); (5, 6)]));\n  (assert ((candidate (7, 8, 9, 10, 11, 12)) = [(7, 8); (9, 10); (11, 12)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_741_all_Characters_Same", "language": "ml", "prompt": "(**Write a mlthon function to check whether all the characters are same or not.\n*)\nlet all_Characters_Same (s : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = all_Characters_Same in\n  (assert ((candidate \"python\") = false));\n  (assert ((candidate \"aaa\") = true));\n  (assert ((candidate \"data\") = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_742_area_tetrahedron", "language": "ml", "prompt": "(**Write a function to caluclate the area of a tetrahedron.\n*)\nlet area_tetrahedron (side : int) : float =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = area_tetrahedron in\n  (assert ((candidate 3) = 15.588457268119894));\n  (assert ((candidate 20) = 692.8203230275509));\n  (assert ((candidate 10) = 173.20508075688772));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_743_rotate_right", "language": "ml", "prompt": "(**Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/mlthon-program-right-rotate-list-n/\n*)\nlet rotate_right (list : int list) (m : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = rotate_right in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 3) = [8; 9; 10; 1; 2; 3; 4; 5; 6; 7]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 2) = [9; 10; 1; 2; 3; 4; 5; 6; 7; 8]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10] 5) = [6; 7; 8; 9; 10; 1; 2; 3; 4; 5]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_745_divisible_by_digits", "language": "ml", "prompt": "(**Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/mlthon-exercises/lambda/mlthon-lambda-exercise-24.php\n*)\nlet divisible_by_digits (startnum : int) (endnum : int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = divisible_by_digits in\n  (assert ((candidate 1 22) = [1; 2; 3; 4; 5; 6; 7; 8; 9; 11; 12; 15; 22]));\n  (assert ((candidate 1 15) = [1; 2; 3; 4; 5; 6; 7; 8; 9; 11; 12; 15]));\n  (assert ((candidate 20 25) = [22; 24]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_746_sector_area", "language": "ml", "prompt": "(**Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n*)\nlet sector_area (r : int) (a : int) : float option =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sector_area in\n  (assert ((candidate 4 45) = Some(6.283185307179586)));\n  (assert ((candidate 9 45) = Some(31.808625617596654)));\n  (assert ((candidate 9 361) = Some(None)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_747_lcs_of_three", "language": "ml", "prompt": "(**Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n*)\nlet lcs_of_three (X : string) (Y : string) (Z : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = lcs_of_three in\n  (assert ((candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") = 2));\n  (assert ((candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") = 5));\n  (assert ((candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_748_capital_words_spaces", "language": "ml", "prompt": "(**Write a function to put spaces between words starting with capital letters in a given string.\n*)\nlet capital_words_spaces (str1 : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = capital_words_spaces in\n  (assert ((candidate \"Python\") = \"Python\"));\n  (assert ((candidate \"PythonProgrammingExamples\") = \"Python Programming Examples\"));\n  (assert ((candidate \"GetReadyToBeCodingFreak\") = \"Get Ready To Be Coding Freak\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "ml", "prompt": "(**Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/mlthon-sort-numeric-strings-in-a-list/\n*)\nlet sort_numeric_strings (nums_str : string list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sort_numeric_strings in\n  (assert ((candidate [\"4\"; \"12\"; \"45\"; \"7\"; \"0\"; \"100\"; \"200\"; \"-12\"; \"-500\"]) = [(~500); (~12); 0; 4; 7; 12; 45; 100; 200]));\n  (assert ((candidate [\"2\"; \"3\"; \"8\"; \"4\"; \"7\"; \"9\"; \"8\"; \"2\"; \"6\"; \"5\"; \"1\"; \"6\"; \"1\"; \"2\"; \"3\"; \"4\"; \"6\"; \"9\"; \"1\"; \"2\"]) = [1; 1; 1; 2; 2; 2; 2; 3; 3; 4; 4; 5; 6; 6; 6; 7; 8; 8; 9; 9]));\n  (assert ((candidate [\"1\"; \"3\"; \"5\"; \"7\"; \"1\"; \"3\"; \"13\"; \"15\"; \"17\"; \"5\"; \"7 \"; \"9\"; \"1\"; \"11\"]) = [1; 1; 1; 3; 3; 5; 5; 7; 7; 9; 11; 13; 15; 17]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_74_is_samepatterns", "language": "ml", "prompt": "(**Write a function to check whether it follows the sequence given in the patterns list.\n*)\nlet is_samepatterns (colors : string list) (patterns : string list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_samepatterns in\n  (assert ((candidate [\"red\"; \"green\"; \"green\"] [\"a\"; \"b\"; \"b\"]) = true));\n  (assert ((candidate [\"red\"; \"green\"; \"greenn\"] [\"a\"; \"b\"; \"b\"]) = false));\n  (assert ((candidate [\"red\"; \"green\"; \"greenn\"] [\"a\"; \"b\"]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_750_add_tuple", "language": "ml", "prompt": "(**Write a function to add the given tuple to the given list.\n*)\nlet add_tuple (test_list : int list) (test_tup :  int * int) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = add_tuple in\n  (assert ((candidate [5; 6; 7] (9, 10)) = [5; 6; 7; 9; 10]));\n  (assert ((candidate [6; 7; 8] (10, 11)) = [6; 7; 8; 10; 11]));\n  (assert ((candidate [7; 8; 9] (11, 12)) = [7; 8; 9; 11; 12]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_751_check_min_heap", "language": "ml", "prompt": "(**Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n*)\nlet check_min_heap (arr : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_min_heap in\n  (assert ((candidate [1; 2; 3; 4; 5; 6]) = true));\n  (assert ((candidate [2; 3; 4; 5; 10; 15]) = true));\n  (assert ((candidate [2; 10; 4; 5; 3; 15]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_752_jacobsthal_num", "language": "ml", "prompt": "(**Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n*)\nlet jacobsthal_num (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = jacobsthal_num in\n  (assert ((candidate 5) = 11));\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 4) = 5));\n  (assert ((candidate 13) = 2731));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_753_min_k", "language": "ml", "prompt": "(**Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/mlthon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coml of test cases\n*)\nlet min_k (test_list :  string * int list) (K : int) :  string * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = min_k in\n  (assert ((candidate [(\"Manjeet\", 10); (\"Akshat\", 4); (\"Akash\", 2); (\"Nikhil\", 8)] 2) = [(\"Akash\", 2); (\"Akshat\", 4)]));\n  (assert ((candidate [(\"Sanjeev\", 11); (\"Angat\", 5); (\"Akash\", 3); (\"Nepin\", 9)] 3) = [(\"Akash\", 3); (\"Angat\", 5); (\"Nepin\", 9)]));\n  (assert ((candidate [(\"tanmay\", 14); (\"Amer\", 11); (\"Ayesha\", 9); (\"SKD\", 16)] 1) = [(\"Ayesha\", 9)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_756_text_match_zero_one", "language": "ml", "prompt": "(**Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/mlthon-exercises/re/mlthon-re-exercise-3.php\n*)\nlet text_match_zero_one (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_match_zero_one in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abbbba\") = true));\n  (assert ((candidate \"dsabbbba\") = true));\n  (assert ((candidate \"asbbbba\") = false));\n  (assert ((candidate \"abaaa\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "ml", "prompt": "(**Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/mlthon-program-to-count-the-pairs-of-reverse-strings/\n*)\nlet count_reverse_pairs (test_list : string list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_reverse_pairs in\n  (assert ((candidate [\"julia\"; \"best\"; \"tseb\"; \"for\"; \"ailuj\"]) = 2));\n  (assert ((candidate [\"geeks\"; \"best\"; \"for\"; \"skeeg\"]) = 1));\n  (assert ((candidate [\"makes\"; \"best\"; \"sekam\"; \"for\"; \"rof\"]) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_759_is_decimal", "language": "ml", "prompt": "(**Write a function to check whether a given string is a decimal number with a precision of 2.\n*)\nlet is_decimal (num : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_decimal in\n  (assert ((candidate \"123.11\") = true));\n  (assert ((candidate \"e666.86\") = false));\n  (assert ((candidate \"3.124587\") = false));\n  (assert ((candidate \"1.11\") = true));\n  (assert ((candidate \"1.1.11\") = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_75_find_tuples", "language": "ml", "prompt": "(**Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n*)\nlet find_tuples (test_list :  int * int * int list) (K : int) :  int * int * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_tuples in\n  (assert ((candidate [(6, 24, 12); (7, 9, 6); (12, 18, 21)] 6) = [(6, 24, 12)]));\n  (assert ((candidate [(5, 25, 30); (4, 2, 3); (7, 8, 9)] 5) = [(5, 25, 30)]));\n  (assert ((candidate [(7, 9, 16); (8, 16, 4); (19, 17, 18)] 4) = [(8, 16, 4)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_760_unique_Element", "language": "ml", "prompt": "(**Write a mlthon function to check whether a list of numbers contains only one distinct element or not.\n*)\nlet unique_Element (arr : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = unique_Element in\n  (assert ((candidate [1; 1; 1]) = true));\n  (assert ((candidate [1; 2; 1; 2]) = false));\n  (assert ((candidate [1; 2; 3; 4; 5]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "ml", "prompt": "(**Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n*)\nlet check_monthnumber_number (monthnum3 : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_monthnumber_number in\n  (assert ((candidate 6) = true));\n  (assert ((candidate 2) = false));\n  (assert ((candidate 12) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_763_find_min_diff", "language": "ml", "prompt": "(**Write a mlthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n*)\nlet find_min_diff (arr : int list) (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_min_diff in\n  (assert ((candidate [1; 5; 3; 19; 18; 25] 6) = 1));\n  (assert ((candidate [4; 3; 2; 6] 4) = 1));\n  (assert ((candidate [30; 5; 20; 9] 4) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_764_number_ctr", "language": "ml", "prompt": "(**Write a mlthon function to count number of digits in a given string.\n*)\nlet number_ctr (str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = number_ctr in\n  (assert ((candidate \"program2bedone\") = 1));\n  (assert ((candidate \"3wonders\") = 1));\n  (assert ((candidate \"123\") = 3));\n  (assert ((candidate \"3wond-1ers2\") = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_765_is_polite", "language": "ml", "prompt": "(**Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n*)\nlet is_polite (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_polite in\n  (assert ((candidate 7) = 11));\n  (assert ((candidate 4) = 7));\n  (assert ((candidate 9) = 13));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_766_pair_wise", "language": "ml", "prompt": "(**Write a function to return a list of all pairs of consecutive items in a given list.\n*)\nlet pair_wise (l1 : int list) :  int * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = pair_wise in\n  (assert ((candidate [1; 1; 2; 3; 3; 4; 4; 5]) = [(1, 1); (1, 2); (2, 3); (3, 3); (3, 4); (4, 4); (4, 5)]));\n  (assert ((candidate [1; 5; 7; 9; 10]) = [(1, 5); (5, 7); (7, 9); (9, 10)]));\n  (assert ((candidate [5; 1; 9; 7; 10]) = [(5, 1); (1, 9); (9, 7); (7, 10)]));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [(1, 2); (2, 3); (3, 4); (4, 5); (5, 6); (6, 7); (7, 8); (8, 9); (9, 10)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_767_get_pairs_count", "language": "ml", "prompt": "(**Write a mlthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n*)\nlet get_pairs_count (arr : int list) (sum : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_pairs_count in\n  (assert ((candidate [1; 1; 1; 1] 2) = 6));\n  (assert ((candidate [1; 5; 7; (~1); 5] 6) = 3));\n  (assert ((candidate [1; (~2); 3] 1) = 1));\n  (assert ((candidate [(~1); (~2); 3] (~3)) = 1));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_769_Diff", "language": "ml", "prompt": "(**Write a mlthon function to get the difference between two lists.\n*)\nlet Diff (li1 : int list) (li2 : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = Diff in\n  (assert ((candidate [10; 15; 20; 25; 30; 35; 40] [25; 40; 35]) = [10; 20; 30; 15]));\n  (assert ((candidate [1; 2; 3; 4; 5] [6; 7; 1]) = [2; 3; 4; 5; 6; 7]));\n  (assert ((candidate [1; 2; 3] [6; 7; 1]) = [2; 3; 6; 7]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_770_odd_num_sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of fourth power of first n odd natural numbers.\n*)\nlet odd_num_sum (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = odd_num_sum in\n  (assert ((candidate 2) = 82));\n  (assert ((candidate 3) = 707));\n  (assert ((candidate 4) = 3108));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_771_check_expression", "language": "ml", "prompt": "(**Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n*)\nlet check_expression (exp : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_expression in\n  (assert ((candidate \"{()}[{}]\") = true));\n  (assert ((candidate \"{()}[{]\") = false));\n  (assert ((candidate \"{()}[{}][]({})\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_772_remove_length", "language": "ml", "prompt": "(**Write a function to remove all the words with k length in the given string.\n*)\nlet remove_length (test_str : string) (K : int) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_length in\n  (assert ((candidate \"The person is most value tet\" 3) = \"person is most value\"));\n  (assert ((candidate \"If you told me about this ok\" 4) = \"If you me about ok\"));\n  (assert ((candidate \"Forces of darkeness is come into the play\" 4) = \"Forces of darkeness is the\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_773_occurance_substring", "language": "ml", "prompt": "(**Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n*)\nlet occurance_substring (text : string) (pattern : string) :  string * int * int option =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = occurance_substring in\n  (assert ((candidate \"python programming, python language\" \"python\") = Some((\"python\", 0, 6))));\n  (assert ((candidate \"python programming,programming language\" \"programming\") = Some((\"programming\", 7, 18))));\n  (assert ((candidate \"python programming,programming language\" \"language\") = Some((\"language\", 31, 39))));\n  (assert ((candidate \"c++ programming, c++ language\" \"python\") = Some(None)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_775_odd_position", "language": "ml", "prompt": "(**Write a mlthon function to check whether every odd index contains odd numbers of a given list.\n*)\nlet odd_position (nums : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = odd_position in\n  (assert ((candidate [2; 1; 4; 3; 6; 7; 6; 3]) = true));\n  (assert ((candidate [4; 1; 2]) = true));\n  (assert ((candidate [1; 2; 3]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_776_count_vowels", "language": "ml", "prompt": "(**Write a function to count those characters which have vowels as their neighbors in the given string.\n*)\nlet count_vowels (test_str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_vowels in\n  (assert ((candidate \"bestinstareels\") = 7));\n  (assert ((candidate \"partofthejourneyistheend\") = 12));\n  (assert ((candidate \"amazonprime\") = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_777_find_sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of non-repeated elements in a given list.\n*)\nlet find_sum (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_sum in\n  (assert ((candidate [1; 2; 3; 1; 1; 4; 5; 6]) = 21));\n  (assert ((candidate [1; 10; 9; 4; 2; 10; 10; 45; 4]) = 71));\n  (assert ((candidate [12; 10; 9; 45; 2; 10; 10; 45; 10]) = 78));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_77_is_Diff", "language": "ml", "prompt": "(**Write a mlthon function to find whether a number is divisible by 11.\n*)\nlet is_Diff (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_Diff in\n  (assert ((candidate 12345) = false));\n  (assert ((candidate 1212112) = true));\n  (assert ((candidate 1212) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_780_find_combinations", "language": "ml", "prompt": "(**Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/mlthon-combinations-of-sum-with-tuples-in-tuple-list/\n*)\nlet find_combinations (test_list :  int * int list) :  int * int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_combinations in\n  (assert ((candidate [(2, 4); (6, 7); (5, 1); (6, 10)]) = [(8, 11); (7, 5); (8, 14); (11, 8); (12, 17); (11, 11)]));\n  (assert ((candidate [(3, 5); (7, 8); (6, 2); (7, 11)]) = [(10, 13); (9, 7); (10, 16); (13, 10); (14, 19); (13, 13)]));\n  (assert ((candidate [(4, 6); (8, 9); (7, 3); (8, 12)]) = [(12, 15); (11, 9); (12, 18); (15, 12); (16, 21); (15, 15)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_781_count_divisors", "language": "ml", "prompt": "(**Write a mlthon function to check whether the count of divisors is even. https://www.w3resource.com/mlthon-exercises/basic/mlthon-basic-1-exercise-24.php\n*)\nlet count_divisors (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_divisors in\n  (assert ((candidate 10) = true));\n  (assert ((candidate 100) = false));\n  (assert ((candidate 125) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_782_odd_length_sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n*)\nlet odd_length_sum (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = odd_length_sum in\n  (assert ((candidate [1; 2; 4]) = 14));\n  (assert ((candidate [1; 2; 1; 2]) = 15));\n  (assert ((candidate [1; 7]) = 8));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "ml", "prompt": "(**Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n*)\nlet rgb_to_hsv (r : int) (g : int) (b : int) : float list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = rgb_to_hsv in\n  (assert ((candidate 255 255 255) = [0.0; 0.0; 100.0]));\n  (assert ((candidate 0 215 0) = [120.0; 100.0; 84.31372549019608]));\n  (assert ((candidate 10 215 110) = [149.26829268292684; 95.34883720930233; 84.31372549019608]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_784_mul_even_odd", "language": "ml", "prompt": "(**Write a function to find the product of first even and odd number of a given list.\n*)\nlet mul_even_odd (list1 : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = mul_even_odd in\n  (assert ((candidate [1; 3; 5; 7; 4; 1; 6; 8]) = 4));\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = 2));\n  (assert ((candidate [1; 5; 7; 9; 10]) = 10));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_785_tuple_str_int", "language": "ml", "prompt": "(**Write a function to convert tuple string to integer tuple.\n*)\nlet tuple_str_int (test_str : string) :  int * int * int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = tuple_str_int in\n  (assert ((candidate \"(7, 8, 9)\") = (7, 8, 9)));\n  (assert ((candidate \"(1, 2, 3)\") = (1, 2, 3)));\n  (assert ((candidate \"(4, 5, 6)\") = (4, 5, 6)));\n  (assert ((candidate \"(7, 81, 19)\") = (7, 81, 19)));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_786_right_insertion", "language": "ml", "prompt": "(**Write a function to locate the right insertion point for a specified value in sorted order.\n*)\nlet right_insertion (a : int list) (x : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = right_insertion in\n  (assert ((candidate [1; 2; 4; 5] 6) = 4));\n  (assert ((candidate [1; 2; 4; 5] 3) = 2));\n  (assert ((candidate [1; 2; 4; 5] 7) = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_787_text_match_three", "language": "ml", "prompt": "(**Write a function that matches a string that has an a followed by three 'b'.\n*)\nlet text_match_three (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_match_three in\n  (assert ((candidate \"ac\") = false));\n  (assert ((candidate \"dc\") = false));\n  (assert ((candidate \"abbbba\") = true));\n  (assert ((candidate \"caacabbbba\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_788_new_tuple", "language": "ml", "prompt": "(**Write a function to create a new tuple from the given string and list.\n*)\nlet new_tuple (test_list : string list) (test_str : string) :  string * string * string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = new_tuple in\n  (assert ((candidate [\"WEB\"; \"is\"] \"best\") = (\"WEB\", \"is\", \"best\")));\n  (assert ((candidate [\"We\"; \"are\"] \"Developers\") = (\"We\", \"are\", \"Developers\")));\n  (assert ((candidate [\"Part\"; \"is\"] \"Wrong\") = (\"Part\", \"is\", \"Wrong\")));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_790_even_position", "language": "ml", "prompt": "(**Write a mlthon function to check whether every even index contains even numbers of a given list.\n*)\nlet even_position (nums : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = even_position in\n  (assert ((candidate [3; 2; 1]) = false));\n  (assert ((candidate [1; 2; 3]) = false));\n  (assert ((candidate [2; 1; 4]) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_792_count_list", "language": "ml", "prompt": "(**Write a mlthon function to count the number of lists in a given number of lists.\n*)\nlet count_list (input_list : int list list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_list in\n  (assert ((candidate [[1; 3]; [5; 7]; [9; 11]; [13; 15; 17]]) = 4));\n  (assert ((candidate [[1; 2]; [2; 3]; [4; 5]]) = 3));\n  (assert ((candidate [[1; 0]; [2; 0]]) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_793_last", "language": "ml", "prompt": "(**Write a mlthon function to find the last position of an element in a sorted list.\n*)\nlet last (arr : int list) (x : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = last in\n  (assert ((candidate [1; 2; 3] 1) = 0));\n  (assert ((candidate [1; 1; 1; 2; 3; 4] 1) = 2));\n  (assert ((candidate [2; 3; 2; 3; 6; 8; 9] 3) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_794_text_starta_endb", "language": "ml", "prompt": "(**Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n*)\nlet text_starta_endb (text : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = text_starta_endb in\n  (assert ((candidate \"aabbbb\") = true));\n  (assert ((candidate \"aabAbbbc\") = false));\n  (assert ((candidate \"accddbbjjj\") = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_796_return_sum", "language": "ml", "prompt": "(**Write function to find the sum of all items in the given association list.\n*)\nlet return_sum (dict : (string, int) list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = return_sum in\n  (assert ((candidate [(\"a\", 100); (\"b\", 200); (\"c\", 300)]) = 600));\n  (assert ((candidate [(\"a\", 25); (\"b\", 18); (\"c\", 45)]) = 88));\n  (assert ((candidate [(\"a\", 36); (\"b\", 39); (\"c\", 49)]) = 124));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_797_sum_in_range", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of all odd natural numbers within the range l and r.\n*)\nlet sum_in_range (l : int) (r : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sum_in_range in\n  (assert ((candidate 2 5) = 8));\n  (assert ((candidate 5 7) = 12));\n  (assert ((candidate 7 13) = 40));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_798__sum", "language": "ml", "prompt": "(**Write a mlthon function to find the sum of a list.\n*)\nlet _sum (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = _sum in\n  (assert ((candidate [1; 2; 3]) = 6));\n  (assert ((candidate [15; 12; 13; 10]) = 50));\n  (assert ((candidate [0; 1; 2]) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_799_left_rotate", "language": "ml", "prompt": "(**Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n*)\nlet left_rotate (n : int) (d : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = left_rotate in\n  (assert ((candidate 16 2) = 64));\n  (assert ((candidate 10 2) = 40));\n  (assert ((candidate 99 3) = 792));\n  (assert ((candidate 99 3) = 792));\n  (assert ((candidate 1 3) = 8));\n  (assert ((candidate 5 3) = 40));\n  (assert ((candidate 29 3) = 232));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_79_word_len", "language": "ml", "prompt": "(**Write a mlthon function to check whether the length of the word is odd or not.\n*)\nlet word_len (s : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = word_len in\n  (assert ((candidate \"Hadoop\") = false));\n  (assert ((candidate \"great\") = true));\n  (assert ((candidate \"structure\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_800_remove_all_spaces", "language": "ml", "prompt": "(**Write a function to remove all whitespaces from a string.\n*)\nlet remove_all_spaces (text : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = remove_all_spaces in\n  (assert ((candidate \"python  program\") = \"pythonprogram\"));\n  (assert ((candidate \"python   programming    language\") = \"pythonprogramminglanguage\"));\n  (assert ((candidate \"python                     program\") = \"pythonprogram\"));\n  (assert ((candidate \"   python                     program\") = \"pythonprogram\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_801_test_three_equal", "language": "ml", "prompt": "(**Write a mlthon function to count the number of equal numbers from three given integers.\n*)\nlet test_three_equal (x : int) (y : int) (z : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = test_three_equal in\n  (assert ((candidate 1 1 1) = 3));\n  (assert ((candidate (~1) (~2) (~3)) = 0));\n  (assert ((candidate 1 2 2) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_802_count_rotation", "language": "ml", "prompt": "(**Write a mlthon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n*)\nlet count_rotation (arr : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = count_rotation in\n  (assert ((candidate [3; 2; 1]) = 1));\n  (assert ((candidate [4; 5; 1; 2; 3]) = 2));\n  (assert ((candidate [7; 8; 9; 1; 2; 3]) = 3));\n  (assert ((candidate [1; 2; 3]) = 0));\n  (assert ((candidate [1; 3; 2]) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_803_is_perfect_square", "language": "ml", "prompt": "(**Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n*)\nlet is_perfect_square (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_perfect_square in\n  (assert ((candidate 10) = false));\n  (assert ((candidate 36) = true));\n  (assert ((candidate 14) = false));\n  (assert ((candidate 196) = true));\n  (assert ((candidate 125) = false));\n  (assert ((candidate 15625) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_804_is_product_even", "language": "ml", "prompt": "(**Write a function to check whether the product of numbers in a list is even or not.\n*)\nlet is_product_even (arr : int list) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_product_even in\n  (assert ((candidate [1; 2; 3]) = true));\n  (assert ((candidate [1; 2; 1; 4]) = true));\n  (assert ((candidate [1; 1]) = false));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_805_max_sum_list", "language": "ml", "prompt": "(**Write a function that returns the list in a list of lists whose sum of elements is the highest.\n*)\nlet max_sum_list (lists : int list list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_sum_list in\n  (assert ((candidate [[1; 2; 3]; [4; 5; 6]; [10; 11; 12]; [7; 8; 9]]) = [10; 11; 12]));\n  (assert ((candidate [[3; 2; 1]; [6; 5; 4]; [12; 11; 10]]) = [12; 11; 10]));\n  (assert ((candidate [[2; 3; 1]]) = [2; 3; 1]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_806_max_run_uppercase", "language": "ml", "prompt": "(**Write a function to find maximum run of uppercase characters in the given string.\n*)\nlet max_run_uppercase (test_str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = max_run_uppercase in\n  (assert ((candidate \"GeMKSForGERksISBESt\") = 5));\n  (assert ((candidate \"PrECIOusMOVemENTSYT\") = 6));\n  (assert ((candidate \"GooGLEFluTTER\") = 4));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_807_first_odd", "language": "ml", "prompt": "(**Write a mlthon function to find the first odd number in a given list of numbers.\n*)\nlet first_odd (nums : int list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = first_odd in\n  (assert ((candidate [1; 3; 5]) = 1));\n  (assert ((candidate [2; 4; 1; 3]) = 1));\n  (assert ((candidate [8; 9; 1]) = 9));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_808_check_K", "language": "ml", "prompt": "(**Write a function to check if the given tuples contain the k or not.\n*)\nlet check_K (test_tup : int list) (K : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_K in\n  (assert ((candidate [10; 4; 5; 6; 8] 6) = true));\n  (assert ((candidate [1; 2; 3; 4; 5; 6] 7) = false));\n  (assert ((candidate [7; 8; 9; 44; 11; 12] 11) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_809_check_smaller", "language": "ml", "prompt": "(**Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n*)\nlet check_smaller (test_tup1 :  int * int * int) (test_tup2 :  int * int * int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = check_smaller in\n  (assert ((candidate (1, 2, 3) (2, 3, 4)) = false));\n  (assert ((candidate (4, 5, 6) (3, 4, 5)) = true));\n  (assert ((candidate (11, 12, 13) (10, 11, 12)) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_80_tetrahedral_number", "language": "ml", "prompt": "(**Write a function to find the nth tetrahedral number.\n*)\nlet tetrahedral_number (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = tetrahedral_number in\n  (assert ((candidate 5) = 35));\n  (assert ((candidate 6) = 56));\n  (assert ((candidate 7) = 84));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_83_get_Char", "language": "ml", "prompt": "(**Write a mlthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n*)\nlet get_Char (strr : string) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = get_Char in\n  (assert ((candidate \"abc\") = \"f\"));\n  (assert ((candidate \"gfg\") = \"t\"));\n  (assert ((candidate \"ab\") = \"c\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_84_sequence", "language": "ml", "prompt": "(**Write a function to find the nth number in the newman conway sequence.\n*)\nlet sequence (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = sequence in\n  (assert ((candidate 10) = 6));\n  (assert ((candidate 2) = 1));\n  (assert ((candidate 3) = 2));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "ml", "prompt": "(**Write a function to find nth centered hexagonal number.\n*)\nlet centered_hexagonal_number (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = centered_hexagonal_number in\n  (assert ((candidate 10) = 271));\n  (assert ((candidate 2) = 7));\n  (assert ((candidate 9) = 217));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "ml", "prompt": "(**Write a function to merge three dictionaries into a single association list.\n*)\nlet merge_dictionaries_three (dict1 : (string, string) list) (dict2 : (string, string) list) (dict3 : (string, string) list) : (string, string) list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = merge_dictionaries_three in\n  (assert ((candidate [(\"R\", \"Red\"); (\"B\", \"Black\"); (\"P\", \"Pink\")] [(\"G\", \"Green\"); (\"W\", \"White\")] [(\"O\", \"Orange\"); (\"W\", \"White\"); (\"B\", \"Black\")]) = [(\"B\", \"Black\"); (\"R\", \"Red\"); (\"P\", \"Pink\"); (\"G\", \"Green\"); (\"W\", \"White\"); (\"O\", \"Orange\")]));\n  (assert ((candidate [(\"R\", \"Red\"); (\"B\", \"Black\"); (\"P\", \"Pink\")] [(\"G\", \"Green\"); (\"W\", \"White\")] [(\"L\", \"lavender\"); (\"B\", \"Blue\")]) = [(\"W\", \"White\"); (\"P\", \"Pink\"); (\"B\", \"Black\"); (\"R\", \"Red\"); (\"G\", \"Green\"); (\"L\", \"lavender\")]));\n  (assert ((candidate [(\"R\", \"Red\"); (\"B\", \"Black\"); (\"P\", \"Pink\")] [(\"L\", \"lavender\"); (\"B\", \"Blue\")] [(\"G\", \"Green\"); (\"W\", \"White\")]) = [(\"B\", \"Black\"); (\"P\", \"Pink\"); (\"R\", \"Red\"); (\"G\", \"Green\"); (\"L\", \"lavender\"); (\"W\", \"White\")]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_88_freq_count", "language": "ml", "prompt": "(**Write a function to get the frequency of all the elements in a list, returned as an association list.\n*)\nlet freq_count (list1 : int list) : (int, int) list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = freq_count in\n  (assert ((candidate [10; 10; 10; 10; 20; 20; 20; 20; 40; 40; 50; 50; 30]) = [(10, 4); (20, 4); (40, 2); (50, 2); (30, 1)]));\n  (assert ((candidate [1; 2; 3; 4; 3; 2; 4; 1; 3; 1; 4]) = [(1, 3); (2, 2); (3, 3); (4, 3)]));\n  (assert ((candidate [5; 6; 7; 4; 9; 10; 4; 5; 6; 7; 9; 5]) = [(10, 1); (5, 3); (6, 2); (7, 2); (4, 2); (9, 2)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_89_closest_num", "language": "ml", "prompt": "(**Write a function to find the closest smaller number than n.\n*)\nlet closest_num (N : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = closest_num in\n  (assert ((candidate 11) = 10));\n  (assert ((candidate 7) = 6));\n  (assert ((candidate 12) = 11));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_8_square_nums", "language": "ml", "prompt": "(**Write a function to find squares of individual elements in a list.\n*)\nlet square_nums (nums : int list) : int list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = square_nums in\n  (assert ((candidate [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]) = [1; 4; 9; 16; 25; 36; 49; 64; 81; 100]));\n  (assert ((candidate [10; 20; 30]) = [100; 400; 900]));\n  (assert ((candidate [12; 15]) = [144; 225]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_90_len_log", "language": "ml", "prompt": "(**Write a mlthon function to find the length of the longest word.\n*)\nlet len_log (list1 : string list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = len_log in\n  (assert ((candidate [\"python\"; \"PHP\"; \"bigdata\"]) = 7));\n  (assert ((candidate [\"a\"; \"ab\"; \"abc\"]) = 3));\n  (assert ((candidate [\"small\"; \"big\"; \"tall\"]) = 5));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_91_find_substring", "language": "ml", "prompt": "(**Write a function to check if a string is present as a substring in a given list of string values.\n*)\nlet find_substring (str1 : string list) (sub_str : string) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_substring in\n  (assert ((candidate [\"red\"; \"black\"; \"white\"; \"green\"; \"orange\"] \"ack\") = true));\n  (assert ((candidate [\"red\"; \"black\"; \"white\"; \"green\"; \"orange\"] \"abc\") = false));\n  (assert ((candidate [\"red\"; \"black\"; \"white\"; \"green\"; \"orange\"] \"ange\") = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_92_is_undulating", "language": "ml", "prompt": "(**Write a function to check whether the given number is undulating or not.\n*)\nlet is_undulating (n : int) : bool =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = is_undulating in\n  (assert ((candidate 1212121) = true));\n  (assert ((candidate 1991) = false));\n  (assert ((candidate 121) = true));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_93_power", "language": "ml", "prompt": "(**Write a function to calculate the value of 'a' to the power 'b'.\n*)\nlet power (a : int) (b : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = power in\n  (assert ((candidate 3 4) = 81));\n  (assert ((candidate 2 3) = 8));\n  (assert ((candidate 5 5) = 3125));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_94_index_minimum", "language": "ml", "prompt": "(**Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n*)\nlet index_minimum (test_list :  string * int list) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = index_minimum in\n  (assert ((candidate [(\"Rash\", 143); (\"Manjeet\", 200); (\"Varsha\", 100)]) = \"Varsha\"));\n  (assert ((candidate [(\"Yash\", 185); (\"Dawood\", 125); (\"Sanya\", 175)]) = \"Dawood\"));\n  (assert ((candidate [(\"Sai\", 345); (\"Salman\", 145); (\"Ayesha\", 96)]) = \"Ayesha\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_95_Find_Min_Length", "language": "ml", "prompt": "(**Write a mlthon function to find the length of the smallest list in a list of lists.\n*)\nlet Find_Min_Length (lst : int list list) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = Find_Min_Length in\n  (assert ((candidate [[1]; [1; 2]]) = 1));\n  (assert ((candidate [[1; 2]; [1; 2; 3]; [1; 2; 3; 4]]) = 2));\n  (assert ((candidate [[3; 3; 3]; [4; 4; 4; 4]]) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_96_divisor", "language": "ml", "prompt": "(**Write a mlthon function to find the number of divisors of a given integer.\n*)\nlet divisor (n : int) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = divisor in\n  (assert ((candidate 15) = 4));\n  (assert ((candidate 12) = 6));\n  (assert ((candidate 9) = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_97_frequency_lists", "language": "ml", "prompt": "(**Write a function to find frequency of each element in a flattened list of lists, returned in an association list.\n*)\nlet frequency_lists (list1 : int list list) : (int, int) list =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = frequency_lists in\n  (assert ((candidate [[1; 2; 3; 2]; [4; 5; 6; 2]; [7; 8; 9; 5]]) = [(1, 1); (2, 3); (3, 1); (4, 1); (5, 2); (6, 1); (7, 1); (8, 1); (9, 1)]));\n  (assert ((candidate [[1; 2; 3; 4]; [5; 6; 7; 8]; [9; 10; 11; 12]]) = [(1, 1); (2, 1); (3, 1); (4, 1); (5, 1); (6, 1); (7, 1); (8, 1); (9, 1); (10, 1); (11, 1); (12, 1)]));\n  (assert ((candidate [[20; 30; 40; 17]; [18; 16; 14; 13]; [10; 20; 30; 40]]) = [(20, 2); (30, 2); (40, 2); (17, 1); (18, 1); (16, 1); (14, 1); (13, 1); (10, 1)]));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_99_decimal_to_binary", "language": "ml", "prompt": "(**Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n*)\nlet decimal_to_binary (n : int) : string =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = decimal_to_binary in\n  (assert ((candidate 8) = \"1000\"));\n  (assert ((candidate 18) = \"10010\"));\n  (assert ((candidate 7) = \"111\"));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
{"name": "mbpp_9_find_Rotations", "language": "ml", "prompt": "(**Write a mlthon function to find the minimum number of rotations (greater than 0) required to get the same string.\n*)\nlet find_Rotations (str : string) : int =", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "tests": "\nlet assertions =\n let candidate = find_Rotations in\n  (assert ((candidate \"aaaa\") = 1));\n  (assert ((candidate \"ab\") = 2));\n  (assert ((candidate \"abc\") = 3));\n  ()\n", "stop_tokens": ["\n\n", "\n(*", "\ntype", "\nlet"]}
