{"name": "mbpp_100_next_smallest_palindrome", "language": "pl", "prompt": "# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nsub next_smallest_palindrome {\n    my($num) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest_palindrome;\n        if(eq_deeply($candidate->(99),101)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1221),1331)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),121)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_101_kth_element", "language": "pl", "prompt": "# Write a function to find the kth element in the given array using 1-based indexing.\nsub kth_element {\n    my($arr, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&kth_element;\n        if(eq_deeply($candidate->([12, 3, 5, 7, 19], 2),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([17, 24, 8, 23], 3),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([16, 21, 25, 36, 4], 4),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_102_snake_to_camel", "language": "pl", "prompt": "# Write a function to convert a snake case string to camel case string.\nsub snake_to_camel {\n    my($word) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&snake_to_camel;\n        if(eq_deeply($candidate->(\"python_program\"),\"PythonProgram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python_language\"),\"PythonLanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"programming_language\"),\"ProgrammingLanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_103_eulerian_num", "language": "pl", "prompt": "# Write a function to find the Eulerian number a(n, m).\nsub eulerian_num {\n    my($n, $m) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eulerian_num;\n        if(eq_deeply($candidate->(3, 1),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 1),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 3),26)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_104_sort_sublists", "language": "pl", "prompt": "# Write a function to sort each subarray of strings in a given array of arrays.\nsub sort_sublists {\n    my($input_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_sublists;\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]),[[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]),[[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_105_count", "language": "pl", "prompt": "# Write a plthon function to count true booleans in the given array.\nsub count {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count;\n        if(eq_deeply($candidate->([\"\", \"\"]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_106_add_lists", "language": "pl", "prompt": "# Write a function to append the given array to the given arrays.\nsub add_lists {\n    my($test_list, $test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_lists;\n        if(eq_deeply($candidate->([5, 6, 7], [9, 10]),[9, 10, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 8], [10, 11]),[10, 11, 6, 7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9], [11, 12]),[11, 12, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_108_merge_sorted_list", "language": "pl", "prompt": "# Write a function to merge three arrays into a single sorted array.\nsub merge_sorted_list {\n    my($num1, $num2, $num3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&merge_sorted_list;\n        if(eq_deeply($candidate->([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]),[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]),[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]),[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_109_odd_Equivalent", "language": "pl", "prompt": "# Write a plthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nsub odd_Equivalent {\n    my($s, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_Equivalent;\n        if(eq_deeply($candidate->(\"011001\", 6),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11011\", 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1010\", 4),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_113_check_integer", "language": "pl", "prompt": "# Write a function to check if a string represents an integer or not.\nsub check_integer {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_integer;\n        if(eq_deeply($candidate->(\"python\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"12345\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_115_empty_dit", "language": "pl", "prompt": "# Write a function to check whether all dictionaries in an array are empty or not.\nsub empty_dit {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&empty_dit;\n        if(eq_deeply($candidate->([{}, {}, {}]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_116_tuple_to_int", "language": "pl", "prompt": "# Write a function to convert a given array of positive integers into a single integer.\nsub tuple_to_int {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_to_int;\n        if(eq_deeply($candidate->([1, 2, 3]),123)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6]),456)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7]),567)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_117_list_to_float", "language": "pl", "prompt": "# Write a function to convert all possible convertible elements in an array of arrays to floats.\nsub list_to_float {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&list_to_float;\n        if(eq_deeply($candidate->([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_118_string_to_list", "language": "pl", "prompt": "# Write a function to convert a string to an array of strings split on the space character.\nsub string_to_list {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_list;\n        if(eq_deeply($candidate->(\"python programming\"),[\"python\", \"programming\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lists tuples strings\"),[\"lists\", \"tuples\", \"strings\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"write a program\"),[\"write\", \"a\", \"program\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_119_search", "language": "pl", "prompt": "# Write a plthon function to find the element that appears only once in a sorted array.\nsub search {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&search;\n        if(eq_deeply($candidate->([1, 1, 2, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 4, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_11_remove_Occ", "language": "pl", "prompt": "# Write a plthon function to remove first and last occurrence of a given character from the string.\nsub remove_Occ {\n    my($s, $ch) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_Occ;\n        if(eq_deeply($candidate->(\"hello\", \"l\"),\"heo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcda\", \"a\"),\"bcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PHP\", \"P\"),\"H\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_120_max_product_tuple", "language": "pl", "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.\nsub max_product_tuple {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_product_tuple;\n        if(eq_deeply($candidate->([[2, 7], [2, 6], [1, 8], [4, 9]]),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20], [15, 2], [5, 10]]),200)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 44], [10, 15], [20, 5], [12, 9]]),484)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "pl", "prompt": "# Write a function to sum all amicable numbers from 1 to a specified number.\nsub amicable_numbers_sum {\n    my($limit) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&amicable_numbers_sum;\n        if(eq_deeply($candidate->(999),504)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9999),31626)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(99),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_125_find_length", "language": "pl", "prompt": "# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nsub find_length {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_length;\n        if(eq_deeply($candidate->(\"11000010001\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"10111\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"11011101100101\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_126_sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of common divisors of two given numbers.\nsub sum {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum;\n        if(eq_deeply($candidate->(10, 15),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 150),93)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 6),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_127_multiply_int", "language": "pl", "prompt": "# Write a function to multiply two integers.\nsub multiply_int {\n    my($x, $y) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply_int;\n        if(eq_deeply($candidate->(10, 20),200)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 10),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8),32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_128_long_words", "language": "pl", "prompt": "# Write a function to find words that are longer than n characters from a given array of words.\nsub long_words {\n    my($n, $str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&long_words;\n        if(eq_deeply($candidate->(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, \"writing a program\"),[\"writing\", \"program\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, \"sorting list\"),[\"sorting\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_129_magic_square_test", "language": "pl", "prompt": "# Write a function to calculate whether the matrix is a magic square.\nsub magic_square_test {\n    my($my_matrix) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&magic_square_test;\n        if(eq_deeply($candidate->([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_12_sort_matrix", "language": "pl", "prompt": "# Write a function to sort a given matrix in ascending order according to the sum of its rows.\nsub sort_matrix {\n    my($M) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_matrix;\n        if(eq_deeply($candidate->([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_130_max_occurrences", "language": "pl", "prompt": "# Write a function to find the item with maximum frequency in a given array.\nsub max_occurrences {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_occurrences;\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_131_reverse_vowels", "language": "pl", "prompt": "# Write a plthon function to reverse only the vowels of a given string (where y is not a vowel).\nsub reverse_vowels {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_vowels;\n        if(eq_deeply($candidate->(\"Python\"),\"Python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"USA\"),\"ASU\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"ab\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_132_tup_string", "language": "pl", "prompt": "# Write a function to convert an array to a string.\nsub tup_string {\n    my($tup1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tup_string;\n        if(eq_deeply($candidate->([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]),\"exercises\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]),\"python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]),\"program\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_133_sum_negativenum", "language": "pl", "prompt": "# Write a function to calculate the sum of the negative numbers of a given array of numbers.\nsub sum_negativenum {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_negativenum;\n        if(eq_deeply($candidate->([2, 4, -6, -9, 11, -12, 14, -5, 17]),-32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 15, -14, 13, -18, 12, -20]),-52)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]),-894)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_135_hexagonal_num", "language": "pl", "prompt": "# Write a function to find the nth hexagonal number.\nsub hexagonal_num {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&hexagonal_num;\n        if(eq_deeply($candidate->(10),190)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),45)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),91)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "pl", "prompt": "# Write a plthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nsub is_Sum_Of_Powers_Of_Two {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_Sum_Of_Powers_Of_Two;\n        if(eq_deeply($candidate->(10),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_141_pancake_sort", "language": "pl", "prompt": "# Write a function to sort an array of elements.\nsub pancake_sort {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pancake_sort;\n        if(eq_deeply($candidate->([15, 79, 25, 38, 69]),[15, 25, 38, 69, 79])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([98, 12, 54, 36, 85]),[12, 36, 54, 85, 98])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([41, 42, 32, 12, 23]),[12, 23, 32, 41, 42])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_142_count_samepair", "language": "pl", "prompt": "# Write a function to count number items that are identical in the same position of three given arrays.\nsub count_samepair {\n    my($list1, $list2, $list3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_samepair;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_143_find_lists", "language": "pl", "prompt": "# Write a function to find number of arrays present in the given array.\nsub find_lists {\n    my($Input) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_lists;\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8]]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4], [5, 6]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 7, 6, 5, 4, 3, 2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "pl", "prompt": "# Write a plthon function to find the maximum difference between any two elements in a given array.\nsub max_Abs_Diff {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_Abs_Diff;\n        if(eq_deeply($candidate->([2, 1, 5, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 3, 2, 5, 1]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_14_find_Volume", "language": "pl", "prompt": "# Write a plthon function to find the volume of a triangular prism.\nsub find_Volume {\n    my($l, $b, $h) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Volume;\n        if(eq_deeply($candidate->(10, 8, 6),240)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 2, 2),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_160_find_solution", "language": "pl", "prompt": "# Write a function that returns integers x and y that satisfy ax + by = n as an array, or return undef if no solution exists.\nsub find_solution {\n    my($a, $b, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_solution;\n        if(eq_deeply($candidate->(2, 3, 7),[2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2, 7),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 13, 17),[4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_161_remove_elements", "language": "pl", "prompt": "# Write a function to remove all elements from a given array present in another array.\nsub remove_elements {\n    my($list1, $list2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_elements;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_162_sum_series", "language": "pl", "prompt": "# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nsub sum_series {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_series;\n        if(eq_deeply($candidate->(6),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_164_are_equivalent", "language": "pl", "prompt": "# Write a function to determine if the sum of the divisors of two integers are the same.\nsub are_equivalent {\n    my($num1, $num2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&are_equivalent;\n        if(eq_deeply($candidate->(36, 57),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(23, 47),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_165_count_char_position", "language": "pl", "prompt": "# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nsub count_char_position {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_char_position;\n        if(eq_deeply($candidate->(\"xbcefg\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ABcED\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"AbgdeF\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_166_find_even_pair", "language": "pl", "prompt": "# Write a function that counts the number of pairs of integers in an array that xor to an even number.\nsub find_even_pair {\n    my($A) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_even_pair;\n        if(eq_deeply($candidate->([5, 4, 7, 2, 1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 2, 8, 1, 0, 5, 11]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_167_next_power_of_2", "language": "pl", "prompt": "# Write a plthon function to find the smallest power of 2 greater than or equal to n.\nsub next_power_of_2 {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_power_of_2;\n        if(eq_deeply($candidate->(0),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_168_frequency", "language": "pl", "prompt": "# Write a function to count the number of occurrences of a number in a given array.\nsub frequency {\n    my($a, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&frequency;\n        if(eq_deeply($candidate->([1, 2, 3], 4),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3, 3, 3, 4], 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, 3, 1, 2], 1),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "pl", "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nsub text_lowercase_underscore {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_lowercase_underscore;\n        if(eq_deeply($candidate->(\"aab_cbbbc\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aab_Abbbc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Aaab_abbbc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_170_sum_range_list", "language": "pl", "prompt": "# Write a function to find the sum of numbers in an array within a range specified by two indices.\nsub sum_range_list {\n    my($list1, $m, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_range_list;\n        if(eq_deeply($candidate->([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10),38)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "pl", "prompt": "# Write a function to find the perimeter of a regular pentagon from the length of its sides.\nsub perimeter_pentagon {\n    my($a) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&perimeter_pentagon;\n        if(eq_deeply($candidate->(5),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_172_count_occurance", "language": "pl", "prompt": "# Write a function to count the number of occurence of the string 'std' in a given string.\nsub count_occurance {\n    my($s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_occurance;\n        if(eq_deeply($candidate->(\"letstdlenstdporstd\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"truststdsolensporsd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"makestdsostdworthit\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"stds\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_17_square_perimeter", "language": "pl", "prompt": "# Write a function that returns the perimeter of a square given its side length as input.\nsub square_perimeter {\n    my($a) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&square_perimeter;\n        if(eq_deeply($candidate->(10),40)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "pl", "prompt": "# Write a function to remove characters from the first string which are present in the second string.\nsub remove_dirty_chars {\n    my($string, $second_string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_dirty_chars;\n        if(eq_deeply($candidate->(\"probasscurve\", \"pros\"),\"bacuve\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"digitalindia\", \"talent\"),\"digiidi\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"exoticmiles\", \"toxic\"),\"emles\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_19_test_duplicate", "language": "pl", "prompt": "# Write a function to find whether a given array of integers contains any duplicate element.\nsub test_duplicate {\n    my($arraynums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&test_duplicate;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, 2, 3, 3, 4, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_20_is_woodall", "language": "pl", "prompt": "# Write a function to check if the given number is woodball or not.\nsub is_woodall {\n    my($x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_woodall;\n        if(eq_deeply($candidate->(383),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(254),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(200),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_222_check_type", "language": "pl", "prompt": "# Write a function to check if all the elements in array have same data type or not.\nsub check_type {\n    my($test_tuple) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_type;\n        if(eq_deeply($candidate->([5, 6, 7, 3, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, \"4\"]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_223_is_majority", "language": "pl", "prompt": "# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nsub is_majority {\n    my($arr, $n, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_majority;\n        if(eq_deeply($candidate->([1, 2, 3, 3, 3, 3, 10], 7, 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 2], 5, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 2, 2], 5, 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_224_count_Set_Bits", "language": "pl", "prompt": "# Write a plthon function to count the number of set bits (binary digits with value 1) in a given number.\nsub count_Set_Bits {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_Set_Bits;\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_226_odd_values_string", "language": "pl", "prompt": "# Write a plthon function to remove the characters which have odd index values of a given string.\nsub odd_values_string {\n    my($str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_values_string;\n        if(eq_deeply($candidate->(\"abcdef\"),\"ace\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python\"),\"pto\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"data\"),\"dt\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"lambs\"),\"lms\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_227_min_of_three", "language": "pl", "prompt": "# Write a function to find minimum of three numbers.\nsub min_of_three {\n    my($a, $b, $c) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_of_three;\n        if(eq_deeply($candidate->(10, 20, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 15, 18),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-10, -20, -30),-30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "pl", "prompt": "# Write a plthon function to check whether all the bits are unset in the given range or not.\nsub all_Bits_Set_In_The_Given_Range {\n    my($n, $l, $r) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_Bits_Set_In_The_Given_Range;\n        if(eq_deeply($candidate->(4, 1, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 2, 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(39, 4, 6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_229_re_arrange_array", "language": "pl", "prompt": "# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nsub re_arrange_array {\n    my($arr, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&re_arrange_array;\n        if(eq_deeply($candidate->([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9),[-1, -3, -7, 4, 5, 6, 2, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, -14, -26, 13, 15], 5),[-14, -26, 12, 13, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 24, 36, -42, -39, -78, 85], 7),[-42, -39, -78, 10, 24, 36, 85])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_230_replace_blank", "language": "pl", "prompt": "# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nsub replace_blank {\n    my($str1, $char) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_blank;\n        if(eq_deeply($candidate->(\"hello people\", \"@\"),\"hello@people\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python program language\", \"$\"),\"python$program$language\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"blank space\", \"-\"),\"blank-space\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_234_volume_cube", "language": "pl", "prompt": "# Write a function to find the volume of a cube given its side length.\nsub volume_cube {\n    my($l) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&volume_cube;\n        if(eq_deeply($candidate->(3),27)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),125)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_237_check_occurences", "language": "pl", "prompt": "# Write a function that takes in an array of arrays and returns a hash mapping each unique array to the number of times it occurs in the array.\nsub check_occurences {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_occurences;\n        if(eq_deeply($candidate->([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]),{[1, 3] => 2, [2, 5] => 2, [3, 6] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]),{[2, 4] => 2, [3, 6] => 2, [4, 7] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]),{[2, 13] => 1, [11, 23] => 1, [12, 25] => 2, [16, 23] => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_238_number_of_substrings", "language": "pl", "prompt": "# Write a plthon function to count the number of non-empty substrings of a given string.\nsub number_of_substrings {\n    my($str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&number_of_substrings;\n        if(eq_deeply($candidate->(\"abc\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "pl", "prompt": "# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nsub get_total_number_of_sequences {\n    my($m, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_total_number_of_sequences;\n        if(eq_deeply($candidate->(10, 4),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 2),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(16, 3),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_240_replace_list", "language": "pl", "prompt": "# Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.\nsub replace_list {\n    my($list1, $list2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_list;\n        if(eq_deeply($candidate->([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 2, 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [5, 6, 7, 8]),[1, 2, 3, 4, 5, 6, 7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"blue\", \"green\"], [\"yellow\"]),[\"red\", \"blue\", \"yellow\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_242_count_charac", "language": "pl", "prompt": "# Write a function to count the total number of characters in a string.\nsub count_charac {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_charac;\n        if(eq_deeply($candidate->(\"python programming\"),18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"language\"),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"words\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "pl", "prompt": "# Write a plthon function to find the next perfect square greater than a given number.\nsub next_Perfect_Square {\n    my($N) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_Perfect_Square;\n        if(eq_deeply($candidate->(35),36)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_245_max_sum", "language": "pl", "prompt": "# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nsub max_sum {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum;\n        if(eq_deeply($candidate->([1, 15, 51, 45, 33, 100, 12, 18, 9]),194)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([80, 60, 30, 40, 20, 10]),210)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 14, 16, 21, 23, 29, 30]),138)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_247_lps", "language": "pl", "prompt": "# Write a function to find the length of the longest palindromic subsequence in the given string.\nsub lps {\n    my($str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lps;\n        if(eq_deeply($candidate->(\"TENS FOR TENS\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"CARDIO FOR CARDS\"),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PART OF THE JOURNEY IS PART\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_249_intersection_array", "language": "pl", "prompt": "# Write a function to find the intersection of two arrays.\nsub intersection_array {\n    my($array_nums1, $array_nums2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&intersection_array;\n        if(eq_deeply($candidate->([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]),[1, 2, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]),[3, 5, 7, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]),[10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_250_count_X", "language": "pl", "prompt": "# Write a plthon function that takes in an array and an element and counts the occcurences of the element in the array.\nsub count_X {\n    my($tup, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_X;\n        if(eq_deeply($candidate->([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_251_insert_element", "language": "pl", "prompt": "# Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.\nsub insert_element {\n    my($list, $element) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&insert_element;\n        if(eq_deeply($candidate->([\"Red\", \"Green\", \"Black\"], \"c\"),[\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"python\", \"java\"], \"program\"),[\"program\", \"python\", \"program\", \"java\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"happy\", \"sad\"], \"laugh\"),[\"laugh\", \"happy\", \"laugh\", \"sad\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_252_convert", "language": "pl", "prompt": "# Write a plthon function to convert complex numbers to polar coordinates.\nsub convert {\n    my($numbers) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&convert;\n        if(eq_deeply($candidate->(1),[1.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[4.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[5.0, 0.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_253_count_integer", "language": "pl", "prompt": "# Write a plthon function that returns the number of integer elements in a given array.\nsub count_integer {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_integer;\n        if(eq_deeply($candidate->([1, 2, \"abc\", 1.2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1.2, 4, 5.1]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_255_combinations_colors", "language": "pl", "prompt": "# Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.\nsub combinations_colors {\n    my($l, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&combinations_colors;\n        if(eq_deeply($candidate->([\"Red\", \"Green\", \"Blue\"], 1),[[\"Red\"], [\"Green\"], [\"Blue\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Red\", \"Green\", \"Blue\"], 2),[[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Red\", \"Green\", \"Blue\"], 3),[[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_256_count_Primes_nums", "language": "pl", "prompt": "# Write a plthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nsub count_Primes_nums {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_Primes_nums;\n        if(eq_deeply($candidate->(5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_257_swap_numbers", "language": "pl", "prompt": "# Write a function that takes in two numbers and returns an array with the second number and then the first number.\nsub swap_numbers {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&swap_numbers;\n        if(eq_deeply($candidate->(10, 20),[20, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 17),[17, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 200),[200, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_259_maximize_elements", "language": "pl", "prompt": "# Write a function to maximize the given two arrays.\nsub maximize_elements {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximize_elements;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 7], [4, 9], [2, 9], [7, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[7, 8], [5, 10], [3, 10], [8, 11]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[8, 9], [6, 11], [4, 11], [9, 12]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_260_newman_prime", "language": "pl", "prompt": "# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nsub newman_prime {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&newman_prime;\n        if(eq_deeply($candidate->(3),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),17)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),41)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_261_division_elements", "language": "pl", "prompt": "# Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.\nsub division_elements {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&division_elements;\n        if(eq_deeply($candidate->([10, 4, 6, 9], [5, 2, 3, 3]),[2, 2, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 6, 8, 16], [6, 3, 4, 4]),[2, 2, 2, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([20, 14, 36, 18], [5, 7, 6, 9]),[4, 2, 6, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_262_split_two_parts", "language": "pl", "prompt": "# Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nsub split_two_parts {\n    my($list1, $L) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_two_parts;\n        if(eq_deeply($candidate->([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_264_dog_age", "language": "pl", "prompt": "# Write a function to calculate a dog's age in dog's years.\nsub dog_age {\n    my($h_age) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&dog_age;\n        if(eq_deeply($candidate->(12),61)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),73)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(24),109)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_265_list_split", "language": "pl", "prompt": "# Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nsub list_split {\n    my($S, $step) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&list_split;\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3),[[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3),[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2),[[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "pl", "prompt": "# Write a function to find the lateral surface area of a cube given its side length.\nsub lateralsurface_cube {\n    my($l) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lateralsurface_cube;\n        if(eq_deeply($candidate->(5),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),324)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),400)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_267_square_Sum", "language": "pl", "prompt": "# Write a plthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nsub square_Sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&square_Sum;\n        if(eq_deeply($candidate->(2),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),35)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_268_find_star_num", "language": "pl", "prompt": "# Write a function to find the n'th star number.\nsub find_star_num {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_star_num;\n        if(eq_deeply($candidate->(3),37)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),73)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),121)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_269_ascii_value", "language": "pl", "prompt": "# Write a function to find the ascii value of a character.\nsub ascii_value {\n    my($k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&ascii_value;\n        if(eq_deeply($candidate->(\"A\"),65)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"R\"),82)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"S\"),83)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "pl", "prompt": "# Write a plthon function to find the sum of even numbers at even positions of an array.\nsub sum_even_and_even_index {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_even_and_even_index;\n        if(eq_deeply($candidate->([5, 6, 12, 1, 18, 8]),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]),26)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 12, 1]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_271_even_Power_Sum", "language": "pl", "prompt": "# Write a plthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nsub even_Power_Sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_Power_Sum;\n        if(eq_deeply($candidate->(2),1056)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),8832)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_272_rear_extract", "language": "pl", "prompt": "# Write a function that takes in an array of arrays and returns an array containing the rear element of each array.\nsub rear_extract {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rear_extract;\n        if(eq_deeply($candidate->([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_273_substract_elements", "language": "pl", "prompt": "# Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.\nsub substract_elements {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&substract_elements;\n        if(eq_deeply($candidate->([10, 4, 5], [2, 5, 18]),[8, -1, -13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 2, 3], [24, 45, 16]),[-13, -43, -13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 18, 9], [10, 11, 12]),[-3, 7, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "pl", "prompt": "# Write a plthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nsub even_binomial_Coeff_Sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_binomial_Coeff_Sum;\n        if(eq_deeply($candidate->(4),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_277_dict_filter", "language": "pl", "prompt": "# Write a function that takes in a hash and integer n and filters the hash to only include entries with values greater than or equal to n.\nsub dict_filter {\n    my($dict, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&dict_filter;\n        if(eq_deeply($candidate->({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 170),{\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 180),{\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190}, 190),{\"Pierre Cox\" => 190})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_278_count_first_elements", "language": "pl", "prompt": "# Write a function to find the number of elements that occurs before the array element in the given array.\nsub count_first_elements {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_first_elements;\n        if(eq_deeply($candidate->([1, 5, 7, [4, 6], 10]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 9, [5, 7], 11]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 15, 5, 8, [2, 3], 8]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_279_is_num_decagonal", "language": "pl", "prompt": "# Write a function to find the nth decagonal number.\nsub is_num_decagonal {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_num_decagonal;\n        if(eq_deeply($candidate->(3),27)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),175)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),370)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_280_sequential_search", "language": "pl", "prompt": "# Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nsub sequential_search {\n    my($dlist, $item) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sequential_search;\n        if(eq_deeply($candidate->([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[1, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 32, 45, 62, 35, 47, 44, 61], 61),[1, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 10, 17, 19, 22, 39, 48, 56], 48),[1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_281_all_unique", "language": "pl", "prompt": "# Write a plthon function to check if the elements of a given array are unique or not.\nsub all_unique {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_unique;\n        if(eq_deeply($candidate->([1, 2, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_282_sub_list", "language": "pl", "prompt": "# Write a function to subtract two arrays element-wise.\nsub sub_list {\n    my($nums1, $nums2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sub_list;\n        if(eq_deeply($candidate->([1, 2, 3], [4, 5, 6]),[-3, -3, -3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], [3, 4]),[-2, -2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([90, 120], [50, 70]),[40, 50])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_283_validate", "language": "pl", "prompt": "# Write a plthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nsub validate {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&validate;\n        if(eq_deeply($candidate->(1234),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(51241),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(321),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_284_check_element", "language": "pl", "prompt": "# Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.\nsub check_element {\n    my($list, $element) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_element;\n        if(eq_deeply($candidate->([\"green\", \"orange\", \"black\", \"white\"], \"blue\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"green\", \"green\", \"green\", \"green\"], \"green\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_285_text_match_two_three", "language": "pl", "prompt": "# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nsub text_match_two_three {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_two_three;\n        if(eq_deeply($candidate->(\"ac\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abbbba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "pl", "prompt": "# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nsub max_sub_array_sum_repeated {\n    my($a, $n, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sub_array_sum_repeated;\n        if(eq_deeply($candidate->([10, 20, -30, -1], 4, 3),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 10, 20], 3, 2),59)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, -3], 3, 3),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_287_square_Sum", "language": "pl", "prompt": "# Write a plthon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nsub square_Sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&square_Sum;\n        if(eq_deeply($candidate->(2),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),56)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_290_max_length", "language": "pl", "prompt": "# Write a function to find the array of maximum length in an array of arrays.\nsub max_length {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_length;\n        if(eq_deeply($candidate->([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),[3, [13, 15, 17]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1], [5, 7], [10, 12, 14, 15]]),[4, [10, 12, 14, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5], [15, 20, 25]]),[3, [15, 20, 25]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_291_count_no_of_ways", "language": "pl", "prompt": "# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nsub count_no_of_ways {\n    my($n, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_no_of_ways;\n        if(eq_deeply($candidate->(2, 4),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 2),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 4),228)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_292_find", "language": "pl", "prompt": "# Write a plthon function to find quotient of two numbers (rounded down to the nearest integer).\nsub find {\n    my($n, $m) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find;\n        if(eq_deeply($candidate->(10, 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20, 5),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_293_otherside_rightangle", "language": "pl", "prompt": "# Write a function to find the third side of a right angled triangle.\nsub otherside_rightangle {\n    my($w, $h) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&otherside_rightangle;\n        if(eq_deeply($candidate->(7, 8),10.63014581273465)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 4),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 15),16.55294535724685)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_294_max_val", "language": "pl", "prompt": "# Write a function to find the maximum value in a given heterogeneous array.\nsub max_val {\n    my($listval) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_val;\n        if(eq_deeply($candidate->([\"Python\", 3, 2, 4, 5, \"version\"]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", 15, 20, 25]),25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", 30, 20, 40, 50, \"version\"]),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_295_sum_div", "language": "pl", "prompt": "# Write a function to return the sum of all divisors of a number.\nsub sum_div {\n    my($number) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_div;\n        if(eq_deeply($candidate->(8),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_296_get_Inv_Count", "language": "pl", "prompt": "# Write a plthon function to count inversions in an array.\nsub get_Inv_Count {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_Inv_Count;\n        if(eq_deeply($candidate->([1, 20, 6, 4, 5]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 5, 6, 1]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_297_flatten_list", "language": "pl", "prompt": "# Write a function to flatten a given nested array structure.\nsub flatten_list {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flatten_list;\n        if(eq_deeply($candidate->([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_299_max_aggregate", "language": "pl", "prompt": "# Write a function to calculate the maximum aggregate from the array of arrays.\nsub max_aggregate {\n    my($stdata) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_aggregate;\n        if(eq_deeply($candidate->([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]),[\"Juan Whelan\", 212])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]),[\"Juan Whelan\", 72])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]),[\"Sabah Colley\", 70])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_304_find_Element", "language": "pl", "prompt": "# Write a plthon function to find element at a given index after number of rotations.\nsub find_Element {\n    my($arr, $ranges, $rotations, $index) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Element;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_305_start_withp", "language": "pl", "prompt": "# Write a function to return two words from an array of words starting with letter 'p'.\nsub start_withp {\n    my($words) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&start_withp;\n        if(eq_deeply($candidate->([\"Python PHP\", \"Java JavaScript\", \"c c++\"]),[\"Python\", \"PHP\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python Programming\", \"Java Programming\"]),[\"Python\", \"Programming\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Pqrst Pqr\", \"qrstuv\"]),[\"Pqrst\", \"Pqr\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "pl", "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nsub max_sum_increasing_subseq {\n    my($a, $n, $index, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_increasing_subseq;\n        if(eq_deeply($candidate->([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 101, 2, 3, 100, 4, 5], 7, 2, 5),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 15, 19, 21, 26, 28, 31], 7, 2, 4),71)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_308_large_product", "language": "pl", "prompt": "# Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nsub large_product {\n    my($nums1, $nums2, $N) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&large_product;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_309_maximum", "language": "pl", "prompt": "# Write a plthon function to find the maximum of two numbers.\nsub maximum {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->(5, 10),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1, -2),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 7),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_310_string_to_tuple", "language": "pl", "prompt": "# Write a function to convert a given string to an array of characters.\nsub string_to_tuple {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_to_tuple;\n        if(eq_deeply($candidate->(\"python 3.0\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"item1\"),[\"i\", \"t\", \"e\", \"m\", \"1\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15.10\"),[\"1\", \"5\", \".\", \"1\", \"0\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "pl", "prompt": "# Write a plthon function to find the highest power of 2 that is less than or equal to n.\nsub highest_Power_of_2 {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&highest_Power_of_2;\n        if(eq_deeply($candidate->(10),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(32),32)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_389_find_lucas", "language": "pl", "prompt": "# Write a function to find the n'th lucas number.\nsub find_lucas {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_lucas;\n        if(eq_deeply($candidate->(9),76)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_390_add_string", "language": "pl", "prompt": "# Write a function to apply a given format string to all of the elements in an array.\nsub add_string {\n    my($list_, $string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_string;\n        if(eq_deeply($candidate->([1, 2, 3, 4], \"temp{0}\"),[\"temp1\", \"temp2\", \"temp3\", \"temp4\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"),[\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 8], \"string{0}\"),[\"string5\", \"string6\", \"string7\", \"string8\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "pl", "prompt": "# Write a function to convert more than one array to nested hash.\nsub convert_list_dictionary {\n    my($l1, $l2, $l3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&convert_list_dictionary;\n        if(eq_deeply($candidate->([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\" => {\"Adina Park\" => 85}}, {\"S002\" => {\"Leyton Marsh\" => 98}}, {\"S003\" => {\"Duncan Boyle\" => 89}}, {\"S004\" => {\"Saim Richards\" => 92}}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\" => {\"python\" => 100}}, {\"def\" => {\"program\" => 200}}, {\"ghi\" => {\"language\" => 300}}, {\"jkl\" => {\"programs\" => 400}}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\" => {\"java\" => 10}}, {\"A2\" => {\"C\" => 20}}, {\"A3\" => {\"C++\" => 30}}, {\"A4\" => {\"DBMS\" => 40}}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_392_get_max_sum", "language": "pl", "prompt": "# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nsub get_max_sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_sum;\n        if(eq_deeply($candidate->(60),106)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_393_max_length_list", "language": "pl", "prompt": "# Write a function to find the array with maximum length.\nsub max_length_list {\n    my($input_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_length_list;\n        if(eq_deeply($candidate->([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),[3, [13, 15, 17]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]),[5, [1, 2, 3, 4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]),[4, [6, 7, 8, 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_394_check_distinct", "language": "pl", "prompt": "# Write a function to check if given array contains no duplicates.\nsub check_distinct {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_distinct;\n        if(eq_deeply($candidate->([1, 4, 5, 6, 1, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "pl", "prompt": "# Write a plthon function to find the first non-repeated character in a given string.\nsub first_non_repeating_character {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_non_repeating_character;\n        if(eq_deeply($candidate->(\"abcabc\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ababc\"),\"c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_396_check_char", "language": "pl", "prompt": "# Write a function to check whether the given string starts and ends with the same character or not.\nsub check_char {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_char;\n        if(eq_deeply($candidate->(\"abba\"),\"Valid\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a\"),\"Valid\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),\"Invalid\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_397_median_numbers", "language": "pl", "prompt": "# Write a function to find the median of three numbers.\nsub median_numbers {\n    my($a, $b, $c) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median_numbers;\n        if(eq_deeply($candidate->(25, 55, 65),55.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20, 10, 30),20.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 45, 75),45.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_398_sum_of_digits", "language": "pl", "prompt": "# Write a function to compute the sum of digits of each number of a given array.\nsub sum_of_digits {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_of_digits;\n        if(eq_deeply($candidate->([10, 2, 56]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20, 4, 5, \"b\", 70, \"a\"]]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, -4, 5, -70]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_399_bitwise_xor", "language": "pl", "prompt": "# Write a function to perform the mathematical bitwise xor operation across the given arrays.\nsub bitwise_xor {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bitwise_xor;\n        if(eq_deeply($candidate->([10, 4, 6, 9], [5, 2, 3, 3]),[15, 6, 5, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 5, 7, 10], [6, 3, 4, 4]),[13, 6, 3, 14])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 6, 8, 11], [7, 4, 5, 6]),[11, 2, 13, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_3_is_not_prime", "language": "pl", "prompt": "# Write a plthon function to identify non-prime numbers.\nsub is_not_prime {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_not_prime;\n        if(eq_deeply($candidate->(2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(35),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(37),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_400_extract_freq", "language": "pl", "prompt": "# Write a function to extract the number of unique arrays in the given array.\nsub extract_freq {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_freq;\n        if(eq_deeply($candidate->([[3, 4], [1, 2], [4, 3], [5, 6]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 15], [2, 3], [5, 4], [6, 7]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 16], [2, 3], [6, 5], [6, 9]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_401_add_nested_tuples", "language": "pl", "prompt": "# Write a function to perform index wise addition of array elements in the given two nested arrays.\nsub add_nested_tuples {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_nested_tuples;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_404_minimum", "language": "pl", "prompt": "# Write a plthon function to find the minimum of two numbers.\nsub minimum {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&minimum;\n        if(eq_deeply($candidate->(1, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-5, -4),-5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_405_check_tuplex", "language": "pl", "prompt": "# Write a function to check whether an element exists within an array.\nsub check_tuplex {\n    my($tuplex, $tuple1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_tuplex;\n        if(eq_deeply($candidate->([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_406_find_Parity", "language": "pl", "prompt": "# Write a plthon function to find whether the parity of a given number is odd.\nsub find_Parity {\n    my($x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Parity;\n        if(eq_deeply($candidate->(12),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_407_rearrange_bigger", "language": "pl", "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nsub rearrange_bigger {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rearrange_bigger;\n        if(eq_deeply($candidate->(12),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(102),120)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "pl", "prompt": "# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nsub k_smallest_pairs {\n    my($nums1, $nums2, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&k_smallest_pairs;\n        if(eq_deeply($candidate->([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 7], [2, 4, 6], 1),[[1, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_409_min_product_tuple", "language": "pl", "prompt": "# Write a function to find the minimum product from the pairs of arrays within a given array.\nsub min_product_tuple {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_product_tuple;\n        if(eq_deeply($candidate->([[2, 7], [2, 6], [1, 8], [4, 9]]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[10, 20], [15, 2], [5, 10]]),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[11, 44], [10, 15], [20, 5], [12, 9]]),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_410_min_val", "language": "pl", "prompt": "# Write a function to find the minimum value in a given heterogeneous array.\nsub min_val {\n    my($listval) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_val;\n        if(eq_deeply($candidate->([\"Python\", 3, 2, 4, 5, \"version\"]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", 15, 20, 25]),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", 30, 20, 40, 50, \"version\"]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_411_snake_to_camel", "language": "pl", "prompt": "# Write a function to convert the given snake case string to camel case string.\nsub snake_to_camel {\n    my($word) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&snake_to_camel;\n        if(eq_deeply($candidate->(\"android_tv\"),\"AndroidTv\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"google_pixel\"),\"GooglePixel\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple_watch\"),\"AppleWatch\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_412_remove_odd", "language": "pl", "prompt": "# Write a plthon function to remove odd numbers from a given array.\nsub remove_odd {\n    my($l) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_odd;\n        if(eq_deeply($candidate->([1, 2, 3]),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 6]),[2, 4, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 3]),[10, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_413_extract_nth_element", "language": "pl", "prompt": "# Write a function to extract the nth element from a given array of arrays.\nsub extract_nth_element {\n    my($list1, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_nth_element;\n        if(eq_deeply($candidate->([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0),[\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2),[99, 96, 94, 98])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1),[98, 97, 91, 94])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_414_overlapping", "language": "pl", "prompt": "# Write a plthon function to check whether any value in a sequence exists in a sequence or not.\nsub overlapping {\n    my($list1, $list2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&overlapping;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [6, 7, 8, 9]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [4, 5, 6]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 4, 5], [1, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_415_max_Product", "language": "pl", "prompt": "# Write a plthon function to find a pair with highest product from a given array of integers.\nsub max_Product {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_Product;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 7, 0, 8, 4]),[7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, -1, -2, -4, 5, 0, -6]),[-4, -6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_417_group_tuples", "language": "pl", "prompt": "# Write a function to find common first element in given array of arrays.\nsub group_tuples {\n    my($Input) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&group_tuples;\n        if(eq_deeply($candidate->([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]),[[\"x\", \"y\", \"z\"], [\"w\", \"t\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]),[[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]),[[\"f\", \"g\", \"g\"], [\"h\", \"i\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_418_Find_Max", "language": "pl", "prompt": "# Write a plthon function to find the element of an array having maximum length.\nsub Find_Max {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Find_Max;\n        if(eq_deeply($candidate->([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]),[\"A\", \"B\", \"C\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1], [1, 2], [1, 2, 3]]),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1], [1, 2, 3], [1, 5, 6, 1]]),[1, 5, 6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_419_round_and_sum", "language": "pl", "prompt": "# Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.\nsub round_and_sum {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&round_and_sum;\n        if(eq_deeply($candidate->([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]),243)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 2, 9, 24.3, 29]),345)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25.0, 56.7, 89.2]),513)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_420_cube_Sum", "language": "pl", "prompt": "# Write a plthon function to find the cube sum of first n even natural numbers.\nsub cube_Sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cube_Sum;\n        if(eq_deeply($candidate->(2),72)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),288)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),800)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_421_concatenate_tuple", "language": "pl", "prompt": "# Write a function to concatenate each element of array by the delimiter.\nsub concatenate_tuple {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate_tuple;\n        if(eq_deeply($candidate->([\"ID\", \"is\", 4, \"UTS\"]),\"ID-is-4-UTS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"QWE\", \"is\", 4, \"RTY\"]),\"QWE-is-4-RTY\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"ZEN\", \"is\", 4, \"OP\"]),\"ZEN-is-4-OP\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "pl", "prompt": "# Write a plthon function to find the average of cubes of first n natural numbers.\nsub find_Average_Of_Cube {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Average_Of_Cube;\n        if(eq_deeply($candidate->(2),4.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_424_extract_rear", "language": "pl", "prompt": "# Write a function to extract only the rear index element of each string in the given array.\nsub extract_rear {\n    my($test_tuple) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_rear;\n        if(eq_deeply($candidate->([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_425_count_element_in_list", "language": "pl", "prompt": "# Write a function to count the number of subarrays containing a particular element.\nsub count_element_in_list {\n    my($list1, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_element_in_list;\n        if(eq_deeply($candidate->([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "pl", "prompt": "# Write a function to filter odd numbers.\nsub filter_oddnumbers {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_oddnumbers;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 45, 67, 84, 93]),[45, 67, 93])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_427_change_date_format", "language": "pl", "prompt": "# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nsub change_date_format {\n    my($dt) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&change_date_format;\n        if(eq_deeply($candidate->(\"2026-01-02\"),\"02-01-2026\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2020-11-13\"),\"13-11-2020\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2021-04-26\"),\"26-04-2021\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_428_shell_sort", "language": "pl", "prompt": "# Write a function to sort the given array by using shell sort.\nsub shell_sort {\n    my($my_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&shell_sort;\n        if(eq_deeply($candidate->([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]),[2, 3, 4, 5, 12, 12, 23, 56, 81, 95])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([24, 22, 39, 34, 87, 73, 68]),[22, 24, 34, 39, 68, 73, 87])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([32, 30, 16, 96, 82, 83, 74]),[16, 30, 32, 74, 82, 83, 96])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_429_and_tuples", "language": "pl", "prompt": "# Write a function to extract the elementwise and arrays from the given two arrays.\nsub and_tuples {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&and_tuples;\n        if(eq_deeply($candidate->([10, 4, 6, 9], [5, 2, 3, 3]),[0, 0, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [5, 6, 7, 8]),[1, 2, 3, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 9, 11, 12], [7, 13, 14, 17]),[0, 9, 10, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_430_parabola_directrix", "language": "pl", "prompt": "# Write a function to find the directrix of a parabola.\nsub parabola_directrix {\n    my($a, $b, $c) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&parabola_directrix;\n        if(eq_deeply($candidate->(5, 3, 2),-198)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 8, 4),-2336)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 4, 6),-130)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_431_common_element", "language": "pl", "prompt": "# Write a function that takes two arrays and returns true if they have at least one common element.\nsub common_element {\n    my($list1, $list2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&common_element;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [6, 7, 8, 9]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_432_median_trapezium", "language": "pl", "prompt": "# Write a function to find the median length of a trapezium.\nsub median_trapezium {\n    my($base1, $base2, $height) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&median_trapezium;\n        if(eq_deeply($candidate->(15, 25, 35),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 20, 30),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 9, 4),7.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_433_check_greater", "language": "pl", "prompt": "# Write a function to check whether the entered number is greater than the elements of the given array.\nsub check_greater {\n    my($arr, $number) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_greater;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 4, 5, 6], 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 7, 4, 8, 6, 1], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_434_text_match_one", "language": "pl", "prompt": "# Write a function that matches a string that has an a followed by one or more b's.\nsub text_match_one {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_one;\n        if(eq_deeply($candidate->(\"ac\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_435_last_Digit", "language": "pl", "prompt": "# Write a plthon function to find the last digit of a given number.\nsub last_Digit {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&last_Digit;\n        if(eq_deeply($candidate->(123),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_436_neg_nos", "language": "pl", "prompt": "# Write a plthon function to return the negative numbers in an array.\nsub neg_nos {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&neg_nos;\n        if(eq_deeply($candidate->([-1, 4, 5, -6]),[-1, -6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 3, 4]),[-1, -2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-7, -6, 8, 9]),[-7, -6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_437_remove_odd", "language": "pl", "prompt": "# Write a function to remove odd characters in a string.\nsub remove_odd {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_odd;\n        if(eq_deeply($candidate->(\"python\"),\"yhn\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"program\"),\"rga\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"language\"),\"agae\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_438_count_bidirectional", "language": "pl", "prompt": "# Write a function to count bidirectional array pairs.\nsub count_bidirectional {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_bidirectional;\n        if(eq_deeply($candidate->([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_439_multiple_to_single", "language": "pl", "prompt": "# Write a function to join an array of multiple integers into a single integer.\nsub multiple_to_single {\n    my($L) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiple_to_single;\n        if(eq_deeply($candidate->([11, 33, 50]),113350)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 2, 3, 4, 5, 6]),-123456)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 15, 20, 25]),10152025)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_440_find_adverb_position", "language": "pl", "prompt": "# Write a function to find the first adverb and their positions in a given sentence.\nsub find_adverb_position {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_adverb_position;\n        if(eq_deeply($candidate->(\"clearly!! we can see the sky\"),[0, 7, \"clearly\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"seriously!! there are many roses\"),[0, 9, \"seriously\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"unfortunately!! sita is going to home\"),[0, 13, \"unfortunately\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_441_surfacearea_cube", "language": "pl", "prompt": "# Write a function to find the surface area of a cube of a given size.\nsub surfacearea_cube {\n    my($l) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&surfacearea_cube;\n        if(eq_deeply($candidate->(5),150)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),54)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),600)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_442_positive_count", "language": "pl", "prompt": "# Write a function to find the ration of positive numbers in an array of integers.\nsub positive_count {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&positive_count;\n        if(eq_deeply($candidate->([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]),0.54)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),0.69)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -6, -9, 11, -12, 14, -5, 17]),0.56)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_443_largest_neg", "language": "pl", "prompt": "# Write a plthon function to find the largest negative number from the given array.\nsub largest_neg {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_neg;\n        if(eq_deeply($candidate->([1, 2, 3, -4, -6]),-6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, -8, -9]),-9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, -1]),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_444_trim_tuple", "language": "pl", "prompt": "# Write a function to trim each array by k in the given arrays.\nsub trim_tuple {\n    my($test_list, $K) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&trim_tuple;\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),[[2], [9], [2], [2]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),[[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),[[8, 4], [8, 12], [1, 7], [6, 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_445_index_multiplication", "language": "pl", "prompt": "# Write a function to perform index wise multiplication of array elements in the given two arrays.\nsub index_multiplication {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&index_multiplication;\n        if(eq_deeply($candidate->([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 21], [12, 45], [2, 9], [7, 30]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[14, 32], [20, 60], [6, 20], [16, 44]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[24, 45], [30, 77], [12, 33], [27, 60]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_446_count_Occurrence", "language": "pl", "prompt": "# Write a plthon function to count the occurence of all elements of array in an array.\nsub count_Occurrence {\n    my($tup, $lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_Occurrence;\n        if(eq_deeply($candidate->([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], [1, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_447_cube_nums", "language": "pl", "prompt": "# Write a function to find cubes of individual elements in an array.\nsub cube_nums {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cube_nums;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 30]),[1000, 8000, 27000])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 15]),[1728, 3375])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_448_cal_sum", "language": "pl", "prompt": "# Write a function to calculate the sum of perrin numbers.\nsub cal_sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cal_sum;\n        if(eq_deeply($candidate->(9),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),66)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_450_extract_string", "language": "pl", "prompt": "# Write a function to extract specified size of strings from a given array of string values.\nsub extract_string {\n    my($str, $l) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_string;\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_451_remove_whitespaces", "language": "pl", "prompt": "# Write a function to remove all whitespaces from the given string.\nsub remove_whitespaces {\n    my($text1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_whitespaces;\n        if(eq_deeply($candidate->(\" Google    Flutter \"),\"GoogleFlutter\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" Google    Dart \"),\"GoogleDart\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\" iOS    Swift \"),\"iOSSwift\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_452_loss_amount", "language": "pl", "prompt": "# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nsub loss_amount {\n    my($actual_cost, $sale_amount) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&loss_amount;\n        if(eq_deeply($candidate->(1500, 1200),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 200),100)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2000, 5000),3000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_453_sumofFactors", "language": "pl", "prompt": "# Write a plthon function to find the sum of even factors of a number.\nsub sumofFactors {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sumofFactors;\n        if(eq_deeply($candidate->(18),26)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),48)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_454_text_match_wordz", "language": "pl", "prompt": "# Write a function that matches a word containing 'z'.\nsub text_match_wordz {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_wordz;\n        if(eq_deeply($candidate->(\"pythonz.\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyz.\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"  lang  .\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "pl", "prompt": "# Write a function to check whether the given month number contains 31 days or not.\nsub check_monthnumb_number {\n    my($monthnum2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_monthnumb_number;\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_456_reverse_string_list", "language": "pl", "prompt": "# Write a function to reverse each string in a given array of string values.\nsub reverse_string_list {\n    my($stringlist) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_string_list;\n        if(eq_deeply($candidate->([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]),[\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"john\", \"amal\", \"joel\", \"george\"]),[\"nhoj\", \"lama\", \"leoj\", \"egroeg\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"jack\", \"john\", \"mary\"]),[\"kcaj\", \"nhoj\", \"yram\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_457_Find_Min", "language": "pl", "prompt": "# Write a plthon function to find the subarray having minimum length.\nsub Find_Min {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Find_Min;\n        if(eq_deeply($candidate->([[1], [1, 2], [1, 2, 3]]),[1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1], [1, 1, 1], [1, 2, 7, 8]]),[1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]),[\"x\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_458_rectangle_area", "language": "pl", "prompt": "# Write a function to find the area of a rectangle.\nsub rectangle_area {\n    my($l, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rectangle_area;\n        if(eq_deeply($candidate->(10, 20),200)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 5),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 2),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_459_remove_uppercase", "language": "pl", "prompt": "# Write a function to remove uppercase substrings from a given string.\nsub remove_uppercase {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_uppercase;\n        if(eq_deeply($candidate->(\"cAstyoUrFavoRitETVshoWs\"),\"cstyoravoitshos\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wAtchTheinTernEtrAdIo\"),\"wtchheinerntrdo\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"VoicESeaRchAndreComMendaTionS\"),\"oiceachndreomendaion\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_460_Extract", "language": "pl", "prompt": "# Write a plthon function to get the first element of each subarray.\nsub Extract {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Extract;\n        if(eq_deeply($candidate->([[1, 2], [3, 4, 5], [6, 7, 8, 9]]),[1, 3, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5]]),[1, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[9, 8, 1], [1, 2]]),[9, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_461_upper_ctr", "language": "pl", "prompt": "# Write a plthon function to count the upper case characters in a given string.\nsub upper_ctr {\n    my($str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&upper_ctr;\n        if(eq_deeply($candidate->(\"PYthon\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"BigData\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"program\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_462_combinations_list", "language": "pl", "prompt": "# Write a function to find all possible combinations of the elements of a given array.\nsub combinations_list {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&combinations_list;\n        if(eq_deeply($candidate->([\"orange\", \"red\", \"green\", \"blue\"]),[[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]),[[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"green\", \"black\", \"orange\"]),[[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_463_max_subarray_product", "language": "pl", "prompt": "# Write a function to find the maximum product subarray of the given array.\nsub max_subarray_product {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_subarray_product;\n        if(eq_deeply($candidate->([1, -2, -3, 0, 7, -8, -2]),112)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, -3, -10, 0, 2]),180)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-2, -40, 0, -2, -3]),80)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_464_check_value", "language": "pl", "prompt": "# Write a function to check if all values are same in a hash.\nsub check_value {\n    my($dict, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_value;\n        if(eq_deeply($candidate->({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12}, 5),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_465_drop_empty", "language": "pl", "prompt": "# Write a function to drop empty items from a given hash.\nsub drop_empty {\n    my($dict1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&drop_empty;\n        if(eq_deeply($candidate->({\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => undef}),{\"c1\" => \"Red\", \"c2\" => \"Green\"})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"c1\" => \"Red\", \"c2\" => undef, \"c3\" => undef}),{\"c1\" => \"Red\"})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"c1\" => undef, \"c2\" => \"Green\", \"c3\" => undef}),{\"c2\" => \"Green\"})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_468_max_product", "language": "pl", "prompt": "# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nsub max_product {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_product;\n        if(eq_deeply($candidate->([3, 100, 4, 5, 150, 6]),3000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 42, 55, 68, 80]),50265600)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 22, 9, 33, 21, 50, 41, 60]),2460)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_470_add_pairwise", "language": "pl", "prompt": "# Write a function to find the pairwise addition of the neighboring elements of the given array.\nsub add_pairwise {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_pairwise;\n        if(eq_deeply($candidate->([1, 5, 7, 8, 10]),[6, 12, 15, 18])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 8, 9, 11]),[8, 14, 17, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 7, 9, 10, 12]),[10, 16, 19, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_471_find_remainder", "language": "pl", "prompt": "# Write a plthon function to find the product of the array multiplication modulo n.\nsub find_remainder {\n    my($arr, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_remainder;\n        if(eq_deeply($candidate->([100, 10, 5, 25, 35, 14], 11),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1], 1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1], 2),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_472_check_Consecutive", "language": "pl", "prompt": "# Write a plthon function to check whether the given array contains consecutive numbers or not.\nsub check_Consecutive {\n    my($l) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_Consecutive;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 5, 6]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_474_replace_char", "language": "pl", "prompt": "# Write a function to replace characters in a string.\nsub replace_char {\n    my($str1, $ch, $newch) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_char;\n        if(eq_deeply($candidate->(\"polygon\", \"y\", \"l\"),\"pollgon\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"character\", \"c\", \"a\"),\"aharaater\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python\", \"l\", \"a\"),\"python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_475_sort_counter", "language": "pl", "prompt": "# Write a function to sort a hash by value.\nsub sort_counter {\n    my($dict1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_counter;\n        if(eq_deeply($candidate->({\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87}),[[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250}),[[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250}),[[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_476_big_sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of the largest and smallest value in a given array.\nsub big_sum {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&big_sum;\n        if(eq_deeply($candidate->([1, 2, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 2, 3, 4]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 6]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_477_is_lower", "language": "pl", "prompt": "# Write a plthon function to convert the given string to lower case.\nsub is_lower {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_lower;\n        if(eq_deeply($candidate->(\"InValid\"),\"invalid\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"TruE\"),\"true\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"SenTenCE\"),\"sentence\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_478_remove_lowercase", "language": "pl", "prompt": "# Write a function to remove lowercase substrings from a given string.\nsub remove_lowercase {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_lowercase;\n        if(eq_deeply($candidate->(\"PYTHon\"),\"PYTH\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"FInD\"),\"FID\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"STRinG\"),\"STRG\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_479_first_Digit", "language": "pl", "prompt": "# Write a plthon function to find the first digit of a given number.\nsub first_Digit {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_Digit;\n        if(eq_deeply($candidate->(123),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(456),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_4_heap_queue_largest", "language": "pl", "prompt": "# Write a function to find the n largest integers from a given array of numbers, returned in descending order.\nsub heap_queue_largest {\n    my($nums, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&heap_queue_largest;\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_554_Split", "language": "pl", "prompt": "# Write a plthon function which takes an array of integers and only returns the odd ones.\nsub Split {\n    my($list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Split;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),[1, 3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 11, 12, 13]),[11, 13])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 1]),[7, 9, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_555_difference", "language": "pl", "prompt": "# Write a plthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nsub difference {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&difference;\n        if(eq_deeply($candidate->(3),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),210)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "pl", "prompt": "# Write a plthon function to count the number of pairs whose xor value is odd.\nsub find_Odd_Pair {\n    my($A, $N) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Odd_Pair;\n        if(eq_deeply($candidate->([5, 4, 7, 2, 1], 5),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 2, 8, 1, 0, 5, 11], 7),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_557_toggle_string", "language": "pl", "prompt": "# Write a function to toggle the case of all characters in a string.\nsub toggle_string {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&toggle_string;\n        if(eq_deeply($candidate->(\"Python\"),\"pYTHON\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pangram\"),\"pANGRAM\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"LIttLE\"),\"liTTle\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_558_digit_distance_nums", "language": "pl", "prompt": "# Write a plthon function to find the sum of the per-digit difference between two integers.\nsub digit_distance_nums {\n    my($n1, $n2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digit_distance_nums;\n        if(eq_deeply($candidate->(1, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(23, 56),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(123, 256),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "pl", "prompt": "# Write a function to find the sum of the largest contiguous subarray in the given array.\nsub max_sub_array_sum {\n    my($a, $size) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sub_array_sum;\n        if(eq_deeply($candidate->([-2, -3, 4, -1, -2, 1, 5, -3], 8),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, -4, 5, -2, -3, 2, 6, -4], 8),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-4, -5, 6, -3, -4, 3, 7, -5], 8),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_560_union_elements", "language": "pl", "prompt": "# Write a function to find the union of the elements of two given arrays and output them in sorted order.\nsub union_elements {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&union_elements;\n        if(eq_deeply($candidate->([3, 4, 5, 6], [5, 7, 4, 10]),[3, 4, 5, 6, 7, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [3, 4, 5, 6]),[1, 2, 3, 4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 12, 13, 14], [13, 15, 16, 17]),[11, 12, 13, 14, 15, 16, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_562_Find_Max_Length", "language": "pl", "prompt": "# Write a plthon function to find the length of the longest subarrays.\nsub Find_Max_Length {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Find_Max_Length;\n        if(eq_deeply($candidate->([[1], [1, 4], [5, 6, 7, 8]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[0, 1], [2, 2], [3, 2, 1]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_563_extract_values", "language": "pl", "prompt": "# Write a function to extract values between quotation marks from a string.\nsub extract_values {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_values;\n        if(eq_deeply($candidate->(\"\"Python\", \"PHP\", \"Java\"\"),[\"Python\", \"PHP\", \"Java\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"python\",\"program\",\"language\"\"),[\"python\", \"program\", \"language\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"red\",\"blue\",\"green\",\"yellow\"\"),[\"red\", \"blue\", \"green\", \"yellow\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_564_count_Pairs", "language": "pl", "prompt": "# Write a plthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.\nsub count_Pairs {\n    my($arr, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_Pairs;\n        if(eq_deeply($candidate->([1, 2, 1], 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 1], 4),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], 5),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_565_split", "language": "pl", "prompt": "# Write a plthon function to split a string into characters.\nsub split {\n    my($word) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split;\n        if(eq_deeply($candidate->(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Name\"),[\"N\", \"a\", \"m\", \"e\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_566_sum_digits", "language": "pl", "prompt": "# Write a function to get the sum of the digits of a non-negative integer.\nsub sum_digits {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_digits;\n        if(eq_deeply($candidate->(345),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(97),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_567_issort_list", "language": "pl", "prompt": "# Write a function to check whether a specified array is sorted or not.\nsub issort_list {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&issort_list;\n        if(eq_deeply($candidate->([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 6, 8, 10, 15, 14, 20]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_568_empty_list", "language": "pl", "prompt": "# Write a function to create an array of N empty dictionaries.\nsub empty_list {\n    my($length) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&empty_list;\n        if(eq_deeply($candidate->(5),[{}, {}, {}, {}, {}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),[{}, {}, {}, {}, {}, {}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[{}, {}, {}, {}, {}, {}, {}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_569_sort_sublists", "language": "pl", "prompt": "# Write a function to sort each subarray of strings in a given array of arrays.\nsub sort_sublists {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_sublists;\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),[[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]),[[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_56_checks", "language": "pl", "prompt": "# Write a plthon function to check if a given number is one less than twice its reverse.\nsub checks {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&checks;\n        if(eq_deeply($candidate->(70),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(23),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_572_two_unique_nums", "language": "pl", "prompt": "# Write a plthon function to remove duplicate numbers from a given number of arrays.\nsub two_unique_nums {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&two_unique_nums;\n        if(eq_deeply($candidate->([1, 2, 3, 2, 3, 4, 5]),[1, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 5]),[1, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_573_unique_product", "language": "pl", "prompt": "# Write a plthon function to calculate the product of the unique numbers in a given array.\nsub unique_product {\n    my($list_data) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_product;\n        if(eq_deeply($candidate->([10, 20, 30, 40, 20, 50, 60, 40]),720000000)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 1]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 0, 1, 1]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "pl", "prompt": "# Write a function to find the surface area of a cylinder.\nsub surfacearea_cylinder {\n    my($r, $h) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&surfacearea_cylinder;\n        if(eq_deeply($candidate->(10, 5),942.45)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),226.18800000000002)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 10),351.848)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_576_is_Sub_Array", "language": "pl", "prompt": "# Write a plthon function to check whether an array is subarray of another or not.\nsub is_Sub_Array {\n    my($A, $B) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_Sub_Array;\n        if(eq_deeply($candidate->([1, 4, 3, 5], [1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1], [1, 2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 2, 2], [2, 2, 0]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "pl", "prompt": "# Write a plthon function to find the last digit in factorial of a given number.\nsub last_Digit_Factorial {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&last_Digit_Factorial;\n        if(eq_deeply($candidate->(4),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(21),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(30),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_578_interleave_lists", "language": "pl", "prompt": "# Write a function to interleave 3 arrays of the same length into a single flat array.\nsub interleave_lists {\n    my($list1, $list2, $list3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&interleave_lists;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]),[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20], [15, 2], [5, 10]),[10, 15, 5, 20, 2, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 44], [10, 15], [20, 5]),[11, 10, 20, 44, 15, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_579_find_dissimilar", "language": "pl", "prompt": "# Write a function to find the dissimilar elements in the given two arrays.\nsub find_dissimilar {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_dissimilar;\n        if(eq_deeply($candidate->([3, 4, 5, 6], [5, 7, 4, 10]),[3, 6, 7, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], [7, 2, 3, 9]),[1, 4, 7, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([21, 11, 25, 26], [26, 34, 21, 36]),[34, 36, 11, 25])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_57_find_Max_Num", "language": "pl", "prompt": "# Write a plthon function to find the largest number that can be formed with the given array of digits.\nsub find_Max_Num {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Max_Num;\n        if(eq_deeply($candidate->([1, 2, 3]),321)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 1]),6541)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 9]),9321)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_580_extract_even", "language": "pl", "prompt": "# Write a function to remove uneven elements in the nested mixed array.\nsub extract_even {\n    my($test_tuple) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_even;\n        if(eq_deeply($candidate->([4, 5, [7, 6, [2, 4]], 6, 8]),[4, [6, [2, 4]], 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, [8, 7, [4, 8]], 7, 9]),[6, [8, [4, 8]]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, [9, 8, [4, 6]], 8, 10]),[6, [8, [4, 6]], 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_581_surface_Area", "language": "pl", "prompt": "# Write a plthon function to find the surface area of a square plramid with a given base edge and height.\nsub surface_Area {\n    my($b, $s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&surface_Area;\n        if(eq_deeply($candidate->(3, 4),33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5),56)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_582_my_dict", "language": "pl", "prompt": "# Write a function to check if a hash is empty\nsub my_dict {\n    my($dict1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_582_my_dict.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&my_dict;\n        if(eq_deeply($candidate->({}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_583_catalan_number", "language": "pl", "prompt": "# Write a function which returns nth catalan number.\nsub catalan_number {\n    my($num) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&catalan_number;\n        if(eq_deeply($candidate->(10),16796)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),4862)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),429)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_584_find_adverbs", "language": "pl", "prompt": "# Write a function to find the first adverb ending with ly and its positions in a given string.\nsub find_adverbs {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_adverbs;\n        if(eq_deeply($candidate->(\"Clearly, he has no excuse for such behavior.\"),\"0-7: Clearly\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Please handle the situation carefuly\"),\"28-36: carefuly\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Complete the task quickly\"),\"18-25: quickly\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_585_expensive_items", "language": "pl", "prompt": "# Write a function to find the n most expensive items in a given dataset.\nsub expensive_items {\n    my($items, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&expensive_items;\n        if(eq_deeply($candidate->([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}], 1),[{\"name\" => \"Item-2\", \"price\" => 555.22}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}], 2),[{\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-1\", \"price\" => 101.1}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([{\"name\" => \"Item-1\", \"price\" => 101.1}, {\"name\" => \"Item-2\", \"price\" => 555.22}, {\"name\" => \"Item-3\", \"price\" => 45.09}, {\"name\" => \"Item-4\", \"price\" => 22.75}], 1),[{\"name\" => \"Item-2\", \"price\" => 555.22}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_586_split_Arr", "language": "pl", "prompt": "# Write a plthon function to split an array at the nth eelment and add the first part to the end.\nsub split_Arr {\n    my($l, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&split_Arr;\n        if(eq_deeply($candidate->([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4], 1),[2, 3, 4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_587_list_tuple", "language": "pl", "prompt": "# Write a function to convert an array to an array.\nsub list_tuple {\n    my($listx) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&list_tuple;\n        if(eq_deeply($candidate->([5, 10, 7, 4, 15, 3]),[5, 10, 7, 4, 15, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 5, 6, 2, 3, 4, 4, 7]),[2, 4, 5, 6, 2, 3, 4, 4, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([58, 44, 56]),[58, 44, 56])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_588_big_diff", "language": "pl", "prompt": "# Write a plthon function to find the difference between largest and smallest value in a given array.\nsub big_diff {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&big_diff;\n        if(eq_deeply($candidate->([1, 2, 3, 4]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 12]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 2, 3]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_589_perfect_squares", "language": "pl", "prompt": "# Write a function to find perfect squares between two given numbers.\nsub perfect_squares {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&perfect_squares;\n        if(eq_deeply($candidate->(1, 30),[1, 4, 9, 16, 25])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(50, 100),[64, 81, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 200),[100, 121, 144, 169, 196])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_58_opposite_Signs", "language": "pl", "prompt": "# Write a plthon function to check whether the given two integers have opposite sign or not.\nsub opposite_Signs {\n    my($x, $y) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&opposite_Signs;\n        if(eq_deeply($candidate->(1, -2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-10, -10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2, 2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_591_swap_List", "language": "pl", "prompt": "# Write a plthon function to interchange the first and last elements in an array.\nsub swap_List {\n    my($newList) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&swap_List;\n        if(eq_deeply($candidate->([12, 35, 9, 56, 24]),[24, 35, 9, 56, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),[3, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6]),[6, 5, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_592_sum_Of_product", "language": "pl", "prompt": "# Write a plthon function to find the sum of the product of consecutive binomial co-efficients.\nsub sum_Of_product {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_Of_product;\n        if(eq_deeply($candidate->(3),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),56)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_593_removezero_ip", "language": "pl", "prompt": "# Write a function to remove leading zeroes from an ip address.\nsub removezero_ip {\n    my($ip) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&removezero_ip;\n        if(eq_deeply($candidate->(\"216.08.094.196\"),\"216.8.94.196\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"12.01.024\"),\"12.1.24\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"216.08.094.0196\"),\"216.8.94.196\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_594_diff_even_odd", "language": "pl", "prompt": "# Write a function to find the difference of the first even and first odd number of a given array.\nsub diff_even_odd {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&diff_even_odd;\n        if(eq_deeply($candidate->([1, 3, 5, 7, 4, 1, 6, 8]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 5, 7, 9, 10]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_595_min_Swaps", "language": "pl", "prompt": "# Write a plthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nsub min_Swaps {\n    my($str1, $str2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_Swaps;\n        if(eq_deeply($candidate->(\"1101\", \"1110\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"111\", \"000\"),\"Not Possible\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"111\", \"110\"),\"Not Possible\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_597_find_kth", "language": "pl", "prompt": "# Write a function to find kth element from the given two sorted arrays.\nsub find_kth {\n    my($arr1, $arr2, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_kth;\n        if(eq_deeply($candidate->([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_598_armstrong_number", "language": "pl", "prompt": "# Write a function to check whether the given number is armstrong or not.\nsub armstrong_number {\n    my($number) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&armstrong_number;\n        if(eq_deeply($candidate->(153),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(259),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4458),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_599_sum_average", "language": "pl", "prompt": "# Write a function to find sum and average of first n natural numbers.\nsub sum_average {\n    my($number) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_average;\n        if(eq_deeply($candidate->(10),[55, 5.5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),[120, 8.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),[210, 10.5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_59_is_octagonal", "language": "pl", "prompt": "# Write a function to find the nth octagonal number.\nsub is_octagonal {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_octagonal;\n        if(eq_deeply($candidate->(5),65)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),280)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),645)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_600_is_Even", "language": "pl", "prompt": "# Write a plthon function to check whether the given number is even or not.\nsub is_Even {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_Even;\n        if(eq_deeply($candidate->(1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_602_first_repeated_char", "language": "pl", "prompt": "# Write a plthon function to find the first repeated character in a given string.\nsub first_repeated_char {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_repeated_char;\n        if(eq_deeply($candidate->(\"abcabc\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123123\"),\"1\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_603_get_ludic", "language": "pl", "prompt": "# Write a function to get all lucid numbers smaller than or equal to a given integer.\nsub get_ludic {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_ludic;\n        if(eq_deeply($candidate->(10),[1, 2, 3, 5, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(25),[1, 2, 3, 5, 7, 11, 13, 17, 23, 25])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(45),[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_604_reverse_words", "language": "pl", "prompt": "# Write a function to reverse words seperated by spaces in a given string.\nsub reverse_words {\n    my($s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_words;\n        if(eq_deeply($candidate->(\"python program\"),\"program python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"java language\"),\"language java\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"indian man\"),\"man indian\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_605_prime_num", "language": "pl", "prompt": "# Write a function to check if the given integer is a prime number.\nsub prime_num {\n    my($num) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_num;\n        if(eq_deeply($candidate->(13),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1010),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_606_radian_degree", "language": "pl", "prompt": "# Write a function to convert degrees to radians.\nsub radian_degree {\n    my($degree) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&radian_degree;\n        if(eq_deeply($candidate->(90),1.5707963267948966)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(60),1.0471975511965976)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),2.0943951023931953)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_607_find_literals", "language": "pl", "prompt": "# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nsub find_literals {\n    my($text, $pattern) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_literals;\n        if(eq_deeply($candidate->(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_608_bell_Number", "language": "pl", "prompt": "# Write a plthon function to find nth bell number.\nsub bell_Number {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bell_Number;\n        if(eq_deeply($candidate->(2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_610_remove_kth_element", "language": "pl", "prompt": "# Write a plthon function which takes an array and returns an array with the same elements, but the k'th element removed.\nsub remove_kth_element {\n    my($list1, $L) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_kth_element;\n        if(eq_deeply($candidate->([1, 1, 2, 3, 4, 4, 5, 1], 3),[1, 1, 3, 4, 4, 5, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4),[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5),[10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_611_max_of_nth", "language": "pl", "prompt": "# Write a function which given a matrix represented as an array of arrays returns the max of the n'th column.\nsub max_of_nth {\n    my($test_list, $N) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_of_nth;\n        if(eq_deeply($candidate->([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_612_merge", "language": "pl", "prompt": "# Write a plthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.\nsub merge {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&merge;\n        if(eq_deeply($candidate->([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4], [5, 6], [7, 8]]),[[1, 3, 5, 7], [2, 4, 6, 8]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_614_cummulative_sum", "language": "pl", "prompt": "# Write a function to find the cumulative sum of all the values that are present in the given array of arrays.\nsub cummulative_sum {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&cummulative_sum;\n        if(eq_deeply($candidate->([[1, 3], [5, 6, 7], [2, 6]]),30)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 4], [6, 7, 8], [3, 7]]),37)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [7, 8, 9], [4, 8]]),44)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_615_average_tuple", "language": "pl", "prompt": "# Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.\nsub average_tuple {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&average_tuple;\n        if(eq_deeply($candidate->([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]),[30.5, 34.25, 27.0, 23.25])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]),[25.5, -18.0, 3.75])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]),[305.0, 342.5, 270.0, 232.5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_616_tuple_modulo", "language": "pl", "prompt": "# Write a function which takes two arrays of the same length and performs the element wise modulo.\nsub tuple_modulo {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_modulo;\n        if(eq_deeply($candidate->([10, 4, 5, 6], [5, 6, 7, 5]),[0, 4, 5, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 5, 6, 7], [6, 7, 8, 6]),[5, 5, 6, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 6, 7, 8], [7, 8, 9, 7]),[5, 6, 7, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_617_min_Jumps", "language": "pl", "prompt": "# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nsub min_Jumps {\n    my($steps, $d) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_Jumps;\n        if(eq_deeply($candidate->([3, 4], 11),3.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 4], 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 14], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_618_div_list", "language": "pl", "prompt": "# Write a function to divide two arrays element wise.\nsub div_list {\n    my($nums1, $nums2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&div_list;\n        if(eq_deeply($candidate->([4, 5, 6], [1, 2, 3]),[4.0, 2.5, 2.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2], [1, 4]),[3.0, 0.5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([90, 120], [50, 70]),[1.8, 1.7142857142857142])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_619_move_num", "language": "pl", "prompt": "# Write a function to move all the numbers to the end of the given string.\nsub move_num {\n    my($test_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_num;\n        if(eq_deeply($candidate->(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Avengers124Assemble\"),\"AvengersAssemble124\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_61_count_Substrings", "language": "pl", "prompt": "# Write a plthon function to count the number of substrings with the sum of digits equal to their length.\nsub count_Substrings {\n    my($s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_Substrings;\n        if(eq_deeply($candidate->(\"112112\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"111\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1101112\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_622_get_median", "language": "pl", "prompt": "# Write a function to find the median of two sorted arrays of same size.\nsub get_median {\n    my($arr1, $arr2, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_median;\n        if(eq_deeply($candidate->([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_623_nth_nums", "language": "pl", "prompt": "# Write a function to compute the n-th power of each number in an array.\nsub nth_nums {\n    my($nums, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&nth_nums;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 30], 3),[1000, 8000, 27000])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 15], 5),[248832, 759375])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_624_is_upper", "language": "pl", "prompt": "# Write a plthon function to convert a given string to uppercase.\nsub is_upper {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_upper;\n        if(eq_deeply($candidate->(\"person\"),\"PERSON\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"final\"),\"FINAL\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Valid\"),\"VALID\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_625_swap_List", "language": "pl", "prompt": "# Write a plthon function to interchange the first and last element in a given array.\nsub swap_List {\n    my($newList) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&swap_List;\n        if(eq_deeply($candidate->([1, 2, 3]),[3, 2, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 4]),[4, 2, 3, 4, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6]),[6, 5, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_626_triangle_area", "language": "pl", "prompt": "# Write a plthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nsub triangle_area {\n    my($r) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n        if(eq_deeply($candidate->(-1),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_627_find_First_Missing", "language": "pl", "prompt": "# Write a plthon function to find the smallest missing number from a sorted array of natural numbers.\nsub find_First_Missing {\n    my($array) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_First_Missing;\n        if(eq_deeply($candidate->([0, 1, 2, 3]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, 6, 9]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 8, 9]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_628_replace_spaces", "language": "pl", "prompt": "# Write a function to replace all spaces in the given string with '%20'.\nsub replace_spaces {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_spaces;\n        if(eq_deeply($candidate->(\"My Name is Dawood\"),\"My%20Name%20is%20Dawood\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I am a Programmer\"),\"I%20am%20a%20Programmer\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"I love Coding\"),\"I%20love%20Coding\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_629_Split", "language": "pl", "prompt": "# Write a plthon function to find even numbers from an array of numbers.\nsub Split {\n    my($list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Split;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),[2, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 12, 15, 19]),[8, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_62_smallest_num", "language": "pl", "prompt": "# Write a plthon function to find smallest number in an array.\nsub smallest_num {\n    my($xs) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&smallest_num;\n        if(eq_deeply($candidate->([10, 20, 1, 45, 99]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([45, 46, 50, 60]),45)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_630_get_coordinates", "language": "pl", "prompt": "# Write a function to extract all the adjacent coordinates of the given coordinate array.\nsub get_coordinates {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_coordinates;\n        if(eq_deeply($candidate->([3, 4]),[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5]),[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6]),[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_631_replace_spaces", "language": "pl", "prompt": "# Write a function to replace whitespaces with an underscore and vice versa in a given string.\nsub replace_spaces {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_spaces;\n        if(eq_deeply($candidate->(\"Jumanji The Jungle\"),\"Jumanji_The_Jungle\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"The_Avengers\"),\"The Avengers\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Fast and Furious\"),\"Fast_and_Furious\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_632_move_zero", "language": "pl", "prompt": "# Write a plthon function to move all zeroes to the end of the given array.\nsub move_zero {\n    my($num_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&move_zero;\n        if(eq_deeply($candidate->([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of xor of all pairs of numbers in the given array.\nsub pair_xor_Sum {\n    my($arr, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pair_xor_Sum;\n        if(eq_deeply($candidate->([5, 9, 7, 6], 4),47)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3, 5], 3),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 3], 2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_635_heap_sort", "language": "pl", "prompt": "# Write a function to sort the given array.\nsub heap_sort {\n    my($iterable) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&heap_sort;\n        if(eq_deeply($candidate->([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([25, 35, 22, 85, 14, 65, 75, 25, 58]),[14, 22, 25, 25, 35, 58, 65, 75, 85])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 1, 9, 5]),[1, 5, 7, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_637_noprofit_noloss", "language": "pl", "prompt": "# Write a function to check whether the given amount has no profit and no loss\nsub noprofit_noloss {\n    my($actual_cost, $sale_amount) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&noprofit_noloss;\n        if(eq_deeply($candidate->(1500, 1200),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100, 100),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2000, 5000),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_638_wind_chill", "language": "pl", "prompt": "# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nsub wind_chill {\n    my($v, $t) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&wind_chill;\n        if(eq_deeply($candidate->(120, 35),40)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(40, 20),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 8),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_639_sample_nam", "language": "pl", "prompt": "# Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.\nsub sample_nam {\n    my($sample_names) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sample_nam;\n        if(eq_deeply($candidate->([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]),16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"abcd\", \"Python\", \"abba\", \"aba\"]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_63_max_difference", "language": "pl", "prompt": "# Write a function to find the maximum difference between available pairs in the given array array.\nsub max_difference {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_difference;\n        if(eq_deeply($candidate->([[3, 5], [1, 7], [10, 3], [1, 2]]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 6], [2, 17], [9, 13], [11, 12]]),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[12, 35], [21, 27], [13, 23], [41, 22]]),23)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_640_remove_parenthesis", "language": "pl", "prompt": "# Write a function to remove the parenthesis and what is inbetween them from a string.\nsub remove_parenthesis {\n    my($items) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_parenthesis;\n        if(eq_deeply($candidate->([\"python (chrome)\"]),\"python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"string(.abc)\"]),\"string\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"alpha(num)\"]),\"alpha\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_641_is_nonagonal", "language": "pl", "prompt": "# Write a function to find the nth nonagonal number.\nsub is_nonagonal {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_nonagonal;\n        if(eq_deeply($candidate->(10),325)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),750)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),1089)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "pl", "prompt": "# Write a function that checks if a strings contains 'z', except at the start and end of the word.\nsub text_match_wordz_middle {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_wordz_middle;\n        if(eq_deeply($candidate->(\"pythonzabc.\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"zxyabc.\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"  lang  .\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "pl", "prompt": "# Write a plthon function to reverse an array upto a given position.\nsub reverse_Array_Upto_K {\n    my($input, $k) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_Array_Upto_K;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7], 2),[5, 4, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_64_subject_marks", "language": "pl", "prompt": "# Write a function to sort an array of arrays using the second value of each array.\nsub subject_marks {\n    my($subjectmarks) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&subject_marks;\n        if(eq_deeply($candidate->([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]),[[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]),[[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]),[[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_65_recursive_list_sum", "language": "pl", "prompt": "# Write a function to flatten an array and sum all of its elements.\nsub recursive_list_sum {\n    my($data_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&recursive_list_sum;\n        if(eq_deeply($candidate->([1, 2, [3, 4], [5, 6]]),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 10, [15, 14], [19, 41]]),106)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, [30, 40], [50, 60]]),210)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_66_pos_count", "language": "pl", "prompt": "# Write a plthon function to count the number of positive numbers in an array.\nsub pos_count {\n    my($list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pos_count;\n        if(eq_deeply($candidate->([1, -2, 3, -4]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 4, 5, -1]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_67_bell_number", "language": "pl", "prompt": "# Write a function to find the number of ways to partition a set of Bell numbers.\nsub bell_number {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&bell_number;\n        if(eq_deeply($candidate->(2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),115975)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(56),6775685320645824322581483068371419745979053216268760300)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_68_is_Monotonic", "language": "pl", "prompt": "# Write a plthon function to check whether the given array is monotonic or not.\nsub is_Monotonic {\n    my($A) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_Monotonic;\n        if(eq_deeply($candidate->([6, 5, 4, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 2, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_69_is_sublist", "language": "pl", "prompt": "# Write a function to check whether an array contains the given subarray or not.\nsub is_sublist {\n    my($l, $s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_sublist;\n        if(eq_deeply($candidate->([2, 4, 3, 5, 7], [3, 7]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 5, 7], [4, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 5, 7], [1, 6]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "pl", "prompt": "# Write a plthon function to check whether the two numbers differ at one bit position only or not.\nsub differ_At_One_Bit_Pos {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&differ_At_One_Bit_Pos;\n        if(eq_deeply($candidate->(13, 9),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 4),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_70_get_equal", "language": "pl", "prompt": "# Write a function to find whether all the given arrays have equal length or not.\nsub get_equal {\n    my($Input) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_equal;\n        if(eq_deeply($candidate->([[11, 22, 33], [44, 55, 66]]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6, 7]]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [3, 4]]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_71_comb_sort", "language": "pl", "prompt": "# Write a function to sort an array of elements.\nsub comb_sort {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&comb_sort;\n        if(eq_deeply($candidate->([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([99, 15, 13, 47]),[13, 15, 47, 99])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "pl", "prompt": "# Write a function to add a hash to the array. The output should be an array.\nsub add_dict_to_tuple {\n    my($test_tup, $test_dict) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_dict_to_tuple;\n        if(eq_deeply($candidate->([4, 5, 6], {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}),[4, 5, 6, {\"MSAM\" => 1, \"is\" => 2, \"best\" => 3}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}),[1, 2, 3, {\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 9, 10], {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}),[8, 9, 10, {\"POS\" => 3, \"is\" => 4, \"Okay\" => 5}])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "pl", "prompt": "# Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nsub maxAverageOfPath {\n    my($cost) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maxAverageOfPath;\n        if(eq_deeply($candidate->([[1, 2, 3], [6, 5, 4], [7, 3, 9]]),5.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 4], [7, 6, 5], [8, 4, 10]]),6.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 4, 5], [8, 7, 6], [9, 5, 11]]),7.2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),5.8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_722_filter_data", "language": "pl", "prompt": "# The input is given as - a hash with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nsub filter_data {\n    my($students, $h, $w) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_data;\n        if(eq_deeply($candidate->({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 6.0, 70),{\"Cierra Vega\" => [6.2, 70]})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.9, 67),{\"Cierra Vega\" => [6.2, 70], \"Kierra Gentry\" => [6.0, 68]})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]}, 5.7, 64),{\"Cierra Vega\" => [6.2, 70], \"Alden Cantrell\" => [5.9, 65], \"Kierra Gentry\" => [6.0, 68], \"Pierre Cox\" => [5.8, 66]})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_723_count_same_pair", "language": "pl", "prompt": "# The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nsub count_same_pair {\n    my($nums1, $nums2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_same_pair;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 1, 2], [0, 1, 2, 2]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_724_power_base_sum", "language": "pl", "prompt": "# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nsub power_base_sum {\n    my($base, $power) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&power_base_sum;\n        if(eq_deeply($candidate->(2, 100),115)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 10),37)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8, 15),62)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3, 3),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_725_extract_quotation", "language": "pl", "prompt": "# Write a function to extract values between quotation marks \" \" of the given string.\nsub extract_quotation {\n    my($text1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_quotation;\n        if(eq_deeply($candidate->(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"),[\"A53\", \"multi\", \"Processor\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Cast your \"favorite\" entertainment \"apps\"\"),[\"favorite\", \"apps\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"),[\"4k Ultra HD\", \"HDR 10\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_726_multiply_elements", "language": "pl", "prompt": "# Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1}.\nsub multiply_elements {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply_elements;\n        if(eq_deeply($candidate->([1, 5, 7, 8, 10]),[5, 35, 56, 80])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 5, 6, 7]),[8, 20, 30, 42])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 13, 14, 9, 15]),[156, 182, 126, 135])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_728_sum_list", "language": "pl", "prompt": "# Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nsub sum_list {\n    my($lst1, $lst2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_list;\n        if(eq_deeply($candidate->([10, 20, 30], [15, 25, 35]),[25, 45, 65])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [5, 6, 7]),[6, 8, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 20, 30], [15, 45, 75]),[30, 65, 105])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_72_dif_Square", "language": "pl", "prompt": "# Write a plthon function to check whether the given number can be represented as the difference of two squares or not.\nsub dif_Square {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&dif_Square;\n        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "pl", "prompt": "# Write a function to remove consecutive duplicates of a given array.\nsub consecutive_duplicates {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&consecutive_duplicates;\n        if(eq_deeply($candidate->([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[10, 15, 19, 18, 17, 26, 17, 18, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[\"a\", \"b\", \"c\", \"d\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]),[\"a\", \"b\", \"c\", \"d\", \"a\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "pl", "prompt": "# Write a function to find the lateral surface area of a cone given radius r and the height h.\nsub lateralsurface_cone {\n    my($r, $h) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lateralsurface_cone;\n        if(eq_deeply($candidate->(5, 12),204.20352248333654)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 15),566.3586699569488)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 17),1521.8090132193388)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_732_replace_specialchar", "language": "pl", "prompt": "# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nsub replace_specialchar {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&replace_specialchar;\n        if(eq_deeply($candidate->(\"Python language, Programming language.\"),\"Python:language::Programming:language:\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c,d e f\"),\"a:b:c:d:e:f\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ram reshma,ram rahim\"),\"ram:reshma:ram:rahim\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_733_find_first_occurrence", "language": "pl", "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nsub find_first_occurrence {\n    my($A, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_first_occurrence;\n        if(eq_deeply($candidate->([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "pl", "prompt": "# Write a plthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nsub sum_Of_Subarray_Prod {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_Of_Subarray_Prod;\n        if(eq_deeply($candidate->([1, 2, 3]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "pl", "prompt": "# Write a plthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nsub toggle_middle_bits {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&toggle_middle_bits;\n        if(eq_deeply($candidate->(9),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(65),127)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),115)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_736_left_insertion", "language": "pl", "prompt": "# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/plthon-exercises/data-structures-and-algorithms/plthon-data-structure-exercise-24.php\nsub left_insertion {\n    my($a, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&left_insertion;\n        if(eq_deeply($candidate->([1, 2, 4, 5], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5], 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5], 7),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_737_check_str", "language": "pl", "prompt": "# Write a function to check whether the given string is starting with a vowel or not using regex.\nsub check_str {\n    my($string) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_str;\n        if(eq_deeply($candidate->(\"annie\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dawood\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Else\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_738_geometric_sum", "language": "pl", "prompt": "# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/plthon-exercises/data-structures-and-algorithms/plthon-recursion-exercise-9.php\nsub geometric_sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&geometric_sum;\n        if(eq_deeply($candidate->(7),1.9921875)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1.9375)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1.99609375)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_739_find_Index", "language": "pl", "prompt": "# Write a plthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nsub find_Index {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Index;\n        if(eq_deeply($candidate->(2),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),45)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_740_tuple_to_dict", "language": "pl", "prompt": "# Write a function to convert the given array to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/plthon-convert-array-to-adjacent-pair-hash/\nsub tuple_to_dict {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_to_dict;\n        if(eq_deeply($candidate->([1, 5, 7, 10, 13, 5]),{1 => 5, 7 => 10, 13 => 5})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),{1 => 2, 3 => 4, 5 => 6})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 10, 11, 12]),{7 => 8, 9 => 10, 11 => 12})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_741_all_Characters_Same", "language": "pl", "prompt": "# Write a plthon function to check whether all the characters are same or not.\nsub all_Characters_Same {\n    my($s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_Characters_Same;\n        if(eq_deeply($candidate->(\"python\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"data\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_742_area_tetrahedron", "language": "pl", "prompt": "# Write a function to caluclate the area of a tetrahedron.\nsub area_tetrahedron {\n    my($side) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&area_tetrahedron;\n        if(eq_deeply($candidate->(3),15.588457268119894)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20),692.8203230275509)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),173.20508075688772)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_743_rotate_right", "language": "pl", "prompt": "# Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/plthon-program-right-rotate-array-n/\nsub rotate_right {\n    my($list, $m) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rotate_right;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_744_check_none", "language": "pl", "prompt": "# Write a function to check if the given array has any none value or not.\nsub check_none {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_none;\n        if(eq_deeply($candidate->([10, 4, 5, 6, undef]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 11, 14]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, undef]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_745_divisible_by_digits", "language": "pl", "prompt": "# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/plthon-exercises/lambda/plthon-lambda-exercise-24.php\nsub divisible_by_digits {\n    my($startnum, $endnum) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&divisible_by_digits;\n        if(eq_deeply($candidate->(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(20, 25),[22, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_746_sector_area", "language": "pl", "prompt": "# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return undef if the angle is larger than 360 degrees.\nsub sector_area {\n    my($r, $a) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sector_area;\n        if(eq_deeply($candidate->(4, 45),6.283185307179586)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 45),31.808625617596654)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9, 361),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_747_lcs_of_three", "language": "pl", "prompt": "# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nsub lcs_of_three {\n    my($X, $Y, $Z) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&lcs_of_three;\n        if(eq_deeply($candidate->(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_748_capital_words_spaces", "language": "pl", "prompt": "# Write a function to put spaces between words starting with capital letters in a given string.\nsub capital_words_spaces {\n    my($str1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&capital_words_spaces;\n        if(eq_deeply($candidate->(\"Python\"),\"Python\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PythonProgrammingExamples\"),\"Python Programming Examples\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"GetReadyToBeCodingFreak\"),\"Get Ready To Be Coding Freak\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "pl", "prompt": "# Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/plthon-sort-numeric-strings-in-a-array/\nsub sort_numeric_strings {\n    my($nums_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_numeric_strings;\n        if(eq_deeply($candidate->([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]),[-500, -12, 0, 4, 7, 12, 45, 100, 200])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]),[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]),[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_74_is_samepatterns", "language": "pl", "prompt": "# Write a function to check whether it follows the sequence given in the patterns array.\nsub is_samepatterns {\n    my($colors, $patterns) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_samepatterns;\n        if(eq_deeply($candidate->([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_750_add_tuple", "language": "pl", "prompt": "# Write a function to add the given array to the given array.\nsub add_tuple {\n    my($test_list, $test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add_tuple;\n        if(eq_deeply($candidate->([5, 6, 7], [9, 10]),[5, 6, 7, 9, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([6, 7, 8], [10, 11]),[6, 7, 8, 10, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9], [11, 12]),[7, 8, 9, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_751_check_min_heap", "language": "pl", "prompt": "# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nsub check_min_heap {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_min_heap;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 4, 5, 10, 15]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 10, 4, 5, 3, 15]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_752_jacobsthal_num", "language": "pl", "prompt": "# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nsub jacobsthal_num {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&jacobsthal_num;\n        if(eq_deeply($candidate->(5),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13),2731)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_753_min_k", "language": "pl", "prompt": "# Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/plthon-find-minimum-k-records-from-array-array/ - in this case a verbatim copl of test cases\nsub min_k {\n    my($test_list, $K) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&min_k;\n        if(eq_deeply($candidate->([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2),[[\"Akash\", 2], [\"Akshat\", 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3),[[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1),[[\"Ayesha\", 9]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_754_extract_index_list", "language": "pl", "prompt": "# We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.\nsub extract_index_list {\n    my($l1, $l2, $l3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&extract_index_list;\n        if(eq_deeply($candidate->([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]),[1, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_755_second_smallest", "language": "pl", "prompt": "# Write a function to find the second smallest number in an array.\nsub second_smallest {\n    my($numbers) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&second_smallest;\n        if(eq_deeply($candidate->([1, 2, -8, -2, 0, -2]),-2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, -0.5, 0, 2, -2, -2]),-0.5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 2, 2]),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_756_text_match_zero_one", "language": "pl", "prompt": "# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/plthon-exercises/re/plthon-re-exercise-3.php\nsub text_match_zero_one {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_zero_one;\n        if(eq_deeply($candidate->(\"ac\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abbbba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dsabbbba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asbbbba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "pl", "prompt": "# Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/plthon-program-to-count-the-pairs-of-reverse-strings/\nsub count_reverse_pairs {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_reverse_pairs;\n        if(eq_deeply($candidate->([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"geeks\", \"best\", \"for\", \"skeeg\"]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_759_is_decimal", "language": "pl", "prompt": "# Write a function to check whether a given string is a decimal number with a precision of 2.\nsub is_decimal {\n    my($num) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_decimal;\n        if(eq_deeply($candidate->(\"123.11\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"e666.86\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"3.124587\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1.11\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1.1.11\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_75_find_tuples", "language": "pl", "prompt": "# Write a function to find arrays which have all elements divisible by k from the given array of arrays.\nsub find_tuples {\n    my($test_list, $K) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_tuples;\n        if(eq_deeply($candidate->([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6),[[6, 24, 12]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5),[[5, 25, 30]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4),[[8, 16, 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_760_unique_Element", "language": "pl", "prompt": "# Write a plthon function to check whether an array of numbers contains only one distinct element or not.\nsub unique_Element {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique_Element;\n        if(eq_deeply($candidate->([1, 1, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1, 2]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "pl", "prompt": "# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nsub check_monthnumber_number {\n    my($monthnum3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_monthnumber_number;\n        if(eq_deeply($candidate->(6),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_763_find_min_diff", "language": "pl", "prompt": "# Write a plthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nsub find_min_diff {\n    my($arr, $n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_min_diff;\n        if(eq_deeply($candidate->([1, 5, 3, 19, 18, 25], 6),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 3, 2, 6], 4),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([30, 5, 20, 9], 4),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_764_number_ctr", "language": "pl", "prompt": "# Write a plthon function to count number of digits in a given string.\nsub number_ctr {\n    my($str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&number_ctr;\n        if(eq_deeply($candidate->(\"program2bedone\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"3wonders\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"123\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"3wond-1ers2\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_765_is_polite", "language": "pl", "prompt": "# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nsub is_polite {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_polite;\n        if(eq_deeply($candidate->(7),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),13)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_766_pair_wise", "language": "pl", "prompt": "# Write a function to return an array of all pairs of consecutive items in a given array.\nsub pair_wise {\n    my($l1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pair_wise;\n        if(eq_deeply($candidate->([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_767_get_pairs_count", "language": "pl", "prompt": "# Write a plthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,\nsub get_pairs_count {\n    my($arr, $sum) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_pairs_count;\n        if(eq_deeply($candidate->([1, 1, 1, 1], 2),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 5, 7, -1, 5], 6),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, -2, 3], 1),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 3], -3),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_769_Diff", "language": "pl", "prompt": "# Write a plthon function to get the difference between two arrays.\nsub Diff {\n    my($li1, $li2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Diff;\n        if(eq_deeply($candidate->([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]),[10, 20, 30, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5], [6, 7, 1]),[2, 3, 4, 5, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3], [6, 7, 1]),[2, 3, 6, 7])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_770_odd_num_sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of fourth power of first n odd natural numbers.\nsub odd_num_sum {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_num_sum;\n        if(eq_deeply($candidate->(2),82)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),707)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),3108)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_771_check_expression", "language": "pl", "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nsub check_expression {\n    my($exp) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_expression;\n        if(eq_deeply($candidate->(\"{()}[{}]\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{]\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"{()}[{}][]({})\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_772_remove_length", "language": "pl", "prompt": "# Write a function to remove all the words with k length in the given string.\nsub remove_length {\n    my($test_str, $K) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_length;\n        if(eq_deeply($candidate->(\"The person is most value tet\", 3),\"person is most value\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"If you told me about this ok\", 4),\"If you me about ok\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Forces of darkeness is come into the play\", 4),\"Forces of darkeness is the\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_773_occurance_substring", "language": "pl", "prompt": "# Write a function to find the occurrence and position of the substrings within a string. Return undef if there is no match.\nsub occurance_substring {\n    my($text, $pattern) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&occurance_substring;\n        if(eq_deeply($candidate->(\"python programming, python language\", \"python\"),[\"python\", 0, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python programming,programming language\", \"programming\"),[\"programming\", 7, 18])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python programming,programming language\", \"language\"),[\"language\", 31, 39])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"c++ programming, c++ language\", \"python\"),undef)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_775_odd_position", "language": "pl", "prompt": "# Write a plthon function to check whether every odd index contains odd numbers of a given array.\nsub odd_position {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_position;\n        if(eq_deeply($candidate->([2, 1, 4, 3, 6, 7, 6, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1, 2]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_776_count_vowels", "language": "pl", "prompt": "# Write a function to count those characters which have vowels as their neighbors in the given string.\nsub count_vowels {\n    my($test_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_vowels;\n        if(eq_deeply($candidate->(\"bestinstareels\"),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"partofthejourneyistheend\"),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"amazonprime\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_777_find_sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of non-repeated elements in a given array.\nsub find_sum {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_sum;\n        if(eq_deeply($candidate->([1, 2, 3, 1, 1, 4, 5, 6]),21)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 10, 9, 4, 2, 10, 10, 45, 4]),71)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 10, 9, 45, 2, 10, 10, 45, 10]),78)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "pl", "prompt": "# Write a function to pack consecutive duplicates of a given array elements into subarrays.\nsub pack_consecutive_duplicates {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&pack_consecutive_duplicates;\n        if(eq_deeply($candidate->([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_77_is_Diff", "language": "pl", "prompt": "# Write a plthon function to find whether a number is divisible by 11.\nsub is_Diff {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_Diff;\n        if(eq_deeply($candidate->(12345),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1212112),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1212),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_780_find_combinations", "language": "pl", "prompt": "# Write a function to find the combinations of sums with arrays in the given array array. https://www.geeksforgeeks.org/plthon-combinations-of-sum-with-arrays-in-array-array/\nsub find_combinations {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_combinations;\n        if(eq_deeply($candidate->([[2, 4], [6, 7], [5, 1], [6, 10]]),[[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 5], [7, 8], [6, 2], [7, 11]]),[[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[4, 6], [8, 9], [7, 3], [8, 12]]),[[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_781_count_divisors", "language": "pl", "prompt": "# Write a plthon function to check whether the count of divisors is even. https://www.w3resource.com/plthon-exercises/basic/plthon-basic-1-exercise-24.php\nsub count_divisors {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_divisors;\n        if(eq_deeply($candidate->(10),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_782_odd_length_sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nsub odd_length_sum {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&odd_length_sum;\n        if(eq_deeply($candidate->([1, 2, 4]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1, 2]),15)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 7]),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "pl", "prompt": "# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nsub rgb_to_hsv {\n    my($r, $g, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rgb_to_hsv;\n        if(eq_deeply($candidate->(255, 255, 255),[0.0, 0.0, 100.0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0, 215, 0),[120.0, 100.0, 84.31372549019608])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 215, 110),[149.26829268292684, 95.34883720930233, 84.31372549019608])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_784_mul_even_odd", "language": "pl", "prompt": "# Write a function to find the product of first even and odd number of a given array.\nsub mul_even_odd {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mul_even_odd;\n        if(eq_deeply($candidate->([1, 3, 5, 7, 4, 1, 6, 8]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 5, 7, 9, 10]),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_785_tuple_str_int", "language": "pl", "prompt": "# Write a function to convert array string to integer array.\nsub tuple_str_int {\n    my($test_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tuple_str_int;\n        if(eq_deeply($candidate->(\"(7, 8, 9)\"),[7, 8, 9])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(1, 2, 3)\"),[1, 2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(4, 5, 6)\"),[4, 5, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(7, 81, 19)\"),[7, 81, 19])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_786_right_insertion", "language": "pl", "prompt": "# Write a function to locate the right insertion point for a specified value in sorted order.\nsub right_insertion {\n    my($a, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_insertion;\n        if(eq_deeply($candidate->([1, 2, 4, 5], 6),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5], 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 4, 5], 7),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_787_text_match_three", "language": "pl", "prompt": "# Write a function that matches a string that has an a followed by three 'b'.\nsub text_match_three {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_match_three;\n        if(eq_deeply($candidate->(\"ac\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"dc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abbbba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"caacabbbba\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_788_new_tuple", "language": "pl", "prompt": "# Write a function to create a new array from the given string and array.\nsub new_tuple {\n    my($test_list, $test_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&new_tuple;\n        if(eq_deeply($candidate->([\"WEB\", \"is\"], \"best\"),[\"WEB\", \"is\", \"best\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"We\", \"are\"], \"Developers\"),[\"We\", \"are\", \"Developers\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"Part\", \"is\"], \"Wrong\"),[\"Part\", \"is\", \"Wrong\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_790_even_position", "language": "pl", "prompt": "# Write a plthon function to check whether every even index contains even numbers of a given array.\nsub even_position {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_position;\n        if(eq_deeply($candidate->([3, 2, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 1, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_791_remove_nested", "language": "pl", "prompt": "# Write a function to remove arrays from the given array.\nsub remove_nested {\n    my($test_tup) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_nested;\n        if(eq_deeply($candidate->([1, 5, 7, [4, 6], 10]),[1, 5, 7, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 6, 8, [5, 7], 11]),[2, 6, 8, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 7, 9, [6, 8], 12]),[3, 7, 9, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 7, 9, [6, 8], [5, 12], 12]),[3, 7, 9, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_792_count_list", "language": "pl", "prompt": "# Write a plthon function to count the number of arrays in a given number of arrays.\nsub count_list {\n    my($input_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_list;\n        if(eq_deeply($candidate->([[1, 3], [5, 7], [9, 11], [13, 15, 17]]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [2, 3], [4, 5]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 0], [2, 0]]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_793_last", "language": "pl", "prompt": "# Write a plthon function to find the last position of an element in a sorted array.\nsub last {\n    my($arr, $x) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&last;\n        if(eq_deeply($candidate->([1, 2, 3], 1),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1, 2, 3, 4], 1),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 3, 2, 3, 6, 8, 9], 3),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_794_text_starta_endb", "language": "pl", "prompt": "# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nsub text_starta_endb {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&text_starta_endb;\n        if(eq_deeply($candidate->(\"aabbbb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabAbbbc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"accddbbjjj\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_796_return_sum", "language": "pl", "prompt": "# Write function to find the sum of all items in the given hash.\nsub return_sum {\n    my($dict) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&return_sum;\n        if(eq_deeply($candidate->({\"a\" => 100, \"b\" => 200, \"c\" => 300}),600)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"a\" => 25, \"b\" => 18, \"c\" => 45}),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"a\" => 36, \"b\" => 39, \"c\" => 49}),124)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_797_sum_in_range", "language": "pl", "prompt": "# Write a plthon function to find the sum of all odd natural numbers within the range l and r.\nsub sum_in_range {\n    my($l, $r) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_in_range;\n        if(eq_deeply($candidate->(2, 5),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 7),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7, 13),40)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_798__sum", "language": "pl", "prompt": "# Write a plthon function to find the sum of an array.\nsub _sum {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&_sum;\n        if(eq_deeply($candidate->([1, 2, 3]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 12, 13, 10]),50)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1, 2]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_799_left_rotate", "language": "pl", "prompt": "# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nsub left_rotate {\n    my($n, $d) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&left_rotate;\n        if(eq_deeply($candidate->(16, 2),64)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),40)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(99, 3),792)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(99, 3),792)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 3),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 3),40)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(29, 3),232)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_79_word_len", "language": "pl", "prompt": "# Write a plthon function to check whether the length of the word is odd or not.\nsub word_len {\n    my($s) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&word_len;\n        if(eq_deeply($candidate->(\"Hadoop\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"great\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"structure\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_800_remove_all_spaces", "language": "pl", "prompt": "# Write a function to remove all whitespaces from a string.\nsub remove_all_spaces {\n    my($text) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_all_spaces;\n        if(eq_deeply($candidate->(\"python  program\"),\"pythonprogram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python   programming    language\"),\"pythonprogramminglanguage\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"python                     program\"),\"pythonprogram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"   python                     program\"),\"pythonprogram\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_801_test_three_equal", "language": "pl", "prompt": "# Write a plthon function to count the number of equal numbers from three given integers.\nsub test_three_equal {\n    my($x, $y, $z) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&test_three_equal;\n        if(eq_deeply($candidate->(1, 1, 1),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-1, -2, -3),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 2),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_802_count_rotation", "language": "pl", "prompt": "# Write a plthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nsub count_rotation {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_rotation;\n        if(eq_deeply($candidate->([3, 2, 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 1, 2, 3]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 1, 2, 3]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_803_is_perfect_square", "language": "pl", "prompt": "# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nsub is_perfect_square {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_perfect_square;\n        if(eq_deeply($candidate->(10),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(36),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(196),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(15625),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_804_is_product_even", "language": "pl", "prompt": "# Write a function to check whether the product of numbers in an array is even or not.\nsub is_product_even {\n    my($arr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_product_even;\n        if(eq_deeply($candidate->([1, 2, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 1, 4]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_805_max_sum_list", "language": "pl", "prompt": "# Write a function that returns the array in an array of arrays whose sum of elements is the highest.\nsub max_sum_list {\n    my($lists) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_sum_list;\n        if(eq_deeply($candidate->([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[2, 3, 1]]),[2, 3, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_806_max_run_uppercase", "language": "pl", "prompt": "# Write a function to find maximum run of uppercase characters in the given string.\nsub max_run_uppercase {\n    my($test_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_run_uppercase;\n        if(eq_deeply($candidate->(\"GeMKSForGERksISBESt\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"PrECIOusMOVemENTSYT\"),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"GooGLEFluTTER\"),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_807_first_odd", "language": "pl", "prompt": "# Write a plthon function to find the first odd number in a given array of numbers.\nsub first_odd {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&first_odd;\n        if(eq_deeply($candidate->([1, 3, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1, 3]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([8, 9, 1]),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_808_check_K", "language": "pl", "prompt": "# Write a function to check if the given arrays contain the k or not.\nsub check_K {\n    my($test_tup, $K) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_K;\n        if(eq_deeply($candidate->([10, 4, 5, 6, 8], 6),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6], 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([7, 8, 9, 44, 11, 12], 11),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_809_check_smaller", "language": "pl", "prompt": "# Write a function to check if each element of second array is smaller than its corresponding element in the first array.\nsub check_smaller {\n    my($test_tup1, $test_tup2) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_smaller;\n        if(eq_deeply($candidate->([1, 2, 3], [2, 3, 4]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6], [3, 4, 5]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([11, 12, 13], [10, 11, 12]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_80_tetrahedral_number", "language": "pl", "prompt": "# Write a function to find the nth tetrahedral number.\nsub tetrahedral_number {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tetrahedral_number;\n        if(eq_deeply($candidate->(5),35)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),56)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),84)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_83_get_Char", "language": "pl", "prompt": "# Write a plthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nsub get_Char {\n    my($strr) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_Char;\n        if(eq_deeply($candidate->(\"abc\"),\"f\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"gfg\"),\"t\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"c\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_84_sequence", "language": "pl", "prompt": "# Write a function to find the nth number in the newman conway sequence.\nsub sequence {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sequence;\n        if(eq_deeply($candidate->(10),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "pl", "prompt": "# Write a function to find nth centered hexagonal number.\nsub centered_hexagonal_number {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&centered_hexagonal_number;\n        if(eq_deeply($candidate->(10),271)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),217)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "pl", "prompt": "# Write a function to merge three dictionaries into a single hash.\nsub merge_dictionaries_three {\n    my($dict1, $dict2, $dict3) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&merge_dictionaries_three;\n        if(eq_deeply($candidate->({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\"}),{\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\"})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"G\" => \"Green\", \"W\" => \"White\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}),{\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\"})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"}, {\"L\" => \"lavender\", \"B\" => \"Blue\"}, {\"G\" => \"Green\", \"W\" => \"White\"}),{\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\"})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_88_freq_count", "language": "pl", "prompt": "# Write a function to get the frequency of all the elements in an array, returned as a hash.\nsub freq_count {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&freq_count;\n        if(eq_deeply($candidate->([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1 => 3, 2 => 2, 3 => 3, 4 => 3})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_89_closest_num", "language": "pl", "prompt": "# Write a function to find the closest smaller number than n.\nsub closest_num {\n    my($N) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_num;\n        if(eq_deeply($candidate->(11),10)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),11)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_8_square_nums", "language": "pl", "prompt": "# Write a function to find squares of individual elements in an array.\nsub square_nums {\n    my($nums) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&square_nums;\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10, 20, 30]),[100, 400, 900])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([12, 15]),[144, 225])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_90_len_log", "language": "pl", "prompt": "# Write a plthon function to find the length of the longest word.\nsub len_log {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&len_log;\n        if(eq_deeply($candidate->([\"python\", \"PHP\", \"bigdata\"]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"a\", \"ab\", \"abc\"]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"small\", \"big\", \"tall\"]),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_91_find_substring", "language": "pl", "prompt": "# Write a function to check if a string is present as a substring in a given array of string values.\nsub find_substring {\n    my($str1, $sub_str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_substring;\n        if(eq_deeply($candidate->([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_92_is_undulating", "language": "pl", "prompt": "# Write a function to check whether the given number is undulating or not.\nsub is_undulating {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_undulating;\n        if(eq_deeply($candidate->(1212121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1991),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(121),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_93_power", "language": "pl", "prompt": "# Write a function to calculate the value of 'a' to the power 'b'.\nsub power {\n    my($a, $b) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&power;\n        if(eq_deeply($candidate->(3, 4),81)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 3),8)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5, 5),3125)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_94_index_minimum", "language": "pl", "prompt": "# Given an array of arrays, write a function that returns the first value of the array with the smallest second value.\nsub index_minimum {\n    my($test_list) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&index_minimum;\n        if(eq_deeply($candidate->([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]),\"Varsha\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]),\"Dawood\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]),\"Ayesha\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_95_Find_Min_Length", "language": "pl", "prompt": "# Write a plthon function to find the length of the smallest array in an array of arrays.\nsub Find_Min_Length {\n    my($lst) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&Find_Min_Length;\n        if(eq_deeply($candidate->([[1], [1, 2]]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[3, 3, 3], [4, 4, 4, 4]]),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_96_divisor", "language": "pl", "prompt": "# Write a plthon function to find the number of divisors of a given integer.\nsub divisor {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&divisor;\n        if(eq_deeply($candidate->(15),4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),6)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_97_frequency_lists", "language": "pl", "prompt": "# Write a function to find frequency of each element in a flattened array of arrays, returned in a hash.\nsub frequency_lists {\n    my($list1) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&frequency_lists;\n        if(eq_deeply($candidate->([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_99_decimal_to_binary", "language": "pl", "prompt": "# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nsub decimal_to_binary {\n    my($n) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n        if(eq_deeply($candidate->(8),\"1000\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(18),\"10010\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),\"111\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
{"name": "mbpp_9_find_Rotations", "language": "pl", "prompt": "# Write a plthon function to find the minimum number of rotations (greater than 0) required to get the same string.\nsub find_Rotations {\n    my($str) = @_;\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_Rotations;\n        if(eq_deeply($candidate->(\"aaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abc\"),3)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();", "stop_tokens": ["\nsub", "\n#", "\n\n"]}
