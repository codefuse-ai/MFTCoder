{"name": "mbpp_100_next_smallest_palindrome", "language": "php", "prompt": "<?php\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunction next_smallest_palindrome($num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return next_smallest_palindrome(...$args);\n}\n\nfunction test(): void {\n    if (candidate(99) !== 101) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1221) !== 1331) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 121) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_101_kth_element", "language": "php", "prompt": "<?php\n// Write a function to find the kth element in the given array using 1-based indexing.\nfunction kth_element($arr, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return kth_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 3, 5, 7, 19), 2) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(17, 24, 8, 23), 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(16, 21, 25, 36, 4), 4) !== 36) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_102_snake_to_camel", "language": "php", "prompt": "<?php\n// Write a function to convert a snake case string to camel case string.\nfunction snake_to_camel($word) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return snake_to_camel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python_program\") !== \"PythonProgram\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python_language\") !== \"PythonLanguage\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"programming_language\") !== \"ProgrammingLanguage\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_103_eulerian_num", "language": "php", "prompt": "<?php\n// Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num($n, $m) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return eulerian_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 1) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 1) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 26) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_104_sort_sublists", "language": "php", "prompt": "<?php\n// Write a function to sort each sublist of strings in a given list of lists.\nfunction sort_sublists($input_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sort_sublists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"white\", \"black\", \"orange\"))) !== array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"black\", \"orange\", \"white\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\" red \", \"green\"), array(\"blue \", \" black\"), array(\" orange\", \"brown\"))) !== array(array(\" red \", \"green\"), array(\" black\", \"blue \"), array(\" orange\", \"brown\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"zilver\", \"gold\"), array(\"magnesium\", \"aluminium\"), array(\"steel\", \"bronze\"))) !== array(array(\"gold\", \"zilver\"), array(\"aluminium\", \"magnesium\"), array(\"bronze\", \"steel\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_105_count", "language": "php", "prompt": "<?php\n// Write a python function to count true booleans in the given list.\nfunction count($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(true, false, true)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(false, false)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(true, true, true)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_106_add_lists", "language": "php", "prompt": "<?php\n// Write a function to append the given list to the given tuples.\nfunction add_lists($test_list, $test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return add_lists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 7), array(9, 10)) !== array(9, 10, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 8), array(10, 11)) !== array(10, 11, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9), array(11, 12)) !== array(11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_108_merge_sorted_list", "language": "php", "prompt": "<?php\n// Write a function to merge three lists into a single sorted list.\nfunction merge_sorted_list($num1, $num2, $num3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return merge_sorted_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 24, 15, 4, 5, 29, 110), array(19, 20, 11, 56, 25, 233, 154), array(24, 26, 54, 48)) !== array(4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 5, 6, 8, 9), array(2, 5, 7, 11), array(1, 4, 7, 8, 12)) !== array(1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1), array(25, 35, 22, 85, 14, 65, 75, 25, 58), array(12, 74, 9, 50, 61, 41)) !== array(1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_109_odd_Equivalent", "language": "php", "prompt": "<?php\n// Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunction odd_Equivalent($s, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return odd_Equivalent(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"011001\", 6) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11011\", 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1010\", 4) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_113_check_integer", "language": "php", "prompt": "<?php\n// Write a function to check if a string represents an integer or not.\nfunction check_integer($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"12345\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_115_empty_dit", "language": "php", "prompt": "<?php\n// Write a function to check whether all dictionaries in a list are empty or not.\nfunction empty_dit($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return empty_dit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(), array(), array())) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_116_tuple_to_int", "language": "php", "prompt": "<?php\n// Write a function to convert a given tuple of positive integers into a single integer.\nfunction tuple_to_int($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return tuple_to_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 123) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6)) !== 456) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7)) !== 567) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_117_list_to_float", "language": "php", "prompt": "<?php\n// Write a function to convert all possible convertible elements in a list of lists to floats.\nfunction list_to_float($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return list_to_float(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"3\", \"4\"), array(\"1\", \"26.45\"), array(\"7.32\", \"8\"), array(\"4\", \"8\"))) !== array(array(3.0, 4.0), array(1.0, 26.45), array(7.32, 8.0), array(4.0, 8.0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"4\", \"4\"), array(\"2\", \"27\"), array(\"4.12\", \"9\"), array(\"7\", \"11\"))) !== array(array(4.0, 4.0), array(2.0, 27.0), array(4.12, 9.0), array(7.0, 11.0))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"6\", \"78\"), array(\"5\", \"26.45\"), array(\"1.33\", \"4\"), array(\"82\", \"13\"))) !== array(array(6.0, 78.0), array(5.0, 26.45), array(1.33, 4.0), array(82.0, 13.0))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_118_string_to_list", "language": "php", "prompt": "<?php\n// Write a function to convert a string to a list of strings split on the space character.\nfunction string_to_list($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return string_to_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python programming\") !== array(\"python\", \"programming\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lists tuples strings\") !== array(\"lists\", \"tuples\", \"strings\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"write a program\") !== array(\"write\", \"a\", \"program\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_119_search", "language": "php", "prompt": "<?php\n// Write a python function to find the element that appears only once in a sorted array.\nfunction search($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4, 4)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_11_remove_Occ", "language": "php", "prompt": "<?php\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ($s, $ch) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_Occ(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hello\", \"l\") !== \"heo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcda\", \"a\") !== \"bcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"PHP\", \"P\") !== \"H\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_120_max_product_tuple", "language": "php", "prompt": "<?php\n// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nfunction max_product_tuple($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_product_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(2, 7), array(2, 6), array(1, 8), array(4, 9))) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(15, 2), array(5, 10))) !== 200) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(11, 44), array(10, 15), array(20, 5), array(12, 9))) !== 484) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "php", "prompt": "<?php\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunction amicable_numbers_sum($limit) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return amicable_numbers_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(999) !== 504) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9999) !== 31626) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_125_find_length", "language": "php", "prompt": "<?php\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunction find_length($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"11000010001\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"10111\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"11011101100101\") !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_126_sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of common divisors of two given numbers.\nfunction sum($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 15) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 150) !== 93) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 6) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_127_multiply_int", "language": "php", "prompt": "<?php\n// Write a function to multiply two integers.\nfunction multiply_int($x, $y) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return multiply_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 20) !== 200) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 10) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 8) !== 32) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_128_long_words", "language": "php", "prompt": "<?php\n// Write a function to find words that are longer than n characters from a given list of words.\nfunction long_words($n, $str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return long_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, \"python is a programming language\") !== array(\"python\", \"programming\", \"language\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, \"writing a program\") !== array(\"writing\", \"program\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, \"sorting list\") !== array(\"sorting\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_129_magic_square_test", "language": "php", "prompt": "<?php\n// Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test($my_matrix) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return magic_square_test(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(7, 12, 1, 14), array(2, 13, 8, 11), array(16, 3, 10, 5), array(9, 6, 15, 4))) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 7, 6), array(9, 5, 1), array(4, 3, 8))) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 7, 6), array(9, 5, 1), array(4, 3, 7))) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_12_sort_matrix", "language": "php", "prompt": "<?php\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunction sort_matrix($M) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sort_matrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(2, 4, 5), array(1, 1, 1))) !== array(array(1, 1, 1), array(1, 2, 3), array(2, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(-2, 4, -5), array(1, -1, 1))) !== array(array(-2, 4, -5), array(1, -1, 1), array(1, 2, 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 8, 9), array(6, 4, 3), array(2, 1, 4))) !== array(array(2, 1, 4), array(6, 4, 3), array(5, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_130_max_occurrences", "language": "php", "prompt": "<?php\n// Write a function to find the item with maximum frequency in a given list.\nfunction max_occurrences($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_occurrences(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10)) !== 20) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_131_reverse_vowels", "language": "php", "prompt": "<?php\n// Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nfunction reverse_vowels($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return reverse_vowels(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Python\") !== \"Python\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"USA\") !== \"ASU\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"ab\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_132_tup_string", "language": "php", "prompt": "<?php\n// Write a function to convert a list to a string.\nfunction tup_string($tup1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return tup_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\")) !== \"exercises\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")) !== \"python\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\")) !== \"program\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_133_sum_negativenum", "language": "php", "prompt": "<?php\n// Write a function to calculate the sum of the negative numbers of a given list of numbers.\nfunction sum_negativenum($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_negativenum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 4, -6, -9, 11, -12, 14, -5, 17)) !== -32) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 15, -14, 13, -18, 12, -20)) !== -52) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(19, -65, 57, 39, 152, -639, 121, 44, 90, -190)) !== -894) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_135_hexagonal_num", "language": "php", "prompt": "<?php\n// Write a function to find the nth hexagonal number.\nfunction hexagonal_num($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return hexagonal_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 190) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 45) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 91) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "php", "prompt": "<?php\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunction is_Sum_Of_Powers_Of_Two($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_Sum_Of_Powers_Of_Two(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_141_pancake_sort", "language": "php", "prompt": "<?php\n// Write a function to sort a list of elements.\nfunction pancake_sort($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return pancake_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15, 79, 25, 38, 69)) !== array(15, 25, 38, 69, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(98, 12, 54, 36, 85)) !== array(12, 36, 54, 85, 98)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 42, 32, 12, 23)) !== array(12, 23, 32, 41, 42)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_142_count_samepair", "language": "php", "prompt": "<?php\n// Write a function to count number items that are identical in the same position of three given lists.\nfunction count_samepair($list1, $list2, $list3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_samepair(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 9), array(2, 1, 3, 1, 2, 6, 7, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 8), array(2, 1, 3, 1, 2, 6, 7, 8)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 2, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 8), array(2, 1, 3, 1, 2, 6, 7, 8)) !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_143_find_lists", "language": "php", "prompt": "<?php\n// Write a function to find number of lists present in the given list.\nfunction find_lists($Input) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_lists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(3, 4), array(5, 6))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5, 4, 3, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "php", "prompt": "<?php\n// Write a python function to find the maximum difference between any two elements in a given array.\nfunction max_Abs_Diff($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_Abs_Diff(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 1, 5, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 3, 2, 5, 1)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_14_find_Volume", "language": "php", "prompt": "<?php\n// Write a python function to find the volume of a triangular prism.\nfunction find_Volume($l, $b, $h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Volume(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 8, 6) !== 240) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 2, 2) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_160_find_solution", "language": "php", "prompt": "<?php\n// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfunction find_solution($a, $b, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_solution(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 7) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 7) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 13, 17) !== array(4, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_161_remove_elements", "language": "php", "prompt": "<?php\n// Write a function to remove all elements from a given list present in another list.\nfunction remove_elements($list1, $list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), array(2, 4, 6, 8)) !== array(1, 3, 5, 7, 9, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), array(1, 3, 5, 7)) !== array(2, 4, 6, 8, 9, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), array(5, 7)) !== array(1, 2, 3, 4, 6, 8, 9, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_162_sum_series", "language": "php", "prompt": "<?php\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunction sum_series($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_series(...$args);\n}\n\nfunction test(): void {\n    if (candidate(6) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 30) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 25) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_164_are_equivalent", "language": "php", "prompt": "<?php\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunction are_equivalent($num1, $num2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return are_equivalent(...$args);\n}\n\nfunction test(): void {\n    if (candidate(36, 57) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(23, 47) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_165_count_char_position", "language": "php", "prompt": "<?php\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunction count_char_position($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_char_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"xbcefg\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ABcED\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"AbgdeF\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_166_find_even_pair", "language": "php", "prompt": "<?php\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunction find_even_pair($A) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_even_pair(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 4, 7, 2, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 2, 8, 1, 0, 5, 11)) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_167_next_power_of_2", "language": "php", "prompt": "<?php\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunction next_power_of_2($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return next_power_of_2(...$args);\n}\n\nfunction test(): void {\n    if (candidate(0) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== 32) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_168_frequency", "language": "php", "prompt": "<?php\n// Write a function to count the number of occurrences of a number in a given list.\nfunction frequency($a, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return frequency(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3), 4) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 3, 4), 3) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 2, 3, 1, 2), 1) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "php", "prompt": "<?php\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunction text_lowercase_underscore($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_lowercase_underscore(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aab_cbbbc\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aab_Abbbc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Aaab_abbbc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_170_sum_range_list", "language": "php", "prompt": "<?php\n// Write a function to find the sum of numbers in a list within a range specified by two indices.\nfunction sum_range_list($list1, $m, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_range_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 8, 10) !== 29) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 5, 7) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12), 7, 10) !== 38) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "php", "prompt": "<?php\n// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfunction perimeter_pentagon($a) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return perimeter_pentagon(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== 75) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_172_count_occurance", "language": "php", "prompt": "<?php\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunction count_occurance($s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_occurance(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"letstdlenstdporstd\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"truststdsolensporsd\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"makestdsostdworthit\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"stds\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_17_square_perimeter", "language": "php", "prompt": "<?php\n// Write a function that returns the perimeter of a square given its side length as input.\nfunction square_perimeter($a) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return square_perimeter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 16) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "php", "prompt": "<?php\n// Write a function to remove characters from the first string which are present in the second string.\nfunction remove_dirty_chars($string, $second_string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_dirty_chars(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"probasscurve\", \"pros\") !== \"bacuve\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"digitalindia\", \"talent\") !== \"digiidi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"exoticmiles\", \"toxic\") !== \"emles\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_19_test_duplicate", "language": "php", "prompt": "<?php\n// Write a function to find whether a given array of integers contains any duplicate element.\nfunction test_duplicate($arraynums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return test_duplicate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 2, 2, 3, 3, 4, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_20_is_woodall", "language": "php", "prompt": "<?php\n// Write a function to check if the given number is woodball or not.\nfunction is_woodall($x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_woodall(...$args);\n}\n\nfunction test(): void {\n    if (candidate(383) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(254) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(200) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_222_check_type", "language": "php", "prompt": "<?php\n// Write a function to check if all the elements in tuple have same data type or not.\nfunction check_type($test_tuple) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_type(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 7, 3, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, \"4\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_223_is_majority", "language": "php", "prompt": "<?php\n// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority($arr, $n, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_majority(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 3, 3, 3, 10), 7, 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 2, 4, 4, 4, 6, 6), 8, 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 2), 5, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 2, 2), 5, 1) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_224_count_Set_Bits", "language": "php", "prompt": "<?php\n// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nfunction count_Set_Bits($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_Set_Bits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_226_odd_values_string", "language": "php", "prompt": "<?php\n// Write a python function to remove the characters which have odd index values of a given string.\nfunction odd_values_string($str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return odd_values_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcdef\") !== \"ace\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python\") !== \"pto\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"data\") !== \"dt\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lambs\") !== \"lms\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_227_min_of_three", "language": "php", "prompt": "<?php\n// Write a function to find minimum of three numbers.\nfunction min_of_three($a, $b, $c) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return min_of_three(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 20, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 15, 18) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-10, -20, -30) !== -30) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "php", "prompt": "<?php\n// Write a python function to check whether all the bits are unset in the given range or not.\nfunction all_Bits_Set_In_The_Given_Range($n, $l, $r) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return all_Bits_Set_In_The_Given_Range(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4, 1, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17, 2, 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(39, 4, 6) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_229_re_arrange_array", "language": "php", "prompt": "<?php\n// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunction re_arrange_array($arr, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return re_arrange_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1, 2, -3, 4, 5, 6, -7, 8, 9), 9) !== array(-1, -3, -7, 4, 5, 6, 2, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, -14, -26, 13, 15), 5) !== array(-14, -26, 12, 13, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 24, 36, -42, -39, -78, 85), 7) !== array(-42, -39, -78, 10, 24, 36, 85)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_230_replace_blank", "language": "php", "prompt": "<?php\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunction replace_blank($str1, $char) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return replace_blank(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hello people\", \"@\") !== \"hello@people\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python program language\", \"$\") !== \"python$program$language\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"blank space\", \"-\") !== \"blank-space\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_234_volume_cube", "language": "php", "prompt": "<?php\n// Write a function to find the volume of a cube given its side length.\nfunction volume_cube($l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return volume_cube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 125) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_237_check_occurences", "language": "php", "prompt": "<?php\n// Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nfunction check_occurences($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_occurences(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(3, 1), array(1, 3), array(2, 5), array(5, 2), array(6, 3))) !== array(array(1, 3) => 2, array(2, 5) => 2, array(3, 6) => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(4, 2), array(2, 4), array(3, 6), array(6, 3), array(7, 4))) !== array(array(2, 4) => 2, array(3, 6) => 2, array(4, 7) => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(13, 2), array(11, 23), array(12, 25), array(25, 12), array(16, 23))) !== array(array(2, 13) => 1, array(11, 23) => 1, array(12, 25) => 2, array(16, 23) => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_238_number_of_substrings", "language": "php", "prompt": "<?php\n// Write a python function to count the number of non-empty substrings of a given string.\nfunction number_of_substrings($str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return number_of_substrings(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abc\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcde\") !== 15) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "php", "prompt": "<?php\n// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunction get_total_number_of_sequences($m, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_total_number_of_sequences(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 4) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 2) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16, 3) !== 84) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_240_replace_list", "language": "php", "prompt": "<?php\n// Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nfunction replace_list($list1, $list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return replace_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 10), array(2, 4, 6, 8)) !== array(1, 3, 5, 7, 9, 2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5), array(5, 6, 7, 8)) !== array(1, 2, 3, 4, 5, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"blue\", \"green\"), array(\"yellow\")) !== array(\"red\", \"blue\", \"yellow\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_242_count_charac", "language": "php", "prompt": "<?php\n// Write a function to count the total number of characters in a string.\nfunction count_charac($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_charac(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python programming\") !== 18) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"language\") !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"words\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "php", "prompt": "<?php\n// Write a python function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square($N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return next_Perfect_Square(...$args);\n}\n\nfunction test(): void {\n    if (candidate(35) !== 36) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 16) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_245_max_sum", "language": "php", "prompt": "<?php\n// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunction max_sum($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 15, 51, 45, 33, 100, 12, 18, 9)) !== 194) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(80, 60, 30, 40, 20, 10)) !== 210) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 14, 16, 21, 23, 29, 30)) !== 138) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_247_lps", "language": "php", "prompt": "<?php\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps($str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return lps(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"TENS FOR TENS\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"CARDIO FOR CARDS\") !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"PART OF THE JOURNEY IS PART\") !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_249_intersection_array", "language": "php", "prompt": "<?php\n// Write a function to find the intersection of two arrays.\nfunction intersection_array($array_nums1, $array_nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return intersection_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 5, 7, 8, 9, 10), array(1, 2, 4, 8, 9)) !== array(1, 2, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5, 7, 8, 9, 10), array(3, 5, 7, 9)) !== array(3, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5, 7, 8, 9, 10), array(10, 20, 30, 40)) !== array(10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_250_count_X", "language": "php", "prompt": "<?php\n// Write a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\nfunction count_X($tup, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_X(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_251_insert_element", "language": "php", "prompt": "<?php\n// Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nfunction insert_element($list, $element) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return insert_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Red\", \"Green\", \"Black\"), \"c\") !== array(\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"python\", \"java\"), \"program\") !== array(\"program\", \"python\", \"program\", \"java\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"happy\", \"sad\"), \"laugh\") !== array(\"laugh\", \"happy\", \"laugh\", \"sad\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_252_convert", "language": "php", "prompt": "<?php\n// Write a python function to convert complex numbers to polar coordinates.\nfunction convert($numbers) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return convert(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_253_count_integer", "language": "php", "prompt": "<?php\n// Write a python function that returns the number of integer elements in a given list.\nfunction count_integer($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, \"abc\", 1.2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1.2, 4, 5.1)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_255_combinations_colors", "language": "php", "prompt": "<?php\n// Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\nfunction combinations_colors($l, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return combinations_colors(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Red\", \"Green\", \"Blue\"), 1) !== array(array(\"Red\"), array(\"Green\"), array(\"Blue\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Red\", \"Green\", \"Blue\"), 2) !== array(array(\"Red\", \"Red\"), array(\"Red\", \"Green\"), array(\"Red\", \"Blue\"), array(\"Green\", \"Green\"), array(\"Green\", \"Blue\"), array(\"Blue\", \"Blue\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Red\", \"Green\", \"Blue\"), 3) !== array(array(\"Red\", \"Red\", \"Red\"), array(\"Red\", \"Red\", \"Green\"), array(\"Red\", \"Red\", \"Blue\"), array(\"Red\", \"Green\", \"Green\"), array(\"Red\", \"Green\", \"Blue\"), array(\"Red\", \"Blue\", \"Blue\"), array(\"Green\", \"Green\", \"Green\"), array(\"Green\", \"Green\", \"Blue\"), array(\"Green\", \"Blue\", \"Blue\"), array(\"Blue\", \"Blue\", \"Blue\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_256_count_Primes_nums", "language": "php", "prompt": "<?php\n// Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunction count_Primes_nums($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_Primes_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== 25) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_257_swap_numbers", "language": "php", "prompt": "<?php\n// Write a function that takes in two numbers and returns a list with the second number and then the first number.\nfunction swap_numbers($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return swap_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 20) !== array(20, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 17) !== array(17, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 200) !== array(200, 100)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_259_maximize_elements", "language": "php", "prompt": "<?php\n// Write a function to maximize the given two lists.\nfunction maximize_elements($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return maximize_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(4, 5), array(2, 9), array(1, 10)), array(array(6, 7), array(3, 9), array(1, 1), array(7, 3))) !== array(array(6, 7), array(4, 9), array(2, 9), array(7, 10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 4), array(5, 6), array(3, 10), array(2, 11)), array(array(7, 8), array(4, 10), array(2, 2), array(8, 4))) !== array(array(7, 8), array(5, 10), array(3, 10), array(8, 11))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 5), array(6, 7), array(4, 11), array(3, 12)), array(array(8, 9), array(5, 11), array(3, 3), array(9, 5))) !== array(array(8, 9), array(6, 11), array(4, 11), array(9, 12))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_260_newman_prime", "language": "php", "prompt": "<?php\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunction newman_prime($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return newman_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 17) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 41) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_261_division_elements", "language": "php", "prompt": "<?php\n// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfunction division_elements($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return division_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(2, 2, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 6, 8, 16), array(6, 3, 4, 4)) !== array(2, 2, 2, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(20, 14, 36, 18), array(5, 7, 6, 9)) !== array(4, 2, 6, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_262_split_two_parts", "language": "php", "prompt": "<?php\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nfunction split_two_parts($list1, $L) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return split_two_parts(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(array(1, 1, 2), array(3, 4, 4, 5, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), 2) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"), 4) !== array(array(\"p\", \"y\", \"t\", \"h\"), array(\"o\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_264_dog_age", "language": "php", "prompt": "<?php\n// Write a function to calculate a dog's age in dog's years.\nfunction dog_age($h_age) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return dog_age(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12) !== 61) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== 73) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24) !== 109) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_265_list_split", "language": "php", "prompt": "<?php\n// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nfunction list_split($S, $step) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return list_split(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"), 3) !== array(array(\"a\", \"d\", \"g\", \"j\", \"m\"), array(\"b\", \"e\", \"h\", \"k\", \"n\"), array(\"c\", \"f\", \"i\", \"l\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 3) !== array(array(1, 4, 7, 10, 13), array(2, 5, 8, 11, 14), array(3, 6, 9, 12))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"), 2) !== array(array(\"python\", \"C\", \"DBMS\"), array(\"java\", \"C++\", \"SQL\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "php", "prompt": "<?php\n// Write a function to find the lateral surface area of a cube given its side length.\nfunction lateralsurface_cube($l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return lateralsurface_cube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 100) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 324) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 400) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_267_square_Sum", "language": "php", "prompt": "<?php\n// Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunction square_Sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return square_Sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 35) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 84) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_268_find_star_num", "language": "php", "prompt": "<?php\n// Write a function to find the n'th star number.\nfunction find_star_num($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_star_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 73) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 121) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_269_ascii_value", "language": "php", "prompt": "<?php\n// Write a function to find the ascii value of a character.\nfunction ascii_value($k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return ascii_value(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"A\") !== 65) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"R\") !== 82) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"S\") !== 83) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of even numbers at even positions of a list.\nfunction sum_even_and_even_index($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_even_and_even_index(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 12, 1, 18, 8)) !== 30) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 20, 17, 9, 2, 10, 18, 13, 6, 18)) !== 26) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 12, 1)) !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_271_even_Power_Sum", "language": "php", "prompt": "<?php\n// Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunction even_Power_Sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return even_Power_Sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 1056) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 8832) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 32) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_272_rear_extract", "language": "php", "prompt": "<?php\n// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfunction rear_extract($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return rear_extract(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, \"Rash\", 21), array(2, \"Varsha\", 20), array(3, \"Kil\", 19))) !== array(21, 20, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, \"Sai\", 36), array(2, \"Ayesha\", 25), array(3, \"Salman\", 45))) !== array(36, 25, 45)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, \"Sudeep\", 14), array(2, \"Vandana\", 36), array(3, \"Dawood\", 56))) !== array(14, 36, 56)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_273_substract_elements", "language": "php", "prompt": "<?php\n// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunction substract_elements($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return substract_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 5), array(2, 5, 18)) !== array(8, -1, -13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 2, 3), array(24, 45, 16)) !== array(-13, -43, -13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 18, 9), array(10, 11, 12)) !== array(-3, 7, -3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "php", "prompt": "<?php\n// Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunction even_binomial_Coeff_Sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return even_binomial_Coeff_Sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 32) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_277_dict_filter", "language": "php", "prompt": "<?php\n// Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfunction dict_filter($dict, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return dict_filter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 170) !== array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Pierre Cox\" => 190)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 180) !== array(\"Alden Cantrell\" => 180, \"Pierre Cox\" => 190)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Cierra Vega\" => 175, \"Alden Cantrell\" => 180, \"Kierra Gentry\" => 165, \"Pierre Cox\" => 190), 190) !== array(\"Pierre Cox\" => 190)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_278_count_first_elements", "language": "php", "prompt": "<?php\n// Write a function to find the number of elements that occurs before the list element in the given tuple.\nfunction count_first_elements($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_first_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 7, array(4, 6), 10)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 9, array(5, 7), 11)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 15, 5, 8, array(2, 3), 8)) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_279_is_num_decagonal", "language": "php", "prompt": "<?php\n// Write a function to find the nth decagonal number.\nfunction is_num_decagonal($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_num_decagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 27) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 175) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 370) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_280_sequential_search", "language": "php", "prompt": "<?php\n// Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfunction sequential_search($dlist, $item) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sequential_search(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(11, 23, 58, 31, 56, 77, 43, 12, 65, 19), 31) !== array(true, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 32, 45, 62, 35, 47, 44, 61), 61) !== array(true, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 10, 17, 19, 22, 39, 48, 56), 48) !== array(true, 6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_281_all_unique", "language": "php", "prompt": "<?php\n// Write a python function to check if the elements of a given list are unique or not.\nfunction all_unique($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return all_unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_282_sub_list", "language": "php", "prompt": "<?php\n// Write a function to subtract two lists element-wise.\nfunction sub_list($nums1, $nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sub_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3), array(4, 5, 6)) !== array(-3, -3, -3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3, 4)) !== array(-2, -2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(90, 120), array(50, 70)) !== array(40, 50)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_283_validate", "language": "php", "prompt": "<?php\n// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunction validate($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return validate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1234) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(51241) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(321) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_284_check_element", "language": "php", "prompt": "<?php\n// Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nfunction check_element($list, $element) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"green\", \"orange\", \"black\", \"white\"), \"blue\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), 7) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"green\", \"green\", \"green\", \"green\"), \"green\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_285_text_match_two_three", "language": "php", "prompt": "<?php\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunction text_match_two_three($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_match_two_three(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abbbba\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "php", "prompt": "<?php\n// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated($a, $n, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_sub_array_sum_repeated(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 20, -30, -1), 4, 3) !== 30) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 10, 20), 3, 2) !== 59) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, -3), 3, 3) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_287_square_Sum", "language": "php", "prompt": "<?php\n// Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunction square_Sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return square_Sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 56) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 120) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_290_max_length", "language": "php", "prompt": "<?php\n// Write a function to find the list of maximum length in a list of lists.\nfunction max_length($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0), array(1, 3), array(5, 7), array(9, 11), array(13, 15, 17))) !== array(3, array(13, 15, 17))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1), array(5, 7), array(10, 12, 14, 15))) !== array(4, array(10, 12, 14, 15))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5), array(15, 20, 25))) !== array(3, array(15, 20, 25))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_291_count_no_of_ways", "language": "php", "prompt": "<?php\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunction count_no_of_ways($n, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_no_of_ways(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 4) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 2) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 4) !== 228) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_292_find", "language": "php", "prompt": "<?php\n// Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfunction find($n, $m) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_293_otherside_rightangle", "language": "php", "prompt": "<?php\n// Write a function to find the third side of a right angled triangle.\nfunction otherside_rightangle($w, $h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return otherside_rightangle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7, 8) !== 10.63014581273465) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 4) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 15) !== 16.55294535724685) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_294_max_val", "language": "php", "prompt": "<?php\n// Write a function to find the maximum value in a given heterogeneous list.\nfunction max_val($listval) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_val(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Python\", 3, 2, 4, 5, \"version\")) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python\", 15, 20, 25)) !== 25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python\", 30, 20, 40, 50, \"version\")) !== 50) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_295_sum_div", "language": "php", "prompt": "<?php\n// Write a function to return the sum of all divisors of a number.\nfunction sum_div($number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_div(...$args);\n}\n\nfunction test(): void {\n    if (candidate(8) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_296_get_Inv_Count", "language": "php", "prompt": "<?php\n// Write a python function to count inversions in an array.\nfunction get_Inv_Count($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_Inv_Count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 20, 6, 4, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 5, 6, 1)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_297_flatten_list", "language": "php", "prompt": "<?php\n// Write a function to flatten a given nested list structure.\nfunction flatten_list($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return flatten_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 10, array(20, 30), 40, 50, array(60, 70, 80), array(90, 100, 110, 120))) !== array(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(40), array(30, 56, 25), array(10, 20), array(33), array(40))) !== array(10, 20, 40, 30, 56, 25, 10, 20, 33, 40)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_299_max_aggregate", "language": "php", "prompt": "<?php\n// Write a function to calculate the maximum aggregate from the list of tuples.\nfunction max_aggregate($stdata) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_aggregate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Juan Whelan\", 90), array(\"Sabah Colley\", 88), array(\"Peter Nichols\", 7), array(\"Juan Whelan\", 122), array(\"Sabah Colley\", 84))) !== array(\"Juan Whelan\", 212)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Juan Whelan\", 50), array(\"Sabah Colley\", 48), array(\"Peter Nichols\", 37), array(\"Juan Whelan\", 22), array(\"Sabah Colley\", 14))) !== array(\"Juan Whelan\", 72)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Juan Whelan\", 10), array(\"Sabah Colley\", 20), array(\"Peter Nichols\", 30), array(\"Juan Whelan\", 40), array(\"Sabah Colley\", 50))) !== array(\"Sabah Colley\", 70)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_304_find_Element", "language": "php", "prompt": "<?php\n// Write a python function to find element at a given index after number of rotations.\nfunction find_Element($arr, $ranges, $rotations, $index) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5), array(array(0, 2), array(0, 3)), 2, 1) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(array(0, 1), array(0, 2)), 1, 2) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(array(0, 1), array(0, 2)), 1, 1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_305_start_withp", "language": "php", "prompt": "<?php\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunction start_withp($words) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return start_withp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Python PHP\", \"Java JavaScript\", \"c c++\")) !== array(\"Python\", \"PHP\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python Programming\", \"Java Programming\")) !== array(\"Python\", \"Programming\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Pqrst Pqr\", \"qrstuv\")) !== array(\"Pqrst\", \"Pqr\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "php", "prompt": "<?php\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunction max_sum_increasing_subseq($a, $n, $index, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_sum_increasing_subseq(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 101, 2, 3, 100, 4, 5), 7, 4, 6) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 101, 2, 3, 100, 4, 5), 7, 2, 5) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 15, 19, 21, 26, 28, 31), 7, 2, 4) !== 71) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_308_large_product", "language": "php", "prompt": "<?php\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunction large_product($nums1, $nums2, $N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return large_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 3) !== array(60, 54, 50)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 4) !== array(60, 54, 50, 48)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(3, 6, 8, 9, 10, 6), 5) !== array(60, 54, 50, 48, 45)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_309_maximum", "language": "php", "prompt": "<?php\n// Write a python function to find the maximum of two numbers.\nfunction maximum($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 10) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1, -2) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 7) !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_310_string_to_tuple", "language": "php", "prompt": "<?php\n// Write a function to convert a given string to a list of characters.\nfunction string_to_tuple($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return string_to_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python 3.0\") !== array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"item1\") !== array(\"i\", \"t\", \"e\", \"m\", \"1\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"15.10\") !== array(\"1\", \"5\", \".\", \"1\", \"0\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "php", "prompt": "<?php\n// Write a python function to find the highest power of 2 that is less than or equal to n.\nfunction highest_Power_of_2($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return highest_Power_of_2(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(32) !== 32) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_389_find_lucas", "language": "php", "prompt": "<?php\n// Write a function to find the n'th lucas number.\nfunction find_lucas($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_lucas(...$args);\n}\n\nfunction test(): void {\n    if (candidate(9) !== 76) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_390_add_string", "language": "php", "prompt": "<?php\n// Write a function to apply a given format string to all of the elements in a list.\nfunction add_string($list_, $string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return add_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4), \"temp{0}\") !== array(\"temp1\", \"temp2\", \"temp3\", \"temp4\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\", \"d\"), \"python{0}\") !== array(\"pythona\", \"pythonb\", \"pythonc\", \"pythond\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8), \"string{0}\") !== array(\"string5\", \"string6\", \"string7\", \"string8\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "php", "prompt": "<?php\n// Write a function to convert more than one list to nested dictionary.\nfunction convert_list_dictionary($l1, $l2, $l3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return convert_list_dictionary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"S001\", \"S002\", \"S003\", \"S004\"), array(\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"), array(85, 98, 89, 92)) !== array(array(\"S001\" => array(\"Adina Park\" => 85)), array(\"S002\" => array(\"Leyton Marsh\" => 98)), array(\"S003\" => array(\"Duncan Boyle\" => 89)), array(\"S004\" => array(\"Saim Richards\" => 92)))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"def\", \"ghi\", \"jkl\"), array(\"python\", \"program\", \"language\", \"programs\"), array(100, 200, 300, 400)) !== array(array(\"abc\" => array(\"python\" => 100)), array(\"def\" => array(\"program\" => 200)), array(\"ghi\" => array(\"language\" => 300)), array(\"jkl\" => array(\"programs\" => 400)))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"A1\", \"A2\", \"A3\", \"A4\"), array(\"java\", \"C\", \"C++\", \"DBMS\"), array(10, 20, 30, 40)) !== array(array(\"A1\" => array(\"java\" => 10)), array(\"A2\" => array(\"C\" => 20)), array(\"A3\" => array(\"C++\" => 30)), array(\"A4\" => array(\"DBMS\" => 40)))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_392_get_max_sum", "language": "php", "prompt": "<?php\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunction get_max_sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_max_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(60) !== 106) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_393_max_length_list", "language": "php", "prompt": "<?php\n// Write a function to find the list with maximum length.\nfunction max_length_list($input_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_length_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(0), array(1, 3), array(5, 7), array(9, 11), array(13, 15, 17))) !== array(3, array(13, 15, 17))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5), array(1, 2, 3, 4), array(1, 2, 3), array(1, 2), array(1))) !== array(5, array(1, 2, 3, 4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(6, 7, 8, 9), array(10, 11, 12))) !== array(4, array(6, 7, 8, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_394_check_distinct", "language": "php", "prompt": "<?php\n// Write a function to check if given list contains no duplicates.\nfunction check_distinct($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_distinct(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 5, 6, 1, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "php", "prompt": "<?php\n// Write a python function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return first_non_repeating_character(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcabc\") !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abc\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ababc\") !== \"c\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_396_check_char", "language": "php", "prompt": "<?php\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunction check_char($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_char(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abba\") !== \"Valid\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"Valid\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"Invalid\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_397_median_numbers", "language": "php", "prompt": "<?php\n// Write a function to find the median of three numbers.\nfunction median_numbers($a, $b, $c) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return median_numbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(25, 55, 65) !== 55.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 10, 30) !== 20.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 45, 75) !== 45.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_398_sum_of_digits", "language": "php", "prompt": "<?php\n// Write a function to compute the sum of digits of each number of a given list.\nfunction sum_of_digits($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_of_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 2, 56)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20, 4, 5, \"b\", 70, \"a\"))) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, -4, 5, -70)) !== 19) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_399_bitwise_xor", "language": "php", "prompt": "<?php\n// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nfunction bitwise_xor($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return bitwise_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(15, 6, 5, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 5, 7, 10), array(6, 3, 4, 4)) !== array(13, 6, 3, 14)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 6, 8, 11), array(7, 4, 5, 6)) !== array(11, 2, 13, 13)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_3_is_not_prime", "language": "php", "prompt": "<?php\n// Write a python function to identify non-prime numbers.\nfunction is_not_prime($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_not_prime(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(35) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(37) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_400_extract_freq", "language": "php", "prompt": "<?php\n// Write a function to extract the number of unique tuples in the given list.\nfunction extract_freq($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_freq(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(3, 4), array(1, 2), array(4, 3), array(5, 6))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(4, 15), array(2, 3), array(5, 4), array(6, 7))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 16), array(2, 3), array(6, 5), array(6, 9))) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_401_add_nested_tuples", "language": "php", "prompt": "<?php\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunction add_nested_tuples($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return add_nested_tuples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(4, 5), array(2, 9), array(1, 10)), array(array(6, 7), array(3, 9), array(1, 1), array(7, 3))) !== array(array(7, 10), array(7, 14), array(3, 10), array(8, 13))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 4), array(5, 6), array(3, 10), array(2, 11)), array(array(7, 8), array(4, 10), array(2, 2), array(8, 4))) !== array(array(9, 12), array(9, 16), array(5, 12), array(10, 15))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 5), array(6, 7), array(4, 11), array(3, 12)), array(array(8, 9), array(5, 11), array(3, 3), array(9, 5))) !== array(array(11, 14), array(11, 18), array(7, 14), array(12, 17))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_404_minimum", "language": "php", "prompt": "<?php\n// Write a python function to find the minimum of two numbers.\nfunction minimum($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return minimum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-5, -4) !== -5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_405_check_tuplex", "language": "php", "prompt": "<?php\n// Write a function to check whether an element exists within a tuple.\nfunction check_tuplex($tuplex, $tuple1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_tuplex(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), \"r\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), \"5\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_406_find_Parity", "language": "php", "prompt": "<?php\n// Write a python function to find whether the parity of a given number is odd.\nfunction find_Parity($x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Parity(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_407_rearrange_bigger", "language": "php", "prompt": "<?php\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return rearrange_bigger(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(102) !== 120) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "php", "prompt": "<?php\n// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfunction k_smallest_pairs($nums1, $nums2, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return k_smallest_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 2) !== array(array(1, 2), array(1, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 1) !== array(array(1, 2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 7), array(2, 4, 6), 7) !== array(array(1, 2), array(1, 4), array(3, 2), array(1, 6), array(3, 4), array(3, 6), array(7, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_409_min_product_tuple", "language": "php", "prompt": "<?php\n// Write a function to find the minimum product from the pairs of tuples within a given list.\nfunction min_product_tuple($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return min_product_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(2, 7), array(2, 6), array(1, 8), array(4, 9))) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(10, 20), array(15, 2), array(5, 10))) !== 30) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(11, 44), array(10, 15), array(20, 5), array(12, 9))) !== 100) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_410_min_val", "language": "php", "prompt": "<?php\n// Write a function to find the minimum value in a given heterogeneous list.\nfunction min_val($listval) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return min_val(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Python\", 3, 2, 4, 5, \"version\")) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python\", 15, 20, 25)) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python\", 30, 20, 40, 50, \"version\")) !== 20) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_411_snake_to_camel", "language": "php", "prompt": "<?php\n// Write a function to convert the given snake case string to camel case string.\nfunction snake_to_camel($word) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return snake_to_camel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"android_tv\") !== \"AndroidTv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"google_pixel\") !== \"GooglePixel\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"apple_watch\") !== \"AppleWatch\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_412_remove_odd", "language": "php", "prompt": "<?php\n// Write a python function to remove odd numbers from a given list.\nfunction remove_odd($l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_odd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 6)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 3)) !== array(10, 20)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_413_extract_nth_element", "language": "php", "prompt": "<?php\n// Write a function to extract the nth element from a given list of tuples.\nfunction extract_nth_element($list1, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_nth_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 0) !== array(\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 2) !== array(99, 96, 94, 98)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Greyson Fulton\", 98, 99), array(\"Brady Kent\", 97, 96), array(\"Wyatt Knott\", 91, 94), array(\"Beau Turnbull\", 94, 98)), 1) !== array(98, 97, 91, 94)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_414_overlapping", "language": "php", "prompt": "<?php\n// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfunction overlapping($list1, $list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return overlapping(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5), array(6, 7, 8, 9)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(4, 5, 6)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4, 5), array(1, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_415_max_Product", "language": "php", "prompt": "<?php\n// Write a python function to find a pair with highest product from a given array of integers.\nfunction max_Product($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_Product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 7, 0, 8, 4)) !== array(7, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, -1, -2, -4, 5, 0, -6)) !== array(-4, -6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_417_group_tuples", "language": "php", "prompt": "<?php\n// Write a function to find common first element in given list of lists.\nfunction group_tuples($Input) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return group_tuples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"x\", \"y\"), array(\"x\", \"z\"), array(\"w\", \"t\"))) !== array(array(\"x\", \"y\", \"z\"), array(\"w\", \"t\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"a\", \"b\"), array(\"a\", \"c\"), array(\"d\", \"e\"))) !== array(array(\"a\", \"b\", \"c\"), array(\"d\", \"e\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"f\", \"g\"), array(\"f\", \"g\"), array(\"h\", \"i\"))) !== array(array(\"f\", \"g\", \"g\"), array(\"h\", \"i\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_418_Find_Max", "language": "php", "prompt": "<?php\n// Write a python function to find the element of a list having maximum length.\nfunction Find_Max($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Find_Max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"A\"), array(\"A\", \"B\"), array(\"A\", \"B\", \"C\"))) !== array(\"A\", \"B\", \"C\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1), array(1, 2), array(1, 2, 3))) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1), array(1, 2, 3), array(1, 5, 6, 1))) !== array(1, 5, 6, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_419_round_and_sum", "language": "php", "prompt": "<?php\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunction round_and_sum($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return round_and_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5)) !== 243) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 9, 24.3, 29)) !== 345) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25.0, 56.7, 89.2)) !== 513) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_420_cube_Sum", "language": "php", "prompt": "<?php\n// Write a python function to find the cube sum of first n even natural numbers.\nfunction cube_Sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return cube_Sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 800) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_421_concatenate_tuple", "language": "php", "prompt": "<?php\n// Write a function to concatenate each element of tuple by the delimiter.\nfunction concatenate_tuple($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return concatenate_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"ID\", \"is\", 4, \"UTS\")) !== \"ID-is-4-UTS\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"QWE\", \"is\", 4, \"RTY\")) !== \"QWE-is-4-RTY\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"ZEN\", \"is\", 4, \"OP\")) !== \"ZEN-is-4-OP\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "php", "prompt": "<?php\n// Write a python function to find the average of cubes of first n natural numbers.\nfunction find_Average_Of_Cube($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Average_Of_Cube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 4.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_424_extract_rear", "language": "php", "prompt": "<?php\n// Write a function to extract only the rear index element of each string in the given tuple.\nfunction extract_rear($test_tuple) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_rear(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Mers\", \"for\", \"Vers\")) !== array(\"s\", \"r\", \"s\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Avenge\", \"for\", \"People\")) !== array(\"e\", \"r\", \"e\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Gotta\", \"get\", \"go\")) !== array(\"a\", \"t\", \"o\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_425_count_element_in_list", "language": "php", "prompt": "<?php\n// Write a function to count the number of sublists containing a particular element.\nfunction count_element_in_list($list1, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_element_in_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(5, 7), array(1, 11), array(1, 15, 7)), 1) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"A\", \"B\"), array(\"A\", \"C\"), array(\"A\", \"D\", \"E\"), array(\"B\", \"C\", \"D\")), \"A\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"A\", \"B\"), array(\"A\", \"C\"), array(\"A\", \"D\", \"E\"), array(\"B\", \"C\", \"D\")), \"E\") !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "php", "prompt": "<?php\n// Write a function to filter odd numbers.\nfunction filter_oddnumbers($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return filter_oddnumbers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 3, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 45, 67, 84, 93)) !== array(45, 67, 93)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 7, 9, 8, 6, 4, 3)) !== array(5, 7, 9, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_427_change_date_format", "language": "php", "prompt": "<?php\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunction change_date_format($dt) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return change_date_format(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"2026-01-02\") !== \"02-01-2026\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2020-11-13\") !== \"13-11-2020\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"2021-04-26\") !== \"26-04-2021\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_428_shell_sort", "language": "php", "prompt": "<?php\n// Write a function to sort the given array by using shell sort.\nfunction shell_sort($my_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return shell_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 23, 4, 5, 3, 2, 12, 81, 56, 95)) !== array(2, 3, 4, 5, 12, 12, 23, 56, 81, 95)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(24, 22, 39, 34, 87, 73, 68)) !== array(22, 24, 34, 39, 68, 73, 87)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(32, 30, 16, 96, 82, 83, 74)) !== array(16, 30, 32, 74, 82, 83, 96)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_429_and_tuples", "language": "php", "prompt": "<?php\n// Write a function to extract the elementwise and tuples from the given two tuples.\nfunction and_tuples($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return and_tuples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 6, 9), array(5, 2, 3, 3)) !== array(0, 0, 2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(5, 6, 7, 8)) !== array(1, 2, 3, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 9, 11, 12), array(7, 13, 14, 17)) !== array(0, 9, 10, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_430_parabola_directrix", "language": "php", "prompt": "<?php\n// Write a function to find the directrix of a parabola.\nfunction parabola_directrix($a, $b, $c) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return parabola_directrix(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 3, 2) !== -198) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 8, 4) !== -2336) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 4, 6) !== -130) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_431_common_element", "language": "php", "prompt": "<?php\n// Write a function that takes two lists and returns true if they have at least one common element.\nfunction common_element($list1, $list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return common_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5), array(5, 6, 7, 8, 9)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5), array(6, 7, 8, 9)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"c\"), array(\"d\", \"b\", \"e\")) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_432_median_trapezium", "language": "php", "prompt": "<?php\n// Write a function to find the median length of a trapezium.\nfunction median_trapezium($base1, $base2, $height) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return median_trapezium(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15, 25, 35) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 20, 30) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6, 9, 4) !== 7.5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_433_check_greater", "language": "php", "prompt": "<?php\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunction check_greater($arr, $number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_greater(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5), 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 4, 5, 6), 8) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 4, 8, 6, 1), 11) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_434_text_match_one", "language": "php", "prompt": "<?php\n// Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_one($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_match_one(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abba\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_435_last_Digit", "language": "php", "prompt": "<?php\n// Write a python function to find the last digit of a given number.\nfunction last_Digit($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return last_Digit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(123) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(25) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_436_neg_nos", "language": "php", "prompt": "<?php\n// Write a python function to return the negative numbers in a list.\nfunction neg_nos($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return neg_nos(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-1, 4, 5, -6)) !== array(-1, -6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, 3, 4)) !== array(-1, -2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-7, -6, 8, 9)) !== array(-7, -6)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_437_remove_odd", "language": "php", "prompt": "<?php\n// Write a function to remove odd characters in a string.\nfunction remove_odd($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_odd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python\") !== \"yhn\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"program\") !== \"rga\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"language\") !== \"agae\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_438_count_bidirectional", "language": "php", "prompt": "<?php\n// Write a function to count bidirectional tuple pairs.\nfunction count_bidirectional($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_bidirectional(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6), array(1, 2), array(6, 5), array(9, 1), array(6, 5), array(2, 1))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 6), array(1, 3), array(6, 5), array(9, 1), array(6, 5), array(2, 1))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 6), array(1, 2), array(6, 5), array(9, 2), array(6, 5), array(2, 1))) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_439_multiple_to_single", "language": "php", "prompt": "<?php\n// Write a function to join a list of multiple integers into a single integer.\nfunction multiple_to_single($L) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return multiple_to_single(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(11, 33, 50)) !== 113350) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 2, 3, 4, 5, 6)) !== -123456) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 15, 20, 25)) !== 10152025) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_440_find_adverb_position", "language": "php", "prompt": "<?php\n// Write a function to find the first adverb and their positions in a given sentence.\nfunction find_adverb_position($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_adverb_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"clearly!! we can see the sky\") !== array(0, 7, \"clearly\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"seriously!! there are many roses\") !== array(0, 9, \"seriously\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"unfortunately!! sita is going to home\") !== array(0, 13, \"unfortunately\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_441_surfacearea_cube", "language": "php", "prompt": "<?php\n// Write a function to find the surface area of a cube of a given size.\nfunction surfacearea_cube($l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return surfacearea_cube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 150) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 54) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 600) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_442_positive_count", "language": "php", "prompt": "<?php\n// Write a function to find the ration of positive numbers in an array of integers.\nfunction positive_count($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return positive_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)) !== 0.54) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)) !== 0.69) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -6, -9, 11, -12, 14, -5, 17)) !== 0.56) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_443_largest_neg", "language": "php", "prompt": "<?php\n// Write a python function to find the largest negative number from the given list.\nfunction largest_neg($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return largest_neg(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, -4, -6)) !== -6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, -8, -9)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, -1)) !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_444_trim_tuple", "language": "php", "prompt": "<?php\n// Write a function to trim each list by k in the given lists.\nfunction trim_tuple($test_list, $K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return trim_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 3, 2, 1, 4), array(3, 4, 9, 2, 1), array(9, 1, 2, 3, 5), array(4, 8, 2, 1, 7)), 2) !== array(array(2), array(9), array(2), array(2))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 3, 2, 1, 4), array(3, 4, 9, 2, 1), array(9, 1, 2, 3, 5), array(4, 8, 2, 1, 7)), 1) !== array(array(3, 2, 1), array(4, 9, 2), array(1, 2, 3), array(8, 2, 1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 4, 9), array(11, 8, 12, 4), array(4, 1, 7, 8), array(3, 6, 9, 7)), 1) !== array(array(8, 4), array(8, 12), array(1, 7), array(6, 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_445_index_multiplication", "language": "php", "prompt": "<?php\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunction index_multiplication($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return index_multiplication(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(4, 5), array(2, 9), array(1, 10)), array(array(6, 7), array(3, 9), array(1, 1), array(7, 3))) !== array(array(6, 21), array(12, 45), array(2, 9), array(7, 30))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 4), array(5, 6), array(3, 10), array(2, 11)), array(array(7, 8), array(4, 10), array(2, 2), array(8, 4))) !== array(array(14, 32), array(20, 60), array(6, 20), array(16, 44))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 5), array(6, 7), array(4, 11), array(3, 12)), array(array(8, 9), array(5, 11), array(3, 3), array(9, 5))) !== array(array(24, 45), array(30, 77), array(12, 33), array(27, 60))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_446_count_Occurrence", "language": "php", "prompt": "<?php\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunction count_Occurrence($tup, $lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_Occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\", \"a\", \"c\", \"b\", \"d\"), array(\"a\", \"b\")) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 1, 4, 6, 7, 1, 4), array(1, 4, 7)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), array(1, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_447_cube_nums", "language": "php", "prompt": "<?php\n// Write a function to find cubes of individual elements in a list.\nfunction cube_nums($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return cube_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 30)) !== array(1000, 8000, 27000)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 15)) !== array(1728, 3375)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_448_cal_sum", "language": "php", "prompt": "<?php\n// Write a function to calculate the sum of perrin numbers.\nfunction cal_sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return cal_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(9) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 66) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 88) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_450_extract_string", "language": "php", "prompt": "<?php\n// Write a function to extract specified size of strings from a given list of string values.\nfunction extract_string($str, $l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 8) !== array(\"practice\", \"solution\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 6) !== array(\"Python\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"), 9) !== array(\"exercises\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_451_remove_whitespaces", "language": "php", "prompt": "<?php\n// Write a function to remove all whitespaces from the given string.\nfunction remove_whitespaces($text1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_whitespaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\" Google    Flutter \") !== \"GoogleFlutter\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\" Google    Dart \") !== \"GoogleDart\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\" iOS    Swift \") !== \"iOSSwift\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_452_loss_amount", "language": "php", "prompt": "<?php\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunction loss_amount($actual_cost, $sale_amount) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return loss_amount(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1500, 1200) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 200) !== 100) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2000, 5000) !== 3000) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_453_sumofFactors", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of even factors of a number.\nfunction sumofFactors($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sumofFactors(...$args);\n}\n\nfunction test(): void {\n    if (candidate(18) !== 26) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 48) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_454_text_match_wordz", "language": "php", "prompt": "<?php\n// Write a function that matches a word containing 'z'.\nfunction text_match_wordz($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_match_wordz(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"pythonz.\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyz.\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"  lang  .\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "php", "prompt": "<?php\n// Write a function to check whether the given month number contains 31 days or not.\nfunction check_monthnumb_number($monthnum2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_monthnumb_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_456_reverse_string_list", "language": "php", "prompt": "<?php\n// Write a function to reverse each string in a given list of string values.\nfunction reverse_string_list($stringlist) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return reverse_string_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Red\", \"Green\", \"Blue\", \"White\", \"Black\")) !== array(\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"john\", \"amal\", \"joel\", \"george\")) !== array(\"nhoj\", \"lama\", \"leoj\", \"egroeg\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"jack\", \"john\", \"mary\")) !== array(\"kcaj\", \"nhoj\", \"yram\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_457_Find_Min", "language": "php", "prompt": "<?php\n// Write a python function to find the sublist having minimum length.\nfunction Find_Min($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Find_Min(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1), array(1, 2), array(1, 2, 3))) !== array(1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1), array(1, 1, 1), array(1, 2, 7, 8))) !== array(1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"x\"), array(\"x\", \"y\"), array(\"x\", \"y\", \"z\"))) !== array(\"x\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_458_rectangle_area", "language": "php", "prompt": "<?php\n// Write a function to find the area of a rectangle.\nfunction rectangle_area($l, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return rectangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 20) !== 200) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 5) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_459_remove_uppercase", "language": "php", "prompt": "<?php\n// Write a function to remove uppercase substrings from a given string.\nfunction remove_uppercase($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_uppercase(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"cAstyoUrFavoRitETVshoWs\") !== \"cstyoravoitshos\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"wAtchTheinTernEtrAdIo\") !== \"wtchheinerntrdo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"VoicESeaRchAndreComMendaTionS\") !== \"oiceachndreomendaion\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_460_Extract", "language": "php", "prompt": "<?php\n// Write a python function to get the first element of each sublist.\nfunction Extract($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Extract(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2), array(3, 4, 5), array(6, 7, 8, 9))) !== array(1, 3, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5))) !== array(1, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(9, 8, 1), array(1, 2))) !== array(9, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_461_upper_ctr", "language": "php", "prompt": "<?php\n// Write a python function to count the upper case characters in a given string.\nfunction upper_ctr($str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return upper_ctr(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"PYthon\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"BigData\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"program\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_462_combinations_list", "language": "php", "prompt": "<?php\n// Write a function to find all possible combinations of the elements of a given list.\nfunction combinations_list($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return combinations_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"orange\", \"red\", \"green\", \"blue\")) !== array(array(), array(\"orange\"), array(\"red\"), array(\"red\", \"orange\"), array(\"green\"), array(\"green\", \"orange\"), array(\"green\", \"red\"), array(\"green\", \"red\", \"orange\"), array(\"blue\"), array(\"blue\", \"orange\"), array(\"blue\", \"red\"), array(\"blue\", \"red\", \"orange\"), array(\"blue\", \"green\"), array(\"blue\", \"green\", \"orange\"), array(\"blue\", \"green\", \"red\"), array(\"blue\", \"green\", \"red\", \"orange\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\")) !== array(array(), array(\"red\"), array(\"green\"), array(\"green\", \"red\"), array(\"blue\"), array(\"blue\", \"red\"), array(\"blue\", \"green\"), array(\"blue\", \"green\", \"red\"), array(\"white\"), array(\"white\", \"red\"), array(\"white\", \"green\"), array(\"white\", \"green\", \"red\"), array(\"white\", \"blue\"), array(\"white\", \"blue\", \"red\"), array(\"white\", \"blue\", \"green\"), array(\"white\", \"blue\", \"green\", \"red\"), array(\"black\"), array(\"black\", \"red\"), array(\"black\", \"green\"), array(\"black\", \"green\", \"red\"), array(\"black\", \"blue\"), array(\"black\", \"blue\", \"red\"), array(\"black\", \"blue\", \"green\"), array(\"black\", \"blue\", \"green\", \"red\"), array(\"black\", \"white\"), array(\"black\", \"white\", \"red\"), array(\"black\", \"white\", \"green\"), array(\"black\", \"white\", \"green\", \"red\"), array(\"black\", \"white\", \"blue\"), array(\"black\", \"white\", \"blue\", \"red\"), array(\"black\", \"white\", \"blue\", \"green\"), array(\"black\", \"white\", \"blue\", \"green\", \"red\"), array(\"orange\"), array(\"orange\", \"red\"), array(\"orange\", \"green\"), array(\"orange\", \"green\", \"red\"), array(\"orange\", \"blue\"), array(\"orange\", \"blue\", \"red\"), array(\"orange\", \"blue\", \"green\"), array(\"orange\", \"blue\", \"green\", \"red\"), array(\"orange\", \"white\"), array(\"orange\", \"white\", \"red\"), array(\"orange\", \"white\", \"green\"), array(\"orange\", \"white\", \"green\", \"red\"), array(\"orange\", \"white\", \"blue\"), array(\"orange\", \"white\", \"blue\", \"red\"), array(\"orange\", \"white\", \"blue\", \"green\"), array(\"orange\", \"white\", \"blue\", \"green\", \"red\"), array(\"orange\", \"black\"), array(\"orange\", \"black\", \"red\"), array(\"orange\", \"black\", \"green\"), array(\"orange\", \"black\", \"green\", \"red\"), array(\"orange\", \"black\", \"blue\"), array(\"orange\", \"black\", \"blue\", \"red\"), array(\"orange\", \"black\", \"blue\", \"green\"), array(\"orange\", \"black\", \"blue\", \"green\", \"red\"), array(\"orange\", \"black\", \"white\"), array(\"orange\", \"black\", \"white\", \"red\"), array(\"orange\", \"black\", \"white\", \"green\"), array(\"orange\", \"black\", \"white\", \"green\", \"red\"), array(\"orange\", \"black\", \"white\", \"blue\"), array(\"orange\", \"black\", \"white\", \"blue\", \"red\"), array(\"orange\", \"black\", \"white\", \"blue\", \"green\"), array(\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"green\", \"black\", \"orange\")) !== array(array(), array(\"red\"), array(\"green\"), array(\"green\", \"red\"), array(\"black\"), array(\"black\", \"red\"), array(\"black\", \"green\"), array(\"black\", \"green\", \"red\"), array(\"orange\"), array(\"orange\", \"red\"), array(\"orange\", \"green\"), array(\"orange\", \"green\", \"red\"), array(\"orange\", \"black\"), array(\"orange\", \"black\", \"red\"), array(\"orange\", \"black\", \"green\"), array(\"orange\", \"black\", \"green\", \"red\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_463_max_subarray_product", "language": "php", "prompt": "<?php\n// Write a function to find the maximum product subarray of the given array.\nfunction max_subarray_product($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_subarray_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, -2, -3, 0, 7, -8, -2)) !== 112) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, -3, -10, 0, 2)) !== 180) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -40, 0, -2, -3)) !== 80) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_464_check_value", "language": "php", "prompt": "<?php\n// Write a function to check if all values are same in a dictionary.\nfunction check_value($dict, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_value(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 12) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Cierra Vega\" => 12, \"Alden Cantrell\" => 12, \"Kierra Gentry\" => 12, \"Pierre Cox\" => 12), 5) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_465_drop_empty", "language": "php", "prompt": "<?php\n// Write a function to drop empty items from a given dictionary.\nfunction drop_empty($dict1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return drop_empty(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"c1\" => \"Red\", \"c2\" => \"Green\", \"c3\" => null)) !== array(\"c1\" => \"Red\", \"c2\" => \"Green\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"c1\" => \"Red\", \"c2\" => null, \"c3\" => null)) !== array(\"c1\" => \"Red\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"c1\" => null, \"c2\" => \"Green\", \"c3\" => null)) !== array(\"c2\" => \"Green\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_468_max_product", "language": "php", "prompt": "<?php\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunction max_product($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 100, 4, 5, 150, 6)) !== 3000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 42, 55, 68, 80)) !== 50265600) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 22, 9, 33, 21, 50, 41, 60)) !== 2460) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_470_add_pairwise", "language": "php", "prompt": "<?php\n// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfunction add_pairwise($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return add_pairwise(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 7, 8, 10)) !== array(6, 12, 15, 18)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 6, 8, 9, 11)) !== array(8, 14, 17, 20)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 7, 9, 10, 12)) !== array(10, 16, 19, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_471_find_remainder", "language": "php", "prompt": "<?php\n// Write a python function to find the product of the array multiplication modulo n.\nfunction find_remainder($arr, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_remainder(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(100, 10, 5, 25, 35, 14), 11) !== 9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1), 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1), 2) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_472_check_Consecutive", "language": "php", "prompt": "<?php\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunction check_Consecutive($l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_Consecutive(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5, 6)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_474_replace_char", "language": "php", "prompt": "<?php\n// Write a function to replace characters in a string.\nfunction replace_char($str1, $ch, $newch) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return replace_char(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"polygon\", \"y\", \"l\") !== \"pollgon\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"character\", \"c\", \"a\") !== \"aharaater\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python\", \"l\", \"a\") !== \"python\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_475_sort_counter", "language": "php", "prompt": "<?php\n// Write a function to sort a dictionary by value.\nfunction sort_counter($dict1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sort_counter(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Math\" => 81, \"Physics\" => 83, \"Chemistry\" => 87)) !== array(array(\"Chemistry\", 87), array(\"Physics\", 83), array(\"Math\", 81))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Math\" => 400, \"Physics\" => 300, \"Chemistry\" => 250)) !== array(array(\"Math\", 400), array(\"Physics\", 300), array(\"Chemistry\", 250))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Math\" => 900, \"Physics\" => 1000, \"Chemistry\" => 1250)) !== array(array(\"Chemistry\", 1250), array(\"Physics\", 1000), array(\"Math\", 900))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_476_big_sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of the largest and smallest value in a given array.\nfunction big_sum($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return big_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 2, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 6)) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_477_is_lower", "language": "php", "prompt": "<?php\n// Write a python function to convert the given string to lower case.\nfunction is_lower($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_lower(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"InValid\") !== \"invalid\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"TruE\") !== \"true\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"SenTenCE\") !== \"sentence\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_478_remove_lowercase", "language": "php", "prompt": "<?php\n// Write a function to remove lowercase substrings from a given string.\nfunction remove_lowercase($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_lowercase(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"PYTHon\") !== \"PYTH\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"FInD\") !== \"FID\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"STRinG\") !== \"STRG\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_479_first_Digit", "language": "php", "prompt": "<?php\n// Write a python function to find the first digit of a given number.\nfunction first_Digit($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return first_Digit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(123) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(456) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_4_heap_queue_largest", "language": "php", "prompt": "<?php\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunction heap_queue_largest($nums, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return heap_queue_largest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 3) !== array(85, 75, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 2) !== array(85, 75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 22, 58), 5) !== array(85, 75, 65, 58, 35)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_554_Split", "language": "php", "prompt": "<?php\n// Write a python function which takes a list of integers and only returns the odd ones.\nfunction Split($list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Split(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6)) !== array(1, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 11, 12, 13)) !== array(11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9, 1)) !== array(7, 9, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_555_difference", "language": "php", "prompt": "<?php\n// Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunction difference($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return difference(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 30) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 210) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 6) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "php", "prompt": "<?php\n// Write a python function to count the number of pairs whose xor value is odd.\nfunction find_Odd_Pair($A, $N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Odd_Pair(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 4, 7, 2, 1), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 2, 8, 1, 0, 5, 11), 7) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_557_toggle_string", "language": "php", "prompt": "<?php\n// Write a function to toggle the case of all characters in a string.\nfunction toggle_string($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return toggle_string(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Python\") !== \"pYTHON\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pangram\") !== \"pANGRAM\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"LIttLE\") !== \"liTTle\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_558_digit_distance_nums", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of the per-digit difference between two integers.\nfunction digit_distance_nums($n1, $n2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return digit_distance_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(23, 56) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123, 256) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "php", "prompt": "<?php\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunction max_sub_array_sum($a, $size) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_sub_array_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-2, -3, 4, -1, -2, 1, 5, -3), 8) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, -4, 5, -2, -3, 2, 6, -4), 8) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-4, -5, 6, -3, -4, 3, 7, -5), 8) !== 10) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_560_union_elements", "language": "php", "prompt": "<?php\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunction union_elements($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return union_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 6), array(5, 7, 4, 10)) !== array(3, 4, 5, 6, 7, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(3, 4, 5, 6)) !== array(1, 2, 3, 4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 12, 13, 14), array(13, 15, 16, 17)) !== array(11, 12, 13, 14, 15, 16, 17)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_562_Find_Max_Length", "language": "php", "prompt": "<?php\n// Write a python function to find the length of the longest sublists.\nfunction Find_Max_Length($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Find_Max_Length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1), array(1, 4), array(5, 6, 7, 8))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0, 1), array(2, 2), array(3, 2, 1))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7), array(22, 23), array(13, 14, 15), array(10, 20, 30, 40, 50))) !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_563_extract_values", "language": "php", "prompt": "<?php\n// Write a function to extract values between quotation marks from a string.\nfunction extract_values($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_values(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") !== array(\"Python\", \"PHP\", \"Java\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") !== array(\"python\", \"program\", \"language\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") !== array(\"red\", \"blue\", \"green\", \"yellow\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_564_count_Pairs", "language": "php", "prompt": "<?php\n// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunction count_Pairs($arr, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_Pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 1), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 1), 4) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5), 5) !== 10) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_565_split", "language": "php", "prompt": "<?php\n// Write a python function to split a string into characters.\nfunction split($word) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return split(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python\") !== array(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Name\") !== array(\"N\", \"a\", \"m\", \"e\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"program\") !== array(\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_566_sum_digits", "language": "php", "prompt": "<?php\n// Write a function to get the sum of the digits of a non-negative integer.\nfunction sum_digits($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(345) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(97) !== 16) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_567_issort_list", "language": "php", "prompt": "<?php\n// Write a function to check whether a specified list is sorted or not.\nfunction issort_list($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return issort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 6, 8, 10, 12, 14, 16, 17)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 6, 8, 10, 12, 14, 20, 17)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 6, 8, 10, 15, 14, 20)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_568_empty_list", "language": "php", "prompt": "<?php\n// Write a function to create a list of N empty dictionaries.\nfunction empty_list($length) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return empty_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== array(array(), array(), array(), array(), array())) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(array(), array(), array(), array(), array(), array())) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(array(), array(), array(), array(), array(), array(), array())) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_569_sort_sublists", "language": "php", "prompt": "<?php\n// Write a function to sort each sublist of strings in a given list of lists.\nfunction sort_sublists($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sort_sublists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"white\", \"black\", \"orange\"))) !== array(array(\"green\", \"orange\"), array(\"black\", \"white\"), array(\"black\", \"orange\", \"white\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"green\", \"orange\"), array(\"black\"), array(\"green\", \"orange\"), array(\"white\"))) !== array(array(\"green\", \"orange\"), array(\"black\"), array(\"green\", \"orange\"), array(\"white\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"a\", \"b\"), array(\"d\", \"c\"), array(\"g\", \"h\"), array(\"f\", \"e\"))) !== array(array(\"a\", \"b\"), array(\"c\", \"d\"), array(\"g\", \"h\"), array(\"e\", \"f\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_56_checks", "language": "php", "prompt": "<?php\n// Write a python function to check if a given number is one less than twice its reverse.\nfunction checks($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return checks(...$args);\n}\n\nfunction test(): void {\n    if (candidate(70) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(23) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(73) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_572_two_unique_nums", "language": "php", "prompt": "<?php\n// Write a python function to remove duplicate numbers from a given number of lists.\nfunction two_unique_nums($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return two_unique_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 2, 3, 4, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 5)) !== array(1, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_573_unique_product", "language": "php", "prompt": "<?php\n// Write a python function to calculate the product of the unique numbers in a given list.\nfunction unique_product($list_data) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return unique_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 20, 30, 40, 20, 50, 60, 40)) !== 720000000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 1)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9, 0, 1, 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "php", "prompt": "<?php\n// Write a function to find the surface area of a cylinder.\nfunction surfacearea_cylinder($r, $h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return surfacearea_cylinder(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10, 5) !== 942.45) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5) !== 226.18800000000002) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 10) !== 351.848) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_576_is_Sub_Array", "language": "php", "prompt": "<?php\n// Write a python function to check whether a list is sublist of another or not.\nfunction is_Sub_Array($A, $B) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_Sub_Array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 5), array(1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1), array(1, 2, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2, 2), array(2, 2, 0)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "php", "prompt": "<?php\n// Write a python function to find the last digit in factorial of a given number.\nfunction last_Digit_Factorial($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return last_Digit_Factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(21) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_578_interleave_lists", "language": "php", "prompt": "<?php\n// Write a function to interleave 3 lists of the same length into a single flat list.\nfunction interleave_lists($list1, $list2, $list3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return interleave_lists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7), array(10, 20, 30, 40, 50, 60, 70), array(100, 200, 300, 400, 500, 600, 700)) !== array(1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20), array(15, 2), array(5, 10)) !== array(10, 15, 5, 20, 2, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 44), array(10, 15), array(20, 5)) !== array(11, 10, 20, 44, 15, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_579_find_dissimilar", "language": "php", "prompt": "<?php\n// Write a function to find the dissimilar elements in the given two tuples.\nfunction find_dissimilar($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_dissimilar(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 6), array(5, 7, 4, 10)) !== array(3, 6, 7, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), array(7, 2, 3, 9)) !== array(1, 4, 7, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(21, 11, 25, 26), array(26, 34, 21, 36)) !== array(34, 36, 11, 25)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_57_find_Max_Num", "language": "php", "prompt": "<?php\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunction find_Max_Num($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Max_Num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 321) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 1)) !== 6541) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 9)) !== 9321) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_580_extract_even", "language": "php", "prompt": "<?php\n// Write a function to remove uneven elements in the nested mixed tuple.\nfunction extract_even($test_tuple) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 5, array(7, 6, array(2, 4)), 6, 8)) !== array(4, array(6, array(2, 4)), 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, array(8, 7, array(4, 8)), 7, 9)) !== array(6, array(8, array(4, 8)))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, array(9, 8, array(4, 6)), 8, 10)) !== array(6, array(8, array(4, 6)), 8, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_581_surface_Area", "language": "php", "prompt": "<?php\n// Write a python function to find the surface area of a square pyramid with a given base edge and height.\nfunction surface_Area($b, $s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return surface_Area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4) !== 33) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 5) !== 56) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2) !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_582_my_dict", "language": "php", "prompt": "<?php\n// Write a function to check if a dictionary is empty\nfunction my_dict($dict1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_582_my_dict.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return my_dict(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array()) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_583_catalan_number", "language": "php", "prompt": "<?php\n// Write a function which returns nth catalan number.\nfunction catalan_number($num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return catalan_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 16796) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 4862) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 429) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_584_find_adverbs", "language": "php", "prompt": "<?php\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunction find_adverbs($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_adverbs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Clearly, he has no excuse for such behavior.\") !== \"0-7: Clearly\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Please handle the situation carefuly\") !== \"28-36: carefuly\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Complete the task quickly\") !== \"18-25: quickly\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_585_expensive_items", "language": "php", "prompt": "<?php\n// Write a function to find the n most expensive items in a given dataset.\nfunction expensive_items($items, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return expensive_items(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"name\" => \"Item-1\", \"price\" => 101.1), array(\"name\" => \"Item-2\", \"price\" => 555.22)), 1) !== array(array(\"name\" => \"Item-2\", \"price\" => 555.22))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"name\" => \"Item-1\", \"price\" => 101.1), array(\"name\" => \"Item-2\", \"price\" => 555.22), array(\"name\" => \"Item-3\", \"price\" => 45.09)), 2) !== array(array(\"name\" => \"Item-2\", \"price\" => 555.22), array(\"name\" => \"Item-1\", \"price\" => 101.1))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"name\" => \"Item-1\", \"price\" => 101.1), array(\"name\" => \"Item-2\", \"price\" => 555.22), array(\"name\" => \"Item-3\", \"price\" => 45.09), array(\"name\" => \"Item-4\", \"price\" => 22.75)), 1) !== array(array(\"name\" => \"Item-2\", \"price\" => 555.22))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_586_split_Arr", "language": "php", "prompt": "<?php\n// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunction split_Arr($l, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return split_Arr(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 10, 5, 6, 52, 36), 2) !== array(5, 6, 52, 36, 12, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4), 1) !== array(2, 3, 4, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 2, 3, 4, 5, 6, 7), 3) !== array(3, 4, 5, 6, 7, 0, 1, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_587_list_tuple", "language": "php", "prompt": "<?php\n// Write a function to convert a list to a tuple.\nfunction list_tuple($listx) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return list_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 10, 7, 4, 15, 3)) !== array(5, 10, 7, 4, 15, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 5, 6, 2, 3, 4, 4, 7)) !== array(2, 4, 5, 6, 2, 3, 4, 4, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(58, 44, 56)) !== array(58, 44, 56)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_588_big_diff", "language": "php", "prompt": "<?php\n// Write a python function to find the difference between largest and smallest value in a given list.\nfunction big_diff($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return big_diff(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 12)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 2, 3)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_589_perfect_squares", "language": "php", "prompt": "<?php\n// Write a function to find perfect squares between two given numbers.\nfunction perfect_squares($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return perfect_squares(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 30) !== array(1, 4, 9, 16, 25)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(50, 100) !== array(64, 81, 100)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 200) !== array(100, 121, 144, 169, 196)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_58_opposite_Signs", "language": "php", "prompt": "<?php\n// Write a python function to check whether the given two integers have opposite sign or not.\nfunction opposite_Signs($x, $y) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return opposite_Signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, -2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-10, -10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_591_swap_List", "language": "php", "prompt": "<?php\n// Write a python function to interchange the first and last elements in a list.\nfunction swap_List($newList) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return swap_List(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(12, 35, 9, 56, 24)) !== array(24, 35, 9, 56, 12)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(3, 2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6)) !== array(6, 5, 4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_592_sum_Of_product", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of the product of consecutive binomial co-efficients.\nfunction sum_Of_product($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_Of_product(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 56) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_593_removezero_ip", "language": "php", "prompt": "<?php\n// Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip($ip) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return removezero_ip(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"216.08.094.196\") !== \"216.8.94.196\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"12.01.024\") !== \"12.1.24\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"216.08.094.0196\") !== \"216.8.94.196\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_594_diff_even_odd", "language": "php", "prompt": "<?php\n// Write a function to find the difference of the first even and first odd number of a given list.\nfunction diff_even_odd($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return diff_even_odd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 4, 1, 6, 8)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 5, 7, 9, 10)) !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_595_min_Swaps", "language": "php", "prompt": "<?php\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunction min_Swaps($str1, $str2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return min_Swaps(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"1101\", \"1110\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"111\", \"000\") !== \"Not Possible\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"111\", \"110\") !== \"Not Possible\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_597_find_kth", "language": "php", "prompt": "<?php\n// Write a function to find kth element from the given two sorted arrays.\nfunction find_kth($arr1, $arr2, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_kth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 3, 6, 7, 9), array(1, 4, 8, 10), 5) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100, 112, 256, 349, 770), array(72, 86, 113, 119, 265, 445, 892), 7) !== 256) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 7, 8, 10), array(2, 5, 9, 11), 6) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_598_armstrong_number", "language": "php", "prompt": "<?php\n// Write a function to check whether the given number is armstrong or not.\nfunction armstrong_number($number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return armstrong_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(153) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(259) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4458) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_599_sum_average", "language": "php", "prompt": "<?php\n// Write a function to find sum and average of first n natural numbers.\nfunction sum_average($number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_average(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== array(55, 5.5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== array(120, 8.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20) !== array(210, 10.5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_59_is_octagonal", "language": "php", "prompt": "<?php\n// Write a function to find the nth octagonal number.\nfunction is_octagonal($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_octagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 65) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 280) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== 645) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_600_is_Even", "language": "php", "prompt": "<?php\n// Write a python function to check whether the given number is even or not.\nfunction is_Even($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_Even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_602_first_repeated_char", "language": "php", "prompt": "<?php\n// Write a python function to find the first repeated character in a given string.\nfunction first_repeated_char($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return first_repeated_char(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abcabc\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abc\") !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123123\") !== \"1\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_603_get_ludic", "language": "php", "prompt": "<?php\n// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfunction get_ludic($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_ludic(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== array(1, 2, 3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(25) !== array(1, 2, 3, 5, 7, 11, 13, 17, 23, 25)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(45) !== array(1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_604_reverse_words", "language": "php", "prompt": "<?php\n// Write a function to reverse words seperated by spaces in a given string.\nfunction reverse_words($s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return reverse_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python program\") !== \"program python\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"java language\") !== \"language java\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"indian man\") !== \"man indian\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_605_prime_num", "language": "php", "prompt": "<?php\n// Write a function to check if the given integer is a prime number.\nfunction prime_num($num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return prime_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(13) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1010) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_606_radian_degree", "language": "php", "prompt": "<?php\n// Write a function to convert degrees to radians.\nfunction radian_degree($degree) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return radian_degree(...$args);\n}\n\nfunction test(): void {\n    if (candidate(90) !== 1.5707963267948966) { throw new Exception(\"Test failed!\"); }\n    if (candidate(60) !== 1.0471975511965976) { throw new Exception(\"Test failed!\"); }\n    if (candidate(120) !== 2.0943951023931953) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_607_find_literals", "language": "php", "prompt": "<?php\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunction find_literals($text, $pattern) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_literals(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\") !== array(\"fox\", 16, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Its been a very crazy procedure right\", \"crazy\") !== array(\"crazy\", 16, 21)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hardest choices required strongest will\", \"will\") !== array(\"will\", 35, 39)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_608_bell_Number", "language": "php", "prompt": "<?php\n// Write a python function to find nth bell number.\nfunction bell_Number($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return bell_Number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 15) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_610_remove_kth_element", "language": "php", "prompt": "<?php\n// Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunction remove_kth_element($list1, $L) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_kth_element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 4, 4, 5, 1), 3) !== array(1, 1, 3, 4, 4, 5, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4), 4) !== array(0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10), 5) !== array(10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_611_max_of_nth", "language": "php", "prompt": "<?php\n// Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunction max_of_nth($test_list, $N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_of_nth(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(5, 6, 7), array(1, 3, 5), array(8, 9, 19)), 2) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6, 7, 8), array(2, 4, 6), array(9, 10, 20)), 1) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 8, 9), array(3, 5, 7), array(10, 11, 21)), 1) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_612_merge", "language": "php", "prompt": "<?php\n// Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nfunction merge($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return merge(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"x\", \"y\"), array(\"a\", \"b\"), array(\"m\", \"n\"))) !== array(array(\"x\", \"a\", \"m\"), array(\"y\", \"b\", \"n\"))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(3, 4), array(5, 6), array(7, 8))) !== array(array(1, 3, 5, 7), array(2, 4, 6, 8))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"x\", \"y\", \"z\"), array(\"a\", \"b\", \"c\"), array(\"m\", \"n\", \"o\"))) !== array(array(\"x\", \"a\", \"m\"), array(\"y\", \"b\", \"n\"), array(\"z\", \"c\", \"o\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_614_cummulative_sum", "language": "php", "prompt": "<?php\n// Write a function to find the cumulative sum of all the values that are present in the given list of lists.\nfunction cummulative_sum($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return cummulative_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(5, 6, 7), array(2, 6))) !== 30) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 4), array(6, 7, 8), array(3, 7))) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 5), array(7, 8, 9), array(4, 8))) !== 44) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_615_average_tuple", "language": "php", "prompt": "<?php\n// Write a function which takes a lists of lists and returns the average value for each sublist as a list.\nfunction average_tuple($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return average_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(10, 10, 10, 12), array(30, 45, 56, 45), array(81, 80, 39, 32), array(1, 2, 3, 4))) !== array(30.5, 34.25, 27.0, 23.25)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, -5), array(30, -15, 56), array(81, -60, -39), array(-10, 2, 3))) !== array(25.5, -18.0, 3.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(100, 100, 100, 120), array(300, 450, 560, 450), array(810, 800, 390, 320), array(10, 20, 30, 40))) !== array(305.0, 342.5, 270.0, 232.5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_616_tuple_modulo", "language": "php", "prompt": "<?php\n// Write a function which takes two tuples of the same length and performs the element wise modulo.\nfunction tuple_modulo($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return tuple_modulo(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 5, 6), array(5, 6, 7, 5)) !== array(0, 4, 5, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 5, 6, 7), array(6, 7, 8, 6)) !== array(5, 5, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 6, 7, 8), array(7, 8, 9, 7)) !== array(5, 6, 7, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_617_min_Jumps", "language": "php", "prompt": "<?php\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunction min_Jumps($steps, $d) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return min_Jumps(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4), 11) !== 3.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4), 0) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 14), 11) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_618_div_list", "language": "php", "prompt": "<?php\n// Write a function to divide two lists element wise.\nfunction div_list($nums1, $nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return div_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 5, 6), array(1, 2, 3)) !== array(4.0, 2.5, 2.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2), array(1, 4)) !== array(3.0, 0.5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(90, 120), array(50, 70)) !== array(1.8, 1.7142857142857142)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_619_move_num", "language": "php", "prompt": "<?php\n// Write a function to move all the numbers to the end of the given string.\nfunction move_num($test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return move_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"I1love143you55three3000thousand\") !== \"Iloveyouthreethousand1143553000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Avengers124Assemble\") !== \"AvengersAssemble124\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Its11our12path13to14see15things16do17things\") !== \"Itsourpathtoseethingsdothings11121314151617\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_61_count_Substrings", "language": "php", "prompt": "<?php\n// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunction count_Substrings($s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_Substrings(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"112112\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"111\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1101112\") !== 12) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_622_get_median", "language": "php", "prompt": "<?php\n// Write a function to find the median of two sorted lists of same size.\nfunction get_median($arr1, $arr2, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_median(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 12, 15, 26, 38), array(2, 13, 17, 30, 45), 5) !== 16.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 9), array(7, 13, 19, 28), 4) !== 8.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 14, 23, 36, 42), array(2, 18, 27, 39, 49, 55), 6) !== 25.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_623_nth_nums", "language": "php", "prompt": "<?php\n// Write a function to compute the n-th power of each number in a list.\nfunction nth_nums($nums, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return nth_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2) !== array(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 30), 3) !== array(1000, 8000, 27000)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 15), 5) !== array(248832, 759375)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_624_is_upper", "language": "php", "prompt": "<?php\n// Write a python function to convert a given string to uppercase.\nfunction is_upper($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_upper(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"person\") !== \"PERSON\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"final\") !== \"FINAL\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Valid\") !== \"VALID\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_625_swap_List", "language": "php", "prompt": "<?php\n// Write a python function to interchange the first and last element in a given list.\nfunction swap_List($newList) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return swap_List(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(3, 2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 4)) !== array(4, 2, 3, 4, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6)) !== array(6, 5, 4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_626_triangle_area", "language": "php", "prompt": "<?php\n// Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfunction triangle_area($r) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return triangle_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(-1) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_627_find_First_Missing", "language": "php", "prompt": "<?php\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunction find_First_Missing($array) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_First_Missing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 1, 2, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 2, 6, 9)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 8, 9)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_628_replace_spaces", "language": "php", "prompt": "<?php\n// Write a function to replace all spaces in the given string with '%20'.\nfunction replace_spaces($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return replace_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"My Name is Dawood\") !== \"My%20Name%20is%20Dawood\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I am a Programmer\") !== \"I%20am%20a%20Programmer\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"I love Coding\") !== \"I%20love%20Coding\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_629_Split", "language": "php", "prompt": "<?php\n// Write a python function to find even numbers from a list of numbers.\nfunction Split($list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Split(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(2, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7, 8, 0, 1)) !== array(4, 6, 8, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 12, 15, 19)) !== array(8, 12)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_62_smallest_num", "language": "php", "prompt": "<?php\n// Write a python function to find smallest number in a list.\nfunction smallest_num($xs) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return smallest_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 20, 1, 45, 99)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(45, 46, 50, 60)) !== 45) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_630_get_coordinates", "language": "php", "prompt": "<?php\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfunction get_coordinates($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_coordinates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 4)) !== array(array(2, 3), array(2, 4), array(2, 5), array(3, 3), array(3, 4), array(3, 5), array(4, 3), array(4, 4), array(4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5)) !== array(array(3, 4), array(3, 5), array(3, 6), array(4, 4), array(4, 5), array(4, 6), array(5, 4), array(5, 5), array(5, 6))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6)) !== array(array(4, 5), array(4, 6), array(4, 7), array(5, 5), array(5, 6), array(5, 7), array(6, 5), array(6, 6), array(6, 7))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_631_replace_spaces", "language": "php", "prompt": "<?php\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunction replace_spaces($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return replace_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jumanji The Jungle\") !== \"Jumanji_The_Jungle\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"The_Avengers\") !== \"The Avengers\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Fast and Furious\") !== \"Fast_and_Furious\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_632_move_zero", "language": "php", "prompt": "<?php\n// Write a python function to move all zeroes to the end of the given list.\nfunction move_zero($num_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return move_zero(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 0, 2, 0, 3, 4)) !== array(1, 2, 3, 4, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 2, 0, 0, 4, 0, 5, 0)) !== array(2, 3, 2, 4, 5, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 0, 1, 1)) !== array(1, 1, 1, 0, 0)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of xor of all pairs of numbers in the given list.\nfunction pair_xor_Sum($arr, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return pair_xor_Sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 9, 7, 6), 4) !== 47) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 5), 3) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3), 2) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_635_heap_sort", "language": "php", "prompt": "<?php\n// Write a function to sort the given list.\nfunction heap_sort($iterable) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return heap_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(25, 35, 22, 85, 14, 65, 75, 25, 58)) !== array(14, 22, 25, 25, 35, 58, 65, 75, 85)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 1, 9, 5)) !== array(1, 5, 7, 9)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_637_noprofit_noloss", "language": "php", "prompt": "<?php\n// Write a function to check whether the given amount has no profit and no loss\nfunction noprofit_noloss($actual_cost, $sale_amount) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return noprofit_noloss(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1500, 1200) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 100) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2000, 5000) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_638_wind_chill", "language": "php", "prompt": "<?php\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunction wind_chill($v, $t) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return wind_chill(...$args);\n}\n\nfunction test(): void {\n    if (candidate(120, 35) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(40, 20) !== 19) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 8) !== 6) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_639_sample_nam", "language": "php", "prompt": "<?php\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunction sample_nam($sample_names) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sample_nam(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\")) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\")) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abcd\", \"Python\", \"abba\", \"aba\")) !== 6) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_63_max_difference", "language": "php", "prompt": "<?php\n// Write a function to find the maximum difference between available pairs in the given tuple list.\nfunction max_difference($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_difference(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(3, 5), array(1, 7), array(10, 3), array(1, 2))) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(4, 6), array(2, 17), array(9, 13), array(11, 12))) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12, 35), array(21, 27), array(13, 23), array(41, 22))) !== 23) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_640_remove_parenthesis", "language": "php", "prompt": "<?php\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunction remove_parenthesis($items) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_parenthesis(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"python (chrome)\")) !== \"python\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"string(.abc)\")) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"alpha(num)\")) !== \"alpha\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_641_is_nonagonal", "language": "php", "prompt": "<?php\n// Write a function to find the nth nonagonal number.\nfunction is_nonagonal($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_nonagonal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 325) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== 750) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== 1089) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "php", "prompt": "<?php\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunction text_match_wordz_middle($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_match_wordz_middle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"pythonzabc.\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"zxyabc.\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"  lang  .\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "php", "prompt": "<?php\n// Write a python function to reverse an array upto a given position.\nfunction reverse_Array_Upto_K($input, $k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return reverse_Array_Upto_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6), 4) !== array(4, 3, 2, 1, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6, 7), 2) !== array(5, 4, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 8, 7, 6, 5), 3) !== array(7, 8, 9, 6, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_64_subject_marks", "language": "php", "prompt": "<?php\n// Write a function to sort a list of tuples using the second value of each tuple.\nfunction subject_marks($subjectmarks) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return subject_marks(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"English\", 88), array(\"Science\", 90), array(\"Maths\", 97), array(\"Social sciences\", 82))) !== array(array(\"Social sciences\", 82), array(\"English\", 88), array(\"Science\", 90), array(\"Maths\", 97))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Telugu\", 49), array(\"Hindhi\", 54), array(\"Social\", 33))) !== array(array(\"Social\", 33), array(\"Telugu\", 49), array(\"Hindhi\", 54))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Physics\", 96), array(\"Chemistry\", 97), array(\"Biology\", 45))) !== array(array(\"Biology\", 45), array(\"Physics\", 96), array(\"Chemistry\", 97))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_65_recursive_list_sum", "language": "php", "prompt": "<?php\n// Write a function to flatten a list and sum all of its elements.\nfunction recursive_list_sum($data_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return recursive_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, array(3, 4), array(5, 6))) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 10, array(15, 14), array(19, 41))) !== 106) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, array(30, 40), array(50, 60))) !== 210) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_66_pos_count", "language": "php", "prompt": "<?php\n// Write a python function to count the number of positive numbers in a list.\nfunction pos_count($list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return pos_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, -2, 3, -4)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 4, 5, -1)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_67_bell_number", "language": "php", "prompt": "<?php\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return bell_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 115975) { throw new Exception(\"Test failed!\"); }\n    if (candidate(56) !== 6775685320645824322581483068371419745979053216268760300) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_68_is_Monotonic", "language": "php", "prompt": "<?php\n// Write a python function to check whether the given array is monotonic or not.\nfunction is_Monotonic($A) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_Monotonic(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(6, 5, 4, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 2, 3)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_69_is_sublist", "language": "php", "prompt": "<?php\n// Write a function to check whether a list contains the given sublist or not.\nfunction is_sublist($l, $s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_sublist(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 4, 3, 5, 7), array(3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 5, 7), array(4, 3)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 5, 7), array(1, 6)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "php", "prompt": "<?php\n// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunction differ_At_One_Bit_Pos($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return differ_At_One_Bit_Pos(...$args);\n}\n\nfunction test(): void {\n    if (candidate(13, 9) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15, 8) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 5) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_70_get_equal", "language": "php", "prompt": "<?php\n// Write a function to find whether all the given lists have equal length or not.\nfunction get_equal($Input) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_equal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(11, 22, 33), array(44, 55, 66))) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6, 7))) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(3, 4))) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_71_comb_sort", "language": "php", "prompt": "<?php\n// Write a function to sort a list of elements.\nfunction comb_sort($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return comb_sort(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 15, 37, 25, 79)) !== array(5, 15, 25, 37, 79)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(41, 32, 15, 19, 22)) !== array(15, 19, 22, 32, 41)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(99, 15, 13, 47)) !== array(13, 15, 47, 99)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "php", "prompt": "<?php\n// Write a function to add a dictionary to the tuple. The output should be a tuple.\nfunction add_dict_to_tuple($test_tup, $test_dict) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return add_dict_to_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 5, 6), array(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3)) !== array(4, 5, 6, array(\"MSAM\" => 1, \"is\" => 2, \"best\" => 3))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4)) !== array(1, 2, 3, array(\"UTS\" => 2, \"is\" => 3, \"Worst\" => 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 9, 10), array(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5)) !== array(8, 9, 10, array(\"POS\" => 3, \"is\" => 4, \"Okay\" => 5))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "php", "prompt": "<?php\n// Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath($cost) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return maxAverageOfPath(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(6, 5, 4), array(7, 3, 9))) !== 5.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 4), array(7, 6, 5), array(8, 4, 10))) !== 6.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 4, 5), array(8, 7, 6), array(9, 5, 11))) !== 7.2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7, 8, 9))) !== 5.8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_722_filter_data", "language": "php", "prompt": "<?php\n// The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfunction filter_data($students, $h, $w) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return filter_data(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66)), 6.0, 70) !== array(\"Cierra Vega\" => array(6.2, 70))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66)), 5.9, 67) !== array(\"Cierra Vega\" => array(6.2, 70), \"Kierra Gentry\" => array(6.0, 68))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66)), 5.7, 64) !== array(\"Cierra Vega\" => array(6.2, 70), \"Alden Cantrell\" => array(5.9, 65), \"Kierra Gentry\" => array(6.0, 68), \"Pierre Cox\" => array(5.8, 66))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_723_count_same_pair", "language": "php", "prompt": "<?php\n// The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nfunction count_same_pair($nums1, $nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_same_pair(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8), array(2, 2, 3, 1, 2, 6, 7, 9)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8), array(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, -6, -9, 11, -12, 14, -5, 17), array(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 1, 2), array(0, 1, 2, 2)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_724_power_base_sum", "language": "php", "prompt": "<?php\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunction power_base_sum($base, $power) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return power_base_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 100) !== 115) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 10) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8, 15) !== 62) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 3) !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_725_extract_quotation", "language": "php", "prompt": "<?php\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation($text1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_quotation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") !== array(\"A53\", \"multi\", \"Processor\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") !== array(\"favorite\", \"apps\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\") !== array(\"4k Ultra HD\", \"HDR 10\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_726_multiply_elements", "language": "php", "prompt": "<?php\n// Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nfunction multiply_elements($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return multiply_elements(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 7, 8, 10)) !== array(5, 35, 56, 80)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 5, 6, 7)) !== array(8, 20, 30, 42)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 13, 14, 9, 15)) !== array(156, 182, 126, 135)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_728_sum_list", "language": "php", "prompt": "<?php\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunction sum_list($lst1, $lst2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 20, 30), array(15, 25, 35)) !== array(25, 45, 65)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(5, 6, 7)) !== array(6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, 20, 30), array(15, 45, 75)) !== array(30, 65, 105)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_72_dif_Square", "language": "php", "prompt": "<?php\n// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfunction dif_Square($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return dif_Square(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "php", "prompt": "<?php\n// Write a function to remove consecutive duplicates of a given list.\nfunction consecutive_duplicates($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(10, 15, 19, 18, 17, 26, 17, 18, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(\"a\", \"b\", \"c\", \"d\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\")) !== array(\"a\", \"b\", \"c\", \"d\", \"a\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "php", "prompt": "<?php\n// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfunction lateralsurface_cone($r, $h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return lateralsurface_cone(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5, 12) !== 204.20352248333654) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 15) !== 566.3586699569488) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 17) !== 1521.8090132193388) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_732_replace_specialchar", "language": "php", "prompt": "<?php\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunction replace_specialchar($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return replace_specialchar(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Python language, Programming language.\") !== \"Python:language::Programming:language:\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c,d e f\") !== \"a:b:c:d:e:f\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ram reshma,ram rahim\") !== \"ram:reshma:ram:rahim\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_733_find_first_occurrence", "language": "php", "prompt": "<?php\n// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunction find_first_occurrence($A, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_first_occurrence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "php", "prompt": "<?php\n// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfunction sum_Of_Subarray_Prod($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_Of_Subarray_Prod(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== 84) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "php", "prompt": "<?php\n// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunction toggle_middle_bits($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return toggle_middle_bits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(9) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(65) !== 127) { throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== 115) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_736_left_insertion", "language": "php", "prompt": "<?php\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunction left_insertion($a, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return left_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_737_check_str", "language": "php", "prompt": "<?php\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunction check_str($string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_str(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"annie\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dawood\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Else\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_738_geometric_sum", "language": "php", "prompt": "<?php\n// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nfunction geometric_sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return geometric_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7) !== 1.9921875) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 1.9375) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 1.99609375) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_739_find_Index", "language": "php", "prompt": "<?php\n// Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunction find_Index($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Index(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 45) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_740_tuple_to_dict", "language": "php", "prompt": "<?php\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunction tuple_to_dict($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return tuple_to_dict(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 7, 10, 13, 5)) !== array(1 => 5, 7 => 10, 13 => 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6)) !== array(1 => 2, 3 => 4, 5 => 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9, 10, 11, 12)) !== array(7 => 8, 9 => 10, 11 => 12)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_741_all_Characters_Same", "language": "php", "prompt": "<?php\n// Write a python function to check whether all the characters are same or not.\nfunction all_Characters_Same($s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return all_Characters_Same(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaa\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"data\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_742_area_tetrahedron", "language": "php", "prompt": "<?php\n// Write a function to caluclate the area of a tetrahedron.\nfunction area_tetrahedron($side) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return area_tetrahedron(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== 15.588457268119894) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20) !== 692.8203230275509) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 173.20508075688772) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_743_rotate_right", "language": "php", "prompt": "<?php\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfunction rotate_right($list, $m) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return rotate_right(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) !== array(8, 9, 10, 1, 2, 3, 4, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2) !== array(9, 10, 1, 2, 3, 4, 5, 6, 7, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) !== array(6, 7, 8, 9, 10, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_744_check_none", "language": "php", "prompt": "<?php\n// Write a function to check if the given tuple has any none value or not.\nfunction check_none($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_none(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 5, 6, null)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9, 11, 14)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, null)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_745_divisible_by_digits", "language": "php", "prompt": "<?php\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunction divisible_by_digits($startnum, $endnum) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return divisible_by_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 22) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 15) !== array(1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20, 25) !== array(22, 24)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_746_sector_area", "language": "php", "prompt": "<?php\n// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfunction sector_area($r, $a) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sector_area(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4, 45) !== 6.283185307179586) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 45) !== 31.808625617596654) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9, 361) !== null) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_747_lcs_of_three", "language": "php", "prompt": "<?php\n// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunction lcs_of_three($X, $Y, $Z) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return lcs_of_three(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\") !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_748_capital_words_spaces", "language": "php", "prompt": "<?php\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunction capital_words_spaces($str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return capital_words_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Python\") !== \"Python\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"PythonProgrammingExamples\") !== \"Python Programming Examples\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"GetReadyToBeCodingFreak\") !== \"Get Ready To Be Coding Freak\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "php", "prompt": "<?php\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfunction sort_numeric_strings($nums_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sort_numeric_strings(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\")) !== array(-500, -12, 0, 4, 7, 12, 45, 100, 200)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\")) !== array(1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\")) !== array(1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_74_is_samepatterns", "language": "php", "prompt": "<?php\n// Write a function to check whether it follows the sequence given in the patterns array.\nfunction is_samepatterns($colors, $patterns) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_samepatterns(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"red\", \"green\", \"green\"), array(\"a\", \"b\", \"b\")) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"green\", \"greenn\"), array(\"a\", \"b\", \"b\")) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"green\", \"greenn\"), array(\"a\", \"b\")) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_750_add_tuple", "language": "php", "prompt": "<?php\n// Write a function to add the given tuple to the given list.\nfunction add_tuple($test_list, $test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return add_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5, 6, 7), array(9, 10)) !== array(5, 6, 7, 9, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 8), array(10, 11)) !== array(6, 7, 8, 10, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9), array(11, 12)) !== array(7, 8, 9, 11, 12)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_751_check_min_heap", "language": "php", "prompt": "<?php\n// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfunction check_min_heap($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_min_heap(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 4, 5, 10, 15)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 10, 4, 5, 3, 15)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_752_jacobsthal_num", "language": "php", "prompt": "<?php\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunction jacobsthal_num($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return jacobsthal_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13) !== 2731) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_753_min_k", "language": "php", "prompt": "<?php\n// Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nfunction min_k($test_list, $K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return min_k(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Manjeet\", 10), array(\"Akshat\", 4), array(\"Akash\", 2), array(\"Nikhil\", 8)), 2) !== array(array(\"Akash\", 2), array(\"Akshat\", 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Sanjeev\", 11), array(\"Angat\", 5), array(\"Akash\", 3), array(\"Nepin\", 9)), 3) !== array(array(\"Akash\", 3), array(\"Angat\", 5), array(\"Nepin\", 9))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"tanmay\", 14), array(\"Amer\", 11), array(\"Ayesha\", 9), array(\"SKD\", 16)), 1) !== array(array(\"Ayesha\", 9))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_754_extract_index_list", "language": "php", "prompt": "<?php\n// We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nfunction extract_index_list($l1, $l2, $l3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return extract_index_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 3, 4, 5, 6, 7), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array(1, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 4, 5, 6, 7), array(0, 1, 2, 3, 4, 6, 5), array(0, 1, 2, 3, 4, 6, 7)) !== array(1, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 3, 4, 6, 5, 6), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array(1, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 6, 6, 6), array(0, 1, 2, 3, 4, 5, 7), array(0, 1, 2, 3, 4, 5, 7)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_755_second_smallest", "language": "php", "prompt": "<?php\n// Write a function to find the second smallest number in a list.\nfunction second_smallest($numbers) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return second_smallest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, -8, -2, 0, -2)) !== -2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, -0.5, 0, 2, -2, -2)) !== -0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 2)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 2, 2)) !== null) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_756_text_match_zero_one", "language": "php", "prompt": "<?php\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunction text_match_zero_one($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_match_zero_one(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abbbba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dsabbbba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"asbbbba\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abaaa\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "php", "prompt": "<?php\n// Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nfunction count_reverse_pairs($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_reverse_pairs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\")) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"geeks\", \"best\", \"for\", \"skeeg\")) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"makes\", \"best\", \"sekam\", \"for\", \"rof\")) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_759_is_decimal", "language": "php", "prompt": "<?php\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunction is_decimal($num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_decimal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"123.11\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"e666.86\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"3.124587\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1.11\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1.1.11\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_75_find_tuples", "language": "php", "prompt": "<?php\n// Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nfunction find_tuples($test_list, $K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_tuples(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(6, 24, 12), array(7, 9, 6), array(12, 18, 21)), 6) !== array(array(6, 24, 12))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(5, 25, 30), array(4, 2, 3), array(7, 8, 9)), 5) !== array(array(5, 25, 30))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(7, 9, 16), array(8, 16, 4), array(19, 17, 18)), 4) !== array(array(8, 16, 4))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_760_unique_Element", "language": "php", "prompt": "<?php\n// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfunction unique_Element($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return unique_Element(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 1)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "php", "prompt": "<?php\n// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfunction check_monthnumber_number($monthnum3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_monthnumber_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(6) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_763_find_min_diff", "language": "php", "prompt": "<?php\n// Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunction find_min_diff($arr, $n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_min_diff(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 3, 19, 18, 25), 6) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 6), 4) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(30, 5, 20, 9), 4) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_764_number_ctr", "language": "php", "prompt": "<?php\n// Write a python function to count number of digits in a given string.\nfunction number_ctr($str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return number_ctr(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"program2bedone\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"3wonders\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"123\") !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"3wond-1ers2\") !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_765_is_polite", "language": "php", "prompt": "<?php\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunction is_polite($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_polite(...$args);\n}\n\nfunction test(): void {\n    if (candidate(7) !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 13) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_766_pair_wise", "language": "php", "prompt": "<?php\n// Write a function to return a list of all pairs of consecutive items in a given list.\nfunction pair_wise($l1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return pair_wise(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 2, 3, 3, 4, 4, 5)) !== array(array(1, 1), array(1, 2), array(2, 3), array(3, 3), array(3, 4), array(4, 4), array(4, 5))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 5, 7, 9, 10)) !== array(array(1, 5), array(5, 7), array(7, 9), array(9, 10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 9, 7, 10)) !== array(array(5, 1), array(1, 9), array(9, 7), array(7, 10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(array(1, 2), array(2, 3), array(3, 4), array(4, 5), array(5, 6), array(6, 7), array(7, 8), array(8, 9), array(9, 10))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_767_get_pairs_count", "language": "php", "prompt": "<?php\n// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfunction get_pairs_count($arr, $sum) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_pairs_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 1, 1, 1), 2) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 5, 7, -1, 5), 6) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -2, 3), 1) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2, 3), -3) !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_769_Diff", "language": "php", "prompt": "<?php\n// Write a python function to get the difference between two lists.\nfunction Diff($li1, $li2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Diff(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 15, 20, 25, 30, 35, 40), array(25, 40, 35)) !== array(10, 20, 30, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5), array(6, 7, 1)) !== array(2, 3, 4, 5, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(6, 7, 1)) !== array(2, 3, 6, 7)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_770_odd_num_sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of fourth power of first n odd natural numbers.\nfunction odd_num_sum($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return odd_num_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !== 82) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 707) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !== 3108) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_771_check_expression", "language": "php", "prompt": "<?php\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression($exp) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_expression(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"{()}[{}]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"{()}[{}][]({})\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_772_remove_length", "language": "php", "prompt": "<?php\n// Write a function to remove all the words with k length in the given string.\nfunction remove_length($test_str, $K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"The person is most value tet\", 3) !== \"person is most value\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"If you told me about this ok\", 4) !== \"If you me about ok\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Forces of darkeness is come into the play\", 4) !== \"Forces of darkeness is the\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_773_occurance_substring", "language": "php", "prompt": "<?php\n// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfunction occurance_substring($text, $pattern) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return occurance_substring(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python programming, python language\", \"python\") !== array(\"python\", 0, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python programming,programming language\", \"programming\") !== array(\"programming\", 7, 18)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python programming,programming language\", \"language\") !== array(\"language\", 31, 39)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"c++ programming, c++ language\", \"python\") !== null) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_775_odd_position", "language": "php", "prompt": "<?php\n// Write a python function to check whether every odd index contains odd numbers of a given list.\nfunction odd_position($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return odd_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2, 1, 4, 3, 6, 7, 6, 3)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_776_count_vowels", "language": "php", "prompt": "<?php\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunction count_vowels($test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_vowels(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"bestinstareels\") !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"partofthejourneyistheend\") !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"amazonprime\") !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_777_find_sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of non-repeated elements in a given list.\nfunction find_sum($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 1, 1, 4, 5, 6)) !== 21) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 10, 9, 4, 2, 10, 10, 45, 4)) !== 71) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 10, 9, 45, 2, 10, 10, 45, 10)) !== 78) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "php", "prompt": "<?php\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunction pack_consecutive_duplicates($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return pack_consecutive_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)) !== array(array(0, 0), array(1), array(2), array(3), array(4, 4), array(5), array(6, 6, 6), array(7), array(8), array(9), array(4, 4))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)) !== array(array(10, 10), array(15), array(19), array(18, 18), array(17), array(26, 26), array(17), array(18), array(10))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\")) !== array(array(\"a\", \"a\"), array(\"b\"), array(\"c\"), array(\"d\", \"d\"))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_77_is_Diff", "language": "php", "prompt": "<?php\n// Write a python function to find whether a number is divisible by 11.\nfunction is_Diff($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_Diff(...$args);\n}\n\nfunction test(): void {\n    if (candidate(12345) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1212112) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1212) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_780_find_combinations", "language": "php", "prompt": "<?php\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunction find_combinations($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_combinations(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(2, 4), array(6, 7), array(5, 1), array(6, 10))) !== array(array(8, 11), array(7, 5), array(8, 14), array(11, 8), array(12, 17), array(11, 11))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 5), array(7, 8), array(6, 2), array(7, 11))) !== array(array(10, 13), array(9, 7), array(10, 16), array(13, 10), array(14, 19), array(13, 13))) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(4, 6), array(8, 9), array(7, 3), array(8, 12))) !== array(array(12, 15), array(11, 9), array(12, 18), array(15, 12), array(16, 21), array(15, 15))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_781_count_divisors", "language": "php", "prompt": "<?php\n// Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nfunction count_divisors($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_divisors(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(125) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_782_odd_length_sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunction odd_length_sum($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return odd_length_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4)) !== 14) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1, 2)) !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 7)) !== 8) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "php", "prompt": "<?php\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunction rgb_to_hsv($r, $g, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return rgb_to_hsv(...$args);\n}\n\nfunction test(): void {\n    if (candidate(255, 255, 255) !== array(0.0, 0.0, 100.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 215, 0) !== array(120.0, 100.0, 84.31372549019608)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 215, 110) !== array(149.26829268292684, 95.34883720930233, 84.31372549019608)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_784_mul_even_odd", "language": "php", "prompt": "<?php\n// Write a function to find the product of first even and odd number of a given list.\nfunction mul_even_odd($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return mul_even_odd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 7, 4, 1, 6, 8)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 5, 7, 9, 10)) !== 10) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_785_tuple_str_int", "language": "php", "prompt": "<?php\n// Write a function to convert tuple string to integer tuple.\nfunction tuple_str_int($test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return tuple_str_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"(7, 8, 9)\") !== array(7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(1, 2, 3)\") !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(4, 5, 6)\") !== array(4, 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(7, 81, 19)\") !== array(7, 81, 19)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_786_right_insertion", "language": "php", "prompt": "<?php\n// Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion($a, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return right_insertion(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 5), 6) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 3) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5), 7) !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_787_text_match_three", "language": "php", "prompt": "<?php\n// Write a function that matches a string that has an a followed by three 'b'.\nfunction text_match_three($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_match_three(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"ac\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abbbba\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"caacabbbba\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_788_new_tuple", "language": "php", "prompt": "<?php\n// Write a function to create a new tuple from the given string and list.\nfunction new_tuple($test_list, $test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return new_tuple(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"WEB\", \"is\"), \"best\") !== array(\"WEB\", \"is\", \"best\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"We\", \"are\"), \"Developers\") !== array(\"We\", \"are\", \"Developers\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"Part\", \"is\"), \"Wrong\") !== array(\"Part\", \"is\", \"Wrong\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_790_even_position", "language": "php", "prompt": "<?php\n// Write a python function to check whether every even index contains even numbers of a given list.\nfunction even_position($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return even_position(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_791_remove_nested", "language": "php", "prompt": "<?php\n// Write a function to remove tuples from the given tuple.\nfunction remove_nested($test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 5, 7, array(4, 6), 10)) !== array(1, 5, 7, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 6, 8, array(5, 7), 11)) !== array(2, 6, 8, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 7, 9, array(6, 8), 12)) !== array(3, 7, 9, 12)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 7, 9, array(6, 8), array(5, 12), 12)) !== array(3, 7, 9, 12)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_792_count_list", "language": "php", "prompt": "<?php\n// Write a python function to count the number of lists in a given number of lists.\nfunction count_list($input_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 3), array(5, 7), array(9, 11), array(13, 15, 17))) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(2, 3), array(4, 5))) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 0), array(2, 0))) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_793_last", "language": "php", "prompt": "<?php\n// Write a python function to find the last position of an element in a sorted array.\nfunction last($arr, $x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return last(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3), 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, 4), 1) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 3, 2, 3, 6, 8, 9), 3) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_794_text_starta_endb", "language": "php", "prompt": "<?php\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunction text_starta_endb($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return text_starta_endb(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aabbbb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabAbbbc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"accddbbjjj\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_796_return_sum", "language": "php", "prompt": "<?php\n// Write function to find the sum of all items in the given dictionary.\nfunction return_sum($dict) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return return_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"a\" => 100, \"b\" => 200, \"c\" => 300)) !== 600) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 25, \"b\" => 18, \"c\" => 45)) !== 88) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\" => 36, \"b\" => 39, \"c\" => 49)) !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_797_sum_in_range", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of all odd natural numbers within the range l and r.\nfunction sum_in_range($l, $r) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sum_in_range(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 5) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 7) !== 12) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7, 13) !== 40) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_798__sum", "language": "php", "prompt": "<?php\n// Write a python function to find the sum of an array.\nfunction _sum($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return _sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15, 12, 13, 10)) !== 50) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1, 2)) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_799_left_rotate", "language": "php", "prompt": "<?php\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunction left_rotate($n, $d) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return left_rotate(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16, 2) !== 64) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(99, 3) !== 792) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 3) !== 40) { throw new Exception(\"Test failed!\"); }\n    if (candidate(29, 3) !== 232) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_79_word_len", "language": "php", "prompt": "<?php\n// Write a python function to check whether the length of the word is odd or not.\nfunction word_len($s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return word_len(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hadoop\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"great\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"structure\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_800_remove_all_spaces", "language": "php", "prompt": "<?php\n// Write a function to remove all whitespaces from a string.\nfunction remove_all_spaces($text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return remove_all_spaces(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"python  program\") !== \"pythonprogram\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python   programming    language\") !== \"pythonprogramminglanguage\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"python                     program\") !== \"pythonprogram\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"   python                     program\") !== \"pythonprogram\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_801_test_three_equal", "language": "php", "prompt": "<?php\n// Write a python function to count the number of equal numbers from three given integers.\nfunction test_three_equal($x, $y, $z) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return test_three_equal(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1, 1, 1) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1, -2, -3) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1, 2, 2) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_802_count_rotation", "language": "php", "prompt": "<?php\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return count_rotation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3, 2, 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 1, 2, 3)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9, 1, 2, 3)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_803_is_perfect_square", "language": "php", "prompt": "<?php\n// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunction is_perfect_square($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_perfect_square(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(36) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(196) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(125) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(15625) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_804_is_product_even", "language": "php", "prompt": "<?php\n// Write a function to check whether the product of numbers in a list is even or not.\nfunction is_product_even($arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_product_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 1, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_805_max_sum_list", "language": "php", "prompt": "<?php\n// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunction max_sum_list($lists) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_sum_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(10, 11, 12), array(7, 8, 9))) !== array(10, 11, 12)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 2, 1), array(6, 5, 4), array(12, 11, 10))) !== array(12, 11, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(2, 3, 1))) !== array(2, 3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_806_max_run_uppercase", "language": "php", "prompt": "<?php\n// Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase($test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return max_run_uppercase(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"GeMKSForGERksISBESt\") !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"PrECIOusMOVemENTSYT\") !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"GooGLEFluTTER\") !== 4) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_807_first_odd", "language": "php", "prompt": "<?php\n// Write a python function to find the first odd number in a given list of numbers.\nfunction first_odd($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return first_odd(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 9, 1)) !== 9) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_808_check_K", "language": "php", "prompt": "<?php\n// Write a function to check if the given tuples contain the k or not.\nfunction check_K($test_tup, $K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_K(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 4, 5, 6, 8), 6) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6), 7) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 8, 9, 44, 11, 12), 11) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_809_check_smaller", "language": "php", "prompt": "<?php\n// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfunction check_smaller($test_tup1, $test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return check_smaller(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3), array(2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 6), array(3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(11, 12, 13), array(10, 11, 12)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_80_tetrahedral_number", "language": "php", "prompt": "<?php\n// Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return tetrahedral_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 35) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 56) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 84) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_83_get_Char", "language": "php", "prompt": "<?php\n// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunction get_Char($strr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return get_Char(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"abc\") !== \"f\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gfg\") !== \"t\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"c\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_84_sequence", "language": "php", "prompt": "<?php\n// Write a function to find the nth number in the newman conway sequence.\nfunction sequence($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return sequence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "php", "prompt": "<?php\n// Write a function to find nth centered hexagonal number.\nfunction centered_hexagonal_number($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return centered_hexagonal_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(10) !== 271) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 217) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "php", "prompt": "<?php\n// Write a function to merge three dictionaries into a single dictionary.\nfunction merge_dictionaries_three($dict1, $dict2, $dict3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return merge_dictionaries_three(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), array(\"G\" => \"Green\", \"W\" => \"White\"), array(\"O\" => \"Orange\", \"W\" => \"White\", \"B\" => \"Black\")) !== array(\"B\" => \"Black\", \"R\" => \"Red\", \"P\" => \"Pink\", \"G\" => \"Green\", \"W\" => \"White\", \"O\" => \"Orange\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), array(\"G\" => \"Green\", \"W\" => \"White\"), array(\"L\" => \"lavender\", \"B\" => \"Blue\")) !== array(\"W\" => \"White\", \"P\" => \"Pink\", \"B\" => \"Black\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"R\" => \"Red\", \"B\" => \"Black\", \"P\" => \"Pink\"), array(\"L\" => \"lavender\", \"B\" => \"Blue\"), array(\"G\" => \"Green\", \"W\" => \"White\")) !== array(\"B\" => \"Black\", \"P\" => \"Pink\", \"R\" => \"Red\", \"G\" => \"Green\", \"L\" => \"lavender\", \"W\" => \"White\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_88_freq_count", "language": "php", "prompt": "<?php\n// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfunction freq_count($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return freq_count(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30)) !== array(10 => 4, 20 => 4, 40 => 2, 50 => 2, 30 => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4)) !== array(1 => 3, 2 => 2, 3 => 3, 4 => 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5)) !== array(10 => 1, 5 => 3, 6 => 2, 7 => 2, 4 => 2, 9 => 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_89_closest_num", "language": "php", "prompt": "<?php\n// Write a function to find the closest smaller number than n.\nfunction closest_num($N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return closest_num(...$args);\n}\n\nfunction test(): void {\n    if (candidate(11) !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 11) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_8_square_nums", "language": "php", "prompt": "<?php\n// Write a function to find squares of individual elements in a list.\nfunction square_nums($nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return square_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) !== array(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(10, 20, 30)) !== array(100, 400, 900)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 15)) !== array(144, 225)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_90_len_log", "language": "php", "prompt": "<?php\n// Write a python function to find the length of the longest word.\nfunction len_log($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return len_log(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"python\", \"PHP\", \"bigdata\")) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"a\", \"ab\", \"abc\")) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"small\", \"big\", \"tall\")) !== 5) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_91_find_substring", "language": "php", "prompt": "<?php\n// Write a function to check if a string is present as a substring in a given list of string values.\nfunction find_substring($str1, $sub_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_substring(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"ack\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"abc\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"red\", \"black\", \"white\", \"green\", \"orange\"), \"ange\") !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_92_is_undulating", "language": "php", "prompt": "<?php\n// Write a function to check whether the given number is undulating or not.\nfunction is_undulating($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return is_undulating(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1212121) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1991) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(121) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_93_power", "language": "php", "prompt": "<?php\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunction power($a, $b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 4) !== 81) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 3) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5, 5) !== 3125) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_94_index_minimum", "language": "php", "prompt": "<?php\n// Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfunction index_minimum($test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return index_minimum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(\"Rash\", 143), array(\"Manjeet\", 200), array(\"Varsha\", 100))) !== \"Varsha\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Yash\", 185), array(\"Dawood\", 125), array(\"Sanya\", 175))) !== \"Dawood\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(\"Sai\", 345), array(\"Salman\", 145), array(\"Ayesha\", 96))) !== \"Ayesha\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_95_Find_Min_Length", "language": "php", "prompt": "<?php\n// Write a python function to find the length of the smallest list in a list of lists.\nfunction Find_Min_Length($lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return Find_Min_Length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1), array(1, 2))) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2), array(1, 2, 3), array(1, 2, 3, 4))) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(3, 3, 3), array(4, 4, 4, 4))) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_96_divisor", "language": "php", "prompt": "<?php\n// Write a python function to find the number of divisors of a given integer.\nfunction divisor($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return divisor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_97_frequency_lists", "language": "php", "prompt": "<?php\n// Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nfunction frequency_lists($list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return frequency_lists(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 2), array(4, 5, 6, 2), array(7, 8, 9, 5))) !== array(1 => 1, 2 => 3, 3 => 1, 4 => 1, 5 => 2, 6 => 1, 7 => 1, 8 => 1, 9 => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12))) !== array(1 => 1, 2 => 1, 3 => 1, 4 => 1, 5 => 1, 6 => 1, 7 => 1, 8 => 1, 9 => 1, 10 => 1, 11 => 1, 12 => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(20, 30, 40, 17), array(18, 16, 14, 13), array(10, 20, 30, 40))) !== array(20 => 2, 30 => 2, 40 => 2, 17 => 1, 18 => 1, 16 => 1, 14 => 1, 13 => 1, 10 => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_99_decimal_to_binary", "language": "php", "prompt": "<?php\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary($n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return decimal_to_binary(...$args);\n}\n\nfunction test(): void {\n    if (candidate(8) !== \"1000\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(18) !== \"10010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== \"111\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
{"name": "mbpp_9_find_Rotations", "language": "php", "prompt": "<?php\n// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunction find_Rotations($str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "function candidate(...$args) {\n    return find_Rotations(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"aaaa\") !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abc\") !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();", "stop_tokens": ["\nfunction", "\n?>", "\n//", "\n#"]}
