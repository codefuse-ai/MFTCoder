{"name": "mbpp_100_next_smallest_palindrome", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    public static long NextSmallestPalindrome(long num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallestPalindrome((99L)) == (101L));\n    Debug.Assert(NextSmallestPalindrome((1221L)) == (1331L));\n    Debug.Assert(NextSmallestPalindrome((120L)) == (121L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_101_kth_element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the kth element in the given array using 1-based indexing.\n    public static long KthElement(List<long> arr, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(KthElement((new List<long>(new long[]{(long)12L, (long)3L, (long)5L, (long)7L, (long)19L})), (2L)) == (3L));\n    Debug.Assert(KthElement((new List<long>(new long[]{(long)17L, (long)24L, (long)8L, (long)23L})), (3L)) == (8L));\n    Debug.Assert(KthElement((new List<long>(new long[]{(long)16L, (long)21L, (long)25L, (long)36L, (long)4L})), (4L)) == (36L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_102_snake_to_camel", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"python_program\")).Equals((\"PythonProgram\")));\n    Debug.Assert(SnakeToCamel((\"python_language\")).Equals((\"PythonLanguage\")));\n    Debug.Assert(SnakeToCamel((\"programming_language\")).Equals((\"ProgrammingLanguage\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_103_eulerian_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    public static long EulerianNum(long n, long m) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EulerianNum((3L), (1L)) == (4L));\n    Debug.Assert(EulerianNum((4L), (1L)) == (11L));\n    Debug.Assert(EulerianNum((5L), (3L)) == (26L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_104_sort_sublists", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    public static List<List<string>> SortSublists(List<List<string>> input_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"white\", (string)\"black\", (string)\"orange\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"orange\", (string)\"white\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\" red \", (string)\"green\"}), (List<string>)new List<string>(new string[]{(string)\"blue \", (string)\" black\"}), (List<string>)new List<string>(new string[]{(string)\" orange\", (string)\"brown\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\" red \", (string)\"green\"}), (List<string>)new List<string>(new string[]{(string)\" black\", (string)\"blue \"}), (List<string>)new List<string>(new string[]{(string)\" orange\", (string)\"brown\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"zilver\", (string)\"gold\"}), (List<string>)new List<string>(new string[]{(string)\"magnesium\", (string)\"aluminium\"}), (List<string>)new List<string>(new string[]{(string)\"steel\", (string)\"bronze\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"gold\", (string)\"zilver\"}), (List<string>)new List<string>(new string[]{(string)\"aluminium\", (string)\"magnesium\"}), (List<string>)new List<string>(new string[]{(string)\"bronze\", (string)\"steel\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_105_count", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count true booleans in the given list.\n    public static long Count(List<bool> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Count((new List<bool>(new bool[]{(bool)true, (bool)false, (bool)true}))) == (2L));\n    Debug.Assert(Count((new List<bool>(new bool[]{(bool)false, (bool)false}))) == (0L));\n    Debug.Assert(Count((new List<bool>(new bool[]{(bool)true, (bool)true, (bool)true}))) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_106_add_lists", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to append the given list to the given tuples.\n    public static Tuple<long, long, long, long, long> AddLists(List<long> test_list, Tuple<long, long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddLists((new List<long>(new long[]{(long)5L, (long)6L, (long)7L})), (Tuple.Create(9L, 10L))).Equals((Tuple.Create(9L, 10L, 5L, 6L, 7L))));\n    Debug.Assert(AddLists((new List<long>(new long[]{(long)6L, (long)7L, (long)8L})), (Tuple.Create(10L, 11L))).Equals((Tuple.Create(10L, 11L, 6L, 7L, 8L))));\n    Debug.Assert(AddLists((new List<long>(new long[]{(long)7L, (long)8L, (long)9L})), (Tuple.Create(11L, 12L))).Equals((Tuple.Create(11L, 12L, 7L, 8L, 9L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_108_merge_sorted_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to merge three lists into a single sorted list.\n    public static List<long> MergeSortedList(List<long> num1, List<long> num2, List<long> num3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)25L, (long)24L, (long)15L, (long)4L, (long)5L, (long)29L, (long)110L})), (new List<long>(new long[]{(long)19L, (long)20L, (long)11L, (long)56L, (long)25L, (long)233L, (long)154L})), (new List<long>(new long[]{(long)24L, (long)26L, (long)54L, (long)48L}))).Equals((new List<long>(new long[]{(long)4L, (long)5L, (long)11L, (long)15L, (long)19L, (long)20L, (long)24L, (long)24L, (long)25L, (long)25L, (long)26L, (long)29L, (long)48L, (long)54L, (long)56L, (long)110L, (long)154L, (long)233L}))));\n    Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)6L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)7L, (long)11L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)8L, (long)12L}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)5L, (long)6L, (long)7L, (long)7L, (long)8L, (long)8L, (long)9L, (long)11L, (long)12L}))));\n    Debug.Assert(MergeSortedList((new List<long>(new long[]{(long)18L, (long)14L, (long)10L, (long)9L, (long)8L, (long)7L, (long)9L, (long)3L, (long)2L, (long)4L, (long)1L})), (new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)25L, (long)58L})), (new List<long>(new long[]{(long)12L, (long)74L, (long)9L, (long)50L, (long)61L, (long)41L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)7L, (long)8L, (long)9L, (long)9L, (long)9L, (long)10L, (long)12L, (long)14L, (long)14L, (long)18L, (long)22L, (long)25L, (long)25L, (long)35L, (long)41L, (long)50L, (long)58L, (long)61L, (long)65L, (long)74L, (long)75L, (long)85L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_109_odd_Equivalent", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    public static long OddEquivalent(string s, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddEquivalent((\"011001\"), (6L)) == (3L));\n    Debug.Assert(OddEquivalent((\"11011\"), (5L)) == (4L));\n    Debug.Assert(OddEquivalent((\"1010\"), (4L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_113_check_integer", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if a string represents an integer or not.\n    public static bool CheckInteger(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckInteger((\"python\")) == (false));\n    Debug.Assert(CheckInteger((\"1\")) == (true));\n    Debug.Assert(CheckInteger((\"12345\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_115_empty_dit", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether all dictionaries in a list are empty or not.\n    public static bool EmptyDit(object list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EmptyDit((new List<object()}))) == (true));\n    Debug.Assert(EmptyDit((new object())) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_116_tuple_to_int", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a given tuple of positive integers into a single integer.\n    public static long TupleToInt(Tuple<long, long, long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToInt((Tuple.Create(1L, 2L, 3L))) == (123L));\n    Debug.Assert(TupleToInt((Tuple.Create(4L, 5L, 6L))) == (456L));\n    Debug.Assert(TupleToInt((Tuple.Create(5L, 6L, 7L))) == (567L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_117_list_to_float", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    public static List<Tuple<float, float>> ListToFloat(List<Tuple<string, string>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"3\", \"4\"), (Tuple<string, string>)Tuple.Create(\"1\", \"26.45\"), (Tuple<string, string>)Tuple.Create(\"7.32\", \"8\"), (Tuple<string, string>)Tuple.Create(\"4\", \"8\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(3.0f, 4.0f), (Tuple<float, float>)Tuple.Create(1.0f, 26.45f), (Tuple<float, float>)Tuple.Create(7.32f, 8.0f), (Tuple<float, float>)Tuple.Create(4.0f, 8.0f)}))));\n    Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"4\", \"4\"), (Tuple<string, string>)Tuple.Create(\"2\", \"27\"), (Tuple<string, string>)Tuple.Create(\"4.12\", \"9\"), (Tuple<string, string>)Tuple.Create(\"7\", \"11\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(4.0f, 4.0f), (Tuple<float, float>)Tuple.Create(2.0f, 27.0f), (Tuple<float, float>)Tuple.Create(4.12f, 9.0f), (Tuple<float, float>)Tuple.Create(7.0f, 11.0f)}))));\n    Debug.Assert(ListToFloat((new List<Tuple<string, string>>(new Tuple<string, string>[]{(Tuple<string, string>)Tuple.Create(\"6\", \"78\"), (Tuple<string, string>)Tuple.Create(\"5\", \"26.45\"), (Tuple<string, string>)Tuple.Create(\"1.33\", \"4\"), (Tuple<string, string>)Tuple.Create(\"82\", \"13\")}))).Equals((new List<Tuple<float, float>>(new Tuple<float, float>[]{(Tuple<float, float>)Tuple.Create(6.0f, 78.0f), (Tuple<float, float>)Tuple.Create(5.0f, 26.45f), (Tuple<float, float>)Tuple.Create(1.33f, 4.0f), (Tuple<float, float>)Tuple.Create(82.0f, 13.0f)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_118_string_to_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a string to a list of strings split on the space character.\n    public static List<string> StringToList(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToList((\"python programming\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"programming\"}))));\n    Debug.Assert(StringToList((\"lists tuples strings\")).Equals((new List<string>(new string[]{(string)\"lists\", (string)\"tuples\", (string)\"strings\"}))));\n    Debug.Assert(StringToList((\"write a program\")).Equals((new List<string>(new string[]{(string)\"write\", (string)\"a\", (string)\"program\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_119_search", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element that appears only once in a sorted array.\n    public static long Search(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)5L, (long)7L, (long)7L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L}))) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_11_remove_Occ", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to remove first and last occurrence of a given character from the string.\n    public static string RemoveOcc(string s, string ch) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveOcc((\"hello\"), (\"l\")).Equals((\"heo\")));\n    Debug.Assert(RemoveOcc((\"abcda\"), (\"a\")).Equals((\"bcd\")));\n    Debug.Assert(RemoveOcc((\"PHP\"), (\"P\")).Equals((\"H\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_120_max_product_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    public static long MaxProductTuple(List<Tuple<long, long>> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (36L));\n    Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (200L));\n    Debug.Assert(MaxProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (484L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    public static long AmicableNumbersSum(long limit) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AmicableNumbersSum((999L)) == (504L));\n    Debug.Assert(AmicableNumbersSum((9999L)) == (31626L));\n    Debug.Assert(AmicableNumbersSum((99L)) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_125_find_length", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    public static long FindLength(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLength((\"11000010001\")) == (6L));\n    Debug.Assert(FindLength((\"10111\")) == (1L));\n    Debug.Assert(FindLength((\"11011101100101\")) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_126_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    public static long Sum(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sum((10L), (15L)) == (6L));\n    Debug.Assert(Sum((100L), (150L)) == (93L));\n    Debug.Assert(Sum((4L), (6L)) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_127_multiply_int", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to multiply two integers.\n    public static long MultiplyInt(long x, long y) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyInt((10L), (20L)) == (200L));\n    Debug.Assert(MultiplyInt((5L), (10L)) == (50L));\n    Debug.Assert(MultiplyInt((4L), (8L)) == (32L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_128_long_words", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find words that are longer than n characters from a given list of words.\n    public static List<string> LongWords(long n, string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LongWords((3L), (\"python is a programming language\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"programming\", (string)\"language\"}))));\n    Debug.Assert(LongWords((2L), (\"writing a program\")).Equals((new List<string>(new string[]{(string)\"writing\", (string)\"program\"}))));\n    Debug.Assert(LongWords((5L), (\"sorting list\")).Equals((new List<string>(new string[]{(string)\"sorting\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_129_magic_square_test", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate whether the matrix is a magic square.\n    public static bool MagicSquareTest(List<List<long>> my_matrix) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)12L, (long)1L, (long)14L}), (List<long>)new List<long>(new long[]{(long)2L, (long)13L, (long)8L, (long)11L}), (List<long>)new List<long>(new long[]{(long)16L, (long)3L, (long)10L, (long)5L}), (List<long>)new List<long>(new long[]{(long)9L, (long)6L, (long)15L, (long)4L})}))) == (true));\n    Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L, (long)8L})}))) == (true));\n    Debug.Assert(MagicSquareTest((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L, (long)7L})}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_12_sort_matrix", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    public static List<List<long>> SortMatrix(List<List<long>> M) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)5L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)-2L, (long)4L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)-1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))));\n    Debug.Assert(SortMatrix((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)8L, (long)9L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_130_max_occurrences", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    public static long MaxOccurrences(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)2L, (long)6L, (long)5L, (long)1L, (long)6L, (long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)6L, (long)9L, (long)1L, (long)2L}))) == (2L));\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)2L, (long)3L, (long)8L, (long)4L, (long)7L, (long)9L, (long)8L, (long)7L, (long)9L, (long)15L, (long)14L, (long)10L, (long)12L, (long)13L, (long)16L, (long)18L}))) == (8L));\n    Debug.Assert(MaxOccurrences((new List<long>(new long[]{(long)10L, (long)20L, (long)20L, (long)30L, (long)40L, (long)90L, (long)80L, (long)50L, (long)30L, (long)20L, (long)50L, (long)10L}))) == (20L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_131_reverse_vowels", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    public static string ReverseVowels(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseVowels((\"Python\")).Equals((\"Python\")));\n    Debug.Assert(ReverseVowels((\"USA\")).Equals((\"ASU\")));\n    Debug.Assert(ReverseVowels((\"ab\")).Equals((\"ab\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_132_tup_string", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a list to a string.\n    public static string TupString(List<string> tup1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupString((new List<string>(new string[]{(string)\"e\", (string)\"x\", (string)\"e\", (string)\"r\", (string)\"c\", (string)\"i\", (string)\"s\", (string)\"e\", (string)\"s\"}))).Equals((\"exercises\")));\n    Debug.Assert(TupString((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"}))).Equals((\"python\")));\n    Debug.Assert(TupString((new List<string>(new string[]{(string)\"p\", (string)\"r\", (string)\"o\", (string)\"g\", (string)\"r\", (string)\"a\", (string)\"m\"}))).Equals((\"program\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_133_sum_negativenum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    public static long SumNegativenum(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (-32L));\n    Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)10L, (long)15L, (long)-14L, (long)13L, (long)-18L, (long)12L, (long)-20L}))) == (-52L));\n    Debug.Assert(SumNegativenum((new List<long>(new long[]{(long)19L, (long)-65L, (long)57L, (long)39L, (long)152L, (long)-639L, (long)121L, (long)44L, (long)90L, (long)-190L}))) == (-894L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_135_hexagonal_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth hexagonal number.\n    public static long HexagonalNum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexagonalNum((10L)) == (190L));\n    Debug.Assert(HexagonalNum((5L)) == (45L));\n    Debug.Assert(HexagonalNum((7L)) == (91L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    public static bool IsSumOfPowersOfTwo(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSumOfPowersOfTwo((10L)) == (true));\n    Debug.Assert(IsSumOfPowersOfTwo((7L)) == (false));\n    Debug.Assert(IsSumOfPowersOfTwo((14L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_141_pancake_sort", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> PancakeSort(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)15L, (long)79L, (long)25L, (long)38L, (long)69L}))).Equals((new List<long>(new long[]{(long)15L, (long)25L, (long)38L, (long)69L, (long)79L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)98L, (long)12L, (long)54L, (long)36L, (long)85L}))).Equals((new List<long>(new long[]{(long)12L, (long)36L, (long)54L, (long)85L, (long)98L}))));\n    Debug.Assert(PancakeSort((new List<long>(new long[]{(long)41L, (long)42L, (long)32L, (long)12L, (long)23L}))).Equals((new List<long>(new long[]{(long)12L, (long)23L, (long)32L, (long)41L, (long)42L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_142_count_samepair", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    public static long CountSamepair(List<long> list1, List<long> list2, List<long> list3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (3L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (4L));\n    Debug.Assert(CountSamepair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)8L}))) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_143_find_lists", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find number of lists present in the given list.\n    public static long FindLists(List<object> Input) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLists((new List<object>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})}))) == (2L));\n    Debug.Assert(FindLists((new List<object>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))) == (3L));\n    Debug.Assert(FindLists((new List<object>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L}))) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the maximum difference between any two elements in a given array.\n    public static long MaxAbsDiff(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)3L}))) == (4L));\n    Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)9L, (long)3L, (long)2L, (long)5L, (long)1L}))) == (8L));\n    Debug.Assert(MaxAbsDiff((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_14_find_Volume", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the volume of a triangular prism.\n    public static long FindVolume(long l, long b, long h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindVolume((10L), (8L), (6L)) == (240L));\n    Debug.Assert(FindVolume((3L), (2L), (2L)) == (6L));\n    Debug.Assert(FindVolume((1L), (2L), (1L)) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_160_find_solution", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    public static Tuple<long, long> FindSolution(long a, long b, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSolution((2L), (3L), (7L)).Equals((Tuple.Create(2L, 1L))));\n    Debug.Assert(FindSolution((4L), (2L), (7L)).Equals(null));\n    Debug.Assert(FindSolution((1L), (13L), (17L)).Equals((Tuple.Create(4L, 1L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_161_remove_elements", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    public static List<long> RemoveElements(List<long> list1, List<long> list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)10L}))));\n    Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L, (long)9L, (long)10L}))));\n    Debug.Assert(RemoveElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)5L, (long)7L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)8L, (long)9L, (long)10L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_162_sum_series", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    public static long SumSeries(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSeries((6L)) == (12L));\n    Debug.Assert(SumSeries((10L)) == (30L));\n    Debug.Assert(SumSeries((9L)) == (25L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_164_are_equivalent", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to determine if the sum of the divisors of two integers are the same.\n    public static bool AreEquivalent(long num1, long num2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AreEquivalent((36L), (57L)) == (false));\n    Debug.Assert(AreEquivalent((2L), (4L)) == (false));\n    Debug.Assert(AreEquivalent((23L), (47L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_165_count_char_position", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    public static long CountCharPosition(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountCharPosition((\"xbcefg\")) == (2L));\n    Debug.Assert(CountCharPosition((\"ABcED\")) == (3L));\n    Debug.Assert(CountCharPosition((\"AbgdeF\")) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_166_find_even_pair", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    public static long FindEvenPair(List<long> A) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L}))) == (4L));\n    Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L}))) == (9L));\n    Debug.Assert(FindEvenPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_167_next_power_of_2", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest power of 2 greater than or equal to n.\n    public static long NextPowerOf2(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPowerOf2((0L)) == (1L));\n    Debug.Assert(NextPowerOf2((5L)) == (8L));\n    Debug.Assert(NextPowerOf2((17L)) == (32L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_168_frequency", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    public static long Frequency(List<long> a, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Frequency((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L)) == (0L));\n    Debug.Assert(Frequency((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})), (3L)) == (3L));\n    Debug.Assert(Frequency((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)1L, (long)2L})), (1L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    public static bool TextLowercaseUnderscore(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    Debug.Assert(TextLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    Debug.Assert(TextLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_170_sum_range_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the sum of numbers in a list within a range specified by two indices.\n    public static long SumRangeList(List<long> list1, long m, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (8L), (10L)) == (29L));\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (5L), (7L)) == (16L));\n    Debug.Assert(SumRangeList((new List<long>(new long[]{(long)2L, (long)1L, (long)5L, (long)6L, (long)8L, (long)3L, (long)4L, (long)9L, (long)10L, (long)11L, (long)8L, (long)12L})), (7L), (10L)) == (38L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    public static long PerimeterPentagon(long a) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PerimeterPentagon((5L)) == (25L));\n    Debug.Assert(PerimeterPentagon((10L)) == (50L));\n    Debug.Assert(PerimeterPentagon((15L)) == (75L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_172_count_occurance", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count the number of occurence of the string 'std' in a given string.\n    public static long CountOccurance(string s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurance((\"letstdlenstdporstd\")) == (3L));\n    Debug.Assert(CountOccurance((\"truststdsolensporsd\")) == (1L));\n    Debug.Assert(CountOccurance((\"makestdsostdworthit\")) == (2L));\n    Debug.Assert(CountOccurance((\"stds\")) == (1L));\n    Debug.Assert(CountOccurance((\"\")) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_17_square_perimeter", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns the perimeter of a square given its side length as input.\n    public static long SquarePerimeter(long a) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquarePerimeter((10L)) == (40L));\n    Debug.Assert(SquarePerimeter((5L)) == (20L));\n    Debug.Assert(SquarePerimeter((4L)) == (16L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    public static string RemoveDirtyChars(string str, string second_string) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDirtyChars((\"probasscurve\"), (\"pros\")).Equals((\"bacuve\")));\n    Debug.Assert(RemoveDirtyChars((\"digitalindia\"), (\"talent\")).Equals((\"digiidi\")));\n    Debug.Assert(RemoveDirtyChars((\"exoticmiles\"), (\"toxic\")).Equals((\"emles\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_19_test_duplicate", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether a given array of integers contains any duplicate element.\n    public static bool TestDuplicate(List<long> arraynums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(TestDuplicate((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_20_is_woodall", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given number is woodball or not.\n    public static bool IsWoodall(long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsWoodall((383L)) == (true));\n    Debug.Assert(IsWoodall((254L)) == (false));\n    Debug.Assert(IsWoodall((200L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_222_check_type", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    public static bool CheckType(object test_tuple) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckType(Tuple.Create(5L, 6L, 7L, 3L, 5L, 6L)) == (true));\n    Debug.Assert(CheckType(Tuple.Create(1L, 2L, \"4\")) == (false));\n    Debug.Assert(CheckType(Tuple.Create(3L, 2L, 1L, 4L, 5L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_223_is_majority", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    public static bool IsMajority(List<long> arr, long n, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)3L, (long)10L})), (7L), (3L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)4L, (long)4L, (long)4L, (long)6L, (long)6L})), (8L), (4L)) == (false));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (true));\n    Debug.Assert(IsMajority((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)2L})), (5L), (1L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_224_count_Set_Bits", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    public static long CountSetBits(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSetBits((2L)) == (1L));\n    Debug.Assert(CountSetBits((4L)) == (1L));\n    Debug.Assert(CountSetBits((6L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_226_odd_values_string", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to remove the characters which have odd index values of a given string.\n    public static string OddValuesString(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddValuesString((\"abcdef\")).Equals((\"ace\")));\n    Debug.Assert(OddValuesString((\"python\")).Equals((\"pto\")));\n    Debug.Assert(OddValuesString((\"data\")).Equals((\"dt\")));\n    Debug.Assert(OddValuesString((\"lambs\")).Equals((\"lms\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_227_min_of_three", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find minimum of three numbers.\n    public static long MinOfThree(long a, long b, long c) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinOfThree((10L), (20L), (0L)) == (0L));\n    Debug.Assert(MinOfThree((19L), (15L), (18L)) == (15L));\n    Debug.Assert(MinOfThree((-10L), (-20L), (-30L)) == (-30L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether all the bits are unset in the given range or not.\n    public static bool AllBitsSetInTheGivenRange(long n, long l, long r) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllBitsSetInTheGivenRange((4L), (1L), (2L)) == (true));\n    Debug.Assert(AllBitsSetInTheGivenRange((17L), (2L), (4L)) == (true));\n    Debug.Assert(AllBitsSetInTheGivenRange((39L), (4L), (6L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_229_re_arrange_array", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    public static List<long> ReArrangeArray(List<long> arr, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)-1L, (long)2L, (long)-3L, (long)4L, (long)5L, (long)6L, (long)-7L, (long)8L, (long)9L})), (9L)).Equals((new List<long>(new long[]{(long)-1L, (long)-3L, (long)-7L, (long)4L, (long)5L, (long)6L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)12L, (long)-14L, (long)-26L, (long)13L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)-14L, (long)-26L, (long)12L, (long)13L, (long)15L}))));\n    Debug.Assert(ReArrangeArray((new List<long>(new long[]{(long)10L, (long)24L, (long)36L, (long)-42L, (long)-39L, (long)-78L, (long)85L})), (7L)).Equals((new List<long>(new long[]{(long)-42L, (long)-39L, (long)-78L, (long)10L, (long)24L, (long)36L, (long)85L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_230_replace_blank", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    public static string ReplaceBlank(string str1, string char) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceBlank((\"hello people\"), (\"@\")).Equals((\"hello@people\")));\n    Debug.Assert(ReplaceBlank((\"python program language\"), (\"$\")).Equals((\"python$program$language\")));\n    Debug.Assert(ReplaceBlank((\"blank space\"), (\"-\")).Equals((\"blank-space\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_234_volume_cube", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the volume of a cube given its side length.\n    public static long VolumeCube(long l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(VolumeCube((3L)) == (27L));\n    Debug.Assert(VolumeCube((2L)) == (8L));\n    Debug.Assert(VolumeCube((5L)) == (125L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_237_check_occurences", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    public static Dictionary<Tuple<long, long>,long> CheckOccurences(List<Tuple<long, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(5L, 2L), (Tuple<long, long>)Tuple.Create(6L, 3L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(1L, 3L), 2L}, {Tuple.Create(2L, 5L), 2L}, {Tuple.Create(3L, 6L), 1L}})));\n    Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 2L), (Tuple<long, long>)Tuple.Create(2L, 4L), (Tuple<long, long>)Tuple.Create(3L, 6L), (Tuple<long, long>)Tuple.Create(6L, 3L), (Tuple<long, long>)Tuple.Create(7L, 4L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(2L, 4L), 2L}, {Tuple.Create(3L, 6L), 2L}, {Tuple.Create(4L, 7L), 1L}})));\n    Debug.Assert(CheckOccurences((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(13L, 2L), (Tuple<long, long>)Tuple.Create(11L, 23L), (Tuple<long, long>)Tuple.Create(12L, 25L), (Tuple<long, long>)Tuple.Create(25L, 12L), (Tuple<long, long>)Tuple.Create(16L, 23L)}))).Equals((new Dictionary<Tuple<long, long>,long>(){{Tuple.Create(2L, 13L), 1L}, {Tuple.Create(11L, 23L), 1L}, {Tuple.Create(12L, 25L), 2L}, {Tuple.Create(16L, 23L), 1L}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_238_number_of_substrings", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of non-empty substrings of a given string.\n    public static long NumberOfSubstrings(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumberOfSubstrings((\"abc\")) == (6L));\n    Debug.Assert(NumberOfSubstrings((\"abcd\")) == (10L));\n    Debug.Assert(NumberOfSubstrings((\"abcde\")) == (15L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    public static long GetTotalNumberOfSequences(long m, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetTotalNumberOfSequences((10L), (4L)) == (4L));\n    Debug.Assert(GetTotalNumberOfSequences((5L), (2L)) == (6L));\n    Debug.Assert(GetTotalNumberOfSequences((16L), (3L)) == (84L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_240_replace_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    public static List<object> ReplaceList(List<object> list1, List<object> list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceList((new List<object>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)10L})), (new List<object>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))).Equals((new List<object>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)2L, (long)4L, (long)6L, (long)8L}))));\n    Debug.Assert(ReplaceList((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));\n    Debug.Assert(ReplaceList((new List<object>(new string[]{(string)\"red\", (string)\"blue\", (string)\"green\"})), (new List<object>(new string[]{(string)\"yellow\"}))).Equals((new List<object>(new string[]{(string)\"red\", (string)\"blue\", (string)\"yellow\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_242_count_charac", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count the total number of characters in a string.\n    public static long CountCharac(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountCharac((\"python programming\")) == (18L));\n    Debug.Assert(CountCharac((\"language\")) == (8L));\n    Debug.Assert(CountCharac((\"words\")) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the next perfect square greater than a given number.\n    public static long NextPerfectSquare(long N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextPerfectSquare((35L)) == (36L));\n    Debug.Assert(NextPerfectSquare((6L)) == (9L));\n    Debug.Assert(NextPerfectSquare((9L)) == (16L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_245_max_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    public static long MaxSum(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSum((new List<long>(new long[]{(long)1L, (long)15L, (long)51L, (long)45L, (long)33L, (long)100L, (long)12L, (long)18L, (long)9L}))) == (194L));\n    Debug.Assert(MaxSum((new List<long>(new long[]{(long)80L, (long)60L, (long)30L, (long)40L, (long)20L, (long)10L}))) == (210L));\n    Debug.Assert(MaxSum((new List<long>(new long[]{(long)2L, (long)3L, (long)14L, (long)16L, (long)21L, (long)23L, (long)29L, (long)30L}))) == (138L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_247_lps", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    public static long Lps(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Lps((\"TENS FOR TENS\")) == (5L));\n    Debug.Assert(Lps((\"CARDIO FOR CARDS\")) == (7L));\n    Debug.Assert(Lps((\"PART OF THE JOURNEY IS PART\")) == (9L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_249_intersection_array", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the intersection of two arrays.\n    public static List<long> IntersectionArray(List<long> array_nums1, List<long> array_nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)8L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))).Equals((new List<long>(new long[]{(long)3L, (long)5L, (long)7L, (long)9L}))));\n    Debug.Assert(IntersectionArray((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)8L, (long)9L, (long)10L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<long>(new long[]{(long)10L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_250_count_X", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n    public static long CountX(List<long> tup, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (4L)) == (0L));\n    Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (10L)) == (3L));\n    Debug.Assert(CountX((new List<long>(new long[]{(long)10L, (long)8L, (long)5L, (long)2L, (long)10L, (long)15L, (long)10L, (long)8L, (long)5L, (long)8L, (long)8L, (long)2L})), (8L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_251_insert_element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    public static List<string> InsertElement(List<string> list, string element) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Black\"})), (\"c\")).Equals((new List<string>(new string[]{(string)\"c\", (string)\"Red\", (string)\"c\", (string)\"Green\", (string)\"c\", (string)\"Black\"}))));\n    Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"python\", (string)\"java\"})), (\"program\")).Equals((new List<string>(new string[]{(string)\"program\", (string)\"python\", (string)\"program\", (string)\"java\"}))));\n    Debug.Assert(InsertElement((new List<string>(new string[]{(string)\"happy\", (string)\"sad\"})), (\"laugh\")).Equals((new List<string>(new string[]{(string)\"laugh\", (string)\"happy\", (string)\"laugh\", (string)\"sad\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_252_convert", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to convert complex numbers to polar coordinates.\n    public static Tuple<float, float> Convert(long numbers) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Convert((1L)).Equals((Tuple.Create(1.0f, 0.0f))));\n    Debug.Assert(Convert((4L)).Equals((Tuple.Create(4.0f, 0.0f))));\n    Debug.Assert(Convert((5L)).Equals((Tuple.Create(5.0f, 0.0f))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_255_combinations_colors", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n    public static List<List<string>> CombinationsColors(List<string> l, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (1L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\"})}))));\n    Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (2L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\", (string)\"Blue\"})}))));\n    Debug.Assert(CombinationsColors((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"})), (3L)).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Red\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Red\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Red\", (string)\"Blue\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\", (string)\"Green\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Green\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Green\", (string)\"Blue\", (string)\"Blue\"}), (List<string>)new List<string>(new string[]{(string)\"Blue\", (string)\"Blue\", (string)\"Blue\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_256_count_Primes_nums", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    public static long CountPrimesNums(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPrimesNums((5L)) == (2L));\n    Debug.Assert(CountPrimesNums((10L)) == (4L));\n    Debug.Assert(CountPrimesNums((100L)) == (25L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_257_swap_numbers", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    public static List<long> SwapNumbers(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SwapNumbers((10L), (20L)).Equals((new List<long>(new long[]{(long)20L, (long)10L}))));\n    Debug.Assert(SwapNumbers((15L), (17L)).Equals((new List<long>(new long[]{(long)17L, (long)15L}))));\n    Debug.Assert(SwapNumbers((100L), (200L)).Equals((new List<long>(new long[]{(long)200L, (long)100L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_259_maximize_elements", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to maximize the given two lists.\n    public static List<List<long>> MaximizeElements(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)9L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)7L, (long)10L})}))));\n    Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)5L, (long)10L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)8L, (long)11L})}))));\n    Debug.Assert(MaximizeElements((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)6L, (long)11L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)9L, (long)12L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_260_newman_prime", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    public static long NewmanPrime(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NewmanPrime((3L)) == (7L));\n    Debug.Assert(NewmanPrime((4L)) == (17L));\n    Debug.Assert(NewmanPrime((5L)) == (41L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_261_division_elements", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    public static Tuple<long, long, long, long> DivisionElements(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivisionElements((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(2L, 2L, 2L, 3L))));\n    Debug.Assert(DivisionElements((Tuple.Create(12L, 6L, 8L, 16L)), (Tuple.Create(6L, 3L, 4L, 4L))).Equals((Tuple.Create(2L, 2L, 2L, 4L))));\n    Debug.Assert(DivisionElements((Tuple.Create(20L, 14L, 36L, 18L)), (Tuple.Create(5L, 7L, 6L, 9L))).Equals((Tuple.Create(4L, 2L, 6L, 2L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_262_split_two_parts", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    public static object SplitTwoParts(List<object> list1, long L) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitTwoParts((new List<object>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals(Tuple.Create(new List<long>(new long[]{(long)1L, (long)1L, (long)2L}), new List<long>(new long[]{(long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));\n    Debug.Assert(SplitTwoParts((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (2L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"a\", (string)\"b\"}), new List<string>(new string[]{(string)\"c\", (string)\"d\"}))));\n    Debug.Assert(SplitTwoParts((new List<object>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"})), (4L)).Equals(Tuple.Create(new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\"}), new List<string>(new string[]{(string)\"o\", (string)\"n\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_264_dog_age", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate a dog's age in dog's years.\n    public static long DogAge(long h_age) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DogAge((12L)) == (61L));\n    Debug.Assert(DogAge((15L)) == (73L));\n    Debug.Assert(DogAge((24L)) == (109L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_265_list_split", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    public static List<List<object>> ListSplit(List<object> S, long step) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListSplit((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"e\", (string)\"f\", (string)\"g\", (string)\"h\", (string)\"i\", (string)\"j\", (string)\"k\", (string)\"l\", (string)\"m\", (string)\"n\"})), (3L)).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"d\", (string)\"g\", (string)\"j\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"b\", (string)\"e\", (string)\"h\", (string)\"k\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"f\", (string)\"i\", (string)\"l\"})}))));\n    Debug.Assert(ListSplit((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)11L, (long)12L, (long)13L, (long)14L})), (3L)).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)4L, (long)7L, (long)10L, (long)13L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L, (long)8L, (long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)12L})}))));\n    Debug.Assert(ListSplit((new List<object>(new string[]{(string)\"python\", (string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\", (string)\"SQL\"})), (2L)).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"python\", (string)\"C\", (string)\"DBMS\"}), (List<string>)new List<string>(new string[]{(string)\"java\", (string)\"C++\", (string)\"SQL\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the lateral surface area of a cube given its side length.\n    public static long LateralsurfaceCube(long l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LateralsurfaceCube((5L)) == (100L));\n    Debug.Assert(LateralsurfaceCube((9L)) == (324L));\n    Debug.Assert(LateralsurfaceCube((10L)) == (400L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_267_square_Sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    public static long SquareSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquareSum((2L)) == (10L));\n    Debug.Assert(SquareSum((3L)) == (35L));\n    Debug.Assert(SquareSum((4L)) == (84L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_268_find_star_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the n'th star number.\n    public static long FindStarNum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindStarNum((3L)) == (37L));\n    Debug.Assert(FindStarNum((4L)) == (73L));\n    Debug.Assert(FindStarNum((5L)) == (121L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_269_ascii_value", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the ascii value of a character.\n    public static long AsciiValue(string k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AsciiValue((\"A\")) == (65L));\n    Debug.Assert(AsciiValue((\"R\")) == (82L));\n    Debug.Assert(AsciiValue((\"S\")) == (83L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of even numbers at even positions of a list.\n    public static long SumEvenAndEvenIndex(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)5L, (long)6L, (long)12L, (long)1L, (long)18L, (long)8L}))) == (30L));\n    Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)3L, (long)20L, (long)17L, (long)9L, (long)2L, (long)10L, (long)18L, (long)13L, (long)6L, (long)18L}))) == (26L));\n    Debug.Assert(SumEvenAndEvenIndex((new List<long>(new long[]{(long)5L, (long)6L, (long)12L, (long)1L}))) == (12L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_271_even_Power_Sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    public static long EvenPowerSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenPowerSum((2L)) == (1056L));\n    Debug.Assert(EvenPowerSum((3L)) == (8832L));\n    Debug.Assert(EvenPowerSum((1L)) == (32L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_272_rear_extract", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    public static List<long> RearExtract(List<Tuple<long, string, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Rash\", 21L), (Tuple<long, string, long>)Tuple.Create(2L, \"Varsha\", 20L), (Tuple<long, string, long>)Tuple.Create(3L, \"Kil\", 19L)}))).Equals((new List<long>(new long[]{(long)21L, (long)20L, (long)19L}))));\n    Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Sai\", 36L), (Tuple<long, string, long>)Tuple.Create(2L, \"Ayesha\", 25L), (Tuple<long, string, long>)Tuple.Create(3L, \"Salman\", 45L)}))).Equals((new List<long>(new long[]{(long)36L, (long)25L, (long)45L}))));\n    Debug.Assert(RearExtract((new List<Tuple<long, string, long>>(new Tuple<long, string, long>[]{(Tuple<long, string, long>)Tuple.Create(1L, \"Sudeep\", 14L), (Tuple<long, string, long>)Tuple.Create(2L, \"Vandana\", 36L), (Tuple<long, string, long>)Tuple.Create(3L, \"Dawood\", 56L)}))).Equals((new List<long>(new long[]{(long)14L, (long)36L, (long)56L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_273_substract_elements", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    public static Tuple<long, long, long> SubstractElements(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubstractElements((Tuple.Create(10L, 4L, 5L)), (Tuple.Create(2L, 5L, 18L))).Equals((Tuple.Create(8L, -1L, -13L))));\n    Debug.Assert(SubstractElements((Tuple.Create(11L, 2L, 3L)), (Tuple.Create(24L, 45L, 16L))).Equals((Tuple.Create(-13L, -43L, -13L))));\n    Debug.Assert(SubstractElements((Tuple.Create(7L, 18L, 9L)), (Tuple.Create(10L, 11L, 12L))).Equals((Tuple.Create(-3L, 7L, -3L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    public static long EvenBinomialCoeffSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenBinomialCoeffSum((4L)) == (8L));\n    Debug.Assert(EvenBinomialCoeffSum((6L)) == (32L));\n    Debug.Assert(EvenBinomialCoeffSum((2L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_277_dict_filter", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    public static Dictionary<string,long> DictFilter(Dictionary<string,long> dict, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (170L)).Equals((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Pierre Cox\", 190L}})));\n    Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (180L)).Equals((new Dictionary<string,long>(){{\"Alden Cantrell\", 180L}, {\"Pierre Cox\", 190L}})));\n    Debug.Assert(DictFilter((new Dictionary<string,long>(){{\"Cierra Vega\", 175L}, {\"Alden Cantrell\", 180L}, {\"Kierra Gentry\", 165L}, {\"Pierre Cox\", 190L}}), (190L)).Equals((new Dictionary<string,long>(){{\"Pierre Cox\", 190L}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_279_is_num_decagonal", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth decagonal number.\n    public static long IsNumDecagonal(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNumDecagonal((3L)) == (27L));\n    Debug.Assert(IsNumDecagonal((7L)) == (175L));\n    Debug.Assert(IsNumDecagonal((10L)) == (370L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_280_sequential_search", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    public static Tuple<bool, long> SequentialSearch(List<long> dlist, long item) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)11L, (long)23L, (long)58L, (long)31L, (long)56L, (long)77L, (long)43L, (long)12L, (long)65L, (long)19L})), (31L)).Equals((Tuple.Create(true, 3L))));\n    Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)12L, (long)32L, (long)45L, (long)62L, (long)35L, (long)47L, (long)44L, (long)61L})), (61L)).Equals((Tuple.Create(true, 7L))));\n    Debug.Assert(SequentialSearch((new List<long>(new long[]{(long)9L, (long)10L, (long)17L, (long)19L, (long)22L, (long)39L, (long)48L, (long)56L})), (48L)).Equals((Tuple.Create(true, 6L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_281_all_unique", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check if the elements of a given list are unique or not.\n    public static bool AllUnique(List<long> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(AllUnique((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_282_sub_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to subtract two lists element-wise.\n    public static List<long> SubList(List<long> nums1, List<long> nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)-3L, (long)-3L, (long)-3L}))));\n    Debug.Assert(SubList((new List<long>(new long[]{(long)1L, (long)2L})), (new List<long>(new long[]{(long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)-2L, (long)-2L}))));\n    Debug.Assert(SubList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<long>(new long[]{(long)40L, (long)50L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_283_validate", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    public static bool Validate(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Validate((1234L)) == (true));\n    Debug.Assert(Validate((51241L)) == (false));\n    Debug.Assert(Validate((321L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_284_check_element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    public static bool CheckElement(List<object> list, object element) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckElement((new List<object>(new string[]{(string)\"green\", (string)\"orange\", (string)\"black\", (string)\"white\"})), (object(\"blue\"))) == (false));\n    Debug.Assert(CheckElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (object(7L))) == (false));\n    Debug.Assert(CheckElement((new List<object>(new string[]{(string)\"green\", (string)\"green\", (string)\"green\", (string)\"green\"})), (object(\"green\"))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_285_text_match_two_three", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    public static bool TextMatchTwoThree(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchTwoThree((\"ac\")) == (false));\n    Debug.Assert(TextMatchTwoThree((\"dc\")) == (false));\n    Debug.Assert(TextMatchTwoThree((\"abbbba\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    public static long MaxSubArraySumRepeated(List<long> a, long n, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)10L, (long)20L, (long)-30L, (long)-1L})), (4L), (3L)) == (30L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)10L, (long)20L})), (3L), (2L)) == (59L));\n    Debug.Assert(MaxSubArraySumRepeated((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})), (3L), (3L)) == (-1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_287_square_Sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    public static long SquareSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquareSum((2L)) == (20L));\n    Debug.Assert(SquareSum((3L)) == (56L));\n    Debug.Assert(SquareSum((4L)) == (120L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_290_max_length", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    public static Tuple<long, List<long>> MaxLength(List<List<long>> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)13L, (long)15L, (long)17L})))));\n    Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)10L, (long)12L, (long)14L, (long)15L})}))).Equals((Tuple.Create(4L, new List<long>(new long[]{(long)10L, (long)12L, (long)14L, (long)15L})))));\n    Debug.Assert(MaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)15L, (long)20L, (long)25L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)15L, (long)20L, (long)25L})))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_291_count_no_of_ways", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    public static long CountNoOfWays(long n, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNoOfWays((2L), (4L)) == (16L));\n    Debug.Assert(CountNoOfWays((3L), (2L)) == (6L));\n    Debug.Assert(CountNoOfWays((4L), (4L)) == (228L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_292_find", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    public static long Find(long n, long m) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Find((10L), (3L)) == (3L));\n    Debug.Assert(Find((4L), (2L)) == (2L));\n    Debug.Assert(Find((20L), (5L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_293_otherside_rightangle", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the third side of a right angled triangle.\n    public static float OthersideRightangle(long w, long h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OthersideRightangle((7L), (8L)) == (10.63014581273465f));\n    Debug.Assert(OthersideRightangle((3L), (4L)) == (float)5L);\n    Debug.Assert(OthersideRightangle((7L), (15L)) == (16.55294535724685f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_295_sum_div", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to return the sum of all divisors of a number.\n    public static long SumDiv(long number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumDiv((8L)) == (7L));\n    Debug.Assert(SumDiv((12L)) == (16L));\n    Debug.Assert(SumDiv((7L)) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_296_get_Inv_Count", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count inversions in an array.\n    public static long GetInvCount(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)20L, (long)6L, (long)4L, (long)5L}))) == (5L));\n    Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(GetInvCount((new List<long>(new long[]{(long)1L, (long)2L, (long)5L, (long)6L, (long)1L}))) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_299_max_aggregate", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    public static Tuple<string, long> MaxAggregate(List<Tuple<string, long>> stdata) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 90L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 88L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 7L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 122L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 84L)}))).Equals((Tuple.Create(\"Juan Whelan\", 212L))));\n    Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 50L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 48L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 37L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 22L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 14L)}))).Equals((Tuple.Create(\"Juan Whelan\", 72L))));\n    Debug.Assert(MaxAggregate((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 10L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 20L), (Tuple<string, long>)Tuple.Create(\"Peter Nichols\", 30L), (Tuple<string, long>)Tuple.Create(\"Juan Whelan\", 40L), (Tuple<string, long>)Tuple.Create(\"Sabah Colley\", 50L)}))).Equals((Tuple.Create(\"Sabah Colley\", 70L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_304_find_Element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find element at a given index after number of rotations.\n    public static long FindElement(List<long> arr, List<List<long>> ranges, long rotations, long index) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)2L}), (List<long>)new List<long>(new long[]{(long)0L, (long)3L})})), (2L), (1L)) == (3L));\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (2L)) == (3L));\n    Debug.Assert(FindElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)2L})})), (1L), (1L)) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_305_start_withp", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    public static Tuple<string, string> StartWithp(List<string> words) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python PHP\", (string)\"Java JavaScript\", (string)\"c c++\"}))).Equals((Tuple.Create(\"Python\", \"PHP\"))));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Python Programming\", (string)\"Java Programming\"}))).Equals((Tuple.Create(\"Python\", \"Programming\"))));\n    Debug.Assert(StartWithp((new List<string>(new string[]{(string)\"Pqrst Pqr\", (string)\"qrstuv\"}))).Equals((Tuple.Create(\"Pqrst\", \"Pqr\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    public static long MaxSumIncreasingSubseq(List<long> a, long n, long index, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (4L), (6L)) == (11L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)1L, (long)101L, (long)2L, (long)3L, (long)100L, (long)4L, (long)5L})), (7L), (2L), (5L)) == (7L));\n    Debug.Assert(MaxSumIncreasingSubseq((new List<long>(new long[]{(long)11L, (long)15L, (long)19L, (long)21L, (long)26L, (long)28L, (long)31L})), (7L), (2L), (4L)) == (71L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_308_large_product", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    public static List<long> LargeProduct(List<long> nums1, List<long> nums2, long N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (3L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L}))));\n    Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L, (long)48L}))));\n    Debug.Assert(LargeProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)3L, (long)6L, (long)8L, (long)9L, (long)10L, (long)6L})), (5L)).Equals((new List<long>(new long[]{(long)60L, (long)54L, (long)50L, (long)48L, (long)45L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_309_maximum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the maximum of two numbers.\n    public static long Maximum(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((5L), (10L)) == (10L));\n    Debug.Assert(Maximum((-1L), (-2L)) == (-1L));\n    Debug.Assert(Maximum((9L), (7L)) == (9L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_310_string_to_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a given string to a list of characters.\n    public static List<string> StringToTuple(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToTuple((\"python 3.0\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\", (string)\"3\", (string)\".\", (string)\"0\"}))));\n    Debug.Assert(StringToTuple((\"item1\")).Equals((new List<string>(new string[]{(string)\"i\", (string)\"t\", (string)\"e\", (string)\"m\", (string)\"1\"}))));\n    Debug.Assert(StringToTuple((\"15.10\")).Equals((new List<string>(new string[]{(string)\"1\", (string)\"5\", (string)\".\", (string)\"1\", (string)\"0\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the highest power of 2 that is less than or equal to n.\n    public static long HighestPowerOf2(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HighestPowerOf2((10L)) == (8L));\n    Debug.Assert(HighestPowerOf2((19L)) == (16L));\n    Debug.Assert(HighestPowerOf2((32L)) == (32L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_389_find_lucas", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the n'th lucas number.\n    public static long FindLucas(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLucas((9L)) == (76L));\n    Debug.Assert(FindLucas((4L)) == (7L));\n    Debug.Assert(FindLucas((3L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_390_add_string", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to apply a given format string to all of the elements in a list.\n    public static List<string> AddString(List<object> list_, string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddString((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (\"temp{0}\")).Equals((new List<string>(new string[]{(string)\"temp1\", (string)\"temp2\", (string)\"temp3\", (string)\"temp4\"}))));\n    Debug.Assert(AddString((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"})), (\"python{0}\")).Equals((new List<string>(new string[]{(string)\"pythona\", (string)\"pythonb\", (string)\"pythonc\", (string)\"pythond\"}))));\n    Debug.Assert(AddString((new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})), (\"string{0}\")).Equals((new List<string>(new string[]{(string)\"string5\", (string)\"string6\", (string)\"string7\", (string)\"string8\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert more than one list to nested dictionary.\n    public static List<Dictionary<string,Dictionary<string,long>>> ConvertListDictionary(List<string> l1, List<string> l2, List<long> l3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"S001\", (string)\"S002\", (string)\"S003\", (string)\"S004\"})), (new List<string>(new string[]{(string)\"Adina Park\", (string)\"Leyton Marsh\", (string)\"Duncan Boyle\", (string)\"Saim Richards\"})), (new List<long>(new long[]{(long)85L, (long)98L, (long)89L, (long)92L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S001\", new Dictionary<string,long>(){{\"Adina Park\", 85L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S002\", new Dictionary<string,long>(){{\"Leyton Marsh\", 98L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S003\", new Dictionary<string,long>(){{\"Duncan Boyle\", 89L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"S004\", new Dictionary<string,long>(){{\"Saim Richards\", 92L}}}}}))));\n    Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"abc\", (string)\"def\", (string)\"ghi\", (string)\"jkl\"})), (new List<string>(new string[]{(string)\"python\", (string)\"program\", (string)\"language\", (string)\"programs\"})), (new List<long>(new long[]{(long)100L, (long)200L, (long)300L, (long)400L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"abc\", new Dictionary<string,long>(){{\"python\", 100L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"def\", new Dictionary<string,long>(){{\"program\", 200L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"ghi\", new Dictionary<string,long>(){{\"language\", 300L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"jkl\", new Dictionary<string,long>(){{\"programs\", 400L}}}}}))));\n    Debug.Assert(ConvertListDictionary((new List<string>(new string[]{(string)\"A1\", (string)\"A2\", (string)\"A3\", (string)\"A4\"})), (new List<string>(new string[]{(string)\"java\", (string)\"C\", (string)\"C++\", (string)\"DBMS\"})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L}))).Equals((new List<Dictionary<string,Dictionary<string,long>>>(new Dictionary<string,Dictionary<string,long>>[]{(Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A1\", new Dictionary<string,long>(){{\"java\", 10L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A2\", new Dictionary<string,long>(){{\"C\", 20L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A3\", new Dictionary<string,long>(){{\"C++\", 30L}}}}, (Dictionary<string,Dictionary<string,long>>)new Dictionary<string,Dictionary<string,long>>(){{\"A4\", new Dictionary<string,long>(){{\"DBMS\", 40L}}}}}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_392_get_max_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    public static long GetMaxSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMaxSum((60L)) == (106L));\n    Debug.Assert(GetMaxSum((10L)) == (12L));\n    Debug.Assert(GetMaxSum((2L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_393_max_length_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the list with maximum length.\n    public static Tuple<long, List<long>> MaxLengthList(List<List<long>> input_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))).Equals((Tuple.Create(3L, new List<long>(new long[]{(long)13L, (long)15L, (long)17L})))));\n    Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L})}))).Equals((Tuple.Create(5L, new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))));\n    Debug.Assert(MaxLengthList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)12L})}))).Equals((Tuple.Create(4L, new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L})))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_394_check_distinct", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if given list contains no duplicates.\n    public static bool CheckDistinct(List<long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)1L, (long)4L, (long)5L, (long)6L, (long)1L, (long)4L}))) == (false));\n    Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)1L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(CheckDistinct((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the first non-repeated character in a given string.\n    public static string FirstNonRepeatingCharacter(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstNonRepeatingCharacter((\"abcabc\")).Equals(null));\n    Debug.Assert(FirstNonRepeatingCharacter((\"abc\")).Equals((\"a\")));\n    Debug.Assert(FirstNonRepeatingCharacter((\"ababc\")).Equals((\"c\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_396_check_char", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given string starts and ends with the same character or not.\n    public static string CheckChar(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckChar((\"abba\")).Equals((\"Valid\")));\n    Debug.Assert(CheckChar((\"a\")).Equals((\"Valid\")));\n    Debug.Assert(CheckChar((\"abcd\")).Equals((\"Invalid\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_397_median_numbers", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of three numbers.\n    public static float MedianNumbers(long a, long b, long c) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MedianNumbers((25L), (55L), (65L)) == (55.0f));\n    Debug.Assert(MedianNumbers((20L), (10L), (30L)) == (20.0f));\n    Debug.Assert(MedianNumbers((15L), (45L), (75L)) == (45.0f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_398_sum_of_digits", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to compute the sum of digits of each number of a given list.\n    public static long SumOfDigits(List<object> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfDigits((new List<object>(new long[]{(long)10L, (long)2L, (long)56L}))) == (14L));\n    Debug.Assert(SumOfDigits((new List<object>(new List<long>[]{(List<long>)new List<object>(new object[]{10L, 20L, 4L, 5L, \"b\", 70L, \"a\"})}))) == (19L));\n    Debug.Assert(SumOfDigits((new List<object>(new long[]{(long)10L, (long)20L, (long)-4L, (long)5L, (long)-70L}))) == (19L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_399_bitwise_xor", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    public static Tuple<long, long, long, long> BitwiseXor(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BitwiseXor((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(15L, 6L, 5L, 10L))));\n    Debug.Assert(BitwiseXor((Tuple.Create(11L, 5L, 7L, 10L)), (Tuple.Create(6L, 3L, 4L, 4L))).Equals((Tuple.Create(13L, 6L, 3L, 14L))));\n    Debug.Assert(BitwiseXor((Tuple.Create(12L, 6L, 8L, 11L)), (Tuple.Create(7L, 4L, 5L, 6L))).Equals((Tuple.Create(11L, 2L, 13L, 13L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_3_is_not_prime", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to identify non-prime numbers.\n    public static bool IsNotPrime(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNotPrime((2L)) == (false));\n    Debug.Assert(IsNotPrime((10L)) == (true));\n    Debug.Assert(IsNotPrime((35L)) == (true));\n    Debug.Assert(IsNotPrime((37L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_400_extract_freq", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    public static long ExtractFreq(List<Tuple<long, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long, long>)Tuple.Create(5L, 6L)}))) == (3L));\n    Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 15L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long, long>)Tuple.Create(6L, 7L)}))) == (4L));\n    Debug.Assert(ExtractFreq((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 16L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(6L, 9L)}))) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_401_add_nested_tuples", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to perform index wise addition of list elements in the given two nested lists.\n    public static List<List<long>> AddNestedTuples(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)10L}), (List<long>)new List<long>(new long[]{(long)7L, (long)14L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)8L, (long)13L})}))));\n    Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)9L, (long)12L}), (List<long>)new List<long>(new long[]{(long)9L, (long)16L}), (List<long>)new List<long>(new long[]{(long)5L, (long)12L}), (List<long>)new List<long>(new long[]{(long)10L, (long)15L})}))));\n    Debug.Assert(AddNestedTuples((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)14L}), (List<long>)new List<long>(new long[]{(long)11L, (long)18L}), (List<long>)new List<long>(new long[]{(long)7L, (long)14L}), (List<long>)new List<long>(new long[]{(long)12L, (long)17L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_404_minimum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the minimum of two numbers.\n    public static long Minimum(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minimum((1L), (2L)) == (1L));\n    Debug.Assert(Minimum((-5L), (-4L)) == (-5L));\n    Debug.Assert(Minimum((0L), (0L)) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_406_find_Parity", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find whether the parity of a given number is odd.\n    public static bool FindParity(long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindParity((12L)) == (false));\n    Debug.Assert(FindParity((7L)) == (true));\n    Debug.Assert(FindParity((10L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_407_rearrange_bigger", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    public static object RearrangeBigger(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RearrangeBigger((12L)).Equals((object(21L))));\n    Debug.Assert(RearrangeBigger((10L)).Equals((object(false))));\n    Debug.Assert(RearrangeBigger((102L)).Equals((object(120L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    public static List<List<long>> KSmallestPairs(List<long> nums1, List<long> nums2, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (2L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L})}))));\n    Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))));\n    Debug.Assert(KSmallestPairs((new List<long>(new long[]{(long)1L, (long)3L, (long)7L})), (new List<long>(new long[]{(long)2L, (long)4L, (long)6L})), (7L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)2L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_409_min_product_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the minimum product from the pairs of tuples within a given list.\n    public static long MinProductTuple(List<Tuple<long, long>> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 7L), (Tuple<long, long>)Tuple.Create(2L, 6L), (Tuple<long, long>)Tuple.Create(1L, 8L), (Tuple<long, long>)Tuple.Create(4L, 9L)}))) == (8L));\n    Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 20L), (Tuple<long, long>)Tuple.Create(15L, 2L), (Tuple<long, long>)Tuple.Create(5L, 10L)}))) == (30L));\n    Debug.Assert(MinProductTuple((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(11L, 44L), (Tuple<long, long>)Tuple.Create(10L, 15L), (Tuple<long, long>)Tuple.Create(20L, 5L), (Tuple<long, long>)Tuple.Create(12L, 9L)}))) == (100L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_411_snake_to_camel", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    public static string SnakeToCamel(string word) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SnakeToCamel((\"android_tv\")).Equals((\"AndroidTv\")));\n    Debug.Assert(SnakeToCamel((\"google_pixel\")).Equals((\"GooglePixel\")));\n    Debug.Assert(SnakeToCamel((\"apple_watch\")).Equals((\"AppleWatch\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_412_remove_odd", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to remove odd numbers from a given list.\n    public static List<long> RemoveOdd(List<long> l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(RemoveOdd((new List<long>(new long[]{(long)10L, (long)20L, (long)3L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_413_extract_nth_element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract the nth element from a given list of tuples.\n    public static List<object> ExtractNthElement(List<Tuple<string, long, long>> list1, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (0L)).Equals((new List<object>(new string[]{(string)\"Greyson Fulton\", (string)\"Brady Kent\", (string)\"Wyatt Knott\", (string)\"Beau Turnbull\"}))));\n    Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (2L)).Equals((new List<object>(new long[]{(long)99L, (long)96L, (long)94L, (long)98L}))));\n    Debug.Assert(ExtractNthElement((new List<Tuple<string, long, long>>(new Tuple<string, long, long>[]{(Tuple<string, long, long>)Tuple.Create(\"Greyson Fulton\", 98L, 99L), (Tuple<string, long, long>)Tuple.Create(\"Brady Kent\", 97L, 96L), (Tuple<string, long, long>)Tuple.Create(\"Wyatt Knott\", 91L, 94L), (Tuple<string, long, long>)Tuple.Create(\"Beau Turnbull\", 94L, 98L)})), (1L)).Equals((new List<object>(new long[]{(long)98L, (long)97L, (long)91L, (long)94L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_414_overlapping", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether any value in a sequence exists in a sequence or not.\n    public static bool Overlapping(List<long> list1, List<long> list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))) == (false));\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(Overlapping((new List<long>(new long[]{(long)1L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_415_max_Product", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find a pair with highest product from a given array of integers.\n    public static Tuple<long, long> MaxProduct(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)7L, (long)0L, (long)8L, (long)4L}))).Equals((Tuple.Create(7L, 8L))));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)0L, (long)-1L, (long)-2L, (long)-4L, (long)5L, (long)0L, (long)-6L}))).Equals((Tuple.Create(-4L, -6L))));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((Tuple.Create(2L, 3L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_417_group_tuples", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find common first element in given list of lists.\n    public static List<List<string>> GroupTuples(List<List<string>> Input) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"w\", (string)\"t\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"w\", (string)\"t\"})}))));\n    Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"e\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"e\"})}))));\n    Debug.Assert(GroupTuples((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"h\", (string)\"i\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"f\", (string)\"g\", (string)\"g\"}), (List<string>)new List<string>(new string[]{(string)\"h\", (string)\"i\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_418_Find_Max", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the element of a list having maximum length.\n    public static List<object> FindMax(List<List<object>> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\", (string)\"C\"})}))).Equals((new List<object>(new string[]{(string)\"A\", (string)\"B\", (string)\"C\"}))));\n    Debug.Assert(FindMax((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))).Equals((new List<object>(new long[]{(long)1L, (long)2L, (long)3L}))));\n    Debug.Assert(FindMax((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)5L, (long)6L, (long)1L})}))).Equals((new List<object>(new long[]{(long)1L, (long)5L, (long)6L, (long)1L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_420_cube_Sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the cube sum of first n even natural numbers.\n    public static long CubeSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CubeSum((2L)) == (72L));\n    Debug.Assert(CubeSum((3L)) == (288L));\n    Debug.Assert(CubeSum((4L)) == (800L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_421_concatenate_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    public static string ConcatenateTuple(Tuple<string, string, long, string> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConcatenateTuple((Tuple.Create(\"ID\", \"is\", 4L, \"UTS\"))).Equals((\"ID-is-4-UTS\")));\n    Debug.Assert(ConcatenateTuple((Tuple.Create(\"QWE\", \"is\", 4L, \"RTY\"))).Equals((\"QWE-is-4-RTY\")));\n    Debug.Assert(ConcatenateTuple((Tuple.Create(\"ZEN\", \"is\", 4L, \"OP\"))).Equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the average of cubes of first n natural numbers.\n    public static float FindAverageOfCube(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindAverageOfCube((2L)) == (4.5f));\n    Debug.Assert(FindAverageOfCube((3L)) == (float)12L);\n    Debug.Assert(FindAverageOfCube((1L)) == (float)1L);\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_424_extract_rear", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    public static List<string> ExtractRear(Tuple<string, string, string> test_tuple) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractRear((Tuple.Create(\"Mers\", \"for\", \"Vers\"))).Equals((new List<string>(new string[]{(string)\"s\", (string)\"r\", (string)\"s\"}))));\n    Debug.Assert(ExtractRear((Tuple.Create(\"Avenge\", \"for\", \"People\"))).Equals((new List<string>(new string[]{(string)\"e\", (string)\"r\", (string)\"e\"}))));\n    Debug.Assert(ExtractRear((Tuple.Create(\"Gotta\", \"get\", \"go\"))).Equals((new List<string>(new string[]{(string)\"a\", (string)\"t\", (string)\"o\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_425_count_element_in_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count the number of sublists containing a particular element.\n    public static long CountElementInList(List<List<object>> list1, object x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountElementInList((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)1L, (long)11L}), (List<long>)new List<long>(new long[]{(long)1L, (long)15L, (long)7L})})), (object(1L))) == (3L));\n    Debug.Assert(CountElementInList((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"C\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"D\", (string)\"E\"}), (List<string>)new List<string>(new string[]{(string)\"B\", (string)\"C\", (string)\"D\"})})), (object(\"A\"))) == (3L));\n    Debug.Assert(CountElementInList((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"A\", (string)\"B\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"C\"}), (List<string>)new List<string>(new string[]{(string)\"A\", (string)\"D\", (string)\"E\"}), (List<string>)new List<string>(new string[]{(string)\"B\", (string)\"C\", (string)\"D\"})})), (object(\"E\"))) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to filter odd numbers.\n    public static List<long> FilterOddnumbers(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L}))));\n    Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)10L, (long)20L, (long)45L, (long)67L, (long)84L, (long)93L}))).Equals((new List<long>(new long[]{(long)45L, (long)67L, (long)93L}))));\n    Debug.Assert(FilterOddnumbers((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)8L, (long)6L, (long)4L, (long)3L}))).Equals((new List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)3L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_427_change_date_format", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    public static string ChangeDateFormat(string dt) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ChangeDateFormat((\"2026-01-02\")).Equals((\"02-01-2026\")));\n    Debug.Assert(ChangeDateFormat((\"2020-11-13\")).Equals((\"13-11-2020\")));\n    Debug.Assert(ChangeDateFormat((\"2021-04-26\")).Equals((\"26-04-2021\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_428_shell_sort", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort the given array by using shell sort.\n    public static List<long> ShellSort(List<long> my_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ShellSort((new List<long>(new long[]{(long)12L, (long)23L, (long)4L, (long)5L, (long)3L, (long)2L, (long)12L, (long)81L, (long)56L, (long)95L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)12L, (long)12L, (long)23L, (long)56L, (long)81L, (long)95L}))));\n    Debug.Assert(ShellSort((new List<long>(new long[]{(long)24L, (long)22L, (long)39L, (long)34L, (long)87L, (long)73L, (long)68L}))).Equals((new List<long>(new long[]{(long)22L, (long)24L, (long)34L, (long)39L, (long)68L, (long)73L, (long)87L}))));\n    Debug.Assert(ShellSort((new List<long>(new long[]{(long)32L, (long)30L, (long)16L, (long)96L, (long)82L, (long)83L, (long)74L}))).Equals((new List<long>(new long[]{(long)16L, (long)30L, (long)32L, (long)74L, (long)82L, (long)83L, (long)96L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_429_and_tuples", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    public static Tuple<long, long, long, long> AndTuples(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AndTuples((Tuple.Create(10L, 4L, 6L, 9L)), (Tuple.Create(5L, 2L, 3L, 3L))).Equals((Tuple.Create(0L, 0L, 2L, 1L))));\n    Debug.Assert(AndTuples((Tuple.Create(1L, 2L, 3L, 4L)), (Tuple.Create(5L, 6L, 7L, 8L))).Equals((Tuple.Create(1L, 2L, 3L, 0L))));\n    Debug.Assert(AndTuples((Tuple.Create(8L, 9L, 11L, 12L)), (Tuple.Create(7L, 13L, 14L, 17L))).Equals((Tuple.Create(0L, 9L, 10L, 0L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_430_parabola_directrix", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the directrix of a parabola.\n    public static long ParabolaDirectrix(long a, long b, long c) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParabolaDirectrix((5L), (3L), (2L)) == (-198L));\n    Debug.Assert(ParabolaDirectrix((9L), (8L), (4L)) == (-2336L));\n    Debug.Assert(ParabolaDirectrix((2L), (4L), (6L)) == (-130L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_431_common_element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    public static Nullable<bool> CommonElement(List<object> list1, List<object> list2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CommonElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals(true));\n    Debug.Assert(CommonElement((new List<object>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<object>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L}))).Equals(null));\n    Debug.Assert(CommonElement((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})), (new List<object>(new string[]{(string)\"d\", (string)\"b\", (string)\"e\"}))).Equals(true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_432_median_trapezium", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median length of a trapezium.\n    public static float MedianTrapezium(long base1, long base2, long height) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MedianTrapezium((15L), (25L), (35L)) == (float)20L);\n    Debug.Assert(MedianTrapezium((10L), (20L), (30L)) == (float)15L);\n    Debug.Assert(MedianTrapezium((6L), (9L), (4L)) == (7.5f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_433_check_greater", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the entered number is greater than the elements of the given array.\n    public static bool CheckGreater(List<long> arr, long number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckGreater((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (4L)) == (false));\n    Debug.Assert(CheckGreater((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (8L)) == (true));\n    Debug.Assert(CheckGreater((new List<long>(new long[]{(long)9L, (long)7L, (long)4L, (long)8L, (long)6L, (long)1L})), (11L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_434_text_match_one", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that matches a string that has an a followed by one or more b's.\n    public static bool TextMatchOne(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchOne((\"ac\")) == (false));\n    Debug.Assert(TextMatchOne((\"dc\")) == (false));\n    Debug.Assert(TextMatchOne((\"abba\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_435_last_Digit", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the last digit of a given number.\n    public static long LastDigit(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigit((123L)) == (3L));\n    Debug.Assert(LastDigit((25L)) == (5L));\n    Debug.Assert(LastDigit((30L)) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_436_neg_nos", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to return the negative numbers in a list.\n    public static List<long> NegNos(List<long> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NegNos((new List<long>(new long[]{(long)-1L, (long)4L, (long)5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-6L}))));\n    Debug.Assert(NegNos((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-2L}))));\n    Debug.Assert(NegNos((new List<long>(new long[]{(long)-7L, (long)-6L, (long)8L, (long)9L}))).Equals((new List<long>(new long[]{(long)-7L, (long)-6L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_437_remove_odd", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove odd characters in a string.\n    public static string RemoveOdd(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveOdd((\"python\")).Equals((\"yhn\")));\n    Debug.Assert(RemoveOdd((\"program\")).Equals((\"rga\")));\n    Debug.Assert(RemoveOdd((\"language\")).Equals((\"agae\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_438_count_bidirectional", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count bidirectional tuple pairs.\n    public static long CountBidirectional(List<Tuple<long, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (3L));\n    Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 3L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 1L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (2L));\n    Debug.Assert(CountBidirectional((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(9L, 2L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long, long>)Tuple.Create(2L, 1L)}))) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_439_multiple_to_single", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to join a list of multiple integers into a single integer.\n    public static long MultipleToSingle(List<long> L) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)11L, (long)33L, (long)50L}))) == (113350L));\n    Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (-123456L));\n    Debug.Assert(MultipleToSingle((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L}))) == (10152025L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_440_find_adverb_position", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    public static Tuple<long, long, string> FindAdverbPosition(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindAdverbPosition((\"clearly!! we can see the sky\")).Equals((Tuple.Create(0L, 7L, \"clearly\"))));\n    Debug.Assert(FindAdverbPosition((\"seriously!! there are many roses\")).Equals((Tuple.Create(0L, 9L, \"seriously\"))));\n    Debug.Assert(FindAdverbPosition((\"unfortunately!! sita is going to home\")).Equals((Tuple.Create(0L, 13L, \"unfortunately\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_441_surfacearea_cube", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the surface area of a cube of a given size.\n    public static long SurfaceareaCube(long l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SurfaceareaCube((5L)) == (150L));\n    Debug.Assert(SurfaceareaCube((3L)) == (54L));\n    Debug.Assert(SurfaceareaCube((10L)) == (600L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_442_positive_count", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    public static float PositiveCount(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.54f));\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (0.69f));\n    Debug.Assert(PositiveCount((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L}))) == (0.56f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_443_largest_neg", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the largest negative number from the given list.\n    public static long LargestNeg(List<long> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-4L, (long)-6L}))) == (-6L));\n    Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-8L, (long)-9L}))) == (-9L));\n    Debug.Assert(LargestNeg((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)-1L}))) == (-1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_444_trim_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to trim each list by k in the given lists.\n    public static List<List<long>> TrimTuple(List<List<long>> test_list, long K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)9L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)1L, (long)2L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L, (long)2L, (long)1L, (long)7L})})), (2L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)2L})}))));\n    Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)9L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)9L, (long)1L, (long)2L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L, (long)2L, (long)1L, (long)7L})})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)4L, (long)9L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)8L, (long)2L, (long)1L})}))));\n    Debug.Assert(TrimTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)4L, (long)9L}), (List<long>)new List<long>(new long[]{(long)11L, (long)8L, (long)12L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L, (long)9L, (long)7L})})), (1L)).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)4L}), (List<long>)new List<long>(new long[]{(long)8L, (long)12L}), (List<long>)new List<long>(new long[]{(long)1L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)9L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_445_index_multiplication", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to perform index wise multiplication of list elements in the given two lists.\n    public static List<List<long>> IndexMultiplication(List<List<long>> test_tup1, List<List<long>> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)10L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)3L, (long)9L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)21L}), (List<long>)new List<long>(new long[]{(long)12L, (long)45L}), (List<long>)new List<long>(new long[]{(long)2L, (long)9L}), (List<long>)new List<long>(new long[]{(long)7L, (long)30L})}))));\n    Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)3L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)11L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)4L, (long)10L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)14L, (long)32L}), (List<long>)new List<long>(new long[]{(long)20L, (long)60L}), (List<long>)new List<long>(new long[]{(long)6L, (long)20L}), (List<long>)new List<long>(new long[]{(long)16L, (long)44L})}))));\n    Debug.Assert(IndexMultiplication((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)4L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)12L})})), (new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)5L, (long)11L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L})}))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)24L, (long)45L}), (List<long>)new List<long>(new long[]{(long)30L, (long)77L}), (List<long>)new List<long>(new long[]{(long)12L, (long)33L}), (List<long>)new List<long>(new long[]{(long)27L, (long)60L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_446_count_Occurrence", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the occurence of all elements of list in a tuple.\n    public static long CountOccurrence(object tup, List<object> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountOccurrence(Tuple.Create(\"a\", \"a\", \"c\", \"b\", \"d\"), (new List<object>(new string[]{(string)\"a\", (string)\"b\"}))) == (3L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 1L, 4L, 6L, 7L, 1L, 4L), (new List<object>(new long[]{(long)1L, (long)4L, (long)7L}))) == (6L));\n    Debug.Assert(CountOccurrence(Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L), (new List<object>(new long[]{(long)1L, (long)2L}))) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_447_cube_nums", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find cubes of individual elements in a list.\n    public static List<long> CubeNums(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CubeNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)8L, (long)27L, (long)64L, (long)125L, (long)216L, (long)343L, (long)512L, (long)729L, (long)1000L}))));\n    Debug.Assert(CubeNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L}))).Equals((new List<long>(new long[]{(long)1000L, (long)8000L, (long)27000L}))));\n    Debug.Assert(CubeNums((new List<long>(new long[]{(long)12L, (long)15L}))).Equals((new List<long>(new long[]{(long)1728L, (long)3375L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_448_cal_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the sum of perrin numbers.\n    public static long CalSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CalSum((9L)) == (49L));\n    Debug.Assert(CalSum((10L)) == (66L));\n    Debug.Assert(CalSum((11L)) == (88L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_450_extract_string", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    public static List<string> ExtractString(List<string> str, long l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (8L)).Equals((new List<string>(new string[]{(string)\"practice\", (string)\"solution\"}))));\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (6L)).Equals((new List<string>(new string[]{(string)\"Python\"}))));\n    Debug.Assert(ExtractString((new List<string>(new string[]{(string)\"Python\", (string)\"list\", (string)\"exercises\", (string)\"practice\", (string)\"solution\"})), (9L)).Equals((new List<string>(new string[]{(string)\"exercises\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_451_remove_whitespaces", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove all whitespaces from the given string.\n    public static string RemoveWhitespaces(string text1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveWhitespaces((\" Google    Flutter \")).Equals((\"GoogleFlutter\")));\n    Debug.Assert(RemoveWhitespaces((\" Google    Dart \")).Equals((\"GoogleDart\")));\n    Debug.Assert(RemoveWhitespaces((\" iOS    Swift \")).Equals((\"iOSSwift\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_452_loss_amount", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    public static long LossAmount(long actual_cost, long sale_amount) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LossAmount((1500L), (1200L)) == (0L));\n    Debug.Assert(LossAmount((100L), (200L)) == (100L));\n    Debug.Assert(LossAmount((2000L), (5000L)) == (3000L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_453_sumofFactors", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of even factors of a number.\n    public static long Sumoffactors(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sumoffactors((18L)) == (26L));\n    Debug.Assert(Sumoffactors((30L)) == (48L));\n    Debug.Assert(Sumoffactors((6L)) == (8L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_454_text_match_wordz", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that matches a word containing 'z'.\n    public static bool TextMatchWordz(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchWordz((\"pythonz.\")) == (true));\n    Debug.Assert(TextMatchWordz((\"xyz.\")) == (true));\n    Debug.Assert(TextMatchWordz((\"  lang  .\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given month number contains 31 days or not.\n    public static bool CheckMonthnumbNumber(long monthnum2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckMonthnumbNumber((5L)) == (true));\n    Debug.Assert(CheckMonthnumbNumber((2L)) == (false));\n    Debug.Assert(CheckMonthnumbNumber((6L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_456_reverse_string_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to reverse each string in a given list of string values.\n    public static List<string> ReverseStringList(List<string> stringlist) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"Red\", (string)\"Green\", (string)\"Blue\", (string)\"White\", (string)\"Black\"}))).Equals((new List<string>(new string[]{(string)\"deR\", (string)\"neerG\", (string)\"eulB\", (string)\"etihW\", (string)\"kcalB\"}))));\n    Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"john\", (string)\"amal\", (string)\"joel\", (string)\"george\"}))).Equals((new List<string>(new string[]{(string)\"nhoj\", (string)\"lama\", (string)\"leoj\", (string)\"egroeg\"}))));\n    Debug.Assert(ReverseStringList((new List<string>(new string[]{(string)\"jack\", (string)\"john\", (string)\"mary\"}))).Equals((new List<string>(new string[]{(string)\"kcaj\", (string)\"nhoj\", (string)\"yram\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_457_Find_Min", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sublist having minimum length.\n    public static List<object> FindMin(List<List<object>> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMin((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})}))).Equals((new List<object>(new long[]{(long)1L}))));\n    Debug.Assert(FindMin((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)7L, (long)8L})}))).Equals((new List<object>(new long[]{(long)1L, (long)1L}))));\n    Debug.Assert(FindMin((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"})}))).Equals((new List<object>(new string[]{(string)\"x\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_458_rectangle_area", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the area of a rectangle.\n    public static long RectangleArea(long l, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RectangleArea((10L), (20L)) == (200L));\n    Debug.Assert(RectangleArea((10L), (5L)) == (50L));\n    Debug.Assert(RectangleArea((4L), (2L)) == (8L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_459_remove_uppercase", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove uppercase substrings from a given string.\n    public static string RemoveUppercase(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveUppercase((\"cAstyoUrFavoRitETVshoWs\")).Equals((\"cstyoravoitshos\")));\n    Debug.Assert(RemoveUppercase((\"wAtchTheinTernEtrAdIo\")).Equals((\"wtchheinerntrdo\")));\n    Debug.Assert(RemoveUppercase((\"VoicESeaRchAndreComMendaTionS\")).Equals((\"oiceachndreomendaion\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_460_Extract", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to get the first element of each sublist.\n    public static List<long> Extract(List<List<long>> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L})}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)6L}))));\n    Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))).Equals((new List<long>(new long[]{(long)1L, (long)4L}))));\n    Debug.Assert(Extract((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)9L, (long)8L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))).Equals((new List<long>(new long[]{(long)9L, (long)1L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_461_upper_ctr", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the upper case characters in a given string.\n    public static long UpperCtr(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UpperCtr((\"PYthon\")) == (1L));\n    Debug.Assert(UpperCtr((\"BigData\")) == (1L));\n    Debug.Assert(UpperCtr((\"program\")) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_463_max_subarray_product", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product subarray of the given array.\n    public static long MaxSubarrayProduct(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)1L, (long)-2L, (long)-3L, (long)0L, (long)7L, (long)-8L, (long)-2L}))) == (112L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)6L, (long)-3L, (long)-10L, (long)0L, (long)2L}))) == (180L));\n    Debug.Assert(MaxSubarrayProduct((new List<long>(new long[]{(long)-2L, (long)-40L, (long)0L, (long)-2L, (long)-3L}))) == (80L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_464_check_value", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if all values are same in a dictionary.\n    public static bool CheckValue(Dictionary<string,long> dict, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (10L)) == (false));\n    Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (12L)) == (true));\n    Debug.Assert(CheckValue((new Dictionary<string,long>(){{\"Cierra Vega\", 12L}, {\"Alden Cantrell\", 12L}, {\"Kierra Gentry\", 12L}, {\"Pierre Cox\", 12L}}), (5L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_465_drop_empty", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to drop empty items from a given dictionary.\n    public static Dictionary<string,string> DropEmpty(Dictionary<string,string> dict1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", \"Green\"}})));\n    Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", \"Red\"}, {\"c2\", null}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c1\", \"Red\"}})));\n    Debug.Assert(DropEmpty((new Dictionary<string,string>(){{\"c1\", null}, {\"c2\", \"Green\"}, {\"c3\", null}})).Equals((new Dictionary<string,string>(){{\"c2\", \"Green\"}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_468_max_product", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    public static long MaxProduct(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)3L, (long)100L, (long)4L, (long)5L, (long)150L, (long)6L}))) == (3000L));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)4L, (long)42L, (long)55L, (long)68L, (long)80L}))) == (50265600L));\n    Debug.Assert(MaxProduct((new List<long>(new long[]{(long)10L, (long)22L, (long)9L, (long)33L, (long)21L, (long)50L, (long)41L, (long)60L}))) == (2460L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_470_add_pairwise", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    public static Tuple<long, long, long, long> AddPairwise(Tuple<long, long, long, long, long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddPairwise((Tuple.Create(1L, 5L, 7L, 8L, 10L))).Equals((Tuple.Create(6L, 12L, 15L, 18L))));\n    Debug.Assert(AddPairwise((Tuple.Create(2L, 6L, 8L, 9L, 11L))).Equals((Tuple.Create(8L, 14L, 17L, 20L))));\n    Debug.Assert(AddPairwise((Tuple.Create(3L, 7L, 9L, 10L, 12L))).Equals((Tuple.Create(10L, 16L, 19L, 22L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_471_find_remainder", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the product of the array multiplication modulo n.\n    public static long FindRemainder(List<long> arr, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindRemainder((new List<long>(new long[]{(long)100L, (long)10L, (long)5L, (long)25L, (long)35L, (long)14L})), (11L)) == (9L));\n    Debug.Assert(FindRemainder((new List<long>(new long[]{(long)1L, (long)1L, (long)1L})), (1L)) == (0L));\n    Debug.Assert(FindRemainder((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (2L)) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_472_check_Consecutive", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given list contains consecutive numbers or not.\n    public static bool CheckConsecutive(List<long> l) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)6L}))) == (false));\n    Debug.Assert(CheckConsecutive((new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_474_replace_char", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to replace characters in a string.\n    public static string ReplaceChar(string str1, string ch, string newch) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceChar((\"polygon\"), (\"y\"), (\"l\")).Equals((\"pollgon\")));\n    Debug.Assert(ReplaceChar((\"character\"), (\"c\"), (\"a\")).Equals((\"aharaater\")));\n    Debug.Assert(ReplaceChar((\"python\"), (\"l\"), (\"a\")).Equals((\"python\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_475_sort_counter", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a dictionary by value.\n    public static List<Tuple<string, long>> SortCounter(Dictionary<string,long> dict1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 81L}, {\"Physics\", 83L}, {\"Chemistry\", 87L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Chemistry\", 87L), (Tuple<string, long>)Tuple.Create(\"Physics\", 83L), (Tuple<string, long>)Tuple.Create(\"Math\", 81L)}))));\n    Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 400L}, {\"Physics\", 300L}, {\"Chemistry\", 250L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Math\", 400L), (Tuple<string, long>)Tuple.Create(\"Physics\", 300L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 250L)}))));\n    Debug.Assert(SortCounter((new Dictionary<string,long>(){{\"Math\", 900L}, {\"Physics\", 1000L}, {\"Chemistry\", 1250L}})).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Chemistry\", 1250L), (Tuple<string, long>)Tuple.Create(\"Physics\", 1000L), (Tuple<string, long>)Tuple.Create(\"Math\", 900L)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_476_big_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of the largest and smallest value in a given array.\n    public static long BigSum(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BigSum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(BigSum((new List<long>(new long[]{(long)-1L, (long)2L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(BigSum((new List<long>(new long[]{(long)2L, (long)3L, (long)6L}))) == (8L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_477_is_lower", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to convert the given string to lower case.\n    public static string IsLower(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsLower((\"InValid\")).Equals((\"invalid\")));\n    Debug.Assert(IsLower((\"TruE\")).Equals((\"true\")));\n    Debug.Assert(IsLower((\"SenTenCE\")).Equals((\"sentence\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_478_remove_lowercase", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove lowercase substrings from a given string.\n    public static string RemoveLowercase(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveLowercase((\"PYTHon\")).Equals((\"PYTH\")));\n    Debug.Assert(RemoveLowercase((\"FInD\")).Equals((\"FID\")));\n    Debug.Assert(RemoveLowercase((\"STRinG\")).Equals((\"STRG\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_479_first_Digit", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the first digit of a given number.\n    public static long FirstDigit(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstDigit((123L)) == (1L));\n    Debug.Assert(FirstDigit((456L)) == (4L));\n    Debug.Assert(FirstDigit((12L)) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_4_heap_queue_largest", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    public static List<long> HeapQueueLargest(List<long> nums, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (3L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (2L)).Equals((new List<long>(new long[]{(long)85L, (long)75L}))));\n    Debug.Assert(HeapQueueLargest((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)22L, (long)58L})), (5L)).Equals((new List<long>(new long[]{(long)85L, (long)75L, (long)65L, (long)58L, (long)35L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_554_Split", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function which takes a list of integers and only returns the odd ones.\n    public static List<long> Split(List<long> list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Split((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)10L, (long)11L, (long)12L, (long)13L}))).Equals((new List<long>(new long[]{(long)11L, (long)13L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new List<long>(new long[]{(long)7L, (long)9L, (long)1L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_555_difference", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    public static long Difference(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Difference((3L)) == (30L));\n    Debug.Assert(Difference((5L)) == (210L));\n    Debug.Assert(Difference((2L)) == (6L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose xor value is odd.\n    public static long FindOddPair(List<long> A, long N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)5L, (long)4L, (long)7L, (long)2L, (long)1L})), (5L)) == (6L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)7L, (long)2L, (long)8L, (long)1L, (long)0L, (long)5L, (long)11L})), (7L)) == (12L));\n    Debug.Assert(FindOddPair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (3L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_557_toggle_string", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to toggle the case of all characters in a string.\n    public static string ToggleString(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ToggleString((\"Python\")).Equals((\"pYTHON\")));\n    Debug.Assert(ToggleString((\"Pangram\")).Equals((\"pANGRAM\")));\n    Debug.Assert(ToggleString((\"LIttLE\")).Equals((\"liTTle\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_558_digit_distance_nums", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of the per-digit difference between two integers.\n    public static long DigitDistanceNums(long n1, long n2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DigitDistanceNums((1L), (2L)) == (1L));\n    Debug.Assert(DigitDistanceNums((23L), (56L)) == (6L));\n    Debug.Assert(DigitDistanceNums((123L), (256L)) == (7L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    public static long MaxSubArraySum(List<long> a, long size) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-2L, (long)-3L, (long)4L, (long)-1L, (long)-2L, (long)1L, (long)5L, (long)-3L})), (8L)) == (7L));\n    Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L, (long)-2L, (long)-3L, (long)2L, (long)6L, (long)-4L})), (8L)) == (8L));\n    Debug.Assert(MaxSubArraySum((new List<long>(new long[]{(long)-4L, (long)-5L, (long)6L, (long)-3L, (long)-4L, (long)3L, (long)7L, (long)-5L})), (8L)) == (10L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_560_union_elements", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the union of the elements of two given lists and output them in sorted order.\n    public static List<long> UnionElements(List<long> test_tup1, List<long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UnionElements((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)4L, (long)10L}))).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)10L}))));\n    Debug.Assert(UnionElements((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))));\n    Debug.Assert(UnionElements((new List<long>(new long[]{(long)11L, (long)12L, (long)13L, (long)14L})), (new List<long>(new long[]{(long)13L, (long)15L, (long)16L, (long)17L}))).Equals((new List<long>(new long[]{(long)11L, (long)12L, (long)13L, (long)14L, (long)15L, (long)16L, (long)17L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_562_Find_Max_Length", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the length of the longest sublists.\n    public static long FindMaxLength(List<List<long>> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L})}))) == (4L));\n    Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)1L}), (List<long>)new List<long>(new long[]{(long)2L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L})}))) == (3L));\n    Debug.Assert(FindMaxLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)22L, (long)23L}), (List<long>)new List<long>(new long[]{(long)13L, (long)14L, (long)15L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)50L})}))) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_563_extract_values", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract values between quotation marks from a string.\n    public static List<string> ExtractValues(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractValues((\"\"Python\", \"PHP\", \"Java\"\")).Equals((new List<string>(new string[]{(string)\"Python\", (string)\"PHP\", (string)\"Java\"}))));\n    Debug.Assert(ExtractValues((\"\"python\",\"program\",\"language\"\")).Equals((new List<string>(new string[]{(string)\"python\", (string)\"program\", (string)\"language\"}))));\n    Debug.Assert(ExtractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).Equals((new List<string>(new string[]{(string)\"red\", (string)\"blue\", (string)\"green\", (string)\"yellow\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_564_count_Pairs", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    public static long CountPairs(List<long> arr, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (3L)) == (2L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (4L)) == (0L));\n    Debug.Assert(CountPairs((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (5L)) == (10L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_565_split", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to split a string into characters.\n    public static List<string> Split(string word) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Split((\"python\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"y\", (string)\"t\", (string)\"h\", (string)\"o\", (string)\"n\"}))));\n    Debug.Assert(Split((\"Name\")).Equals((new List<string>(new string[]{(string)\"N\", (string)\"a\", (string)\"m\", (string)\"e\"}))));\n    Debug.Assert(Split((\"program\")).Equals((new List<string>(new string[]{(string)\"p\", (string)\"r\", (string)\"o\", (string)\"g\", (string)\"r\", (string)\"a\", (string)\"m\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_566_sum_digits", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to get the sum of the digits of a non-negative integer.\n    public static long SumDigits(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumDigits((345L)) == (12L));\n    Debug.Assert(SumDigits((12L)) == (3L));\n    Debug.Assert(SumDigits((97L)) == (16L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_567_issort_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether a specified list is sorted or not.\n    public static bool IssortList(List<long> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)17L}))) == (true));\n    Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)12L, (long)14L, (long)20L, (long)17L}))) == (false));\n    Debug.Assert(IssortList((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)6L, (long)8L, (long)10L, (long)15L, (long)14L, (long)20L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_568_empty_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to create a list of N empty dictionaries.\n    public static List<Dictionary<null,null>> EmptyList(long length) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EmptyList((5L)).Equals((new List<List<Dictionary<null,null>>()}))));\n    Debug.Assert(EmptyList((6L)).Equals((new List<List<Dictionary<null,null>>()}))));\n    Debug.Assert(EmptyList((7L)).Equals((new List<List<Dictionary<null,null>>()}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_569_sort_sublists", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    public static List<List<string>> SortSublists(List<List<string>> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"white\", (string)\"black\", (string)\"orange\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"white\"}), (List<string>)new List<string>(new string[]{(string)\"black\", (string)\"orange\", (string)\"white\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\"}), (List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"white\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"black\"}), (List<string>)new List<string>(new string[]{(string)\"green\", (string)\"orange\"}), (List<string>)new List<string>(new string[]{(string)\"white\"})}))));\n    Debug.Assert(SortSublists((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"g\", (string)\"h\"}), (List<string>)new List<string>(new string[]{(string)\"f\", (string)\"e\"})}))).Equals((new List<List<string>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\", (string)\"d\"}), (List<string>)new List<string>(new string[]{(string)\"g\", (string)\"h\"}), (List<string>)new List<string>(new string[]{(string)\"e\", (string)\"f\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_56_checks", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check if a given number is one less than twice its reverse.\n    public static bool Checks(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Checks((70L)) == (false));\n    Debug.Assert(Checks((23L)) == (false));\n    Debug.Assert(Checks((73L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_572_two_unique_nums", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to remove duplicate numbers from a given number of lists.\n    public static List<long> TwoUniqueNums(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)3L, (long)4L, (long)5L}))));\n    Debug.Assert(TwoUniqueNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_573_unique_product", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to calculate the product of the unique numbers in a given list.\n    public static long UniqueProduct(List<long> list_data) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)20L, (long)50L, (long)60L, (long)40L}))) == (720000000L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L}))) == (6L));\n    Debug.Assert(UniqueProduct((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)0L, (long)1L, (long)1L}))) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the surface area of a cylinder.\n    public static float SurfaceareaCylinder(long r, long h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SurfaceareaCylinder((10L), (5L)) == (942.45f));\n    Debug.Assert(SurfaceareaCylinder((4L), (5L)) == (226.18800000000002f));\n    Debug.Assert(SurfaceareaCylinder((4L), (10L)) == (351.848f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_576_is_Sub_Array", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether a list is sublist of another or not.\n    public static bool IsSubArray(List<long> A, List<long> B) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)1L, (long)2L}))) == (false));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)2L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))) == (true));\n    Debug.Assert(IsSubArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)2L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)0L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the last digit in factorial of a given number.\n    public static long LastDigitFactorial(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LastDigitFactorial((4L)) == (4L));\n    Debug.Assert(LastDigitFactorial((21L)) == (0L));\n    Debug.Assert(LastDigitFactorial((30L)) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_578_interleave_lists", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to interleave 3 lists of the same length into a single flat list.\n    public static List<long> InterleaveLists(List<long> list1, List<long> list2, List<long> list3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L, (long)50L, (long)60L, (long)70L})), (new List<long>(new long[]{(long)100L, (long)200L, (long)300L, (long)400L, (long)500L, (long)600L, (long)700L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)100L, (long)2L, (long)20L, (long)200L, (long)3L, (long)30L, (long)300L, (long)4L, (long)40L, (long)400L, (long)5L, (long)50L, (long)500L, (long)6L, (long)60L, (long)600L, (long)7L, (long)70L, (long)700L}))));\n    Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)10L, (long)20L})), (new List<long>(new long[]{(long)15L, (long)2L})), (new List<long>(new long[]{(long)5L, (long)10L}))).Equals((new List<long>(new long[]{(long)10L, (long)15L, (long)5L, (long)20L, (long)2L, (long)10L}))));\n    Debug.Assert(InterleaveLists((new List<long>(new long[]{(long)11L, (long)44L})), (new List<long>(new long[]{(long)10L, (long)15L})), (new List<long>(new long[]{(long)20L, (long)5L}))).Equals((new List<long>(new long[]{(long)11L, (long)10L, (long)20L, (long)44L, (long)15L, (long)5L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_579_find_dissimilar", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the dissimilar elements in the given two tuples.\n    public static Tuple<long, long, long, long> FindDissimilar(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindDissimilar((Tuple.Create(3L, 4L, 5L, 6L)), (Tuple.Create(5L, 7L, 4L, 10L))).Equals((Tuple.Create(3L, 6L, 7L, 10L))));\n    Debug.Assert(FindDissimilar((Tuple.Create(1L, 2L, 3L, 4L)), (Tuple.Create(7L, 2L, 3L, 9L))).Equals((Tuple.Create(1L, 4L, 7L, 9L))));\n    Debug.Assert(FindDissimilar((Tuple.Create(21L, 11L, 25L, 26L)), (Tuple.Create(26L, 34L, 21L, 36L))).Equals((Tuple.Create(34L, 36L, 11L, 25L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_57_find_Max_Num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the largest number that can be formed with the given list of digits.\n    public static long FindMaxNum(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (321L));\n    Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)1L}))) == (6541L));\n    Debug.Assert(FindMaxNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)9L}))) == (9321L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_580_extract_even", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    public static object ExtractEven(Tuple<long, long, Tuple<long, long, Tuple<long, long>>, long, long> test_tuple) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractEven((Tuple.Create(4L, 5L, Tuple.Create(7L, 6L, Tuple.Create(2L, 4L)), 6L, 8L))).Equals(Tuple.Create(4L, Tuple.Create(6L, Tuple.Create(2L, 4L)), 6L, 8L)));\n    Debug.Assert(ExtractEven((Tuple.Create(5L, 6L, Tuple.Create(8L, 7L, Tuple.Create(4L, 8L)), 7L, 9L))).Equals(Tuple.Create(6L, Tuple.Create(8L, Tuple.Create(4L, 8L)))));\n    Debug.Assert(ExtractEven((Tuple.Create(5L, 6L, Tuple.Create(9L, 8L, Tuple.Create(4L, 6L)), 8L, 10L))).Equals(Tuple.Create(6L, Tuple.Create(8L, Tuple.Create(4L, 6L)), 8L, 10L)));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_581_surface_Area", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    public static long SurfaceArea(long b, long s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SurfaceArea((3L), (4L)) == (33L));\n    Debug.Assert(SurfaceArea((4L), (5L)) == (56L));\n    Debug.Assert(SurfaceArea((1L), (2L)) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_583_catalan_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which returns nth catalan number.\n    public static long CatalanNumber(long num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CatalanNumber((10L)) == (16796L));\n    Debug.Assert(CatalanNumber((9L)) == (4862L));\n    Debug.Assert(CatalanNumber((7L)) == (429L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_584_find_adverbs", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the first adverb ending with ly and its positions in a given string.\n    public static string FindAdverbs(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindAdverbs((\"Clearly, he has no excuse for such behavior.\")).Equals((\"0-7: Clearly\")));\n    Debug.Assert(FindAdverbs((\"Please handle the situation carefuly\")).Equals((\"28-36: carefuly\")));\n    Debug.Assert(FindAdverbs((\"Complete the task quickly\")).Equals((\"18-25: quickly\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_586_split_Arr", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to split a list at the nth eelment and add the first part to the end.\n    public static List<long> SplitArr(List<long> l, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)12L, (long)10L, (long)5L, (long)6L, (long)52L, (long)36L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)52L, (long)36L, (long)12L, (long)10L}))));\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (1L)).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L}))));\n    Debug.Assert(SplitArr((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (3L)).Equals((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)0L, (long)1L, (long)2L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_587_list_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert a list to a tuple.\n    public static object ListTuple(List<long> listx) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ListTuple((new List<long>(new long[]{(long)5L, (long)10L, (long)7L, (long)4L, (long)15L, (long)3L}))).Equals(Tuple.Create(5L, 10L, 7L, 4L, 15L, 3L)));\n    Debug.Assert(ListTuple((new List<long>(new long[]{(long)2L, (long)4L, (long)5L, (long)6L, (long)2L, (long)3L, (long)4L, (long)4L, (long)7L}))).Equals(Tuple.Create(2L, 4L, 5L, 6L, 2L, 3L, 4L, 4L, 7L)));\n    Debug.Assert(ListTuple((new List<long>(new long[]{(long)58L, (long)44L, (long)56L}))).Equals(Tuple.Create(58L, 44L, 56L)));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_588_big_diff", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the difference between largest and smallest value in a given list.\n    public static long BigDiff(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BigDiff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (3L));\n    Debug.Assert(BigDiff((new List<long>(new long[]{(long)4L, (long)5L, (long)12L}))) == (8L));\n    Debug.Assert(BigDiff((new List<long>(new long[]{(long)9L, (long)2L, (long)3L}))) == (7L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_589_perfect_squares", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find perfect squares between two given numbers.\n    public static List<long> PerfectSquares(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PerfectSquares((1L), (30L)).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L}))));\n    Debug.Assert(PerfectSquares((50L), (100L)).Equals((new List<long>(new long[]{(long)64L, (long)81L, (long)100L}))));\n    Debug.Assert(PerfectSquares((100L), (200L)).Equals((new List<long>(new long[]{(long)100L, (long)121L, (long)144L, (long)169L, (long)196L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_58_opposite_Signs", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given two integers have opposite sign or not.\n    public static bool OppositeSigns(long x, long y) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OppositeSigns((1L), (-2L)) == (true));\n    Debug.Assert(OppositeSigns((3L), (2L)) == (false));\n    Debug.Assert(OppositeSigns((-10L), (-10L)) == (false));\n    Debug.Assert(OppositeSigns((-2L), (2L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_591_swap_List", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to interchange the first and last elements in a list.\n    public static List<long> SwapList(List<long> newList) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)12L, (long)35L, (long)9L, (long)56L, (long)24L}))).Equals((new List<long>(new long[]{(long)24L, (long)35L, (long)9L, (long)56L, (long)12L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_592_sum_Of_product", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    public static long SumOfProduct(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfProduct((3L)) == (15L));\n    Debug.Assert(SumOfProduct((4L)) == (56L));\n    Debug.Assert(SumOfProduct((1L)) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_593_removezero_ip", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    public static string RemovezeroIp(string ip) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemovezeroIp((\"216.08.094.196\")).Equals((\"216.8.94.196\")));\n    Debug.Assert(RemovezeroIp((\"12.01.024\")).Equals((\"12.1.24\")));\n    Debug.Assert(RemovezeroIp((\"216.08.094.0196\")).Equals((\"216.8.94.196\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_594_diff_even_odd", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the difference of the first even and first odd number of a given list.\n    public static long DiffEvenOdd(List<long> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)1L, (long)6L, (long)8L}))) == (3L));\n    Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (1L));\n    Debug.Assert(DiffEvenOdd((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))) == (9L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_595_min_Swaps", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    public static object MinSwaps(string str1, string str2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinSwaps((\"1101\"), (\"1110\")).Equals((object(1L))));\n    Debug.Assert(MinSwaps((\"111\"), (\"000\")).Equals((object(\"Not Possible\"))));\n    Debug.Assert(MinSwaps((\"111\"), (\"110\")).Equals((object(\"Not Possible\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_597_find_kth", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find kth element from the given two sorted arrays.\n    public static long FindKth(List<long> arr1, List<long> arr2, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L, (long)9L})), (new List<long>(new long[]{(long)1L, (long)4L, (long)8L, (long)10L})), (5L)) == (6L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)100L, (long)112L, (long)256L, (long)349L, (long)770L})), (new List<long>(new long[]{(long)72L, (long)86L, (long)113L, (long)119L, (long)265L, (long)445L, (long)892L})), (7L)) == (256L));\n    Debug.Assert(FindKth((new List<long>(new long[]{(long)3L, (long)4L, (long)7L, (long)8L, (long)10L})), (new List<long>(new long[]{(long)2L, (long)5L, (long)9L, (long)11L})), (6L)) == (8L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_598_armstrong_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    public static bool ArmstrongNumber(long number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ArmstrongNumber((153L)) == (true));\n    Debug.Assert(ArmstrongNumber((259L)) == (false));\n    Debug.Assert(ArmstrongNumber((4458L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_599_sum_average", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find sum and average of first n natural numbers.\n    public static Tuple<long, float> SumAverage(long number) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumAverage((10L)).Equals((Tuple.Create(55L, 5.5f))));\n    Debug.Assert(SumAverage((15L)).Equals((Tuple.Create(120L, 8.0f))));\n    Debug.Assert(SumAverage((20L)).Equals((Tuple.Create(210L, 10.5f))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_59_is_octagonal", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth octagonal number.\n    public static long IsOctagonal(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsOctagonal((5L)) == (65L));\n    Debug.Assert(IsOctagonal((10L)) == (280L));\n    Debug.Assert(IsOctagonal((15L)) == (645L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_600_is_Even", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given number is even or not.\n    public static bool IsEven(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsEven((1L)) == (false));\n    Debug.Assert(IsEven((2L)) == (true));\n    Debug.Assert(IsEven((3L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_602_first_repeated_char", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the first repeated character in a given string.\n    public static string FirstRepeatedChar(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstRepeatedChar((\"abcabc\")).Equals((\"a\")));\n    Debug.Assert(FirstRepeatedChar((\"abc\")).Equals(null));\n    Debug.Assert(FirstRepeatedChar((\"123123\")).Equals((\"1\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_603_get_ludic", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to get all lucid numbers smaller than or equal to a given integer.\n    public static List<long> GetLudic(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetLudic((10L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(GetLudic((25L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L}))));\n    Debug.Assert(GetLudic((45L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)23L, (long)25L, (long)29L, (long)37L, (long)41L, (long)43L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_604_reverse_words", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    public static string ReverseWords(string s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseWords((\"python program\")).Equals((\"program python\")));\n    Debug.Assert(ReverseWords((\"java language\")).Equals((\"language java\")));\n    Debug.Assert(ReverseWords((\"indian man\")).Equals((\"man indian\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_605_prime_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given integer is a prime number.\n    public static bool PrimeNum(long num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeNum((13L)) == (true));\n    Debug.Assert(PrimeNum((7L)) == (true));\n    Debug.Assert(PrimeNum((-1010L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_606_radian_degree", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert degrees to radians.\n    public static float RadianDegree(long degree) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RadianDegree((90L)) == (1.5707963267948966f));\n    Debug.Assert(RadianDegree((60L)) == (1.0471975511965976f));\n    Debug.Assert(RadianDegree((120L)) == (2.0943951023931953f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_607_find_literals", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    public static Tuple<string, long, long> FindLiterals(string text, string pattern) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).Equals((Tuple.Create(\"fox\", 16L, 19L))));\n    Debug.Assert(FindLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).Equals((Tuple.Create(\"crazy\", 16L, 21L))));\n    Debug.Assert(FindLiterals((\"Hardest choices required strongest will\"), (\"will\")).Equals((Tuple.Create(\"will\", 35L, 39L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_608_bell_Number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find nth bell number.\n    public static long BellNumber(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BellNumber((2L)) == (2L));\n    Debug.Assert(BellNumber((3L)) == (5L));\n    Debug.Assert(BellNumber((4L)) == (15L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_610_remove_kth_element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    public static List<long> RemoveKthElement(List<long> list1, long L) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L})), (3L)).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)4L, (long)5L, (long)1L}))));\n    Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))));\n    Debug.Assert(RemoveKthElement((new List<long>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_611_max_of_nth", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    public static long MaxOfNth(List<List<long>> test_list, long N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)1L, (long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)9L, (long)19L})})), (2L)) == (19L));\n    Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)20L})})), (1L)) == (10L));\n    Debug.Assert(MaxOfNth((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)21L})})), (1L)) == (11L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_612_merge", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    public static List<List<object>> Merge(List<List<object>> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Merge((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"m\", (string)\"n\"})}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"a\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"y\", (string)\"b\", (string)\"n\"})}))));\n    Debug.Assert(Merge((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L})}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L})}))));\n    Debug.Assert(Merge((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"y\", (string)\"z\"}), (List<string>)new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"m\", (string)\"n\", (string)\"o\"})}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"x\", (string)\"a\", (string)\"m\"}), (List<string>)new List<string>(new string[]{(string)\"y\", (string)\"b\", (string)\"n\"}), (List<string>)new List<string>(new string[]{(string)\"z\", (string)\"c\", (string)\"o\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_614_cummulative_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    public static long CummulativeSum(List<List<long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L}), (List<long>)new List<long>(new long[]{(long)2L, (long)6L})}))) == (30L));\n    Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)3L, (long)7L})}))) == (37L));\n    Debug.Assert(CummulativeSum((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)8L})}))) == (44L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_615_average_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    public static List<float> AverageTuple(List<List<long>> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L, (long)10L, (long)12L}), (List<long>)new List<long>(new long[]{(long)30L, (long)45L, (long)56L, (long)45L}), (List<long>)new List<long>(new long[]{(long)81L, (long)80L, (long)39L, (long)32L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})}))).Equals((new List<float>(new float[]{(float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f}))));\n    Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)-5L}), (List<long>)new List<long>(new long[]{(long)30L, (long)-15L, (long)56L}), (List<long>)new List<long>(new long[]{(long)81L, (long)-60L, (long)-39L}), (List<long>)new List<long>(new long[]{(long)-10L, (long)2L, (long)3L})}))).Equals((new List<float>(new float[]{(float)25.5f, (float)-18.0f, (float)3.75f}))));\n    Debug.Assert(AverageTuple((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)100L, (long)100L, (long)100L, (long)120L}), (List<long>)new List<long>(new long[]{(long)300L, (long)450L, (long)560L, (long)450L}), (List<long>)new List<long>(new long[]{(long)810L, (long)800L, (long)390L, (long)320L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new List<float>(new float[]{(float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_616_tuple_modulo", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which takes two tuples of the same length and performs the element wise modulo.\n    public static Tuple<long, long, long, long> TupleModulo(Tuple<long, long, long, long> test_tup1, Tuple<long, long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleModulo((Tuple.Create(10L, 4L, 5L, 6L)), (Tuple.Create(5L, 6L, 7L, 5L))).Equals((Tuple.Create(0L, 4L, 5L, 1L))));\n    Debug.Assert(TupleModulo((Tuple.Create(11L, 5L, 6L, 7L)), (Tuple.Create(6L, 7L, 8L, 6L))).Equals((Tuple.Create(5L, 5L, 6L, 1L))));\n    Debug.Assert(TupleModulo((Tuple.Create(12L, 6L, 7L, 8L)), (Tuple.Create(7L, 8L, 9L, 7L))).Equals((Tuple.Create(5L, 6L, 7L, 1L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_617_min_Jumps", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    public static float MinJumps(Tuple<long, long> steps, long d) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinJumps((Tuple.Create(3L, 4L)), (11L)) == (3.5f));\n    Debug.Assert(MinJumps((Tuple.Create(3L, 4L)), (0L)) == (float)0L);\n    Debug.Assert(MinJumps((Tuple.Create(11L, 14L)), (11L)) == (float)1L);\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_618_div_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to divide two lists element wise.\n    public static List<float> DivList(List<long> nums1, List<long> nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<float>(new float[]{(float)4.0f, (float)2.5f, (float)2.0f}))));\n    Debug.Assert(DivList((new List<long>(new long[]{(long)3L, (long)2L})), (new List<long>(new long[]{(long)1L, (long)4L}))).Equals((new List<float>(new float[]{(float)3.0f, (float)0.5f}))));\n    Debug.Assert(DivList((new List<long>(new long[]{(long)90L, (long)120L})), (new List<long>(new long[]{(long)50L, (long)70L}))).Equals((new List<float>(new float[]{(float)1.8f, (float)1.7142857142857142f}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_619_move_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    public static string MoveNum(string test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveNum((\"I1love143you55three3000thousand\")).Equals((\"Iloveyouthreethousand1143553000\")));\n    Debug.Assert(MoveNum((\"Avengers124Assemble\")).Equals((\"AvengersAssemble124\")));\n    Debug.Assert(MoveNum((\"Its11our12path13to14see15things16do17things\")).Equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_61_count_Substrings", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of substrings with the sum of digits equal to their length.\n    public static long CountSubstrings(string s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSubstrings((\"112112\")) == (6L));\n    Debug.Assert(CountSubstrings((\"111\")) == (6L));\n    Debug.Assert(CountSubstrings((\"1101112\")) == (12L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_622_get_median", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    public static float GetMedian(List<long> arr1, List<long> arr2, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)1L, (long)12L, (long)15L, (long)26L, (long)38L})), (new List<long>(new long[]{(long)2L, (long)13L, (long)17L, (long)30L, (long)45L})), (5L)) == (16.0f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)9L})), (new List<long>(new long[]{(long)7L, (long)13L, (long)19L, (long)28L})), (4L)) == (8.5f));\n    Debug.Assert(GetMedian((new List<long>(new long[]{(long)3L, (long)6L, (long)14L, (long)23L, (long)36L, (long)42L})), (new List<long>(new long[]{(long)2L, (long)18L, (long)27L, (long)39L, (long)49L, (long)55L})), (6L)) == (25.0f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_623_nth_nums", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    public static List<long> NthNums(List<long> nums, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NthNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L, (long)36L, (long)49L, (long)64L, (long)81L, (long)100L}))));\n    Debug.Assert(NthNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L})), (3L)).Equals((new List<long>(new long[]{(long)1000L, (long)8000L, (long)27000L}))));\n    Debug.Assert(NthNums((new List<long>(new long[]{(long)12L, (long)15L})), (5L)).Equals((new List<long>(new long[]{(long)248832L, (long)759375L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_624_is_upper", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to convert a given string to uppercase.\n    public static string IsUpper(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUpper((\"person\")).Equals((\"PERSON\")));\n    Debug.Assert(IsUpper((\"final\")).Equals((\"FINAL\")));\n    Debug.Assert(IsUpper((\"Valid\")).Equals((\"VALID\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_625_swap_List", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to interchange the first and last element in a given list.\n    public static List<long> SwapList(List<long> newList) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)4L}))).Equals((new List<long>(new long[]{(long)4L, (long)2L, (long)3L, (long)4L, (long)1L}))));\n    Debug.Assert(SwapList((new List<long>(new long[]{(long)4L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L, (long)5L, (long)4L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_626_triangle_area", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    public static Nullable<long> TriangleArea(long r) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriangleArea((-1L)).Equals(null));\n    Debug.Assert(TriangleArea((0L)).Equals(0L));\n    Debug.Assert(TriangleArea((2L)).Equals(4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_627_find_First_Missing", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    public static long FindFirstMissing(List<long> array) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L}))) == (4L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)6L, (long)9L}))) == (3L));\n    Debug.Assert(FindFirstMissing((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)8L, (long)9L}))) == (0L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_628_replace_spaces", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to replace all spaces in the given string with '%20'.\n    public static string ReplaceSpaces(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceSpaces((\"My Name is Dawood\")).Equals((\"My%20Name%20is%20Dawood\")));\n    Debug.Assert(ReplaceSpaces((\"I am a Programmer\")).Equals((\"I%20am%20a%20Programmer\")));\n    Debug.Assert(ReplaceSpaces((\"I love Coding\")).Equals((\"I%20love%20Coding\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_629_Split", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find even numbers from a list of numbers.\n    public static List<long> Split(List<long> list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Split((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)0L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)0L}))));\n    Debug.Assert(Split((new List<long>(new long[]{(long)8L, (long)12L, (long)15L, (long)19L}))).Equals((new List<long>(new long[]{(long)8L, (long)12L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_62_smallest_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find smallest number in a list.\n    public static long SmallestNum(List<long> xs) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SmallestNum((new List<long>(new long[]{(long)10L, (long)20L, (long)1L, (long)45L, (long)99L}))) == (1L));\n    Debug.Assert(SmallestNum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (1L));\n    Debug.Assert(SmallestNum((new List<long>(new long[]{(long)45L, (long)46L, (long)50L, (long)60L}))) == (45L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_630_get_coordinates", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    public static List<List<long>> GetCoordinates(Tuple<long, long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetCoordinates((Tuple.Create(3L, 4L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)2L, (long)4L}), (List<long>)new List<long>(new long[]{(long)2L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))));\n    Debug.Assert(GetCoordinates((Tuple.Create(4L, 5L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)3L, (long)5L}), (List<long>)new List<long>(new long[]{(long)3L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L})}))));\n    Debug.Assert(GetCoordinates((Tuple.Create(5L, 6L))).Equals((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)4L, (long)6L}), (List<long>)new List<long>(new long[]{(long)4L, (long)7L}), (List<long>)new List<long>(new long[]{(long)5L, (long)5L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)6L, (long)7L})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_631_replace_spaces", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    public static string ReplaceSpaces(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceSpaces((\"Jumanji The Jungle\")).Equals((\"Jumanji_The_Jungle\")));\n    Debug.Assert(ReplaceSpaces((\"The_Avengers\")).Equals((\"The Avengers\")));\n    Debug.Assert(ReplaceSpaces((\"Fast and Furious\")).Equals((\"Fast_and_Furious\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_632_move_zero", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to move all zeroes to the end of the given list.\n    public static List<long> MoveZero(List<long> num_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveZero((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)0L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)0L, (long)0L}))));\n    Debug.Assert(MoveZero((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)0L, (long)0L, (long)4L, (long)0L, (long)5L, (long)0L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)4L, (long)5L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(MoveZero((new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)1L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)0L, (long)0L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    public static long PairXorSum(List<long> arr, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairXorSum((new List<long>(new long[]{(long)5L, (long)9L, (long)7L, (long)6L})), (4L)) == (47L));\n    Debug.Assert(PairXorSum((new List<long>(new long[]{(long)7L, (long)3L, (long)5L})), (3L)) == (12L));\n    Debug.Assert(PairXorSum((new List<long>(new long[]{(long)7L, (long)3L})), (2L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_635_heap_sort", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort the given list.\n    public static List<long> HeapSort(List<long> iterable) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HeapSort((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)9L, (long)2L, (long)4L, (long)6L, (long)8L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n    Debug.Assert(HeapSort((new List<long>(new long[]{(long)25L, (long)35L, (long)22L, (long)85L, (long)14L, (long)65L, (long)75L, (long)25L, (long)58L}))).Equals((new List<long>(new long[]{(long)14L, (long)22L, (long)25L, (long)25L, (long)35L, (long)58L, (long)65L, (long)75L, (long)85L}))));\n    Debug.Assert(HeapSort((new List<long>(new long[]{(long)7L, (long)1L, (long)9L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_637_noprofit_noloss", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given amount has no profit and no loss\n    public static bool NoprofitNoloss(long actual_cost, long sale_amount) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NoprofitNoloss((1500L), (1200L)) == (false));\n    Debug.Assert(NoprofitNoloss((100L), (100L)) == (true));\n    Debug.Assert(NoprofitNoloss((2000L), (5000L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_638_wind_chill", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    public static long WindChill(long v, long t) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WindChill((120L), (35L)) == (40L));\n    Debug.Assert(WindChill((40L), (20L)) == (19L));\n    Debug.Assert(WindChill((10L), (8L)) == (6L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_639_sample_nam", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    public static long SampleNam(List<string> sample_names) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"sally\", (string)\"Dylan\", (string)\"rebecca\", (string)\"Diana\", (string)\"Joanne\", (string)\"keith\"}))) == (16L));\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"php\", (string)\"res\", (string)\"Python\", (string)\"abcd\", (string)\"Java\", (string)\"aaa\"}))) == (10L));\n    Debug.Assert(SampleNam((new List<string>(new string[]{(string)\"abcd\", (string)\"Python\", (string)\"abba\", (string)\"aba\"}))) == (6L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_63_max_difference", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the maximum difference between available pairs in the given tuple list.\n    public static long MaxDifference(List<Tuple<long, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 5L), (Tuple<long, long>)Tuple.Create(1L, 7L), (Tuple<long, long>)Tuple.Create(10L, 3L), (Tuple<long, long>)Tuple.Create(1L, 2L)}))) == (7L));\n    Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 6L), (Tuple<long, long>)Tuple.Create(2L, 17L), (Tuple<long, long>)Tuple.Create(9L, 13L), (Tuple<long, long>)Tuple.Create(11L, 12L)}))) == (15L));\n    Debug.Assert(MaxDifference((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(12L, 35L), (Tuple<long, long>)Tuple.Create(21L, 27L), (Tuple<long, long>)Tuple.Create(13L, 23L), (Tuple<long, long>)Tuple.Create(41L, 22L)}))) == (23L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_640_remove_parenthesis", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    public static string RemoveParenthesis(List<string> items) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"python (chrome)\"}))).Equals((\"python\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"string(.abc)\"}))).Equals((\"string\")));\n    Debug.Assert(RemoveParenthesis((new List<string>(new string[]{(string)\"alpha(num)\"}))).Equals((\"alpha\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_641_is_nonagonal", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth nonagonal number.\n    public static long IsNonagonal(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNonagonal((10L)) == (325L));\n    Debug.Assert(IsNonagonal((15L)) == (750L));\n    Debug.Assert(IsNonagonal((18L)) == (1089L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    public static bool TextMatchWordzMiddle(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    Debug.Assert(TextMatchWordzMiddle((\"zxyabc.\")) == (false));\n    Debug.Assert(TextMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to reverse an array upto a given position.\n    public static List<long> ReverseArrayUptoK(List<long> input, long k) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (4L)).Equals((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L, (long)5L, (long)6L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})), (2L)).Equals((new List<long>(new long[]{(long)5L, (long)4L, (long)6L, (long)7L}))));\n    Debug.Assert(ReverseArrayUptoK((new List<long>(new long[]{(long)9L, (long)8L, (long)7L, (long)6L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)6L, (long)5L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_64_subject_marks", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of tuples using the second value of each tuple.\n    public static List<Tuple<string, long>> SubjectMarks(List<Tuple<string, long>> subjectmarks) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"English\", 88L), (Tuple<string, long>)Tuple.Create(\"Science\", 90L), (Tuple<string, long>)Tuple.Create(\"Maths\", 97L), (Tuple<string, long>)Tuple.Create(\"Social sciences\", 82L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Social sciences\", 82L), (Tuple<string, long>)Tuple.Create(\"English\", 88L), (Tuple<string, long>)Tuple.Create(\"Science\", 90L), (Tuple<string, long>)Tuple.Create(\"Maths\", 97L)}))));\n    Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Telugu\", 49L), (Tuple<string, long>)Tuple.Create(\"Hindhi\", 54L), (Tuple<string, long>)Tuple.Create(\"Social\", 33L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Social\", 33L), (Tuple<string, long>)Tuple.Create(\"Telugu\", 49L), (Tuple<string, long>)Tuple.Create(\"Hindhi\", 54L)}))));\n    Debug.Assert(SubjectMarks((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Physics\", 96L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 97L), (Tuple<string, long>)Tuple.Create(\"Biology\", 45L)}))).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Biology\", 45L), (Tuple<string, long>)Tuple.Create(\"Physics\", 96L), (Tuple<string, long>)Tuple.Create(\"Chemistry\", 97L)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_66_pos_count", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of positive numbers in a list.\n    public static long PosCount(List<long> list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PosCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L, (long)-4L}))) == (2L));\n    Debug.Assert(PosCount((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)-1L}))) == (3L));\n    Debug.Assert(PosCount((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_67_bell_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the number of ways to partition a set of Bell numbers.\n    public static long BellNumber(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BellNumber((2L)) == (2L));\n    Debug.Assert(BellNumber((10L)) == (115975L));\n    Debug.Assert(BellNumber((56L)) == (6775685320645824322581483068371419745979053216268760300L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_68_is_Monotonic", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    public static bool IsMonotonic(List<long> A) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)4L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsMonotonic((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_69_is_sublist", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether a list contains the given sublist or not.\n    public static bool IsSublist(List<long> l, List<long> s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)3L, (long)7L}))) == (false));\n    Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)4L, (long)3L}))) == (true));\n    Debug.Assert(IsSublist((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)1L, (long)6L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the two numbers differ at one bit position only or not.\n    public static bool DifferAtOneBitPos(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DifferAtOneBitPos((13L), (9L)) == (true));\n    Debug.Assert(DifferAtOneBitPos((15L), (8L)) == (false));\n    Debug.Assert(DifferAtOneBitPos((2L), (4L)) == (false));\n    Debug.Assert(DifferAtOneBitPos((2L), (3L)) == (true));\n    Debug.Assert(DifferAtOneBitPos((5L), (1L)) == (true));\n    Debug.Assert(DifferAtOneBitPos((1L), (5L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_70_get_equal", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find whether all the given lists have equal length or not.\n    public static bool GetEqual(List<List<long>> Input) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)11L, (long)22L, (long)33L}), (List<long>)new List<long>(new long[]{(long)44L, (long)55L, (long)66L})}))) == (true));\n    Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L})}))) == (false));\n    Debug.Assert(GetEqual((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)3L, (long)4L})}))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_71_comb_sort", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a list of elements.\n    public static List<long> CombSort(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)5L, (long)15L, (long)37L, (long)25L, (long)79L}))).Equals((new List<long>(new long[]{(long)5L, (long)15L, (long)25L, (long)37L, (long)79L}))));\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)41L, (long)32L, (long)15L, (long)19L, (long)22L}))).Equals((new List<long>(new long[]{(long)15L, (long)19L, (long)22L, (long)32L, (long)41L}))));\n    Debug.Assert(CombSort((new List<long>(new long[]{(long)99L, (long)15L, (long)13L, (long)47L}))).Equals((new List<long>(new long[]{(long)13L, (long)15L, (long)47L, (long)99L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to add a dictionary to the tuple. The output should be a tuple.\n    public static Tuple<long, long, long, Dictionary<string,long>> AddDictToTuple(Tuple<long, long, long> test_tup, Dictionary<string,long> test_dict) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddDictToTuple((Tuple.Create(4L, 5L, 6L)), (new Dictionary<string,long>(){{\"MSAM\", 1L}, {\"is\", 2L}, {\"best\", 3L}})).Equals((Tuple.Create(4L, 5L, 6L, new Dictionary<string,long>(){{\"MSAM\", 1L}, {\"is\", 2L}, {\"best\", 3L}}))));\n    Debug.Assert(AddDictToTuple((Tuple.Create(1L, 2L, 3L)), (new Dictionary<string,long>(){{\"UTS\", 2L}, {\"is\", 3L}, {\"Worst\", 4L}})).Equals((Tuple.Create(1L, 2L, 3L, new Dictionary<string,long>(){{\"UTS\", 2L}, {\"is\", 3L}, {\"Worst\", 4L}}))));\n    Debug.Assert(AddDictToTuple((Tuple.Create(8L, 9L, 10L)), (new Dictionary<string,long>(){{\"POS\", 3L}, {\"is\", 4L}, {\"Okay\", 5L}})).Equals((Tuple.Create(8L, 9L, 10L, new Dictionary<string,long>(){{\"POS\", 3L}, {\"is\", 4L}, {\"Okay\", 5L}}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    public static float Maxaverageofpath(List<List<long>> cost) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)3L, (long)9L})}))) == (5.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)7L, (long)6L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)4L, (long)10L})}))) == (6.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)4L, (long)5L}), (List<long>)new List<long>(new long[]{(long)8L, (long)7L, (long)6L}), (List<long>)new List<long>(new long[]{(long)9L, (long)5L, (long)11L})}))) == (7.2f));\n    Debug.Assert(Maxaverageofpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))) == (5.8f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_722_filter_data", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    public static Dictionary<string,Tuple<float, long>> FilterData(Dictionary<string,Tuple<float, long>> students, float h, long w) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (6.0f), (70L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}})));\n    Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (5.9f), (67L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}})));\n    Debug.Assert(FilterData((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}}), (5.7f), (64L)).Equals((new Dictionary<string,Tuple<float, long>>(){{\"Cierra Vega\", Tuple.Create(6.2f, 70L)}, {\"Alden Cantrell\", Tuple.Create(5.9f, 65L)}, {\"Kierra Gentry\", Tuple.Create(6.0f, 68L)}, {\"Pierre Cox\", Tuple.Create(5.8f, 66L)}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_723_count_same_pair", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    public static long CountSamePair(List<long> nums1, List<long> nums2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)2L, (long)3L, (long)1L, (long)2L, (long)6L, (long)7L, (long)9L}))) == (4L));\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)0L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (11L));\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)2L, (long)4L, (long)-6L, (long)-9L, (long)11L, (long)-12L, (long)14L, (long)-5L, (long)17L})), (new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)-1L, (long)-5L, (long)6L, (long)4L, (long)-3L, (long)-2L, (long)3L, (long)4L, (long)6L, (long)8L}))) == (1L));\n    Debug.Assert(CountSamePair((new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)2L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)2L}))) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_724_power_base_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    public static long PowerBaseSum(long numBase, long power) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PowerBaseSum((2L), (100L)) == (115L));\n    Debug.Assert(PowerBaseSum((8L), (10L)) == (37L));\n    Debug.Assert(PowerBaseSum((8L), (15L)) == (62L));\n    Debug.Assert(PowerBaseSum((3L), (3L)) == (9L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_725_extract_quotation", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to extract values between quotation marks \" \" of the given string.\n    public static List<object> ExtractQuotation(string text1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).Equals((new List<object>(new string[]{(string)\"A53\", (string)\"multi\", (string)\"Processor\"}))));\n    Debug.Assert(ExtractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).Equals((new List<object>(new string[]{(string)\"favorite\", (string)\"apps\"}))));\n    Debug.Assert(ExtractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).Equals((new List<object>(new string[]{(string)\"4k Ultra HD\", (string)\"HDR 10\"}))));\n    Debug.Assert(ExtractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).Equals((new List<object>())));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_726_multiply_elements", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    public static List<object> MultiplyElements(List<long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)8L, (long)10L}))).Equals((new List<object>(new long[]{(long)5L, (long)35L, (long)56L, (long)80L}))));\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))).Equals((new List<object>(new long[]{(long)8L, (long)20L, (long)30L, (long)42L}))));\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)12L, (long)13L, (long)14L, (long)9L, (long)15L}))).Equals((new List<object>(new long[]{(long)156L, (long)182L, (long)126L, (long)135L}))));\n    Debug.Assert(MultiplyElements((new List<long>(new long[]{(long)12L}))).Equals((new List<object>())));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_728_sum_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    public static List<long> SumList(List<long> lst1, List<long> lst2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumList((new List<long>(new long[]{(long)10L, (long)20L, (long)30L})), (new List<long>(new long[]{(long)15L, (long)25L, (long)35L}))).Equals((new List<long>(new long[]{(long)25L, (long)45L, (long)65L}))));\n    Debug.Assert(SumList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)5L, (long)6L, (long)7L}))).Equals((new List<long>(new long[]{(long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(SumList((new List<long>(new long[]{(long)15L, (long)20L, (long)30L})), (new List<long>(new long[]{(long)15L, (long)45L, (long)75L}))).Equals((new List<long>(new long[]{(long)30L, (long)65L, (long)105L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_72_dif_Square", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    public static bool DifSquare(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DifSquare((5L)) == (true));\n    Debug.Assert(DifSquare((10L)) == (false));\n    Debug.Assert(DifSquare((15L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    public static List<object> ConsecutiveDuplicates(List<object> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new List<object>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L}))));\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new List<object>(new long[]{(long)10L, (long)15L, (long)19L, (long)18L, (long)17L, (long)26L, (long)17L, (long)18L, (long)10L}))));\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\"}))));\n    Debug.Assert(ConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\", (string)\"a\", (string)\"a\"}))).Equals((new List<object>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"a\"}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the lateral surface area of a cone given radius r and the height h.\n    public static float LateralsurfaceCone(long r, long h) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LateralsurfaceCone((5L), (12L)) == (204.20352248333654f));\n    Debug.Assert(LateralsurfaceCone((10L), (15L)) == (566.3586699569488f));\n    Debug.Assert(LateralsurfaceCone((19L), (17L)) == (1521.8090132193388f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_732_replace_specialchar", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    public static string ReplaceSpecialchar(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReplaceSpecialchar((\"Python language, Programming language.\")).Equals((\"Python:language::Programming:language:\")));\n    Debug.Assert(ReplaceSpecialchar((\"a b c,d e f\")).Equals((\"a:b:c:d:e:f\")));\n    Debug.Assert(ReplaceSpecialchar((\"ram reshma,ram rahim\")).Equals((\"ram:reshma:ram:rahim\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_733_find_first_occurrence", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array.\n    public static long FindFirstOccurrence(List<long> A, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)5L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (1L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (5L)) == (2L));\n    Debug.Assert(FindFirstOccurrence((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)5L, (long)6L, (long)6L, (long)8L, (long)9L, (long)9L, (long)9L})), (6L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    public static long SumOfSubarrayProd(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (20L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L}))) == (5L));\n    Debug.Assert(SumOfSubarrayProd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (84L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    public static long ToggleMiddleBits(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ToggleMiddleBits((9L)) == (15L));\n    Debug.Assert(ToggleMiddleBits((10L)) == (12L));\n    Debug.Assert(ToggleMiddleBits((11L)) == (13L));\n    Debug.Assert(ToggleMiddleBits((65L)) == (127L));\n    Debug.Assert(ToggleMiddleBits((77L)) == (115L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_736_left_insertion", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    public static long LeftInsertion(List<long> a, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(LeftInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_737_check_str", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given string is starting with a vowel or not using regex.\n    public static bool CheckStr(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckStr((\"annie\")) == (true));\n    Debug.Assert(CheckStr((\"dawood\")) == (false));\n    Debug.Assert(CheckStr((\"Else\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_738_geometric_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    public static float GeometricSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GeometricSum((7L)) == (1.9921875f));\n    Debug.Assert(GeometricSum((4L)) == (1.9375f));\n    Debug.Assert(GeometricSum((8L)) == (1.99609375f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_739_find_Index", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    public static long FindIndex(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindIndex((2L)) == (4L));\n    Debug.Assert(FindIndex((3L)) == (14L));\n    Debug.Assert(FindIndex((4L)) == (45L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_740_tuple_to_dict", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    public static Dictionary<long,long> TupleToDict(Tuple<long, long, long, long, long, long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleToDict((Tuple.Create(1L, 5L, 7L, 10L, 13L, 5L))).Equals((new Dictionary<long,long>(){{1L, 5L}, {7L, 10L}, {13L, 5L}})));\n    Debug.Assert(TupleToDict((Tuple.Create(1L, 2L, 3L, 4L, 5L, 6L))).Equals((new Dictionary<long,long>(){{1L, 2L}, {3L, 4L}, {5L, 6L}})));\n    Debug.Assert(TupleToDict((Tuple.Create(7L, 8L, 9L, 10L, 11L, 12L))).Equals((new Dictionary<long,long>(){{7L, 8L}, {9L, 10L}, {11L, 12L}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_741_all_Characters_Same", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether all the characters are same or not.\n    public static bool AllCharactersSame(string s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllCharactersSame((\"python\")) == (false));\n    Debug.Assert(AllCharactersSame((\"aaa\")) == (true));\n    Debug.Assert(AllCharactersSame((\"data\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_742_area_tetrahedron", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to caluclate the area of a tetrahedron.\n    public static float AreaTetrahedron(long side) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AreaTetrahedron((3L)) == (15.588457268119894f));\n    Debug.Assert(AreaTetrahedron((20L)) == (692.8203230275509f));\n    Debug.Assert(AreaTetrahedron((10L)) == (173.20508075688772f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_743_rotate_right", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    public static List<long> RotateRight(List<long> list, long m) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (3L)).Equals((new List<long>(new long[]{(long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))));\n    Debug.Assert(RotateRight((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L})), (5L)).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)9L, (long)10L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_744_check_none", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given tuple has any none value or not.\n    public static bool CheckNone(object test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckNone(Tuple.Create(10L, 4L, 5L, 6L, (Nullable<long>)null)) == (true));\n    Debug.Assert(CheckNone(Tuple.Create(7L, 8L, 9L, 11L, 14L)) == (false));\n    Debug.Assert(CheckNone(Tuple.Create(1L, 2L, 3L, 4L, (Nullable<long>)null)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_745_divisible_by_digits", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    public static List<long> DivisibleByDigits(long startnum, long endnum) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DivisibleByDigits((1L), (22L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)11L, (long)12L, (long)15L, (long)22L}))));\n    Debug.Assert(DivisibleByDigits((1L), (15L)).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)11L, (long)12L, (long)15L}))));\n    Debug.Assert(DivisibleByDigits((20L), (25L)).Equals((new List<long>(new long[]{(long)22L, (long)24L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_746_sector_area", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    public static Nullable<float> SectorArea(long r, long a) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SectorArea((4L), (45L)).Equals(6.283185307179586f));\n    Debug.Assert(SectorArea((9L), (45L)).Equals(31.808625617596654f));\n    Debug.Assert(SectorArea((9L), (361L)).Equals(null));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_747_lcs_of_three", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    public static long LcsOfThree(string X, string Y, string Z) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2L));\n    Debug.Assert(LcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5L));\n    Debug.Assert(LcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_748_capital_words_spaces", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to put spaces between words starting with capital letters in a given string.\n    public static string CapitalWordsSpaces(string str1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CapitalWordsSpaces((\"Python\")).Equals((\"Python\")));\n    Debug.Assert(CapitalWordsSpaces((\"PythonProgrammingExamples\")).Equals((\"Python Programming Examples\")));\n    Debug.Assert(CapitalWordsSpaces((\"GetReadyToBeCodingFreak\")).Equals((\"Get Ready To Be Coding Freak\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    public static List<long> SortNumericStrings(List<string> nums_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"4\", (string)\"12\", (string)\"45\", (string)\"7\", (string)\"0\", (string)\"100\", (string)\"200\", (string)\"-12\", (string)\"-500\"}))).Equals((new List<long>(new long[]{(long)-500L, (long)-12L, (long)0L, (long)4L, (long)7L, (long)12L, (long)45L, (long)100L, (long)200L}))));\n    Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"2\", (string)\"3\", (string)\"8\", (string)\"4\", (string)\"7\", (string)\"9\", (string)\"8\", (string)\"2\", (string)\"6\", (string)\"5\", (string)\"1\", (string)\"6\", (string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"6\", (string)\"9\", (string)\"1\", (string)\"2\"}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)2L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)8L, (long)9L, (long)9L}))));\n    Debug.Assert(SortNumericStrings((new List<string>(new string[]{(string)\"1\", (string)\"3\", (string)\"5\", (string)\"7\", (string)\"1\", (string)\"3\", (string)\"13\", (string)\"15\", (string)\"17\", (string)\"5\", (string)\"7 \", (string)\"9\", (string)\"1\", (string)\"11\"}))).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)3L, (long)3L, (long)5L, (long)5L, (long)7L, (long)7L, (long)9L, (long)11L, (long)13L, (long)15L, (long)17L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_74_is_samepatterns", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether it follows the sequence given in the patterns array.\n    public static bool IsSamepatterns(List<string> colors, List<string> patterns) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"green\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (true));\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"b\"}))) == (false));\n    Debug.Assert(IsSamepatterns((new List<string>(new string[]{(string)\"red\", (string)\"green\", (string)\"greenn\"})), (new List<string>(new string[]{(string)\"a\", (string)\"b\"}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_750_add_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to add the given tuple to the given list.\n    public static List<long> AddTuple(List<long> test_list, Tuple<long, long> test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AddTuple((new List<long>(new long[]{(long)5L, (long)6L, (long)7L})), (Tuple.Create(9L, 10L))).Equals((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)9L, (long)10L}))));\n    Debug.Assert(AddTuple((new List<long>(new long[]{(long)6L, (long)7L, (long)8L})), (Tuple.Create(10L, 11L))).Equals((new List<long>(new long[]{(long)6L, (long)7L, (long)8L, (long)10L, (long)11L}))));\n    Debug.Assert(AddTuple((new List<long>(new long[]{(long)7L, (long)8L, (long)9L})), (Tuple.Create(11L, 12L))).Equals((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)11L, (long)12L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_751_check_min_heap", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    public static bool CheckMinHeap(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)10L, (long)15L}))) == (true));\n    Debug.Assert(CheckMinHeap((new List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)5L, (long)3L, (long)15L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_752_jacobsthal_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    public static long JacobsthalNum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(JacobsthalNum((5L)) == (11L));\n    Debug.Assert(JacobsthalNum((2L)) == (1L));\n    Debug.Assert(JacobsthalNum((4L)) == (5L));\n    Debug.Assert(JacobsthalNum((13L)) == (2731L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_753_min_k", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    public static List<Tuple<string, long>> MinK(List<Tuple<string, long>> test_list, long K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Manjeet\", 10L), (Tuple<string, long>)Tuple.Create(\"Akshat\", 4L), (Tuple<string, long>)Tuple.Create(\"Akash\", 2L), (Tuple<string, long>)Tuple.Create(\"Nikhil\", 8L)})), (2L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Akash\", 2L), (Tuple<string, long>)Tuple.Create(\"Akshat\", 4L)}))));\n    Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Sanjeev\", 11L), (Tuple<string, long>)Tuple.Create(\"Angat\", 5L), (Tuple<string, long>)Tuple.Create(\"Akash\", 3L), (Tuple<string, long>)Tuple.Create(\"Nepin\", 9L)})), (3L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Akash\", 3L), (Tuple<string, long>)Tuple.Create(\"Angat\", 5L), (Tuple<string, long>)Tuple.Create(\"Nepin\", 9L)}))));\n    Debug.Assert(MinK((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"tanmay\", 14L), (Tuple<string, long>)Tuple.Create(\"Amer\", 11L), (Tuple<string, long>)Tuple.Create(\"Ayesha\", 9L), (Tuple<string, long>)Tuple.Create(\"SKD\", 16L)})), (1L)).Equals((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Ayesha\", 9L)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_754_extract_index_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    public static List<object> ExtractIndexList(List<long> l1, List<long> l2, List<long> l3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)7L}))));\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)5L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)6L}))));\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)6L, (long)5L, (long)6L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>(new long[]{(long)1L, (long)5L}))));\n    Debug.Assert(ExtractIndexList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)6L, (long)6L, (long)6L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L})), (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)7L}))).Equals((new List<object>())));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_756_text_match_zero_one", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    public static bool TextMatchZeroOne(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchZeroOne((\"ac\")) == (false));\n    Debug.Assert(TextMatchZeroOne((\"dc\")) == (false));\n    Debug.Assert(TextMatchZeroOne((\"abbbba\")) == (true));\n    Debug.Assert(TextMatchZeroOne((\"dsabbbba\")) == (true));\n    Debug.Assert(TextMatchZeroOne((\"asbbbba\")) == (false));\n    Debug.Assert(TextMatchZeroOne((\"abaaa\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    public static long CountReversePairs(List<string> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"julia\", (string)\"best\", (string)\"tseb\", (string)\"for\", (string)\"ailuj\"}))) == (2L));\n    Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"geeks\", (string)\"best\", (string)\"for\", (string)\"skeeg\"}))) == (1L));\n    Debug.Assert(CountReversePairs((new List<string>(new string[]{(string)\"makes\", (string)\"best\", (string)\"sekam\", (string)\"for\", (string)\"rof\"}))) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_759_is_decimal", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    public static bool IsDecimal(string num) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsDecimal((\"123.11\")) == (true));\n    Debug.Assert(IsDecimal((\"e666.86\")) == (false));\n    Debug.Assert(IsDecimal((\"3.124587\")) == (false));\n    Debug.Assert(IsDecimal((\"1.11\")) == (true));\n    Debug.Assert(IsDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_75_find_tuples", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    public static List<Tuple<long, long, long>> FindTuples(List<Tuple<long, long, long>> test_list, long K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(6L, 24L, 12L), (Tuple<long, long, long>)Tuple.Create(7L, 9L, 6L), (Tuple<long, long, long>)Tuple.Create(12L, 18L, 21L)})), (6L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(6L, 24L, 12L)}))));\n    Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(5L, 25L, 30L), (Tuple<long, long, long>)Tuple.Create(4L, 2L, 3L), (Tuple<long, long, long>)Tuple.Create(7L, 8L, 9L)})), (5L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(5L, 25L, 30L)}))));\n    Debug.Assert(FindTuples((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(7L, 9L, 16L), (Tuple<long, long, long>)Tuple.Create(8L, 16L, 4L), (Tuple<long, long, long>)Tuple.Create(19L, 17L, 18L)})), (4L)).Equals((new List<Tuple<long, long, long>>(new Tuple<long, long, long>[]{(Tuple<long, long, long>)Tuple.Create(8L, 16L, 4L)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_760_unique_Element", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether a list of numbers contains only one distinct element or not.\n    public static bool UniqueElement(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))) == (true));\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(UniqueElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    public static bool CheckMonthnumberNumber(long monthnum3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckMonthnumberNumber((6L)) == (true));\n    Debug.Assert(CheckMonthnumberNumber((2L)) == (false));\n    Debug.Assert(CheckMonthnumberNumber((12L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_763_find_min_diff", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    public static long FindMinDiff(List<long> arr, long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)19L, (long)18L, (long)25L})), (6L)) == (1L));\n    Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)6L})), (4L)) == (1L));\n    Debug.Assert(FindMinDiff((new List<long>(new long[]{(long)30L, (long)5L, (long)20L, (long)9L})), (4L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_764_number_ctr", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count number of digits in a given string.\n    public static long NumberCtr(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumberCtr((\"program2bedone\")) == (1L));\n    Debug.Assert(NumberCtr((\"3wonders\")) == (1L));\n    Debug.Assert(NumberCtr((\"123\")) == (3L));\n    Debug.Assert(NumberCtr((\"3wond-1ers2\")) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_765_is_polite", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    public static long IsPolite(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPolite((7L)) == (11L));\n    Debug.Assert(IsPolite((4L)) == (7L));\n    Debug.Assert(IsPolite((9L)) == (13L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_766_pair_wise", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    public static List<Tuple<long, long>> PairWise(List<long> l1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)3L, (long)3L, (long)4L, (long)4L, (long)5L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 5L), (Tuple<long, long>)Tuple.Create(5L, 7L), (Tuple<long, long>)Tuple.Create(7L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)5L, (long)1L, (long)9L, (long)7L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(1L, 9L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(7L, 10L)}))));\n    Debug.Assert(PairWise((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(1L, 2L), (Tuple<long, long>)Tuple.Create(2L, 3L), (Tuple<long, long>)Tuple.Create(3L, 4L), (Tuple<long, long>)Tuple.Create(4L, 5L), (Tuple<long, long>)Tuple.Create(5L, 6L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(9L, 10L)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_767_get_pairs_count", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    public static long GetPairsCount(List<long> arr, long sum) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})), (2L)) == (6L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)-1L, (long)5L})), (6L)) == (3L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)1L, (long)-2L, (long)3L})), (1L)) == (1L));\n    Debug.Assert(GetPairsCount((new List<long>(new long[]{(long)-1L, (long)-2L, (long)3L})), (-3L)) == (1L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_769_Diff", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to get the difference between two lists.\n    public static List<long> Diff(List<long> li1, List<long> li2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Diff((new List<long>(new long[]{(long)10L, (long)15L, (long)20L, (long)25L, (long)30L, (long)35L, (long)40L})), (new List<long>(new long[]{(long)25L, (long)40L, (long)35L}))).Equals((new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)15L}))));\n    Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))));\n    Debug.Assert(Diff((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)6L, (long)7L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_770_odd_num_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of fourth power of first n odd natural numbers.\n    public static long OddNumSum(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddNumSum((2L)) == (82L));\n    Debug.Assert(OddNumSum((3L)) == (707L));\n    Debug.Assert(OddNumSum((4L)) == (3108L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_771_check_expression", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    public static bool CheckExpression(string exp) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckExpression((\"{()}[{}]\")) == (true));\n    Debug.Assert(CheckExpression((\"{()}[{]\")) == (false));\n    Debug.Assert(CheckExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_772_remove_length", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove all the words with k length in the given string.\n    public static string RemoveLength(string test_str, long K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveLength((\"The person is most value tet\"), (3L)).Equals((\"person is most value\")));\n    Debug.Assert(RemoveLength((\"If you told me about this ok\"), (4L)).Equals((\"If you me about ok\")));\n    Debug.Assert(RemoveLength((\"Forces of darkeness is come into the play\"), (4L)).Equals((\"Forces of darkeness is the\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_773_occurance_substring", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    public static Tuple<string, long, long> OccuranceSubstring(string text, string pattern) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OccuranceSubstring((\"python programming, python language\"), (\"python\")).Equals((Tuple.Create(\"python\", 0L, 6L))));\n    Debug.Assert(OccuranceSubstring((\"python programming,programming language\"), (\"programming\")).Equals((Tuple.Create(\"programming\", 7L, 18L))));\n    Debug.Assert(OccuranceSubstring((\"python programming,programming language\"), (\"language\")).Equals((Tuple.Create(\"language\", 31L, 39L))));\n    Debug.Assert(OccuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).Equals(null));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_775_odd_position", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    public static bool OddPosition(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L, (long)3L, (long)6L, (long)7L, (long)6L, (long)3L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)4L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(OddPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_776_count_vowels", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to count those characters which have vowels as their neighbors in the given string.\n    public static long CountVowels(string test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountVowels((\"bestinstareels\")) == (7L));\n    Debug.Assert(CountVowels((\"partofthejourneyistheend\")) == (12L));\n    Debug.Assert(CountVowels((\"amazonprime\")) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_777_find_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of non-repeated elements in a given list.\n    public static long FindSum(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L, (long)1L, (long)4L, (long)5L, (long)6L}))) == (21L));\n    Debug.Assert(FindSum((new List<long>(new long[]{(long)1L, (long)10L, (long)9L, (long)4L, (long)2L, (long)10L, (long)10L, (long)45L, (long)4L}))) == (71L));\n    Debug.Assert(FindSum((new List<long>(new long[]{(long)12L, (long)10L, (long)9L, (long)45L, (long)2L, (long)10L, (long)10L, (long)45L, (long)10L}))) == (78L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    public static List<List<object>> PackConsecutiveDuplicates(List<object> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PackConsecutiveDuplicates((new List<object>(new long[]{(long)0L, (long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)4L, (long)5L, (long)6L, (long)6L, (long)6L, (long)7L, (long)8L, (long)9L, (long)4L, (long)4L}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)2L}), (List<long>)new List<long>(new long[]{(long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L}), (List<long>)new List<long>(new long[]{(long)6L, (long)6L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L}), (List<long>)new List<long>(new long[]{(long)8L}), (List<long>)new List<long>(new long[]{(long)9L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L})}))));\n    Debug.Assert(PackConsecutiveDuplicates((new List<object>(new long[]{(long)10L, (long)10L, (long)15L, (long)19L, (long)18L, (long)18L, (long)17L, (long)26L, (long)26L, (long)17L, (long)18L, (long)10L}))).Equals((new List<List<object>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)10L, (long)10L}), (List<long>)new List<long>(new long[]{(long)15L}), (List<long>)new List<long>(new long[]{(long)19L}), (List<long>)new List<long>(new long[]{(long)18L, (long)18L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)26L, (long)26L}), (List<long>)new List<long>(new long[]{(long)17L}), (List<long>)new List<long>(new long[]{(long)18L}), (List<long>)new List<long>(new long[]{(long)10L})}))));\n    Debug.Assert(PackConsecutiveDuplicates((new List<object>(new string[]{(string)\"a\", (string)\"a\", (string)\"b\", (string)\"c\", (string)\"d\", (string)\"d\"}))).Equals((new List<List<object>>(new List<string>[]{(List<string>)new List<string>(new string[]{(string)\"a\", (string)\"a\"}), (List<string>)new List<string>(new string[]{(string)\"b\"}), (List<string>)new List<string>(new string[]{(string)\"c\"}), (List<string>)new List<string>(new string[]{(string)\"d\", (string)\"d\"})}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_77_is_Diff", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find whether a number is divisible by 11.\n    public static bool IsDiff(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsDiff((12345L)) == (false));\n    Debug.Assert(IsDiff((1212112L)) == (true));\n    Debug.Assert(IsDiff((1212L)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_780_find_combinations", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    public static List<Tuple<long, long>> FindCombinations(List<Tuple<long, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 4L), (Tuple<long, long>)Tuple.Create(6L, 7L), (Tuple<long, long>)Tuple.Create(5L, 1L), (Tuple<long, long>)Tuple.Create(6L, 10L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(8L, 11L), (Tuple<long, long>)Tuple.Create(7L, 5L), (Tuple<long, long>)Tuple.Create(8L, 14L), (Tuple<long, long>)Tuple.Create(11L, 8L), (Tuple<long, long>)Tuple.Create(12L, 17L), (Tuple<long, long>)Tuple.Create(11L, 11L)}))));\n    Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(3L, 5L), (Tuple<long, long>)Tuple.Create(7L, 8L), (Tuple<long, long>)Tuple.Create(6L, 2L), (Tuple<long, long>)Tuple.Create(7L, 11L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(10L, 13L), (Tuple<long, long>)Tuple.Create(9L, 7L), (Tuple<long, long>)Tuple.Create(10L, 16L), (Tuple<long, long>)Tuple.Create(13L, 10L), (Tuple<long, long>)Tuple.Create(14L, 19L), (Tuple<long, long>)Tuple.Create(13L, 13L)}))));\n    Debug.Assert(FindCombinations((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(4L, 6L), (Tuple<long, long>)Tuple.Create(8L, 9L), (Tuple<long, long>)Tuple.Create(7L, 3L), (Tuple<long, long>)Tuple.Create(8L, 12L)}))).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(12L, 15L), (Tuple<long, long>)Tuple.Create(11L, 9L), (Tuple<long, long>)Tuple.Create(12L, 18L), (Tuple<long, long>)Tuple.Create(15L, 12L), (Tuple<long, long>)Tuple.Create(16L, 21L), (Tuple<long, long>)Tuple.Create(15L, 15L)}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_781_count_divisors", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    public static bool CountDivisors(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDivisors((10L)) == (true));\n    Debug.Assert(CountDivisors((100L)) == (false));\n    Debug.Assert(CountDivisors((125L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_782_odd_length_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    public static long OddLengthSum(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)2L, (long)4L}))) == (14L));\n    Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)2L}))) == (15L));\n    Debug.Assert(OddLengthSum((new List<long>(new long[]{(long)1L, (long)7L}))) == (8L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    public static List<float> RgbToHsv(long r, long g, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RgbToHsv((255L), (255L), (255L)).Equals((new List<float>(new float[]{(float)0.0f, (float)0.0f, (float)100.0f}))));\n    Debug.Assert(RgbToHsv((0L), (215L), (0L)).Equals((new List<float>(new float[]{(float)120.0f, (float)100.0f, (float)84.31372549019608f}))));\n    Debug.Assert(RgbToHsv((10L), (215L), (110L)).Equals((new List<float>(new float[]{(float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_784_mul_even_odd", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    public static long MulEvenOdd(List<long> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)1L, (long)6L, (long)8L}))) == (4L));\n    Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))) == (2L));\n    Debug.Assert(MulEvenOdd((new List<long>(new long[]{(long)1L, (long)5L, (long)7L, (long)9L, (long)10L}))) == (10L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_785_tuple_str_int", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert tuple string to integer tuple.\n    public static Tuple<long, long, long> TupleStrInt(string test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TupleStrInt((\"(7, 8, 9)\")).Equals((Tuple.Create(7L, 8L, 9L))));\n    Debug.Assert(TupleStrInt((\"(1, 2, 3)\")).Equals((Tuple.Create(1L, 2L, 3L))));\n    Debug.Assert(TupleStrInt((\"(4, 5, 6)\")).Equals((Tuple.Create(4L, 5L, 6L))));\n    Debug.Assert(TupleStrInt((\"(7, 81, 19)\")).Equals((Tuple.Create(7L, 81L, 19L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_786_right_insertion", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to locate the right insertion point for a specified value in sorted order.\n    public static long RightInsertion(List<long> a, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (6L)) == (4L));\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (3L)) == (2L));\n    Debug.Assert(RightInsertion((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)5L})), (7L)) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_787_text_match_three", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that matches a string that has an a followed by three 'b'.\n    public static bool TextMatchThree(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextMatchThree((\"ac\")) == (false));\n    Debug.Assert(TextMatchThree((\"dc\")) == (false));\n    Debug.Assert(TextMatchThree((\"abbbba\")) == (true));\n    Debug.Assert(TextMatchThree((\"caacabbbba\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_788_new_tuple", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to create a new tuple from the given string and list.\n    public static Tuple<string, string, string> NewTuple(List<string> test_list, string test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"WEB\", (string)\"is\"})), (\"best\")).Equals((Tuple.Create(\"WEB\", \"is\", \"best\"))));\n    Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"We\", (string)\"are\"})), (\"Developers\")).Equals((Tuple.Create(\"We\", \"are\", \"Developers\"))));\n    Debug.Assert(NewTuple((new List<string>(new string[]{(string)\"Part\", (string)\"is\"})), (\"Wrong\")).Equals((Tuple.Create(\"Part\", \"is\", \"Wrong\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_790_even_position", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether every even index contains even numbers of a given list.\n    public static bool EvenPosition(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(EvenPosition((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(EvenPosition((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (false));\n    Debug.Assert(EvenPosition((new List<long>(new long[]{(long)2L, (long)1L, (long)4L}))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_791_remove_nested", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove tuples from the given tuple.\n    public static Tuple<long, long, long, long> RemoveNested(object test_tup) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveNested(Tuple.Create(1L, 5L, 7L, Tuple.Create(4L, 6L), 10L)).Equals((Tuple.Create(1L, 5L, 7L, 10L))));\n    Debug.Assert(RemoveNested(Tuple.Create(2L, 6L, 8L, Tuple.Create(5L, 7L), 11L)).Equals((Tuple.Create(2L, 6L, 8L, 11L))));\n    Debug.Assert(RemoveNested(Tuple.Create(3L, 7L, 9L, Tuple.Create(6L, 8L), 12L)).Equals((Tuple.Create(3L, 7L, 9L, 12L))));\n    Debug.Assert(RemoveNested(Tuple.Create(3L, 7L, 9L, Tuple.Create(6L, 8L), Tuple.Create(5L, 12L), 12L)).Equals((Tuple.Create(3L, 7L, 9L, 12L))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_792_count_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of lists in a given number of lists.\n    public static long CountList(List<List<long>> input_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)3L}), (List<long>)new List<long>(new long[]{(long)5L, (long)7L}), (List<long>)new List<long>(new long[]{(long)9L, (long)11L}), (List<long>)new List<long>(new long[]{(long)13L, (long)15L, (long)17L})}))) == (4L));\n    Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L})}))) == (3L));\n    Debug.Assert(CountList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)2L, (long)0L})}))) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_793_last", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the last position of an element in a sorted array.\n    public static long Last(List<long> arr, long x) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Last((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (1L)) == (0L));\n    Debug.Assert(Last((new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)2L, (long)3L, (long)4L})), (1L)) == (2L));\n    Debug.Assert(Last((new List<long>(new long[]{(long)2L, (long)3L, (long)2L, (long)3L, (long)6L, (long)8L, (long)9L})), (3L)) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_794_text_starta_endb", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    public static bool TextStartaEndb(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TextStartaEndb((\"aabbbb\")) == (true));\n    Debug.Assert(TextStartaEndb((\"aabAbbbc\")) == (false));\n    Debug.Assert(TextStartaEndb((\"accddbbjjj\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_796_return_sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write function to find the sum of all items in the given dictionary.\n    public static long ReturnSum(Dictionary<string,long> dict) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 100L}, {\"b\", 200L}, {\"c\", 300L}})) == (600L));\n    Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 25L}, {\"b\", 18L}, {\"c\", 45L}})) == (88L));\n    Debug.Assert(ReturnSum((new Dictionary<string,long>(){{\"a\", 36L}, {\"b\", 39L}, {\"c\", 49L}})) == (124L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_797_sum_in_range", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of all odd natural numbers within the range l and r.\n    public static long SumInRange(long l, long r) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumInRange((2L), (5L)) == (8L));\n    Debug.Assert(SumInRange((5L), (7L)) == (12L));\n    Debug.Assert(SumInRange((7L), (13L)) == (40L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_798__sum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the sum of an array.\n    public static long Sum(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (6L));\n    Debug.Assert(Sum((new List<long>(new long[]{(long)15L, (long)12L, (long)13L, (long)10L}))) == (50L));\n    Debug.Assert(Sum((new List<long>(new long[]{(long)0L, (long)1L, (long)2L}))) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_799_left_rotate", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    public static long LeftRotate(long n, long d) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LeftRotate((16L), (2L)) == (64L));\n    Debug.Assert(LeftRotate((10L), (2L)) == (40L));\n    Debug.Assert(LeftRotate((99L), (3L)) == (792L));\n    Debug.Assert(LeftRotate((99L), (3L)) == (792L));\n    Debug.Assert(LeftRotate((1L), (3L)) == (8L));\n    Debug.Assert(LeftRotate((5L), (3L)) == (40L));\n    Debug.Assert(LeftRotate((29L), (3L)) == (232L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_79_word_len", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to check whether the length of the word is odd or not.\n    public static bool WordLen(string s) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordLen((\"Hadoop\")) == (false));\n    Debug.Assert(WordLen((\"great\")) == (true));\n    Debug.Assert(WordLen((\"structure\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_800_remove_all_spaces", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to remove all whitespaces from a string.\n    public static string RemoveAllSpaces(string text) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveAllSpaces((\"python  program\")).Equals((\"pythonprogram\")));\n    Debug.Assert(RemoveAllSpaces((\"python   programming    language\")).Equals((\"pythonprogramminglanguage\")));\n    Debug.Assert(RemoveAllSpaces((\"python                     program\")).Equals((\"pythonprogram\")));\n    Debug.Assert(RemoveAllSpaces((\"   python                     program\")).Equals((\"pythonprogram\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_801_test_three_equal", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of equal numbers from three given integers.\n    public static long TestThreeEqual(long x, long y, long z) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TestThreeEqual((1L), (1L), (1L)) == (3L));\n    Debug.Assert(TestThreeEqual((-1L), (-2L), (-3L)) == (0L));\n    Debug.Assert(TestThreeEqual((1L), (2L), (2L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_802_count_rotation", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    public static long CountRotation(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (1L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)4L, (long)5L, (long)1L, (long)2L, (long)3L}))) == (2L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)1L, (long)2L, (long)3L}))) == (3L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (0L));\n    Debug.Assert(CountRotation((new List<long>(new long[]{(long)1L, (long)3L, (long)2L}))) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_803_is_perfect_square", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    public static bool IsPerfectSquare(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPerfectSquare((10L)) == (false));\n    Debug.Assert(IsPerfectSquare((36L)) == (true));\n    Debug.Assert(IsPerfectSquare((14L)) == (false));\n    Debug.Assert(IsPerfectSquare((196L)) == (true));\n    Debug.Assert(IsPerfectSquare((125L)) == (false));\n    Debug.Assert(IsPerfectSquare((15625L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_804_is_product_even", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    public static bool IsProductEven(List<long> arr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))) == (true));\n    Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L}))) == (true));\n    Debug.Assert(IsProductEven((new List<long>(new long[]{(long)1L, (long)1L}))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_805_max_sum_list", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    public static List<long> MaxSumList(List<List<long>> lists) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)10L, (long)11L, (long)12L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})}))).Equals((new List<long>(new long[]{(long)10L, (long)11L, (long)12L}))));\n    Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)2L, (long)1L}), (List<long>)new List<long>(new long[]{(long)6L, (long)5L, (long)4L}), (List<long>)new List<long>(new long[]{(long)12L, (long)11L, (long)10L})}))).Equals((new List<long>(new long[]{(long)12L, (long)11L, (long)10L}))));\n    Debug.Assert(MaxSumList((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)2L, (long)3L, (long)1L})}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)1L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_806_max_run_uppercase", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    public static long MaxRunUppercase(string test_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxRunUppercase((\"GeMKSForGERksISBESt\")) == (5L));\n    Debug.Assert(MaxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6L));\n    Debug.Assert(MaxRunUppercase((\"GooGLEFluTTER\")) == (4L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_807_first_odd", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the first odd number in a given list of numbers.\n    public static long FirstOdd(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FirstOdd((new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))) == (1L));\n    Debug.Assert(FirstOdd((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(FirstOdd((new List<long>(new long[]{(long)8L, (long)9L, (long)1L}))) == (9L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_808_check_K", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if the given tuples contain the k or not.\n    public static bool CheckK(List<long> test_tup, long K) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckK((new List<long>(new long[]{(long)10L, (long)4L, (long)5L, (long)6L, (long)8L})), (6L)) == (true));\n    Debug.Assert(CheckK((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})), (7L)) == (false));\n    Debug.Assert(CheckK((new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)44L, (long)11L, (long)12L})), (11L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_809_check_smaller", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    public static bool CheckSmaller(Tuple<long, long, long> test_tup1, Tuple<long, long, long> test_tup2) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckSmaller((Tuple.Create(1L, 2L, 3L)), (Tuple.Create(2L, 3L, 4L))) == (false));\n    Debug.Assert(CheckSmaller((Tuple.Create(4L, 5L, 6L)), (Tuple.Create(3L, 4L, 5L))) == (true));\n    Debug.Assert(CheckSmaller((Tuple.Create(11L, 12L, 13L)), (Tuple.Create(10L, 11L, 12L))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_80_tetrahedral_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth tetrahedral number.\n    public static long TetrahedralNumber(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TetrahedralNumber((5L)) == (35L));\n    Debug.Assert(TetrahedralNumber((6L)) == (56L));\n    Debug.Assert(TetrahedralNumber((7L)) == (84L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_83_get_Char", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    public static string GetChar(string strr) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetChar((\"abc\")).Equals((\"f\")));\n    Debug.Assert(GetChar((\"gfg\")).Equals((\"t\")));\n    Debug.Assert(GetChar((\"ab\")).Equals((\"c\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_84_sequence", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the nth number in the newman conway sequence.\n    public static long Sequence(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Sequence((10L)) == (6L));\n    Debug.Assert(Sequence((2L)) == (1L));\n    Debug.Assert(Sequence((3L)) == (2L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find nth centered hexagonal number.\n    public static long CenteredHexagonalNumber(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CenteredHexagonalNumber((10L)) == (271L));\n    Debug.Assert(CenteredHexagonalNumber((2L)) == (7L));\n    Debug.Assert(CenteredHexagonalNumber((9L)) == (217L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to merge three dictionaries into a single dictionary.\n    public static Dictionary<string,string> MergeDictionariesThree(Dictionary<string,string> dict1, Dictionary<string,string> dict2, Dictionary<string,string> dict3) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}}), (new Dictionary<string,string>(){{\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"}})).Equals((new Dictionary<string,string>(){{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}})));\n    Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}}), (new Dictionary<string,string>(){{\"L\", \"lavender\"}, {\"B\", \"Blue\"}})).Equals((new Dictionary<string,string>(){{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}})));\n    Debug.Assert(MergeDictionariesThree((new Dictionary<string,string>(){{\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"}}), (new Dictionary<string,string>(){{\"L\", \"lavender\"}, {\"B\", \"Blue\"}}), (new Dictionary<string,string>(){{\"G\", \"Green\"}, {\"W\", \"White\"}})).Equals((new Dictionary<string,string>(){{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_88_freq_count", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    public static Dictionary<long,long> FreqCount(List<long> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FreqCount((new List<long>(new long[]{(long)10L, (long)10L, (long)10L, (long)10L, (long)20L, (long)20L, (long)20L, (long)20L, (long)40L, (long)40L, (long)50L, (long)50L, (long)30L}))).Equals((new Dictionary<long,long>(){{10L, 4L}, {20L, 4L}, {40L, 2L}, {50L, 2L}, {30L, 1L}})));\n    Debug.Assert(FreqCount((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)4L, (long)1L, (long)3L, (long)1L, (long)4L}))).Equals((new Dictionary<long,long>(){{1L, 3L}, {2L, 2L}, {3L, 3L}, {4L, 3L}})));\n    Debug.Assert(FreqCount((new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)4L, (long)9L, (long)10L, (long)4L, (long)5L, (long)6L, (long)7L, (long)9L, (long)5L}))).Equals((new Dictionary<long,long>(){{10L, 1L}, {5L, 3L}, {6L, 2L}, {7L, 2L}, {4L, 2L}, {9L, 2L}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_89_closest_num", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find the closest smaller number than n.\n    public static long ClosestNum(long N) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestNum((11L)) == (10L));\n    Debug.Assert(ClosestNum((7L)) == (6L));\n    Debug.Assert(ClosestNum((12L)) == (11L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_8_square_nums", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find squares of individual elements in a list.\n    public static List<long> SquareNums(List<long> nums) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SquareNums((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)9L, (long)16L, (long)25L, (long)36L, (long)49L, (long)64L, (long)81L, (long)100L}))));\n    Debug.Assert(SquareNums((new List<long>(new long[]{(long)10L, (long)20L, (long)30L}))).Equals((new List<long>(new long[]{(long)100L, (long)400L, (long)900L}))));\n    Debug.Assert(SquareNums((new List<long>(new long[]{(long)12L, (long)15L}))).Equals((new List<long>(new long[]{(long)144L, (long)225L}))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_90_len_log", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the length of the longest word.\n    public static long LenLog(List<string> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LenLog((new List<string>(new string[]{(string)\"python\", (string)\"PHP\", (string)\"bigdata\"}))) == (7L));\n    Debug.Assert(LenLog((new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))) == (3L));\n    Debug.Assert(LenLog((new List<string>(new string[]{(string)\"small\", (string)\"big\", (string)\"tall\"}))) == (5L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_91_find_substring", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check if a string is present as a substring in a given list of string values.\n    public static bool FindSubstring(List<string> str1, string sub_str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"ack\")) == (true));\n    Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"abc\")) == (false));\n    Debug.Assert(FindSubstring((new List<string>(new string[]{(string)\"red\", (string)\"black\", (string)\"white\", (string)\"green\", (string)\"orange\"})), (\"ange\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_92_is_undulating", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to check whether the given number is undulating or not.\n    public static bool IsUndulating(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsUndulating((1212121L)) == (true));\n    Debug.Assert(IsUndulating((1991L)) == (false));\n    Debug.Assert(IsUndulating((121L)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_93_power", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to calculate the value of 'a' to the power 'b'.\n    public static long Power(long a, long b) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Power((3L), (4L)) == (81L));\n    Debug.Assert(Power((2L), (3L)) == (8L));\n    Debug.Assert(Power((5L), (5L)) == (3125L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_94_index_minimum", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    public static string IndexMinimum(List<Tuple<string, long>> test_list) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Rash\", 143L), (Tuple<string, long>)Tuple.Create(\"Manjeet\", 200L), (Tuple<string, long>)Tuple.Create(\"Varsha\", 100L)}))).Equals((\"Varsha\")));\n    Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Yash\", 185L), (Tuple<string, long>)Tuple.Create(\"Dawood\", 125L), (Tuple<string, long>)Tuple.Create(\"Sanya\", 175L)}))).Equals((\"Dawood\")));\n    Debug.Assert(IndexMinimum((new List<Tuple<string, long>>(new Tuple<string, long>[]{(Tuple<string, long>)Tuple.Create(\"Sai\", 345L), (Tuple<string, long>)Tuple.Create(\"Salman\", 145L), (Tuple<string, long>)Tuple.Create(\"Ayesha\", 96L)}))).Equals((\"Ayesha\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_95_Find_Min_Length", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the length of the smallest list in a list of lists.\n    public static long FindMinLength(List<List<long>> lst) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L})}))) == (1L));\n    Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})}))) == (2L));\n    Debug.Assert(FindMinLength((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)3L, (long)3L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L})}))) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_96_divisor", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the number of divisors of a given integer.\n    public static long Divisor(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Divisor((15L)) == (4L));\n    Debug.Assert(Divisor((12L)) == (6L));\n    Debug.Assert(Divisor((9L)) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_97_frequency_lists", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    public static Dictionary<long,long> FrequencyLists(List<List<long>> list1) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)2L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L, (long)5L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 3L}, {3L, 1L}, {4L, 1L}, {5L, 2L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}), (List<long>)new List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L}), (List<long>)new List<long>(new long[]{(long)9L, (long)10L, (long)11L, (long)12L})}))).Equals((new Dictionary<long,long>(){{1L, 1L}, {2L, 1L}, {3L, 1L}, {4L, 1L}, {5L, 1L}, {6L, 1L}, {7L, 1L}, {8L, 1L}, {9L, 1L}, {10L, 1L}, {11L, 1L}, {12L, 1L}})));\n    Debug.Assert(FrequencyLists((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)20L, (long)30L, (long)40L, (long)17L}), (List<long>)new List<long>(new long[]{(long)18L, (long)16L, (long)14L, (long)13L}), (List<long>)new List<long>(new long[]{(long)10L, (long)20L, (long)30L, (long)40L})}))).Equals((new Dictionary<long,long>(){{20L, 2L}, {30L, 2L}, {40L, 2L}, {17L, 1L}, {18L, 1L}, {16L, 1L}, {14L, 1L}, {13L, 1L}, {10L, 1L}})));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_99_decimal_to_binary", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    public static string DecimalToBinary(long n) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((8L)).Equals((\"1000\")));\n    Debug.Assert(DecimalToBinary((18L)).Equals((\"10010\")));\n    Debug.Assert(DecimalToBinary((7L)).Equals((\"111\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_9_find_Rotations", "language": "cs", "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    public static long FindRotations(string str) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindRotations((\"aaaa\")) == (1L));\n    Debug.Assert(FindRotations((\"ab\")) == (2L));\n    Debug.Assert(FindRotations((\"abc\")) == (3L));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
