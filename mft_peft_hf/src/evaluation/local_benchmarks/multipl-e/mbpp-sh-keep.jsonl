{"name": "mbpp_100_next_smallest_palindrome", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n#\n# $1 is an integer\nnext_smallest_palindrome() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    next_smallest_palindrome \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"99\") = \"101\" ]]\n    [[ $(candidate \"1221\") = \"1331\" ]]\n    [[ $(candidate \"120\") = \"121\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_101_kth_element", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the kth element in the given array using 1-based indexing.\n#\n# $1 is a space-separated list\n# $2 is an integer\nkth_element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    kth_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 3 5 7 19\" \"2\") = \"3\" ]]\n    [[ $(candidate \"17 24 8 23\" \"3\") = \"8\" ]]\n    [[ $(candidate \"16 21 25 36 4\" \"4\") = \"36\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_102_snake_to_camel", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python_program\") = \"PythonProgram\" ]]\n    [[ $(candidate \"python_language\") = \"PythonLanguage\" ]]\n    [[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_103_eulerian_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the Eulerian number a(n, m).\n#\n# $1 is an integer\n# $2 is an integer\neulerian_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    eulerian_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"1\") = \"4\" ]]\n    [[ $(candidate \"4\" \"1\") = \"11\" ]]\n    [[ $(candidate \"5\" \"3\") = \"26\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_104_sort_sublists", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort each sublist of strings in a given list of lists.\n#\n# $1 is a newline-separated, space-separated list\nsort_sublists() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sort_sublists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"green orange\\nblack white\\nwhite black orange\") = \"green orange\\nblack white\\nblack orange white\" ]]\n    [[ $(candidate \"zilver gold\\nmagnesium aluminium\\nsteel bronze\") = \"gold zilver\\naluminium magnesium\\nbronze steel\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_105_count", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count true booleans in the given list.\n#\n# $1 is a space-separated list\ncount() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"true false true\") = \"2\" ]]\n    [[ $(candidate \"false false\") = \"0\" ]]\n    [[ $(candidate \"true true true\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_106_add_lists", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to append the given list to the given tuples.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_lists() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    add_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\" \"9 10\") = \"9 10 5 6 7\" ]]\n    [[ $(candidate \"6 7 8\" \"10 11\") = \"10 11 6 7 8\" ]]\n    [[ $(candidate \"7 8 9\" \"11 12\") = \"11 12 7 8 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_108_merge_sorted_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to merge three lists into a single sorted list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\nmerge_sorted_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    merge_sorted_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 24 15 4 5 29 110\" \"19 20 11 56 25 233 154\" \"24 26 54 48\") = \"4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233\" ]]\n    [[ $(candidate \"1 3 5 6 8 9\" \"2 5 7 11\" \"1 4 7 8 12\") = \"1 1 2 3 4 5 5 6 7 7 8 8 9 11 12\" ]]\n    [[ $(candidate \"18 14 10 9 8 7 9 3 2 4 1\" \"25 35 22 85 14 65 75 25 58\" \"12 74 9 50 61 41\") = \"1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_109_odd_Equivalent", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n#\n# $1 is a string\n# $2 is an integer\nodd_Equivalent() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    odd_Equivalent \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"011001\" \"6\") = \"3\" ]]\n    [[ $(candidate \"11011\" \"5\") = \"4\" ]]\n    [[ $(candidate \"1010\" \"4\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_113_check_integer", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if a string represents an integer or not.\n#\n# $1 is a string\ncheck_integer() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"false\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"12345\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_115_empty_dit", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether all dictionaries in a list are empty or not.\n#\n# $1 is a $Any\nempty_dit() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    empty_dit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_116_tuple_to_int", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a given tuple of positive integers into a single integer.\n#\n# $1 is a space-separated list\ntuple_to_int() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    tuple_to_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"123\" ]]\n    [[ $(candidate \"4 5 6\") = \"456\" ]]\n    [[ $(candidate \"5 6 7\") = \"567\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_117_list_to_float", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert all possible convertible elements in a list of lists to floats.\n#\n# $1 is a newline-separated, space-separated list\nlist_to_float() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    list_to_float \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\\n1 26.45\\n7.32 8\\n4 8\") = \"3.0 4.0\\n1.0 26.45\\n7.32 8.0\\n4.0 8.0\" ]]\n    [[ $(candidate \"4 4\\n2 27\\n4.12 9\\n7 11\") = \"4.0 4.0\\n2.0 27.0\\n4.12 9.0\\n7.0 11.0\" ]]\n    [[ $(candidate \"6 78\\n5 26.45\\n1.33 4\\n82 13\") = \"6.0 78.0\\n5.0 26.45\\n1.33 4.0\\n82.0 13.0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_118_string_to_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a string to a list of strings split on the space character.\n#\n# $1 is a string\nstring_to_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    string_to_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python programming\") = \"python programming\" ]]\n    [[ $(candidate \"lists tuples strings\") = \"lists tuples strings\" ]]\n    [[ $(candidate \"write a program\") = \"write a program\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_119_search", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the element that appears only once in a sorted array.\n#\n# $1 is a space-separated list\nsearch() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 1 3 3 4 4 5 5 7 7 8\") = \"8\" ]]\n    [[ $(candidate \"1 2 2 3 3 4 4\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_11_remove_Occ", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to remove first and last occurrence of a given character from the string.\n#\n# $1 is a string\n# $2 is a string\nremove_Occ() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_Occ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello\" \"l\") = \"heo\" ]]\n    [[ $(candidate \"abcda\" \"a\") = \"bcd\" ]]\n    [[ $(candidate \"PHP\" \"P\") = \"H\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_120_max_product_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n#\n# $1 is a newline-separated, space-separated list\nmax_product_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_product_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 7\\n2 6\\n1 8\\n4 9\") = \"36\" ]]\n    [[ $(candidate \"10 20\\n15 2\\n5 10\") = \"200\" ]]\n    [[ $(candidate \"11 44\\n10 15\\n20 5\\n12 9\") = \"484\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sum all amicable numbers from 1 to a specified number.\n#\n# $1 is an integer\namicable_numbers_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    amicable_numbers_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"999\") = \"504\" ]]\n    [[ $(candidate \"9999\") = \"31626\" ]]\n    [[ $(candidate \"99\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_125_find_length", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n#\n# $1 is a string\nfind_length() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11000010001\") = \"6\" ]]\n    [[ $(candidate \"10111\") = \"1\" ]]\n    [[ $(candidate \"11011101100101\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_126_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of common divisors of two given numbers.\n#\n# $1 is an integer\n# $2 is an integer\nsum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"15\") = \"6\" ]]\n    [[ $(candidate \"100\" \"150\") = \"93\" ]]\n    [[ $(candidate \"4\" \"6\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_127_multiply_int", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to multiply two integers.\n#\n# $1 is an integer\n# $2 is an integer\nmultiply_int() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    multiply_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\") = \"200\" ]]\n    [[ $(candidate \"5\" \"10\") = \"50\" ]]\n    [[ $(candidate \"4\" \"8\") = \"32\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_128_long_words", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find words that are longer than n characters from a given list of words.\n#\n# $1 is an integer\n# $2 is a string\nlong_words() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    long_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"python is a programming language\") = \"python programming language\" ]]\n    [[ $(candidate \"2\" \"writing a program\") = \"writing program\" ]]\n    [[ $(candidate \"5\" \"sorting list\") = \"sorting\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_129_magic_square_test", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate whether the matrix is a magic square.\n#\n# $1 is a newline-separated, space-separated list\nmagic_square_test() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    magic_square_test \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7 12 1 14\\n2 13 8 11\\n16 3 10 5\\n9 6 15 4\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 8\") = \"true\" ]]\n    [[ $(candidate \"2 7 6\\n9 5 1\\n4 3 7\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_12_sort_matrix", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sort_matrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]\n    [[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]\n    [[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_130_max_occurrences", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the item with maximum frequency in a given list.\n#\n# $1 is a space-separated list\nmax_occurrences() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_occurrences \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2\") = \"2\" ]]\n    [[ $(candidate \"2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18\") = \"8\" ]]\n    [[ $(candidate \"10 20 20 30 40 90 80 50 30 20 50 10\") = \"20\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_131_reverse_vowels", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n#\n# $1 is a string\nreverse_vowels() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    reverse_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"Python\" ]]\n    [[ $(candidate \"USA\") = \"ASU\" ]]\n    [[ $(candidate \"ab\") = \"ab\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_132_tup_string", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a list to a string.\n#\n# $1 is a space-separated list\ntup_string() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    tup_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"e x e r c i s e s\") = \"exercises\" ]]\n    [[ $(candidate \"p y t h o n\") = \"python\" ]]\n    [[ $(candidate \"p r o g r a m\") = \"program\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_133_sum_negativenum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate the sum of the negative numbers of a given list of numbers.\n#\n# $1 is a space-separated list\nsum_negativenum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_negativenum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\") = \"-32\" ]]\n    [[ $(candidate \"10 15 -14 13 -18 12 -20\") = \"-52\" ]]\n    [[ $(candidate \"19 -65 57 39 152 -639 121 44 90 -190\") = \"-894\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_135_hexagonal_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth hexagonal number.\n#\n# $1 is an integer\nhexagonal_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    hexagonal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"190\" ]]\n    [[ $(candidate \"5\") = \"45\" ]]\n    [[ $(candidate \"7\") = \"91\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n#\n# $1 is an integer\nis_Sum_Of_Powers_Of_Two() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_Sum_Of_Powers_Of_Two \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"7\") = \"false\" ]]\n    [[ $(candidate \"14\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_141_pancake_sort", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort a list of elements.\n#\n# $1 is a space-separated list\npancake_sort() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    pancake_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 79 25 38 69\") = \"15 25 38 69 79\" ]]\n    [[ $(candidate \"98 12 54 36 85\") = \"12 36 54 85 98\" ]]\n    [[ $(candidate \"41 42 32 12 23\") = \"12 23 32 41 42\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_142_count_samepair", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count number items that are identical in the same position of three given lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\ncount_samepair() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_samepair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 9\" \"2 1 3 1 2 6 7 9\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 8\" \"2 1 3 1 2 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 2 6 7 8\" \"2 2 3 1 2 6 7 8\" \"2 1 3 1 2 6 7 8\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_143_find_lists", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find number of lists present in the given list.\n#\n# $1 is a space-separated list\nfind_lists() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\") = \"2\" ]]\n    [[ $(candidate \"1 2\\n3 4\\n5 6\") = \"3\" ]]\n    [[ $(candidate \"9 8 7 6 5 4 3 2 1\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the maximum difference between any two elements in a given array.\n#\n# $1 is a space-separated list\nmax_Abs_Diff() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_Abs_Diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 5 3\") = \"4\" ]]\n    [[ $(candidate \"9 3 2 5 1\") = \"8\" ]]\n    [[ $(candidate \"3 2 1\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_14_find_Volume", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the volume of a triangular prism.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_Volume() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Volume \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"8\" \"6\") = \"240\" ]]\n    [[ $(candidate \"3\" \"2\" \"2\") = \"6\" ]]\n    [[ $(candidate \"1\" \"2\" \"1\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_160_find_solution", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_solution() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"7\") = \"2 1\" ]]\n    [[ $(candidate \"4\" \"2\" \"7\") = \"None\" ]]\n    [[ $(candidate \"1\" \"13\" \"17\") = \"4 1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_161_remove_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove all elements from a given list present in another list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nremove_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2 4 6 8\") = \"1 3 5 7 9 10\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"1 3 5 7\") = \"2 4 6 8 9 10\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5 7\") = \"1 2 3 4 6 8 9 10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_162_sum_series", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n#\n# $1 is an integer\nsum_series() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_series \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"12\" ]]\n    [[ $(candidate \"10\") = \"30\" ]]\n    [[ $(candidate \"9\") = \"25\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_164_are_equivalent", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to determine if the sum of the divisors of two integers are the same.\n#\n# $1 is an integer\n# $2 is an integer\nare_equivalent() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    are_equivalent \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"36\" \"57\") = \"false\" ]]\n    [[ $(candidate \"2\" \"4\") = \"false\" ]]\n    [[ $(candidate \"23\" \"47\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_165_count_char_position", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n#\n# $1 is a string\ncount_char_position() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_char_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"xbcefg\") = \"2\" ]]\n    [[ $(candidate \"ABcED\") = \"3\" ]]\n    [[ $(candidate \"AbgdeF\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_166_find_even_pair", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that counts the number of pairs of integers in a list that xor to an even number.\n#\n# $1 is a space-separated list\nfind_even_pair() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_even_pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 7 2 1\") = \"4\" ]]\n    [[ $(candidate \"7 2 8 1 0 5 11\") = \"9\" ]]\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_167_next_power_of_2", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the smallest power of 2 greater than or equal to n.\n#\n# $1 is an integer\nnext_power_of_2() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    next_power_of_2 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"1\" ]]\n    [[ $(candidate \"5\") = \"8\" ]]\n    [[ $(candidate \"17\") = \"32\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_168_frequency", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count the number of occurrences of a number in a given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfrequency() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    frequency \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4\") = \"0\" ]]\n    [[ $(candidate \"1 2 2 3 3 3 4\" \"3\") = \"3\" ]]\n    [[ $(candidate \"0 1 2 3 1 2\" \"1\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n#\n# $1 is a string\ntext_lowercase_underscore() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_lowercase_underscore \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aab_cbbbc\") = \"true\" ]]\n    [[ $(candidate \"aab_Abbbc\") = \"false\" ]]\n    [[ $(candidate \"Aaab_abbbc\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_170_sum_range_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the sum of numbers in a list within a range specified by two indices.\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nsum_range_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_range_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"8\" \"10\") = \"29\" ]]\n    [[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"5\" \"7\") = \"16\" ]]\n    [[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"7\" \"10\") = \"38\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the perimeter of a regular pentagon from the length of its sides.\n#\n# $1 is an integer\nperimeter_pentagon() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    perimeter_pentagon \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"25\" ]]\n    [[ $(candidate \"10\") = \"50\" ]]\n    [[ $(candidate \"15\") = \"75\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_172_count_occurance", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count the number of occurence of the string 'std' in a given string.\n#\n# $1 is a string\ncount_occurance() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_occurance \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"letstdlenstdporstd\") = \"3\" ]]\n    [[ $(candidate \"truststdsolensporsd\") = \"1\" ]]\n    [[ $(candidate \"makestdsostdworthit\") = \"2\" ]]\n    [[ $(candidate \"stds\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_17_square_perimeter", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that returns the perimeter of a square given its side length as input.\n#\n# $1 is an integer\nsquare_perimeter() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    square_perimeter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"40\" ]]\n    [[ $(candidate \"5\") = \"20\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove characters from the first string which are present in the second string.\n#\n# $1 is a string\n# $2 is a string\nremove_dirty_chars() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_dirty_chars \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"probasscurve\" \"pros\") = \"bacuve\" ]]\n    [[ $(candidate \"digitalindia\" \"talent\") = \"digiidi\" ]]\n    [[ $(candidate \"exoticmiles\" \"toxic\") = \"emles\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_19_test_duplicate", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find whether a given array of integers contains any duplicate element.\n#\n# $1 is a space-separated list\ntest_duplicate() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    test_duplicate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 4\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 2 3 3 4 4 5\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_20_is_woodall", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if the given number is woodball or not.\n#\n# $1 is an integer\nis_woodall() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_woodall \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"383\") = \"true\" ]]\n    [[ $(candidate \"254\") = \"false\" ]]\n    [[ $(candidate \"200\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_222_check_type", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if all the elements in tuple have same data type or not.\n#\n# $1 is a $Any\ncheck_type() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_type \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7 3 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 4\") = \"false\" ]]\n    [[ $(candidate \"3 2 1 4 5\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_223_is_majority", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nis_majority() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_majority \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 3 3 3 10\" \"7\" \"3\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 4 4 4 6 6\" \"8\" \"4\") = \"false\" ]]\n    [[ $(candidate \"1 1 1 2 2\" \"5\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1 1 2 2\" \"5\" \"1\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_224_count_Set_Bits", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n#\n# $1 is an integer\ncount_Set_Bits() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_Set_Bits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"4\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_226_odd_values_string", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to remove the characters which have odd index values of a given string.\n#\n# $1 is a string\nodd_values_string() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    odd_values_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcdef\") = \"ace\" ]]\n    [[ $(candidate \"python\") = \"pto\" ]]\n    [[ $(candidate \"data\") = \"dt\" ]]\n    [[ $(candidate \"lambs\") = \"lms\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_227_min_of_three", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find minimum of three numbers.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmin_of_three() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    min_of_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\" \"0\") = \"0\" ]]\n    [[ $(candidate \"19\" \"15\" \"18\") = \"15\" ]]\n    [[ $(candidate \"-10\" \"-20\" \"-30\") = \"-30\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether all the bits are unset in the given range or not.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nall_Bits_Set_In_The_Given_Range() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    all_Bits_Set_In_The_Given_Range \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\" \"1\" \"2\") = \"true\" ]]\n    [[ $(candidate \"17\" \"2\" \"4\") = \"true\" ]]\n    [[ $(candidate \"39\" \"4\" \"6\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_229_re_arrange_array", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n#\n# $1 is a space-separated list\n# $2 is an integer\nre_arrange_array() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    re_arrange_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 2 -3 4 5 6 -7 8 9\" \"9\") = \"-1 -3 -7 4 5 6 2 8 9\" ]]\n    [[ $(candidate \"12 -14 -26 13 15\" \"5\") = \"-14 -26 12 13 15\" ]]\n    [[ $(candidate \"10 24 36 -42 -39 -78 85\" \"7\") = \"-42 -39 -78 10 24 36 85\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_230_replace_blank", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n#\n# $1 is a string\n# $2 is a string\nreplace_blank() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    replace_blank \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hello people\" \"@\") = \"hello@people\" ]]\n    [[ $(candidate \"python program language\" \"\\$\") = \"python\\$program\\$language\" ]]\n    [[ $(candidate \"blank space\" \"-\") = \"blank-space\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_234_volume_cube", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the volume of a cube given its side length.\n#\n# $1 is an integer\nvolume_cube() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    volume_cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"27\" ]]\n    [[ $(candidate \"2\") = \"8\" ]]\n    [[ $(candidate \"5\") = \"125\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_238_number_of_substrings", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of non-empty substrings of a given string.\n#\n# $1 is a string\nnumber_of_substrings() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    number_of_substrings \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"6\" ]]\n    [[ $(candidate \"abcd\") = \"10\" ]]\n    [[ $(candidate \"abcde\") = \"15\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n#\n# $1 is an integer\n# $2 is an integer\nget_total_number_of_sequences() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_total_number_of_sequences \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"4\") = \"4\" ]]\n    [[ $(candidate \"5\" \"2\") = \"6\" ]]\n    [[ $(candidate \"16\" \"3\") = \"84\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_240_replace_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nreplace_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    replace_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 10\" \"2 4 6 8\") = \"1 3 5 7 9 2 4 6 8\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"5 6 7 8\") = \"1 2 3 4 5 6 7 8\" ]]\n    [[ $(candidate \"red blue green\" \"yellow\") = \"red blue yellow\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_242_count_charac", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count the total number of characters in a string.\n#\n# $1 is a string\ncount_charac() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_charac \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python programming\") = \"18\" ]]\n    [[ $(candidate \"language\") = \"8\" ]]\n    [[ $(candidate \"words\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the next perfect square greater than a given number.\n#\n# $1 is an integer\nnext_Perfect_Square() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    next_Perfect_Square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"35\") = \"36\" ]]\n    [[ $(candidate \"6\") = \"9\" ]]\n    [[ $(candidate \"9\") = \"16\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_245_max_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n#\n# $1 is a space-separated list\nmax_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]\n    [[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]\n    [[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_247_lps", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the length of the longest palindromic subsequence in the given string.\n#\n# $1 is a string\nlps() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    lps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"TENS FOR TENS\") = \"5\" ]]\n    [[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]\n    [[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_249_intersection_array", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the intersection of two arrays.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection_array() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    intersection_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 5 7 8 9 10\" \"1 2 4 8 9\") = \"1 2 8 9\" ]]\n    [[ $(candidate \"1 2 3 5 7 8 9 10\" \"3 5 7 9\") = \"3 5 7 9\" ]]\n    [[ $(candidate \"1 2 3 5 7 8 9 10\" \"10 20 30 40\") = \"10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_250_count_X", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncount_X() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_X \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"4\") = \"0\" ]]\n    [[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"10\") = \"3\" ]]\n    [[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"8\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_251_insert_element", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n#\n# $1 is a space-separated list\n# $2 is a string\ninsert_element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    insert_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Red Green Black\" \"c\") = \"c Red c Green c Black\" ]]\n    [[ $(candidate \"python java\" \"program\") = \"program python program java\" ]]\n    [[ $(candidate \"happy sad\" \"laugh\") = \"laugh happy laugh sad\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_252_convert", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to convert complex numbers to polar coordinates.\n#\n# $1 is an integer\nconvert() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    convert \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"1.0 0.0\" ]]\n    [[ $(candidate \"4\") = \"4.0 0.0\" ]]\n    [[ $(candidate \"5\") = \"5.0 0.0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_253_count_integer", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function that returns the number of integer elements in a given list.\n#\n# $1 is a newline-separated, space-separated list\ncount_integer() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 abc 1.2\") = \"2\" ]]\n    [[ $(candidate \"1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 1.2 4 5.1\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_255_combinations_colors", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncombinations_colors() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    combinations_colors \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Red Green Blue\" \"1\") = \"Red\\nGreen\\nBlue\" ]]\n    [[ $(candidate \"Red Green Blue\" \"2\") = \"Red Red\\nRed Green\\nRed Blue\\nGreen Green\\nGreen Blue\\nBlue Blue\" ]]\n    [[ $(candidate \"Red Green Blue\" \"3\") = \"Red Red Red\\nRed Red Green\\nRed Red Blue\\nRed Green Green\\nRed Green Blue\\nRed Blue Blue\\nGreen Green Green\\nGreen Green Blue\\nGreen Blue Blue\\nBlue Blue Blue\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_256_count_Primes_nums", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n#\n# $1 is an integer\ncount_Primes_nums() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_Primes_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"2\" ]]\n    [[ $(candidate \"10\") = \"4\" ]]\n    [[ $(candidate \"100\") = \"25\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_257_swap_numbers", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in two numbers and returns a list with the second number and then the first number.\n#\n# $1 is an integer\n# $2 is an integer\nswap_numbers() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    swap_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\") = \"20 10\" ]]\n    [[ $(candidate \"15\" \"17\") = \"17 15\" ]]\n    [[ $(candidate \"100\" \"200\") = \"200 100\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_259_maximize_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to maximize the given two lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nmaximize_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    maximize_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"6 7\\n4 9\\n2 9\\n7 10\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"7 8\\n5 10\\n3 10\\n8 11\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"8 9\\n6 11\\n4 11\\n9 12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_260_newman_prime", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n#\n# $1 is an integer\nnewman_prime() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    newman_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"7\" ]]\n    [[ $(candidate \"4\") = \"17\" ]]\n    [[ $(candidate \"5\") = \"41\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_261_division_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndivision_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    division_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"2 2 2 3\" ]]\n    [[ $(candidate \"12 6 8 16\" \"6 3 4 4\") = \"2 2 2 4\" ]]\n    [[ $(candidate \"20 14 36 18\" \"5 7 6 9\") = \"4 2 6 2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_262_split_two_parts", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n#\n# $1 is a space-separated list\n# $2 is an integer\nsplit_two_parts() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    split_two_parts \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 2\\n3 4 4 5 1\" ]]\n    [[ $(candidate \"a b c d\" \"2\") = \"a b\\nc d\" ]]\n    [[ $(candidate \"p y t h o n\" \"4\") = \"p y t h\\no n\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_264_dog_age", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate a dog's age in dog's years.\n#\n# $1 is an integer\ndog_age() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    dog_age \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\") = \"61\" ]]\n    [[ $(candidate \"15\") = \"73\" ]]\n    [[ $(candidate \"24\") = \"109\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_265_list_split", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n#\n# $1 is a space-separated list\n# $2 is an integer\nlist_split() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    list_split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b c d e f g h i j k l m n\" \"3\") = \"a d g j m\\nb e h k n\\nc f i l\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\" \"3\") = \"1 4 7 10 13\\n2 5 8 11 14\\n3 6 9 12\" ]]\n    [[ $(candidate \"python java C C++ DBMS SQL\" \"2\") = \"python C DBMS\\njava C++ SQL\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the lateral surface area of a cube given its side length.\n#\n# $1 is an integer\nlateralsurface_cube() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    lateralsurface_cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"100\" ]]\n    [[ $(candidate \"9\") = \"324\" ]]\n    [[ $(candidate \"10\") = \"400\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_267_square_Sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n#\n# $1 is an integer\nsquare_Sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    square_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"10\" ]]\n    [[ $(candidate \"3\") = \"35\" ]]\n    [[ $(candidate \"4\") = \"84\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_268_find_star_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the n'th star number.\n#\n# $1 is an integer\nfind_star_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_star_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"37\" ]]\n    [[ $(candidate \"4\") = \"73\" ]]\n    [[ $(candidate \"5\") = \"121\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_269_ascii_value", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the ascii value of a character.\n#\n# $1 is a string\nascii_value() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    ascii_value \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"A\") = \"65\" ]]\n    [[ $(candidate \"R\") = \"82\" ]]\n    [[ $(candidate \"S\") = \"83\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of even numbers at even positions of a list.\n#\n# $1 is a space-separated list\nsum_even_and_even_index() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_even_and_even_index \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 12 1 18 8\") = \"30\" ]]\n    [[ $(candidate \"3 20 17 9 2 10 18 13 6 18\") = \"26\" ]]\n    [[ $(candidate \"5 6 12 1\") = \"12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_271_even_Power_Sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n#\n# $1 is an integer\neven_Power_Sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    even_Power_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"1056\" ]]\n    [[ $(candidate \"3\") = \"8832\" ]]\n    [[ $(candidate \"1\") = \"32\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_272_rear_extract", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n#\n# $1 is a newline-separated, space-separated list\nrear_extract() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    rear_extract \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 Rash 21\\n2 Varsha 20\\n3 Kil 19\") = \"21 20 19\" ]]\n    [[ $(candidate \"1 Sai 36\\n2 Ayesha 25\\n3 Salman 45\") = \"36 25 45\" ]]\n    [[ $(candidate \"1 Sudeep 14\\n2 Vandana 36\\n3 Dawood 56\") = \"14 36 56\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_273_substract_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsubstract_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    substract_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5\" \"2 5 18\") = \"8 -1 -13\" ]]\n    [[ $(candidate \"11 2 3\" \"24 45 16\") = \"-13 -43 -13\" ]]\n    [[ $(candidate \"7 18 9\" \"10 11 12\") = \"-3 7 -3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n#\n# $1 is an integer\neven_binomial_Coeff_Sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    even_binomial_Coeff_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"8\" ]]\n    [[ $(candidate \"6\") = \"32\" ]]\n    [[ $(candidate \"2\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_278_count_first_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the number of elements that occurs before the list element in the given tuple.\n#\n# $1 is a newline-separated, space-separated list\ncount_first_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_first_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 4 6 10\") = \"3\" ]]\n    [[ $(candidate \"2 9 5 7 11\") = \"2\" ]]\n    [[ $(candidate \"11 15 5 8 2 3 8\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_279_is_num_decagonal", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth decagonal number.\n#\n# $1 is an integer\nis_num_decagonal() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_num_decagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"27\" ]]\n    [[ $(candidate \"7\") = \"175\" ]]\n    [[ $(candidate \"10\") = \"370\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_280_sequential_search", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n#\n# $1 is a space-separated list\n# $2 is an integer\nsequential_search() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sequential_search \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11 23 58 31 56 77 43 12 65 19\" \"31\") = \"true 3\" ]]\n    [[ $(candidate \"12 32 45 62 35 47 44 61\" \"61\") = \"true 7\" ]]\n    [[ $(candidate \"9 10 17 19 22 39 48 56\" \"48\") = \"true 6\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_281_all_unique", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check if the elements of a given list are unique or not.\n#\n# $1 is a space-separated list\nall_unique() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    all_unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n    [[ $(candidate \"1 2 1 2\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_282_sub_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to subtract two lists element-wise.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsub_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sub_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"-3 -3 -3\" ]]\n    [[ $(candidate \"1 2\" \"3 4\") = \"-2 -2\" ]]\n    [[ $(candidate \"90 120\" \"50 70\") = \"40 50\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_283_validate", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n#\n# $1 is an integer\nvalidate() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    validate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1234\") = \"true\" ]]\n    [[ $(candidate \"51241\") = \"false\" ]]\n    [[ $(candidate \"321\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_284_check_element", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n#\n# $1 is a space-separated list\n# $2 is a $Any\ncheck_element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"green orange black white\" \"blue\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4\" \"7\") = \"false\" ]]\n    [[ $(candidate \"green green green green\" \"green\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_285_text_match_two_three", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n#\n# $1 is a string\ntext_match_two_three() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_match_two_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abbbba\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nmax_sub_array_sum_repeated() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_sub_array_sum_repeated \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 -30 -1\" \"4\" \"3\") = \"30\" ]]\n    [[ $(candidate \"-1 10 20\" \"3\" \"2\") = \"59\" ]]\n    [[ $(candidate \"-1 -2 -3\" \"3\" \"3\") = \"-1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_287_square_Sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n#\n# $1 is an integer\nsquare_Sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    square_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"20\" ]]\n    [[ $(candidate \"3\") = \"56\" ]]\n    [[ $(candidate \"4\") = \"120\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_290_max_length", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the list of maximum length in a list of lists.\n#\n# $1 is a newline-separated, space-separated list\nmax_length() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1\\n5 7\\n10 12 14 15\") = \"4 10 12 14 15\" ]]\n    [[ $(candidate \"5\\n15 20 25\") = \"3 15 20 25\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_291_count_no_of_ways", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n#\n# $1 is an integer\n# $2 is an integer\ncount_no_of_ways() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_no_of_ways \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"4\") = \"16\" ]]\n    [[ $(candidate \"3\" \"2\") = \"6\" ]]\n    [[ $(candidate \"4\" \"4\") = \"228\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_292_find", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n#\n# $1 is an integer\n# $2 is an integer\nfind() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"3\") = \"3\" ]]\n    [[ $(candidate \"4\" \"2\") = \"2\" ]]\n    [[ $(candidate \"20\" \"5\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_293_otherside_rightangle", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the third side of a right angled triangle.\n#\n# $1 is an integer\n# $2 is an integer\notherside_rightangle() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    otherside_rightangle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\" \"8\") = \"10.63014581273465\" ]]\n    [[ $(candidate \"3\" \"4\") = \"5\" ]]\n    [[ $(candidate \"7\" \"15\") = \"16.55294535724685\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_294_max_val", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"25\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_295_sum_div", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to return the sum of all divisors of a number.\n#\n# $1 is an integer\nsum_div() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_div \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\") = \"7\" ]]\n    [[ $(candidate \"12\") = \"16\" ]]\n    [[ $(candidate \"7\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_296_get_Inv_Count", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count inversions in an array.\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_Inv_Count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 20 6 4 5\") = \"5\" ]]\n    [[ $(candidate \"1 2 1\") = \"1\" ]]\n    [[ $(candidate \"1 2 5 6 1\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_297_flatten_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to flatten a given nested list structure.\n#\n# $1 is a newline-separated, space-separated list\nflatten_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    flatten_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 10 20 30 40 50 60 70 80 90 100 110 120\") = \"0 10 20 30 40 50 60 70 80 90 100 110 120\" ]]\n    [[ $(candidate \"10 20\\n40\\n30 56 25\\n10 20\\n33\\n40\") = \"10 20 40 30 56 25 10 20 33 40\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n10 11 12\\n7 8 9\") = \"1 2 3 4 5 6 10 11 12 7 8 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_304_find_Element", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find element at a given index after number of rotations.\n#\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\n# $3 is an integer\n# $4 is an integer\nfind_Element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"0 2\\n0 3\" \"2\" \"1\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4\" \"0 1\\n0 2\" \"1\" \"2\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"0 1\\n0 2\" \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_sum_increasing_subseq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]\n    [[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]\n    [[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_308_large_product", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nlarge_product() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    large_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"3\") = \"60 54 50\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"4\") = \"60 54 50 48\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"5\") = \"60 54 50 48 45\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_309_maximum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the maximum of two numbers.\n#\n# $1 is an integer\n# $2 is an integer\nmaximum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"10\") = \"10\" ]]\n    [[ $(candidate \"-1\" \"-2\") = \"-1\" ]]\n    [[ $(candidate \"9\" \"7\") = \"9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_310_string_to_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a given string to a list of characters.\n#\n# $1 is a string\nstring_to_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    string_to_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python 3.0\") = \"p y t h o n 3 . 0\" ]]\n    [[ $(candidate \"item1\") = \"i t e m 1\" ]]\n    [[ $(candidate \"15.10\") = \"1 5 . 1 0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the highest power of 2 that is less than or equal to n.\n#\n# $1 is an integer\nhighest_Power_of_2() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    highest_Power_of_2 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"8\" ]]\n    [[ $(candidate \"19\") = \"16\" ]]\n    [[ $(candidate \"32\") = \"32\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_389_find_lucas", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the n'th lucas number.\n#\n# $1 is an integer\nfind_lucas() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_lucas \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"76\" ]]\n    [[ $(candidate \"4\") = \"7\" ]]\n    [[ $(candidate \"3\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_390_add_string", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to apply a given format string to all of the elements in a list.\n#\n# $1 is a space-separated list\n# $2 is a string\nadd_string() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    add_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\" \"temp{0}\") = \"temp1 temp2 temp3 temp4\" ]]\n    [[ $(candidate \"a b c d\" \"python{0}\") = \"pythona pythonb pythonc pythond\" ]]\n    [[ $(candidate \"5 6 7 8\" \"string{0}\") = \"string5 string6 string7 string8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_392_get_max_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n#\n# $1 is an integer\nget_max_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_max_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"60\") = \"106\" ]]\n    [[ $(candidate \"10\") = \"12\" ]]\n    [[ $(candidate \"2\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_393_max_length_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the list with maximum length.\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_length_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]\n    [[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]\n    [[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_394_check_distinct", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if given list contains no duplicates.\n#\n# $1 is a space-separated list\ncheck_distinct() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_distinct \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 5 6 1 4\") = \"false\" ]]\n    [[ $(candidate \"1 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 6\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the first non-repeated character in a given string.\n#\n# $1 is a string\nfirst_non_repeating_character() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    first_non_repeating_character \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcabc\") = \"None\" ]]\n    [[ $(candidate \"abc\") = \"a\" ]]\n    [[ $(candidate \"ababc\") = \"c\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_396_check_char", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given string starts and ends with the same character or not.\n#\n# $1 is a string\ncheck_char() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abba\") = \"Valid\" ]]\n    [[ $(candidate \"a\") = \"Valid\" ]]\n    [[ $(candidate \"abcd\") = \"Invalid\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_397_median_numbers", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the median of three numbers.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmedian_numbers() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    median_numbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25\" \"55\" \"65\") = \"55.0\" ]]\n    [[ $(candidate \"20\" \"10\" \"30\") = \"20.0\" ]]\n    [[ $(candidate \"15\" \"45\" \"75\") = \"45.0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_398_sum_of_digits", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to compute the sum of digits of each number of a given list.\n#\n# $1 is a space-separated list\nsum_of_digits() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_of_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 2 56\") = \"14\" ]]\n    [[ $(candidate \"10 20 4 5 b 70 a\") = \"19\" ]]\n    [[ $(candidate \"10 20 -4 5 -70\") = \"19\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_399_bitwise_xor", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nbitwise_xor() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    bitwise_xor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"15 6 5 10\" ]]\n    [[ $(candidate \"11 5 7 10\" \"6 3 4 4\") = \"13 6 3 14\" ]]\n    [[ $(candidate \"12 6 8 11\" \"7 4 5 6\") = \"11 2 13 13\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_3_is_not_prime", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to identify non-prime numbers.\n#\n# $1 is an integer\nis_not_prime() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_not_prime \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"35\") = \"true\" ]]\n    [[ $(candidate \"37\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_400_extract_freq", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract the number of unique tuples in the given list.\n#\n# $1 is a newline-separated, space-separated list\nextract_freq() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_freq \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\\n1 2\\n4 3\\n5 6\") = \"3\" ]]\n    [[ $(candidate \"4 15\\n2 3\\n5 4\\n6 7\") = \"4\" ]]\n    [[ $(candidate \"5 16\\n2 3\\n6 5\\n6 9\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_401_add_nested_tuples", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to perform index wise addition of list elements in the given two nested lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nadd_nested_tuples() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    add_nested_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"7 10\\n7 14\\n3 10\\n8 13\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"9 12\\n9 16\\n5 12\\n10 15\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"11 14\\n11 18\\n7 14\\n12 17\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_404_minimum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the minimum of two numbers.\n#\n# $1 is an integer\n# $2 is an integer\nminimum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    minimum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"1\" ]]\n    [[ $(candidate \"-5\" \"-4\") = \"-5\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_405_check_tuplex", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether an element exists within a tuple.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a $Any\ncheck_tuplex() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_tuplex \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"w 3 r e s o u r c e\" \"r\") = \"true\" ]]\n    [[ $(candidate \"w 3 r e s o u r c e\" \"5\") = \"false\" ]]\n    [[ $(candidate \"w 3 r e s o u r c e\" \"3\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_406_find_Parity", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find whether the parity of a given number is odd.\n#\n# $1 is an integer\nfind_Parity() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Parity \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\") = \"false\" ]]\n    [[ $(candidate \"7\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_407_rearrange_bigger", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to create the next bigger number by rearranging the digits of a given number.\n#\n# $1 is an integer\nrearrange_bigger() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    rearrange_bigger \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12\") = \"21\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"102\") = \"120\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    k_smallest_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]\n    [[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_409_min_product_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the minimum product from the pairs of tuples within a given list.\n#\n# $1 is a newline-separated, space-separated list\nmin_product_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    min_product_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 7\\n2 6\\n1 8\\n4 9\") = \"8\" ]]\n    [[ $(candidate \"10 20\\n15 2\\n5 10\") = \"30\" ]]\n    [[ $(candidate \"11 44\\n10 15\\n20 5\\n12 9\") = \"100\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_410_min_val", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the minimum value in a given heterogeneous list.\n#\n# $1 is a newline-separated, space-separated list\nmin_val() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    min_val \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python 3 2 4 5 version\") = \"2\" ]]\n    [[ $(candidate \"Python 15 20 25\") = \"15\" ]]\n    [[ $(candidate \"Python 30 20 40 50 version\") = \"20\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_411_snake_to_camel", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert the given snake case string to camel case string.\n#\n# $1 is a string\nsnake_to_camel() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    snake_to_camel \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"android_tv\") = \"AndroidTv\" ]]\n    [[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]\n    [[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_412_remove_odd", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to remove odd numbers from a given list.\n#\n# $1 is a space-separated list\nremove_odd() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"2\" ]]\n    [[ $(candidate \"2 4 6\") = \"2 4 6\" ]]\n    [[ $(candidate \"10 20 3\") = \"10 20\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_414_overlapping", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether any value in a sequence exists in a sequence or not.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\noverlapping() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    overlapping \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\" \"4 5 6\") = \"false\" ]]\n    [[ $(candidate \"1 4 5\" \"1 4 5\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_415_max_Product", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find a pair with highest product from a given array of integers.\n#\n# $1 is a space-separated list\nmax_Product() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_Product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 7 0 8 4\") = \"7 8\" ]]\n    [[ $(candidate \"0 -1 -2 -4 5 0 -6\") = \"-4 -6\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_417_group_tuples", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find common first element in given list of lists.\n#\n# $1 is a newline-separated, space-separated list\ngroup_tuples() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    group_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y\\nx z\\nw t\") = \"x y z\\nw t\" ]]\n    [[ $(candidate \"a b\\na c\\nd e\") = \"a b c\\nd e\" ]]\n    [[ $(candidate \"f g\\nf g\\nh i\") = \"f g g\\nh i\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_418_Find_Max", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the element of a list having maximum length.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Find_Max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"A\\nA B\\nA B C\") = \"A B C\" ]]\n    [[ $(candidate \"1\\n1 2\\n1 2 3\") = \"1 2 3\" ]]\n    [[ $(candidate \"1 1\\n1 2 3\\n1 5 6 1\") = \"1 5 6 1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_419_round_and_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n#\n# $1 is a newline-separated, space-separated list\nround_and_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    round_and_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5\") = \"243\" ]]\n    [[ $(candidate \"5 2 9 24.3 29\") = \"345\" ]]\n    [[ $(candidate \"25.0 56.7 89.2\") = \"513\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_420_cube_Sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the cube sum of first n even natural numbers.\n#\n# $1 is an integer\ncube_Sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    cube_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"72\" ]]\n    [[ $(candidate \"3\") = \"288\" ]]\n    [[ $(candidate \"4\") = \"800\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_421_concatenate_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to concatenate each element of tuple by the delimiter.\n#\n# $1 is a space-separated list\nconcatenate_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    concatenate_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ID is 4 UTS\") = \"ID-is-4-UTS\" ]]\n    [[ $(candidate \"QWE is 4 RTY\") = \"QWE-is-4-RTY\" ]]\n    [[ $(candidate \"ZEN is 4 OP\") = \"ZEN-is-4-OP\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the average of cubes of first n natural numbers.\n#\n# $1 is an integer\nfind_Average_Of_Cube() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Average_Of_Cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4.5\" ]]\n    [[ $(candidate \"3\") = \"12\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_424_extract_rear", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract only the rear index element of each string in the given tuple.\n#\n# $1 is a space-separated list\nextract_rear() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_rear \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mers for Vers\") = \"s r s\" ]]\n    [[ $(candidate \"Avenge for People\") = \"e r e\" ]]\n    [[ $(candidate \"Gotta get go\") = \"a t o\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_425_count_element_in_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count the number of sublists containing a particular element.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a $Any\ncount_element_in_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_element_in_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n5 7\\n1 11\\n1 15 7\" \"1\") = \"3\" ]]\n    [[ $(candidate \"A B\\nA C\\nA D E\\nB C D\" \"A\") = \"3\" ]]\n    [[ $(candidate \"A B\\nA C\\nA D E\\nB C D\" \"E\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to filter odd numbers.\n#\n# $1 is a space-separated list\nfilter_oddnumbers() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    filter_oddnumbers \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 3 5 7 9\" ]]\n    [[ $(candidate \"10 20 45 67 84 93\") = \"45 67 93\" ]]\n    [[ $(candidate \"5 7 9 8 6 4 3\") = \"5 7 9 3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_427_change_date_format", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n#\n# $1 is a string\nchange_date_format() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    change_date_format \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2026-01-02\") = \"02-01-2026\" ]]\n    [[ $(candidate \"2020-11-13\") = \"13-11-2020\" ]]\n    [[ $(candidate \"2021-04-26\") = \"26-04-2021\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_428_shell_sort", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort the given array by using shell sort.\n#\n# $1 is a space-separated list\nshell_sort() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    shell_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 23 4 5 3 2 12 81 56 95\") = \"2 3 4 5 12 12 23 56 81 95\" ]]\n    [[ $(candidate \"24 22 39 34 87 73 68\") = \"22 24 34 39 68 73 87\" ]]\n    [[ $(candidate \"32 30 16 96 82 83 74\") = \"16 30 32 74 82 83 96\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_429_and_tuples", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract the elementwise and tuples from the given two tuples.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nand_tuples() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    and_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"0 0 2 1\" ]]\n    [[ $(candidate \"1 2 3 4\" \"5 6 7 8\") = \"1 2 3 0\" ]]\n    [[ $(candidate \"8 9 11 12\" \"7 13 14 17\") = \"0 9 10 0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_430_parabola_directrix", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the directrix of a parabola.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nparabola_directrix() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    parabola_directrix \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"3\" \"2\") = \"-198\" ]]\n    [[ $(candidate \"9\" \"8\" \"4\") = \"-2336\" ]]\n    [[ $(candidate \"2\" \"4\" \"6\") = \"-130\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_431_common_element", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes two lists and returns true if they have at least one common element.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon_element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    common_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"5 6 7 8 9\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 8 9\") = \"None\" ]]\n    [[ $(candidate \"a b c\" \"d b e\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_432_median_trapezium", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the median length of a trapezium.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmedian_trapezium() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    median_trapezium \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\" \"25\" \"35\") = \"20\" ]]\n    [[ $(candidate \"10\" \"20\" \"30\") = \"15\" ]]\n    [[ $(candidate \"6\" \"9\" \"4\") = \"7.5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_433_check_greater", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the entered number is greater than the elements of the given array.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncheck_greater() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_greater \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\" \"4\") = \"false\" ]]\n    [[ $(candidate \"2 3 4 5 6\" \"8\") = \"true\" ]]\n    [[ $(candidate \"9 7 4 8 6 1\" \"11\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_434_text_match_one", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an a followed by one or more b's.\n#\n# $1 is a string\ntext_match_one() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_match_one \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abba\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_435_last_Digit", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the last digit of a given number.\n#\n# $1 is an integer\nlast_Digit() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    last_Digit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"3\" ]]\n    [[ $(candidate \"25\") = \"5\" ]]\n    [[ $(candidate \"30\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_436_neg_nos", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to return the negative numbers in a list.\n#\n# $1 is a space-separated list\nneg_nos() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    neg_nos \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 4 5 -6\") = \"-1 -6\" ]]\n    [[ $(candidate \"-1 -2 3 4\") = \"-1 -2\" ]]\n    [[ $(candidate \"-7 -6 8 9\") = \"-7 -6\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_437_remove_odd", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove odd characters in a string.\n#\n# $1 is a string\nremove_odd() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"yhn\" ]]\n    [[ $(candidate \"program\") = \"rga\" ]]\n    [[ $(candidate \"language\") = \"agae\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_438_count_bidirectional", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count bidirectional tuple pairs.\n#\n# $1 is a newline-separated, space-separated list\ncount_bidirectional() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_bidirectional \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6\\n1 2\\n6 5\\n9 1\\n6 5\\n2 1\") = \"3\" ]]\n    [[ $(candidate \"5 6\\n1 3\\n6 5\\n9 1\\n6 5\\n2 1\") = \"2\" ]]\n    [[ $(candidate \"5 6\\n1 2\\n6 5\\n9 2\\n6 5\\n2 1\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_439_multiple_to_single", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to join a list of multiple integers into a single integer.\n#\n# $1 is a space-separated list\nmultiple_to_single() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    multiple_to_single \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11 33 50\") = \"113350\" ]]\n    [[ $(candidate \"-1 2 3 4 5 6\") = \"-123456\" ]]\n    [[ $(candidate \"10 15 20 25\") = \"10152025\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_440_find_adverb_position", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the first adverb and their positions in a given sentence.\n#\n# $1 is a string\nfind_adverb_position() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_adverb_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"clearly\\!\\! we can see the sky\") = \"0 7 clearly\" ]]\n    [[ $(candidate \"seriously\\!\\! there are many roses\") = \"0 9 seriously\" ]]\n    [[ $(candidate \"unfortunately\\!\\! sita is going to home\") = \"0 13 unfortunately\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_441_surfacearea_cube", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the surface area of a cube of a given size.\n#\n# $1 is an integer\nsurfacearea_cube() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    surfacearea_cube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"150\" ]]\n    [[ $(candidate \"3\") = \"54\" ]]\n    [[ $(candidate \"10\") = \"600\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_442_positive_count", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the ration of positive numbers in an array of integers.\n#\n# $1 is a space-separated list\npositive_count() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    positive_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 -1 -5 6 0 -3 -2 3 4 6 8\") = \"0.54\" ]]\n    [[ $(candidate \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"0.69\" ]]\n    [[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\") = \"0.56\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_443_largest_neg", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the largest negative number from the given list.\n#\n# $1 is a space-separated list\nlargest_neg() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    largest_neg \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 -4 -6\") = \"-6\" ]]\n    [[ $(candidate \"1 2 3 -8 -9\") = \"-9\" ]]\n    [[ $(candidate \"1 2 3 4 -1\") = \"-1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_444_trim_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to trim each list by k in the given lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\ntrim_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    trim_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 3 2 1 4\\n3 4 9 2 1\\n9 1 2 3 5\\n4 8 2 1 7\" \"2\") = \"2\\n9\\n2\\n2\" ]]\n    [[ $(candidate \"5 3 2 1 4\\n3 4 9 2 1\\n9 1 2 3 5\\n4 8 2 1 7\" \"1\") = \"3 2 1\\n4 9 2\\n1 2 3\\n8 2 1\" ]]\n    [[ $(candidate \"7 8 4 9\\n11 8 12 4\\n4 1 7 8\\n3 6 9 7\" \"1\") = \"8 4\\n8 12\\n1 7\\n6 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_445_index_multiplication", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to perform index wise multiplication of list elements in the given two lists.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nindex_multiplication() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    index_multiplication \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"6 21\\n12 45\\n2 9\\n7 30\" ]]\n    [[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"14 32\\n20 60\\n6 20\\n16 44\" ]]\n    [[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"24 45\\n30 77\\n12 33\\n27 60\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_446_count_Occurrence", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the occurence of all elements of list in a tuple.\n#\n# $1 is a $Any\n# $2 is a space-separated list\ncount_Occurrence() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_Occurrence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a a c b d\" \"a b\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 1 4 6 7 1 4\" \"1 4 7\") = \"6\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"1 2\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_447_cube_nums", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find cubes of individual elements in a list.\n#\n# $1 is a space-separated list\ncube_nums() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    cube_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 8 27 64 125 216 343 512 729 1000\" ]]\n    [[ $(candidate \"10 20 30\") = \"1000 8000 27000\" ]]\n    [[ $(candidate \"12 15\") = \"1728 3375\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_448_cal_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate the sum of perrin numbers.\n#\n# $1 is an integer\ncal_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    cal_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"49\" ]]\n    [[ $(candidate \"10\") = \"66\" ]]\n    [[ $(candidate \"11\") = \"88\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_450_extract_string", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract specified size of strings from a given list of string values.\n#\n# $1 is a space-separated list\n# $2 is an integer\nextract_string() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python list exercises practice solution\" \"8\") = \"practice solution\" ]]\n    [[ $(candidate \"Python list exercises practice solution\" \"6\") = \"Python\" ]]\n    [[ $(candidate \"Python list exercises practice solution\" \"9\") = \"exercises\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_451_remove_whitespaces", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove all whitespaces from the given string.\n#\n# $1 is a string\nremove_whitespaces() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_whitespaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \" Google    Flutter \") = \"GoogleFlutter\" ]]\n    [[ $(candidate \" Google    Dart \") = \"GoogleDart\" ]]\n    [[ $(candidate \" iOS    Swift \") = \"iOSSwift\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_452_loss_amount", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n#\n# $1 is an integer\n# $2 is an integer\nloss_amount() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    loss_amount \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1500\" \"1200\") = \"0\" ]]\n    [[ $(candidate \"100\" \"200\") = \"100\" ]]\n    [[ $(candidate \"2000\" \"5000\") = \"3000\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_453_sumofFactors", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of even factors of a number.\n#\n# $1 is an integer\nsumofFactors() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sumofFactors \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"18\") = \"26\" ]]\n    [[ $(candidate \"30\") = \"48\" ]]\n    [[ $(candidate \"6\") = \"8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_454_text_match_wordz", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that matches a word containing 'z'.\n#\n# $1 is a string\ntext_match_wordz() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_match_wordz \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pythonz.\") = \"true\" ]]\n    [[ $(candidate \"xyz.\") = \"true\" ]]\n    [[ $(candidate \"  lang  .\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given month number contains 31 days or not.\n#\n# $1 is an integer\ncheck_monthnumb_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_monthnumb_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"6\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_456_reverse_string_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to reverse each string in a given list of string values.\n#\n# $1 is a space-separated list\nreverse_string_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    reverse_string_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Red Green Blue White Black\") = \"deR neerG eulB etihW kcalB\" ]]\n    [[ $(candidate \"john amal joel george\") = \"nhoj lama leoj egroeg\" ]]\n    [[ $(candidate \"jack john mary\") = \"kcaj nhoj yram\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_457_Find_Min", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sublist having minimum length.\n#\n# $1 is a newline-separated, space-separated list\nFind_Min() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Find_Min \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 2\\n1 2 3\") = \"1\" ]]\n    [[ $(candidate \"1 1\\n1 1 1\\n1 2 7 8\") = \"1 1\" ]]\n    [[ $(candidate \"x\\nx y\\nx y z\") = \"x\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_458_rectangle_area", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the area of a rectangle.\n#\n# $1 is an integer\n# $2 is an integer\nrectangle_area() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    rectangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"20\") = \"200\" ]]\n    [[ $(candidate \"10\" \"5\") = \"50\" ]]\n    [[ $(candidate \"4\" \"2\") = \"8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_459_remove_uppercase", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove uppercase substrings from a given string.\n#\n# $1 is a string\nremove_uppercase() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_uppercase \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"cAstyoUrFavoRitETVshoWs\") = \"cstyoravoitshos\" ]]\n    [[ $(candidate \"wAtchTheinTernEtrAdIo\") = \"wtchheinerntrdo\" ]]\n    [[ $(candidate \"VoicESeaRchAndreComMendaTionS\") = \"oiceachndreomendaion\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_460_Extract", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to get the first element of each sublist.\n#\n# $1 is a newline-separated, space-separated list\nExtract() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Extract \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2\\n3 4 5\\n6 7 8 9\") = \"1 3 6\" ]]\n    [[ $(candidate \"1 2 3\\n4 5\") = \"1 4\" ]]\n    [[ $(candidate \"9 8 1\\n1 2\") = \"9 1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_461_upper_ctr", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the upper case characters in a given string.\n#\n# $1 is a string\nupper_ctr() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    upper_ctr \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"PYthon\") = \"1\" ]]\n    [[ $(candidate \"BigData\") = \"1\" ]]\n    [[ $(candidate \"program\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_462_combinations_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find all possible combinations of the elements of a given list.\n#\n# $1 is a space-separated list\ncombinations_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    combinations_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"orange red green blue\") = \"\\norange\\nred\\nred orange\\ngreen\\ngreen orange\\ngreen red\\ngreen red orange\\nblue\\nblue orange\\nblue red\\nblue red orange\\nblue green\\nblue green orange\\nblue green red\\nblue green red orange\" ]]\n    [[ $(candidate \"red green blue white black orange\") = \"\\nred\\ngreen\\ngreen red\\nblue\\nblue red\\nblue green\\nblue green red\\nwhite\\nwhite red\\nwhite green\\nwhite green red\\nwhite blue\\nwhite blue red\\nwhite blue green\\nwhite blue green red\\nblack\\nblack red\\nblack green\\nblack green red\\nblack blue\\nblack blue red\\nblack blue green\\nblack blue green red\\nblack white\\nblack white red\\nblack white green\\nblack white green red\\nblack white blue\\nblack white blue red\\nblack white blue green\\nblack white blue green red\\norange\\norange red\\norange green\\norange green red\\norange blue\\norange blue red\\norange blue green\\norange blue green red\\norange white\\norange white red\\norange white green\\norange white green red\\norange white blue\\norange white blue red\\norange white blue green\\norange white blue green red\\norange black\\norange black red\\norange black green\\norange black green red\\norange black blue\\norange black blue red\\norange black blue green\\norange black blue green red\\norange black white\\norange black white red\\norange black white green\\norange black white green red\\norange black white blue\\norange black white blue red\\norange black white blue green\\norange black white blue green red\" ]]\n    [[ $(candidate \"red green black orange\") = \"\\nred\\ngreen\\ngreen red\\nblack\\nblack red\\nblack green\\nblack green red\\norange\\norange red\\norange green\\norange green red\\norange black\\norange black red\\norange black green\\norange black green red\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_463_max_subarray_product", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum product subarray of the given array.\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_subarray_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]\n    [[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]\n    [[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_465_drop_empty", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to drop empty items from a given dictionary.\n#\n# $1 is a two column CSV in key,value order\ndrop_empty() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    drop_empty \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"c1,Red\\nc2,Green\\nc3,None\") = \"c1,Red\\nc2,Green\" ]]\n    [[ $(candidate \"c1,Red\\nc2,None\\nc3,None\") = \"c1,Red\" ]]\n    [[ $(candidate \"c1,None\\nc2,Green\\nc3,None\") = \"c2,Green\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_468_max_product", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n#\n# $1 is a space-separated list\nmax_product() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]\n    [[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]\n    [[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_470_add_pairwise", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n#\n# $1 is a space-separated list\nadd_pairwise() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    add_pairwise \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 8 10\") = \"6 12 15 18\" ]]\n    [[ $(candidate \"2 6 8 9 11\") = \"8 14 17 20\" ]]\n    [[ $(candidate \"3 7 9 10 12\") = \"10 16 19 22\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_471_find_remainder", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the product of the array multiplication modulo n.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_remainder() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_remainder \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100 10 5 25 35 14\" \"11\") = \"9\" ]]\n    [[ $(candidate \"1 1 1\" \"1\") = \"0\" ]]\n    [[ $(candidate \"1 2 1\" \"2\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_472_check_Consecutive", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the given list contains consecutive numbers or not.\n#\n# $1 is a space-separated list\ncheck_Consecutive() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_Consecutive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 5 6\") = \"false\" ]]\n    [[ $(candidate \"1 2 1\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_474_replace_char", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to replace characters in a string.\n#\n# $1 is a string\n# $2 is a string\n# $3 is a string\nreplace_char() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    replace_char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"polygon\" \"y\" \"l\") = \"pollgon\" ]]\n    [[ $(candidate \"character\" \"c\" \"a\") = \"aharaater\" ]]\n    [[ $(candidate \"python\" \"l\" \"a\") = \"python\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_475_sort_counter", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort a dictionary by value.\n#\n# $1 is a two column CSV in key,value order\nsort_counter() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sort_counter \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Math,81\\nPhysics,83\\nChemistry,87\") = \"Chemistry 87\\nPhysics 83\\nMath 81\" ]]\n    [[ $(candidate \"Math,400\\nPhysics,300\\nChemistry,250\") = \"Math 400\\nPhysics 300\\nChemistry 250\" ]]\n    [[ $(candidate \"Math,900\\nPhysics,1000\\nChemistry,1250\") = \"Chemistry 1250\\nPhysics 1000\\nMath 900\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_476_big_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of the largest and smallest value in a given array.\n#\n# $1 is a space-separated list\nbig_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    big_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"4\" ]]\n    [[ $(candidate \"-1 2 3 4\") = \"3\" ]]\n    [[ $(candidate \"2 3 6\") = \"8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_477_is_lower", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to convert the given string to lower case.\n#\n# $1 is a string\nis_lower() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_lower \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"InValid\") = \"invalid\" ]]\n    [[ $(candidate \"TruE\") = \"true\" ]]\n    [[ $(candidate \"SenTenCE\") = \"sentence\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_478_remove_lowercase", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove lowercase substrings from a given string.\n#\n# $1 is a string\nremove_lowercase() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_lowercase \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"PYTHon\") = \"PYTH\" ]]\n    [[ $(candidate \"FInD\") = \"FID\" ]]\n    [[ $(candidate \"STRinG\") = \"STRG\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_479_first_Digit", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the first digit of a given number.\n#\n# $1 is an integer\nfirst_Digit() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    first_Digit \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123\") = \"1\" ]]\n    [[ $(candidate \"456\") = \"4\" ]]\n    [[ $(candidate \"12\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_4_heap_queue_largest", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    heap_queue_largest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_554_Split", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function which takes a list of integers and only returns the odd ones.\n#\n# $1 is a space-separated list\nSplit() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"1 3 5\" ]]\n    [[ $(candidate \"10 11 12 13\") = \"11 13\" ]]\n    [[ $(candidate \"7 8 9 1\") = \"7 9 1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_555_difference", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n#\n# $1 is an integer\ndifference() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"30\" ]]\n    [[ $(candidate \"5\") = \"210\" ]]\n    [[ $(candidate \"2\") = \"6\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of pairs whose xor value is odd.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_Odd_Pair() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Odd_Pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 4 7 2 1\" \"5\") = \"6\" ]]\n    [[ $(candidate \"7 2 8 1 0 5 11\" \"7\") = \"12\" ]]\n    [[ $(candidate \"1 2 3\" \"3\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_557_toggle_string", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to toggle the case of all characters in a string.\n#\n# $1 is a string\ntoggle_string() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    toggle_string \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"pYTHON\" ]]\n    [[ $(candidate \"Pangram\") = \"pANGRAM\" ]]\n    [[ $(candidate \"LIttLE\") = \"liTTle\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_558_digit_distance_nums", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of the per-digit difference between two integers.\n#\n# $1 is an integer\n# $2 is an integer\ndigit_distance_nums() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    digit_distance_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"2\") = \"1\" ]]\n    [[ $(candidate \"23\" \"56\") = \"6\" ]]\n    [[ $(candidate \"123\" \"256\") = \"7\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the sum of the largest contiguous sublist in the given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmax_sub_array_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_sub_array_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-2 -3 4 -1 -2 1 5 -3\" \"8\") = \"7\" ]]\n    [[ $(candidate \"-3 -4 5 -2 -3 2 6 -4\" \"8\") = \"8\" ]]\n    [[ $(candidate \"-4 -5 6 -3 -4 3 7 -5\" \"8\") = \"10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_560_union_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the union of the elements of two given lists and output them in sorted order.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    union_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]\n    [[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_562_Find_Max_Length", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the length of the longest sublists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Find_Max_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]\n    [[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]\n    [[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_563_extract_values", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract values between quotation marks from a string.\n#\n# $1 is a string\nextract_values() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_values \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") = \"Python PHP Java\" ]]\n    [[ $(candidate \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") = \"python program language\" ]]\n    [[ $(candidate \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") = \"red blue green yellow\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_564_count_Pairs", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncount_Pairs() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_Pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 1\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 1 1 1\" \"4\") = \"0\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"5\") = \"10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_565_split", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to split a string into characters.\n#\n# $1 is a string\nsplit() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"p y t h o n\" ]]\n    [[ $(candidate \"Name\") = \"N a m e\" ]]\n    [[ $(candidate \"program\") = \"p r o g r a m\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_566_sum_digits", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to get the sum of the digits of a non-negative integer.\n#\n# $1 is an integer\nsum_digits() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"345\") = \"12\" ]]\n    [[ $(candidate \"12\") = \"3\" ]]\n    [[ $(candidate \"97\") = \"16\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_567_issort_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether a specified list is sorted or not.\n#\n# $1 is a space-separated list\nissort_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    issort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 6 8 10 12 14 16 17\") = \"true\" ]]\n    [[ $(candidate \"1 2 4 6 8 10 12 14 20 17\") = \"false\" ]]\n    [[ $(candidate \"1 2 4 6 8 10 15 14 20\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_569_sort_sublists", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort each sublist of strings in a given list of lists.\n#\n# $1 is a newline-separated, space-separated list\nsort_sublists() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sort_sublists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"green orange\\nblack white\\nwhite black orange\") = \"green orange\\nblack white\\nblack orange white\" ]]\n    [[ $(candidate \"green orange\\nblack\\ngreen orange\\nwhite\") = \"green orange\\nblack\\ngreen orange\\nwhite\" ]]\n    [[ $(candidate \"a b\\nd c\\ng h\\nf e\") = \"a b\\nc d\\ng h\\ne f\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_56_checks", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check if a given number is one less than twice its reverse.\n#\n# $1 is an integer\nchecks() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    checks \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"70\") = \"false\" ]]\n    [[ $(candidate \"23\") = \"false\" ]]\n    [[ $(candidate \"73\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_572_two_unique_nums", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to remove duplicate numbers from a given number of lists.\n#\n# $1 is a space-separated list\ntwo_unique_nums() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    two_unique_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 2 3 4 5\") = \"1 4 5\" ]]\n    [[ $(candidate \"1 2 3 2 4 5\") = \"1 3 4 5\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 2 3 4 5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_573_unique_product", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to calculate the product of the unique numbers in a given list.\n#\n# $1 is a space-separated list\nunique_product() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    unique_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 30 40 20 50 60 40\") = \"720000000\" ]]\n    [[ $(candidate \"1 2 3 1\") = \"6\" ]]\n    [[ $(candidate \"7 8 9 0 1 1\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the surface area of a cylinder.\n#\n# $1 is an integer\n# $2 is an integer\nsurfacearea_cylinder() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    surfacearea_cylinder \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\" \"5\") = \"942.45\" ]]\n    [[ $(candidate \"4\" \"5\") = \"226.18800000000002\" ]]\n    [[ $(candidate \"4\" \"10\") = \"351.848\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_576_is_Sub_Array", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether a list is sublist of another or not.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_Sub_Array() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_Sub_Array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 4 3 5\" \"1 2\") = \"false\" ]]\n    [[ $(candidate \"1 2 1\" \"1 2 1\") = \"true\" ]]\n    [[ $(candidate \"1 0 2 2\" \"2 2 0\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the last digit in factorial of a given number.\n#\n# $1 is an integer\nlast_Digit_Factorial() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    last_Digit_Factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"4\" ]]\n    [[ $(candidate \"21\") = \"0\" ]]\n    [[ $(candidate \"30\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_578_interleave_lists", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to interleave 3 lists of the same length into a single flat list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\ninterleave_lists() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    interleave_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7\" \"10 20 30 40 50 60 70\" \"100 200 300 400 500 600 700\") = \"1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700\" ]]\n    [[ $(candidate \"10 20\" \"15 2\" \"5 10\") = \"10 15 5 20 2 10\" ]]\n    [[ $(candidate \"11 44\" \"10 15\" \"20 5\") = \"11 10 20 44 15 5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_579_find_dissimilar", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the dissimilar elements in the given two tuples.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nfind_dissimilar() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_dissimilar \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 6 7 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"7 2 3 9\") = \"1 4 7 9\" ]]\n    [[ $(candidate \"21 11 25 26\" \"26 34 21 36\") = \"34 36 11 25\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_57_find_Max_Num", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the largest number that can be formed with the given list of digits.\n#\n# $1 is a space-separated list\nfind_Max_Num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Max_Num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"321\" ]]\n    [[ $(candidate \"4 5 6 1\") = \"6541\" ]]\n    [[ $(candidate \"1 2 3 9\") = \"9321\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_580_extract_even", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove uneven elements in the nested mixed tuple.\n#\n# $1 is a space-separated list\nextract_even() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 5 7 6 2 4 6 8\") = \"4 6 2 4 6 8\" ]]\n    [[ $(candidate \"5 6 8 7 4 8 7 9\") = \"6 8 4 8\" ]]\n    [[ $(candidate \"5 6 9 8 4 6 8 10\") = \"6 8 4 6 8 10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_581_surface_Area", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the surface area of a square pyramid with a given base edge and height.\n#\n# $1 is an integer\n# $2 is an integer\nsurface_Area() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    surface_Area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\") = \"33\" ]]\n    [[ $(candidate \"4\" \"5\") = \"56\" ]]\n    [[ $(candidate \"1\" \"2\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_582_my_dict", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if a dictionary is empty\n#\n# $1 is an argument\nmy_dict() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_582_my_dict.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    my_dict \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_583_catalan_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function which returns nth catalan number.\n#\n# $1 is an integer\ncatalan_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    catalan_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"16796\" ]]\n    [[ $(candidate \"9\") = \"4862\" ]]\n    [[ $(candidate \"7\") = \"429\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_584_find_adverbs", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the first adverb ending with ly and its positions in a given string.\n#\n# $1 is a string\nfind_adverbs() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_adverbs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Clearly, he has no excuse for such behavior.\") = \"0-7: Clearly\" ]]\n    [[ $(candidate \"Please handle the situation carefuly\") = \"28-36: carefuly\" ]]\n    [[ $(candidate \"Complete the task quickly\") = \"18-25: quickly\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_586_split_Arr", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to split a list at the nth eelment and add the first part to the end.\n#\n# $1 is a space-separated list\n# $2 is an integer\nsplit_Arr() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    split_Arr \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 10 5 6 52 36\" \"2\") = \"5 6 52 36 12 10\" ]]\n    [[ $(candidate \"1 2 3 4\" \"1\") = \"2 3 4 1\" ]]\n    [[ $(candidate \"0 1 2 3 4 5 6 7\" \"3\") = \"3 4 5 6 7 0 1 2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_587_list_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert a list to a tuple.\n#\n# $1 is a space-separated list\nlist_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    list_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 10 7 4 15 3\") = \"5 10 7 4 15 3\" ]]\n    [[ $(candidate \"2 4 5 6 2 3 4 4 7\") = \"2 4 5 6 2 3 4 4 7\" ]]\n    [[ $(candidate \"58 44 56\") = \"58 44 56\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_588_big_diff", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the difference between largest and smallest value in a given list.\n#\n# $1 is a space-separated list\nbig_diff() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    big_diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"3\" ]]\n    [[ $(candidate \"4 5 12\") = \"8\" ]]\n    [[ $(candidate \"9 2 3\") = \"7\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_589_perfect_squares", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find perfect squares between two given numbers.\n#\n# $1 is an integer\n# $2 is an integer\nperfect_squares() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    perfect_squares \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"30\") = \"1 4 9 16 25\" ]]\n    [[ $(candidate \"50\" \"100\") = \"64 81 100\" ]]\n    [[ $(candidate \"100\" \"200\") = \"100 121 144 169 196\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_58_opposite_Signs", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the given two integers have opposite sign or not.\n#\n# $1 is an integer\n# $2 is an integer\nopposite_Signs() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    opposite_Signs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"-2\") = \"true\" ]]\n    [[ $(candidate \"3\" \"2\") = \"false\" ]]\n    [[ $(candidate \"-10\" \"-10\") = \"false\" ]]\n    [[ $(candidate \"-2\" \"2\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_591_swap_List", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to interchange the first and last elements in a list.\n#\n# $1 is a space-separated list\nswap_List() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    swap_List \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12 35 9 56 24\") = \"24 35 9 56 12\" ]]\n    [[ $(candidate \"1 2 3\") = \"3 2 1\" ]]\n    [[ $(candidate \"4 5 6\") = \"6 5 4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_592_sum_Of_product", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of the product of consecutive binomial co-efficients.\n#\n# $1 is an integer\nsum_Of_product() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_Of_product \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"15\" ]]\n    [[ $(candidate \"4\") = \"56\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_593_removezero_ip", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove leading zeroes from an ip address.\n#\n# $1 is a string\nremovezero_ip() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    removezero_ip \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"216.08.094.196\") = \"216.8.94.196\" ]]\n    [[ $(candidate \"12.01.024\") = \"12.1.24\" ]]\n    [[ $(candidate \"216.08.094.0196\") = \"216.8.94.196\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_594_diff_even_odd", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the difference of the first even and first odd number of a given list.\n#\n# $1 is a space-separated list\ndiff_even_odd() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    diff_even_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 4 1 6 8\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_595_min_Swaps", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n#\n# $1 is a string\n# $2 is a string\nmin_Swaps() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    min_Swaps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1101\" \"1110\") = \"1\" ]]\n    [[ $(candidate \"111\" \"000\") = \"Not Possible\" ]]\n    [[ $(candidate \"111\" \"110\") = \"Not Possible\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_597_find_kth", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find kth element from the given two sorted arrays.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nfind_kth() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_kth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 3 6 7 9\" \"1 4 8 10\" \"5\") = \"6\" ]]\n    [[ $(candidate \"100 112 256 349 770\" \"72 86 113 119 265 445 892\" \"7\") = \"256\" ]]\n    [[ $(candidate \"3 4 7 8 10\" \"2 5 9 11\" \"6\") = \"8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_598_armstrong_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given number is armstrong or not.\n#\n# $1 is an integer\narmstrong_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    armstrong_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"153\") = \"true\" ]]\n    [[ $(candidate \"259\") = \"false\" ]]\n    [[ $(candidate \"4458\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_599_sum_average", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find sum and average of first n natural numbers.\n#\n# $1 is an integer\nsum_average() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_average \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"55 5.5\" ]]\n    [[ $(candidate \"15\") = \"120 8.0\" ]]\n    [[ $(candidate \"20\") = \"210 10.5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_59_is_octagonal", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth octagonal number.\n#\n# $1 is an integer\nis_octagonal() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_octagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"65\" ]]\n    [[ $(candidate \"10\") = \"280\" ]]\n    [[ $(candidate \"15\") = \"645\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_600_is_Even", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the given number is even or not.\n#\n# $1 is an integer\nis_Even() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_Even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"false\" ]]\n    [[ $(candidate \"2\") = \"true\" ]]\n    [[ $(candidate \"3\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_602_first_repeated_char", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the first repeated character in a given string.\n#\n# $1 is a string\nfirst_repeated_char() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    first_repeated_char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abcabc\") = \"a\" ]]\n    [[ $(candidate \"abc\") = \"None\" ]]\n    [[ $(candidate \"123123\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_603_get_ludic", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to get all lucid numbers smaller than or equal to a given integer.\n#\n# $1 is an integer\nget_ludic() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_ludic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"1 2 3 5 7\" ]]\n    [[ $(candidate \"25\") = \"1 2 3 5 7 11 13 17 23 25\" ]]\n    [[ $(candidate \"45\") = \"1 2 3 5 7 11 13 17 23 25 29 37 41 43\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_604_reverse_words", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to reverse words seperated by spaces in a given string.\n#\n# $1 is a string\nreverse_words() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    reverse_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python program\") = \"program python\" ]]\n    [[ $(candidate \"java language\") = \"language java\" ]]\n    [[ $(candidate \"indian man\") = \"man indian\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_605_prime_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if the given integer is a prime number.\n#\n# $1 is an integer\nprime_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    prime_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"13\") = \"true\" ]]\n    [[ $(candidate \"7\") = \"true\" ]]\n    [[ $(candidate \"-1010\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_606_radian_degree", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert degrees to radians.\n#\n# $1 is an integer\nradian_degree() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    radian_degree \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"90\") = \"1.5707963267948966\" ]]\n    [[ $(candidate \"60\") = \"1.0471975511965976\" ]]\n    [[ $(candidate \"120\") = \"2.0943951023931953\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_607_find_literals", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n#\n# $1 is a string\n# $2 is a string\nfind_literals() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_literals \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") = \"fox 16 19\" ]]\n    [[ $(candidate \"Its been a very crazy procedure right\" \"crazy\") = \"crazy 16 21\" ]]\n    [[ $(candidate \"Hardest choices required strongest will\" \"will\") = \"will 35 39\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_608_bell_Number", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find nth bell number.\n#\n# $1 is an integer\nbell_Number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    bell_Number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"15\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_610_remove_kth_element", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n#\n# $1 is a space-separated list\n# $2 is an integer\nremove_kth_element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_kth_element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 3 4 4 5 1\" ]]\n    [[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\" \"4\") = \"0 0 1 3 4 4 5 6 6 6 7 8 9 4 4\" ]]\n    [[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\" \"5\") = \"10 10 15 19 18 17 26 26 17 18 10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_611_max_of_nth", "language": "sh", "prompt": "#!/bin/bash\n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_of_nth() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_of_nth \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\\n1 3 5\\n8 9 19\" \"2\") = \"19\" ]]\n    [[ $(candidate \"6 7 8\\n2 4 6\\n9 10 20\" \"1\") = \"10\" ]]\n    [[ $(candidate \"7 8 9\\n3 5 7\\n10 11 21\" \"1\") = \"11\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_612_merge", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n#\n# $1 is a newline-separated, space-separated list\nmerge() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    merge \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"x y\\na b\\nm n\") = \"x a m\\ny b n\" ]]\n    [[ $(candidate \"1 2\\n3 4\\n5 6\\n7 8\") = \"1 3 5 7\\n2 4 6 8\" ]]\n    [[ $(candidate \"x y z\\na b c\\nm n o\") = \"x a m\\ny b n\\nz c o\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_614_cummulative_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n#\n# $1 is a newline-separated, space-separated list\ncummulative_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    cummulative_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n5 6 7\\n2 6\") = \"30\" ]]\n    [[ $(candidate \"2 4\\n6 7 8\\n3 7\") = \"37\" ]]\n    [[ $(candidate \"3 5\\n7 8 9\\n4 8\") = \"44\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_615_average_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n#\n# $1 is a newline-separated, space-separated list\naverage_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    average_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 10 10 12\\n30 45 56 45\\n81 80 39 32\\n1 2 3 4\") = \"30.5 34.25 27.0 23.25\" ]]\n    [[ $(candidate \"1 1 -5\\n30 -15 56\\n81 -60 -39\\n-10 2 3\") = \"25.5 -18.0 3.75\" ]]\n    [[ $(candidate \"100 100 100 120\\n300 450 560 450\\n810 800 390 320\\n10 20 30 40\") = \"305.0 342.5 270.0 232.5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_616_tuple_modulo", "language": "sh", "prompt": "#!/bin/bash\n# Write a function which takes two tuples of the same length and performs the element wise modulo.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntuple_modulo() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    tuple_modulo \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6\" \"5 6 7 5\") = \"0 4 5 1\" ]]\n    [[ $(candidate \"11 5 6 7\" \"6 7 8 6\") = \"5 5 6 1\" ]]\n    [[ $(candidate \"12 6 7 8\" \"7 8 9 7\") = \"5 6 7 1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_617_min_Jumps", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    min_Jumps \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]\n    [[ $(candidate \"3 4\" \"0\") = \"0\" ]]\n    [[ $(candidate \"11 14\" \"11\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_618_div_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to divide two lists element wise.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndiv_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    div_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 5 6\" \"1 2 3\") = \"4.0 2.5 2.0\" ]]\n    [[ $(candidate \"3 2\" \"1 4\") = \"3.0 0.5\" ]]\n    [[ $(candidate \"90 120\" \"50 70\") = \"1.8 1.7142857142857142\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_619_move_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to move all the numbers to the end of the given string.\n#\n# $1 is a string\nmove_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    move_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"I1love143you55three3000thousand\") = \"Iloveyouthreethousand1143553000\" ]]\n    [[ $(candidate \"Avengers124Assemble\") = \"AvengersAssemble124\" ]]\n    [[ $(candidate \"Its11our12path13to14see15things16do17things\") = \"Itsourpathtoseethingsdothings11121314151617\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_61_count_Substrings", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of substrings with the sum of digits equal to their length.\n#\n# $1 is a string\ncount_Substrings() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_Substrings \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"112112\") = \"6\" ]]\n    [[ $(candidate \"111\") = \"6\" ]]\n    [[ $(candidate \"1101112\") = \"12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_622_get_median", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the median of two sorted lists of same size.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nget_median() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_median \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 12 15 26 38\" \"2 13 17 30 45\" \"5\") = \"16.0\" ]]\n    [[ $(candidate \"2 4 8 9\" \"7 13 19 28\" \"4\") = \"8.5\" ]]\n    [[ $(candidate \"3 6 14 23 36 42\" \"2 18 27 39 49 55\" \"6\") = \"25.0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_623_nth_nums", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to compute the n-th power of each number in a list.\n#\n# $1 is a space-separated list\n# $2 is an integer\nnth_nums() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    nth_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"1 4 9 16 25 36 49 64 81 100\" ]]\n    [[ $(candidate \"10 20 30\" \"3\") = \"1000 8000 27000\" ]]\n    [[ $(candidate \"12 15\" \"5\") = \"248832 759375\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_624_is_upper", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to convert a given string to uppercase.\n#\n# $1 is a string\nis_upper() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_upper \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"person\") = \"PERSON\" ]]\n    [[ $(candidate \"final\") = \"FINAL\" ]]\n    [[ $(candidate \"Valid\") = \"VALID\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_625_swap_List", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to interchange the first and last element in a given list.\n#\n# $1 is a space-separated list\nswap_List() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    swap_List \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"3 2 1\" ]]\n    [[ $(candidate \"1 2 3 4 4\") = \"4 2 3 4 1\" ]]\n    [[ $(candidate \"4 5 6\") = \"6 5 4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_626_triangle_area", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n#\n# $1 is an integer\ntriangle_area() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1\") = \"None\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n    [[ $(candidate \"2\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_627_find_First_Missing", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the smallest missing number from a sorted list of natural numbers.\n#\n# $1 is a space-separated list\nfind_First_Missing() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_First_Missing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 1 2 3\") = \"4\" ]]\n    [[ $(candidate \"0 1 2 6 9\") = \"3\" ]]\n    [[ $(candidate \"2 3 5 8 9\") = \"0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_628_replace_spaces", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to replace all spaces in the given string with '%20'.\n#\n# $1 is a string\nreplace_spaces() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    replace_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"My Name is Dawood\") = \"My%20Name%20is%20Dawood\" ]]\n    [[ $(candidate \"I am a Programmer\") = \"I%20am%20a%20Programmer\" ]]\n    [[ $(candidate \"I love Coding\") = \"I%20love%20Coding\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_629_Split", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find even numbers from a list of numbers.\n#\n# $1 is a space-separated list\nSplit() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Split \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5\") = \"2 4\" ]]\n    [[ $(candidate \"4 5 6 7 8 0 1\") = \"4 6 8 0\" ]]\n    [[ $(candidate \"8 12 15 19\") = \"8 12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_62_smallest_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find smallest number in a list.\n#\n# $1 is a space-separated list\nsmallest_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    smallest_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 1 45 99\") = \"1\" ]]\n    [[ $(candidate \"1 2 3\") = \"1\" ]]\n    [[ $(candidate \"45 46 50 60\") = \"45\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_630_get_coordinates", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n#\n# $1 is a space-separated list\nget_coordinates() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_coordinates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]\n    [[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_631_replace_spaces", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to replace whitespaces with an underscore and vice versa in a given string.\n#\n# $1 is a string\nreplace_spaces() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    replace_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Jumanji The Jungle\") = \"Jumanji_The_Jungle\" ]]\n    [[ $(candidate \"The_Avengers\") = \"The Avengers\" ]]\n    [[ $(candidate \"Fast and Furious\") = \"Fast_and_Furious\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_632_move_zero", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to move all zeroes to the end of the given list.\n#\n# $1 is a space-separated list\nmove_zero() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    move_zero \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 0 2 0 3 4\") = \"1 2 3 4 0 0\" ]]\n    [[ $(candidate \"2 3 2 0 0 4 0 5 0\") = \"2 3 2 4 5 0 0 0 0\" ]]\n    [[ $(candidate \"0 1 0 1 1\") = \"1 1 1 0 0\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of xor of all pairs of numbers in the given list.\n#\n# $1 is a space-separated list\n# $2 is an integer\npair_xor_Sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    pair_xor_Sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 9 7 6\" \"4\") = \"47\" ]]\n    [[ $(candidate \"7 3 5\" \"3\") = \"12\" ]]\n    [[ $(candidate \"7 3\" \"2\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_635_heap_sort", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort the given list.\n#\n# $1 is a space-separated list\nheap_sort() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    heap_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]\n    [[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]\n    [[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_637_noprofit_noloss", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given amount has no profit and no loss\n#\n# $1 is an integer\n# $2 is an integer\nnoprofit_noloss() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    noprofit_noloss \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1500\" \"1200\") = \"false\" ]]\n    [[ $(candidate \"100\" \"100\") = \"true\" ]]\n    [[ $(candidate \"2000\" \"5000\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_638_wind_chill", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n#\n# $1 is an integer\n# $2 is an integer\nwind_chill() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    wind_chill \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"120\" \"35\") = \"40\" ]]\n    [[ $(candidate \"40\" \"20\") = \"19\" ]]\n    [[ $(candidate \"10\" \"8\") = \"6\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_639_sample_nam", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n#\n# $1 is a space-separated list\nsample_nam() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sample_nam \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"sally Dylan rebecca Diana Joanne keith\") = \"16\" ]]\n    [[ $(candidate \"php res Python abcd Java aaa\") = \"10\" ]]\n    [[ $(candidate \"abcd Python abba aba\") = \"6\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_63_max_difference", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the maximum difference between available pairs in the given tuple list.\n#\n# $1 is a newline-separated, space-separated list\nmax_difference() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_difference \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 5\\n1 7\\n10 3\\n1 2\") = \"7\" ]]\n    [[ $(candidate \"4 6\\n2 17\\n9 13\\n11 12\") = \"15\" ]]\n    [[ $(candidate \"12 35\\n21 27\\n13 23\\n41 22\") = \"23\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_640_remove_parenthesis", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove the parenthesis and what is inbetween them from a string.\n#\n# $1 is a space-separated list\nremove_parenthesis() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_parenthesis \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"string(.abc)\") = \"string\" ]]\n    [[ $(candidate \"alpha(num)\") = \"alpha\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_641_is_nonagonal", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth nonagonal number.\n#\n# $1 is an integer\nis_nonagonal() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_nonagonal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"325\" ]]\n    [[ $(candidate \"15\") = \"750\" ]]\n    [[ $(candidate \"18\") = \"1089\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that checks if a strings contains 'z', except at the start and end of the word.\n#\n# $1 is a string\ntext_match_wordz_middle() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_match_wordz_middle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"pythonzabc.\") = \"true\" ]]\n    [[ $(candidate \"zxyabc.\") = \"false\" ]]\n    [[ $(candidate \"  lang  .\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to reverse an array upto a given position.\n#\n# $1 is a space-separated list\n# $2 is an integer\nreverse_Array_Upto_K() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    reverse_Array_Upto_K \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\" \"4\") = \"4 3 2 1 5 6\" ]]\n    [[ $(candidate \"4 5 6 7\" \"2\") = \"5 4 6 7\" ]]\n    [[ $(candidate \"9 8 7 6 5\" \"3\") = \"7 8 9 6 5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_64_subject_marks", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort a list of tuples using the second value of each tuple.\n#\n# $1 is a newline-separated, space-separated list\nsubject_marks() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    subject_marks \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Telugu 49\\nHindhi 54\\nSocial 33\") = \"Social 33\\nTelugu 49\\nHindhi 54\" ]]\n    [[ $(candidate \"Physics 96\\nChemistry 97\\nBiology 45\") = \"Biology 45\\nPhysics 96\\nChemistry 97\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_65_recursive_list_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to flatten a list and sum all of its elements.\n#\n# $1 is a newline-separated, space-separated list\nrecursive_list_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    recursive_list_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"21\" ]]\n    [[ $(candidate \"7 10 15 14 19 41\") = \"106\" ]]\n    [[ $(candidate \"10 20 30 40 50 60\") = \"210\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_66_pos_count", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of positive numbers in a list.\n#\n# $1 is a space-separated list\npos_count() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    pos_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 3 -4\") = \"2\" ]]\n    [[ $(candidate \"3 4 5 -1\") = \"3\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_67_bell_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the number of ways to partition a set of Bell numbers.\n#\n# $1 is an integer\nbell_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    bell_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"10\") = \"115975\" ]]\n    [[ $(candidate \"56\") = \"6775685320645824322581483068371419745979053216268760300\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_68_is_Monotonic", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the given array is monotonic or not.\n#\n# $1 is a space-separated list\nis_Monotonic() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_Monotonic \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6 5 4 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 2 3\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_69_is_sublist", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether a list contains the given sublist or not.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_sublist() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_sublist \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4 3 5 7\" \"3 7\") = \"false\" ]]\n    [[ $(candidate \"2 4 3 5 7\" \"4 3\") = \"true\" ]]\n    [[ $(candidate \"2 4 3 5 7\" \"1 6\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the two numbers differ at one bit position only or not.\n#\n# $1 is an integer\n# $2 is an integer\ndiffer_At_One_Bit_Pos() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    differ_At_One_Bit_Pos \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"13\" \"9\") = \"true\" ]]\n    [[ $(candidate \"15\" \"8\") = \"false\" ]]\n    [[ $(candidate \"2\" \"4\") = \"false\" ]]\n    [[ $(candidate \"2\" \"3\") = \"true\" ]]\n    [[ $(candidate \"5\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"5\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_70_get_equal", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find whether all the given lists have equal length or not.\n#\n# $1 is a newline-separated, space-separated list\nget_equal() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_equal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11 22 33\\n44 55 66\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"1 2\\n3 4\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_71_comb_sort", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort a list of elements.\n#\n# $1 is a space-separated list\ncomb_sort() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    comb_sort \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 15 37 25 79\") = \"5 15 25 37 79\" ]]\n    [[ $(candidate \"41 32 15 19 22\") = \"15 19 22 32 41\" ]]\n    [[ $(candidate \"99 15 13 47\") = \"13 15 47 99\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to add a dictionary to the tuple. The output should be a tuple.\n#\n# $1 is a space-separated list\n# $2 is a two column CSV in key,value order\nadd_dict_to_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    add_dict_to_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 5 6\" \"MSAM,1\\nis,2\\nbest,3\") = \"4 5 6 MSAM,1\\nis,2\\nbest,3\" ]]\n    [[ $(candidate \"1 2 3\" \"UTS,2\\nis,3\\nWorst,4\") = \"1 2 3 UTS,2\\nis,3\\nWorst,4\" ]]\n    [[ $(candidate \"8 9 10\" \"POS,3\\nis,4\\nOkay,5\") = \"8 9 10 POS,3\\nis,4\\nOkay,5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "sh", "prompt": "#!/bin/bash\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    maxAverageOfPath \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]\n    [[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]\n    [[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]\n    [[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_723_count_same_pair", "language": "sh", "prompt": "#!/bin/bash\n# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncount_same_pair() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_same_pair \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 9\") = \"4\" ]]\n    [[ $(candidate \"0 1 2 -1 -5 6 0 -3 -2 3 4 6 8\" \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"11\" ]]\n    [[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\" \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"1\" ]]\n    [[ $(candidate \"0 1 1 2\" \"0 1 2 2\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_724_power_base_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n#\n# $1 is an integer\n# $2 is an integer\npower_base_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    power_base_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"100\") = \"115\" ]]\n    [[ $(candidate \"8\" \"10\") = \"37\" ]]\n    [[ $(candidate \"8\" \"15\") = \"62\" ]]\n    [[ $(candidate \"3\" \"3\") = \"9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_725_extract_quotation", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to extract values between quotation marks \" \" of the given string.\n#\n# $1 is a string\nextract_quotation() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_quotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\") = \"A53 multi Processor\" ]]\n    [[ $(candidate \"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\") = \"favorite apps\" ]]\n    [[ $(candidate \"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") = \"\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_726_multiply_elements", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n#\n# $1 is a space-separated list\nmultiply_elements() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    multiply_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 8 10\") = \"5 35 56 80\" ]]\n    [[ $(candidate \"2 4 5 6 7\") = \"8 20 30 42\" ]]\n    [[ $(candidate \"12 13 14 9 15\") = \"156 182 126 135\" ]]\n    [[ $(candidate \"12\") = \"\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_728_sum_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsum_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 20 30\" \"15 25 35\") = \"25 45 65\" ]]\n    [[ $(candidate \"1 2 3\" \"5 6 7\") = \"6 8 10\" ]]\n    [[ $(candidate \"15 20 30\" \"15 45 75\") = \"30 65 105\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_72_dif_Square", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the given number can be represented as the difference of two squares or not.\n#\n# $1 is an integer\ndif_Square() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    dif_Square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"15\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove consecutive duplicates of a given list.\n#\n# $1 is a space-separated list\nconsecutive_duplicates() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    consecutive_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\") = \"0 1 2 3 4 5 6 7 8 9 4\" ]]\n    [[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\") = \"10 15 19 18 17 26 17 18 10\" ]]\n    [[ $(candidate \"a a b c d d\") = \"a b c d\" ]]\n    [[ $(candidate \"a a b c d d a a\") = \"a b c d a\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the lateral surface area of a cone given radius r and the height h.\n#\n# $1 is an integer\n# $2 is an integer\nlateralsurface_cone() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    lateralsurface_cone \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\" \"12\") = \"204.20352248333654\" ]]\n    [[ $(candidate \"10\" \"15\") = \"566.3586699569488\" ]]\n    [[ $(candidate \"19\" \"17\") = \"1521.8090132193388\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_732_replace_specialchar", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n#\n# $1 is a string\nreplace_specialchar() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    replace_specialchar \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python language, Programming language.\") = \"Python:language::Programming:language:\" ]]\n    [[ $(candidate \"a b c,d e f\") = \"a:b:c:d:e:f\" ]]\n    [[ $(candidate \"ram reshma,ram rahim\") = \"ram:reshma:ram:rahim\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_733_find_first_occurrence", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the index of the first occurrence of a given number in a sorted array.\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_first_occurrence() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_first_occurrence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 5 5 5 6 6 8 9 9 9\" \"5\") = \"1\" ]]\n    [[ $(candidate \"2 3 5 5 6 6 8 9 9 9\" \"5\") = \"2\" ]]\n    [[ $(candidate \"2 4 1 5 6 6 8 9 9 9\" \"6\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n#\n# $1 is a space-separated list\nsum_Of_Subarray_Prod() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_Of_Subarray_Prod \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"20\" ]]\n    [[ $(candidate \"1 2\") = \"5\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"84\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n#\n# $1 is an integer\ntoggle_middle_bits() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    toggle_middle_bits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"9\") = \"15\" ]]\n    [[ $(candidate \"10\") = \"12\" ]]\n    [[ $(candidate \"11\") = \"13\" ]]\n    [[ $(candidate \"65\") = \"127\" ]]\n    [[ $(candidate \"77\") = \"115\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_736_left_insertion", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n#\n# $1 is a space-separated list\n# $2 is an integer\nleft_insertion() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    left_insertion \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]\n    [[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_737_check_str", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given string is starting with a vowel or not using regex.\n#\n# $1 is a string\ncheck_str() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_str \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"annie\") = \"true\" ]]\n    [[ $(candidate \"dawood\") = \"false\" ]]\n    [[ $(candidate \"Else\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_738_geometric_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n#\n# $1 is an integer\ngeometric_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    geometric_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"1.9921875\" ]]\n    [[ $(candidate \"4\") = \"1.9375\" ]]\n    [[ $(candidate \"8\") = \"1.99609375\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_739_find_Index", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n#\n# $1 is an integer\nfind_Index() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Index \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"14\" ]]\n    [[ $(candidate \"4\") = \"45\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_740_tuple_to_dict", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n#\n# $1 is a space-separated list\ntuple_to_dict() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    tuple_to_dict \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 10 13 5\") = \"1,5\\n7,10\\n13,5\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"1,2\\n3,4\\n5,6\" ]]\n    [[ $(candidate \"7 8 9 10 11 12\") = \"7,8\\n9,10\\n11,12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_741_all_Characters_Same", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether all the characters are same or not.\n#\n# $1 is a string\nall_Characters_Same() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    all_Characters_Same \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python\") = \"false\" ]]\n    [[ $(candidate \"aaa\") = \"true\" ]]\n    [[ $(candidate \"data\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_742_area_tetrahedron", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to caluclate the area of a tetrahedron.\n#\n# $1 is an integer\narea_tetrahedron() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    area_tetrahedron \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\") = \"15.588457268119894\" ]]\n    [[ $(candidate \"20\") = \"692.8203230275509\" ]]\n    [[ $(candidate \"10\") = \"173.20508075688772\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_743_rotate_right", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n#\n# $1 is a space-separated list\n# $2 is an integer\nrotate_right() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    rotate_right \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"3\") = \"8 9 10 1 2 3 4 5 6 7\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"9 10 1 2 3 4 5 6 7 8\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5\") = \"6 7 8 9 10 1 2 3 4 5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_744_check_none", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if the given tuple has any none value or not.\n#\n# $1 is a $Any\ncheck_none() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_none \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6 None\") = \"true\" ]]\n    [[ $(candidate \"7 8 9 11 14\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 None\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_745_divisible_by_digits", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n#\n# $1 is an integer\n# $2 is an integer\ndivisible_by_digits() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    divisible_by_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"22\") = \"1 2 3 4 5 6 7 8 9 11 12 15 22\" ]]\n    [[ $(candidate \"1\" \"15\") = \"1 2 3 4 5 6 7 8 9 11 12 15\" ]]\n    [[ $(candidate \"20\" \"25\") = \"22 24\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_746_sector_area", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n#\n# $1 is an integer\n# $2 is an integer\nsector_area() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sector_area \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\" \"45\") = \"6.283185307179586\" ]]\n    [[ $(candidate \"9\" \"45\") = \"31.808625617596654\" ]]\n    [[ $(candidate \"9\" \"361\") = \"None\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_747_lcs_of_three", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n#\n# $1 is a string\n# $2 is a string\n# $3 is a string\nlcs_of_three() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    lcs_of_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") = \"2\" ]]\n    [[ $(candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") = \"5\" ]]\n    [[ $(candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_748_capital_words_spaces", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to put spaces between words starting with capital letters in a given string.\n#\n# $1 is a string\ncapital_words_spaces() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    capital_words_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Python\") = \"Python\" ]]\n    [[ $(candidate \"PythonProgrammingExamples\") = \"Python Programming Examples\" ]]\n    [[ $(candidate \"GetReadyToBeCodingFreak\") = \"Get Ready To Be Coding Freak\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n#\n# $1 is a space-separated list\nsort_numeric_strings() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sort_numeric_strings \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 12 45 7 0 100 200 -12 -500\") = \"-500 -12 0 4 7 12 45 100 200\" ]]\n    [[ $(candidate \"2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 4 6 9 1 2\") = \"1 1 1 2 2 2 2 3 3 4 4 5 6 6 6 7 8 8 9 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_74_is_samepatterns", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether it follows the sequence given in the patterns array.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_samepatterns() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_samepatterns \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"red green green\" \"a b b\") = \"true\" ]]\n    [[ $(candidate \"red green greenn\" \"a b b\") = \"false\" ]]\n    [[ $(candidate \"red green greenn\" \"a b\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_750_add_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to add the given tuple to the given list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    add_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5 6 7\" \"9 10\") = \"5 6 7 9 10\" ]]\n    [[ $(candidate \"6 7 8\" \"10 11\") = \"6 7 8 10 11\" ]]\n    [[ $(candidate \"7 8 9\" \"11 12\") = \"7 8 9 11 12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_751_check_min_heap", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_min_heap \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]\n    [[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_752_jacobsthal_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n#\n# $1 is an integer\njacobsthal_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    jacobsthal_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"11\" ]]\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"4\") = \"5\" ]]\n    [[ $(candidate \"13\") = \"2731\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_753_min_k", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmin_k() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    min_k \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Manjeet 10\\nAkshat 4\\nAkash 2\\nNikhil 8\" \"2\") = \"Akash 2\\nAkshat 4\" ]]\n    [[ $(candidate \"Sanjeev 11\\nAngat 5\\nAkash 3\\nNepin 9\" \"3\") = \"Akash 3\\nAngat 5\\nNepin 9\" ]]\n    [[ $(candidate \"tanmay 14\\nAmer 11\\nAyesha 9\\nSKD 16\" \"1\") = \"Ayesha 9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_754_extract_index_list", "language": "sh", "prompt": "#!/bin/bash\n# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\nextract_index_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    extract_index_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 3 4 5 6 7\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"1 7\" ]]\n    [[ $(candidate \"1 1 3 4 5 6 7\" \"0 1 2 3 4 6 5\" \"0 1 2 3 4 6 7\") = \"1 6\" ]]\n    [[ $(candidate \"1 1 3 4 6 5 6\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"1 5\" ]]\n    [[ $(candidate \"1 2 3 4 6 6 6\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_755_second_smallest", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the second smallest number in a list.\n#\n# $1 is a newline-separated, space-separated list\nsecond_smallest() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    second_smallest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 -8 -2 0 -2\") = \"-2\" ]]\n    [[ $(candidate \"1 1 -0.5 0 2 -2 -2\") = \"-0.5\" ]]\n    [[ $(candidate \"2 2\") = \"None\" ]]\n    [[ $(candidate \"2 2 2\") = \"None\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_756_text_match_zero_one", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n#\n# $1 is a string\ntext_match_zero_one() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_match_zero_one \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abbbba\") = \"true\" ]]\n    [[ $(candidate \"dsabbbba\") = \"true\" ]]\n    [[ $(candidate \"asbbbba\") = \"false\" ]]\n    [[ $(candidate \"abaaa\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n#\n# $1 is a space-separated list\ncount_reverse_pairs() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_reverse_pairs \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"julia best tseb for ailuj\") = \"2\" ]]\n    [[ $(candidate \"geeks best for skeeg\") = \"1\" ]]\n    [[ $(candidate \"makes best sekam for rof\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_759_is_decimal", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether a given string is a decimal number with a precision of 2.\n#\n# $1 is a string\nis_decimal() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_decimal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"123.11\") = \"true\" ]]\n    [[ $(candidate \"e666.86\") = \"false\" ]]\n    [[ $(candidate \"3.124587\") = \"false\" ]]\n    [[ $(candidate \"1.11\") = \"true\" ]]\n    [[ $(candidate \"1.1.11\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_75_find_tuples", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nfind_tuples() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_tuples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6 24 12\\n7 9 6\\n12 18 21\" \"6\") = \"6 24 12\" ]]\n    [[ $(candidate \"5 25 30\\n4 2 3\\n7 8 9\" \"5\") = \"5 25 30\" ]]\n    [[ $(candidate \"7 9 16\\n8 16 4\\n19 17 18\" \"4\") = \"8 16 4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_760_unique_Element", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether a list of numbers contains only one distinct element or not.\n#\n# $1 is a space-separated list\nunique_Element() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    unique_Element \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 1\") = \"true\" ]]\n    [[ $(candidate \"1 2 1 2\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n#\n# $1 is an integer\ncheck_monthnumber_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_monthnumber_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"6\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"12\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_763_find_min_diff", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_min_diff() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_min_diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 3 19 18 25\" \"6\") = \"1\" ]]\n    [[ $(candidate \"4 3 2 6\" \"4\") = \"1\" ]]\n    [[ $(candidate \"30 5 20 9\" \"4\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_764_number_ctr", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count number of digits in a given string.\n#\n# $1 is a string\nnumber_ctr() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    number_ctr \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"program2bedone\") = \"1\" ]]\n    [[ $(candidate \"3wonders\") = \"1\" ]]\n    [[ $(candidate \"123\") = \"3\" ]]\n    [[ $(candidate \"3wond-1ers2\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_765_is_polite", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n#\n# $1 is an integer\nis_polite() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_polite \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"7\") = \"11\" ]]\n    [[ $(candidate \"4\") = \"7\" ]]\n    [[ $(candidate \"9\") = \"13\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_766_pair_wise", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to return a list of all pairs of consecutive items in a given list.\n#\n# $1 is a space-separated list\npair_wise() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    pair_wise \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 2 3 3 4 4 5\") = \"1 1\\n1 2\\n2 3\\n3 3\\n3 4\\n4 4\\n4 5\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"1 5\\n5 7\\n7 9\\n9 10\" ]]\n    [[ $(candidate \"5 1 9 7 10\") = \"5 1\\n1 9\\n9 7\\n7 10\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_767_get_pairs_count", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n#\n# $1 is a space-separated list\n# $2 is an integer\nget_pairs_count() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_pairs_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 1 1 1\" \"2\") = \"6\" ]]\n    [[ $(candidate \"1 5 7 -1 5\" \"6\") = \"3\" ]]\n    [[ $(candidate \"1 -2 3\" \"1\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 3\" \"-3\") = \"1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_769_Diff", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to get the difference between two lists.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nDiff() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 15 20 25 30 35 40\" \"25 40 35\") = \"10 20 30 15\" ]]\n    [[ $(candidate \"1 2 3 4 5\" \"6 7 1\") = \"2 3 4 5 6 7\" ]]\n    [[ $(candidate \"1 2 3\" \"6 7 1\") = \"2 3 6 7\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_770_odd_num_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of fourth power of first n odd natural numbers.\n#\n# $1 is an integer\nodd_num_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    odd_num_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"82\" ]]\n    [[ $(candidate \"3\") = \"707\" ]]\n    [[ $(candidate \"4\") = \"3108\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_771_check_expression", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n#\n# $1 is a string\ncheck_expression() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_expression \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"{()}[{}]\") = \"true\" ]]\n    [[ $(candidate \"{()}[{]\") = \"false\" ]]\n    [[ $(candidate \"{()}[{}][]({})\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_772_remove_length", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove all the words with k length in the given string.\n#\n# $1 is a string\n# $2 is an integer\nremove_length() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"The person is most value tet\" \"3\") = \"person is most value\" ]]\n    [[ $(candidate \"If you told me about this ok\" \"4\") = \"If you me about ok\" ]]\n    [[ $(candidate \"Forces of darkeness is come into the play\" \"4\") = \"Forces of darkeness is the\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_773_occurance_substring", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n#\n# $1 is a string\n# $2 is a string\noccurance_substring() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    occurance_substring \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python programming, python language\" \"python\") = \"python 0 6\" ]]\n    [[ $(candidate \"python programming,programming language\" \"programming\") = \"programming 7 18\" ]]\n    [[ $(candidate \"python programming,programming language\" \"language\") = \"language 31 39\" ]]\n    [[ $(candidate \"c++ programming, c++ language\" \"python\") = \"None\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_775_odd_position", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether every odd index contains odd numbers of a given list.\n#\n# $1 is a space-separated list\nodd_position() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    odd_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 4 3 6 7 6 3\") = \"true\" ]]\n    [[ $(candidate \"4 1 2\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_776_count_vowels", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to count those characters which have vowels as their neighbors in the given string.\n#\n# $1 is a string\ncount_vowels() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_vowels \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"bestinstareels\") = \"7\" ]]\n    [[ $(candidate \"partofthejourneyistheend\") = \"12\" ]]\n    [[ $(candidate \"amazonprime\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_777_find_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of non-repeated elements in a given list.\n#\n# $1 is a space-separated list\nfind_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 1 1 4 5 6\") = \"21\" ]]\n    [[ $(candidate \"1 10 9 4 2 10 10 45 4\") = \"71\" ]]\n    [[ $(candidate \"12 10 9 45 2 10 10 45 10\") = \"78\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to pack consecutive duplicates of a given list elements into sublists.\n#\n# $1 is a space-separated list\npack_consecutive_duplicates() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    pack_consecutive_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\") = \"0 0\\n1\\n2\\n3\\n4 4\\n5\\n6 6 6\\n7\\n8\\n9\\n4 4\" ]]\n    [[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\") = \"10 10\\n15\\n19\\n18 18\\n17\\n26 26\\n17\\n18\\n10\" ]]\n    [[ $(candidate \"a a b c d d\") = \"a a\\nb\\nc\\nd d\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_77_is_Diff", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find whether a number is divisible by 11.\n#\n# $1 is an integer\nis_Diff() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_Diff \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"12345\") = \"false\" ]]\n    [[ $(candidate \"1212112\") = \"true\" ]]\n    [[ $(candidate \"1212\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_780_find_combinations", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n#\n# $1 is a newline-separated, space-separated list\nfind_combinations() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_combinations \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 4\\n6 7\\n5 1\\n6 10\") = \"8 11\\n7 5\\n8 14\\n11 8\\n12 17\\n11 11\" ]]\n    [[ $(candidate \"3 5\\n7 8\\n6 2\\n7 11\") = \"10 13\\n9 7\\n10 16\\n13 10\\n14 19\\n13 13\" ]]\n    [[ $(candidate \"4 6\\n8 9\\n7 3\\n8 12\") = \"12 15\\n11 9\\n12 18\\n15 12\\n16 21\\n15 15\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_781_count_divisors", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n#\n# $1 is an integer\ncount_divisors() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_divisors \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"true\" ]]\n    [[ $(candidate \"100\") = \"false\" ]]\n    [[ $(candidate \"125\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_782_odd_length_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n#\n# $1 is a space-separated list\nodd_length_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    odd_length_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4\") = \"14\" ]]\n    [[ $(candidate \"1 2 1 2\") = \"15\" ]]\n    [[ $(candidate \"1 7\") = \"8\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nrgb_to_hsv() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    rgb_to_hsv \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"255\" \"255\" \"255\") = \"0.0 0.0 100.0\" ]]\n    [[ $(candidate \"0\" \"215\" \"0\") = \"120.0 100.0 84.31372549019608\" ]]\n    [[ $(candidate \"10\" \"215\" \"110\") = \"149.26829268292684 95.34883720930233 84.31372549019608\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_784_mul_even_odd", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the product of first even and odd number of a given list.\n#\n# $1 is a space-separated list\nmul_even_odd() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    mul_even_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5 7 4 1 6 8\") = \"4\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"2\" ]]\n    [[ $(candidate \"1 5 7 9 10\") = \"10\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_785_tuple_str_int", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert tuple string to integer tuple.\n#\n# $1 is a string\ntuple_str_int() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    tuple_str_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(7, 8, 9)\") = \"7 8 9\" ]]\n    [[ $(candidate \"(1, 2, 3)\") = \"1 2 3\" ]]\n    [[ $(candidate \"(4, 5, 6)\") = \"4 5 6\" ]]\n    [[ $(candidate \"(7, 81, 19)\") = \"7 81 19\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_786_right_insertion", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to locate the right insertion point for a specified value in sorted order.\n#\n# $1 is a space-separated list\n# $2 is an integer\nright_insertion() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    right_insertion \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]\n    [[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_787_text_match_three", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an a followed by three 'b'.\n#\n# $1 is a string\ntext_match_three() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_match_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"ac\") = \"false\" ]]\n    [[ $(candidate \"dc\") = \"false\" ]]\n    [[ $(candidate \"abbbba\") = \"true\" ]]\n    [[ $(candidate \"caacabbbba\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_788_new_tuple", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to create a new tuple from the given string and list.\n#\n# $1 is a space-separated list\n# $2 is a string\nnew_tuple() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    new_tuple \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"WEB is\" \"best\") = \"WEB is best\" ]]\n    [[ $(candidate \"We are\" \"Developers\") = \"We are Developers\" ]]\n    [[ $(candidate \"Part is\" \"Wrong\") = \"Part is Wrong\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_790_even_position", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether every even index contains even numbers of a given list.\n#\n# $1 is a space-separated list\neven_position() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    even_position \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 3\") = \"false\" ]]\n    [[ $(candidate \"2 1 4\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_791_remove_nested", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove tuples from the given tuple.\n#\n# $1 is a $Any\nremove_nested() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 5 7 4 6 10\") = \"1 5 7 10\" ]]\n    [[ $(candidate \"2 6 8 5 7 11\") = \"2 6 8 11\" ]]\n    [[ $(candidate \"3 7 9 6 8 12\") = \"3 7 9 12\" ]]\n    [[ $(candidate \"3 7 9 6 8 5 12 12\") = \"3 7 9 12\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_792_count_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of lists in a given number of lists.\n#\n# $1 is a newline-separated, space-separated list\ncount_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3\\n5 7\\n9 11\\n13 15 17\") = \"4\" ]]\n    [[ $(candidate \"1 2\\n2 3\\n4 5\") = \"3\" ]]\n    [[ $(candidate \"1 0\\n2 0\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_793_last", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the last position of an element in a sorted array.\n#\n# $1 is a space-separated list\n# $2 is an integer\nlast() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    last \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"1\") = \"0\" ]]\n    [[ $(candidate \"1 1 1 2 3 4\" \"1\") = \"2\" ]]\n    [[ $(candidate \"2 3 2 3 6 8 9\" \"3\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_794_text_starta_endb", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n#\n# $1 is a string\ntext_starta_endb() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    text_starta_endb \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aabbbb\") = \"true\" ]]\n    [[ $(candidate \"aabAbbbc\") = \"false\" ]]\n    [[ $(candidate \"accddbbjjj\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_796_return_sum", "language": "sh", "prompt": "#!/bin/bash\n# Write function to find the sum of all items in the given dictionary.\n#\n# $1 is a two column CSV in key,value order\nreturn_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    return_sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a,100\\nb,200\\nc,300\") = \"600\" ]]\n    [[ $(candidate \"a,25\\nb,18\\nc,45\") = \"88\" ]]\n    [[ $(candidate \"a,36\\nb,39\\nc,49\") = \"124\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_797_sum_in_range", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of all odd natural numbers within the range l and r.\n#\n# $1 is an integer\n# $2 is an integer\nsum_in_range() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sum_in_range \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"5\") = \"8\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate \"7\" \"13\") = \"40\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_798__sum", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the sum of an array.\n#\n# $1 is a space-separated list\n_sum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    _sum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"6\" ]]\n    [[ $(candidate \"15 12 13 10\") = \"50\" ]]\n    [[ $(candidate \"0 1 2\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_799_left_rotate", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n#\n# $1 is an integer\n# $2 is an integer\nleft_rotate() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    left_rotate \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"16\" \"2\") = \"64\" ]]\n    [[ $(candidate \"10\" \"2\") = \"40\" ]]\n    [[ $(candidate \"99\" \"3\") = \"792\" ]]\n    [[ $(candidate \"99\" \"3\") = \"792\" ]]\n    [[ $(candidate \"1\" \"3\") = \"8\" ]]\n    [[ $(candidate \"5\" \"3\") = \"40\" ]]\n    [[ $(candidate \"29\" \"3\") = \"232\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_79_word_len", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to check whether the length of the word is odd or not.\n#\n# $1 is a string\nword_len() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    word_len \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hadoop\") = \"false\" ]]\n    [[ $(candidate \"great\") = \"true\" ]]\n    [[ $(candidate \"structure\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_800_remove_all_spaces", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to remove all whitespaces from a string.\n#\n# $1 is a string\nremove_all_spaces() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    remove_all_spaces \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python  program\") = \"pythonprogram\" ]]\n    [[ $(candidate \"python   programming    language\") = \"pythonprogramminglanguage\" ]]\n    [[ $(candidate \"python                     program\") = \"pythonprogram\" ]]\n    [[ $(candidate \"   python                     program\") = \"pythonprogram\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_801_test_three_equal", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of equal numbers from three given integers.\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntest_three_equal() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    test_three_equal \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\" \"1\" \"1\") = \"3\" ]]\n    [[ $(candidate \"-1\" \"-2\" \"-3\") = \"0\" ]]\n    [[ $(candidate \"1\" \"2\" \"2\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_802_count_rotation", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n#\n# $1 is a space-separated list\ncount_rotation() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    count_rotation \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 2 1\") = \"1\" ]]\n    [[ $(candidate \"4 5 1 2 3\") = \"2\" ]]\n    [[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]\n    [[ $(candidate \"1 2 3\") = \"0\" ]]\n    [[ $(candidate \"1 3 2\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_803_is_perfect_square", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n#\n# $1 is an integer\nis_perfect_square() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_perfect_square \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"false\" ]]\n    [[ $(candidate \"36\") = \"true\" ]]\n    [[ $(candidate \"14\") = \"false\" ]]\n    [[ $(candidate \"196\") = \"true\" ]]\n    [[ $(candidate \"125\") = \"false\" ]]\n    [[ $(candidate \"15625\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_804_is_product_even", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the product of numbers in a list is even or not.\n#\n# $1 is a space-separated list\nis_product_even() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_product_even \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\") = \"true\" ]]\n    [[ $(candidate \"1 2 1 4\") = \"true\" ]]\n    [[ $(candidate \"1 1\") = \"false\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_805_max_sum_list", "language": "sh", "prompt": "#!/bin/bash\n# Write a function that returns the list in a list of lists whose sum of elements is the highest.\n#\n# $1 is a newline-separated, space-separated list\nmax_sum_list() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_sum_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\\n4 5 6\\n10 11 12\\n7 8 9\") = \"10 11 12\" ]]\n    [[ $(candidate \"3 2 1\\n6 5 4\\n12 11 10\") = \"12 11 10\" ]]\n    [[ $(candidate \"2 3 1\") = \"2 3 1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_806_max_run_uppercase", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find maximum run of uppercase characters in the given string.\n#\n# $1 is a string\nmax_run_uppercase() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    max_run_uppercase \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"GeMKSForGERksISBESt\") = \"5\" ]]\n    [[ $(candidate \"PrECIOusMOVemENTSYT\") = \"6\" ]]\n    [[ $(candidate \"GooGLEFluTTER\") = \"4\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_807_first_odd", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the first odd number in a given list of numbers.\n#\n# $1 is a space-separated list\nfirst_odd() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    first_odd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 3 5\") = \"1\" ]]\n    [[ $(candidate \"2 4 1 3\") = \"1\" ]]\n    [[ $(candidate \"8 9 1\") = \"9\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_808_check_K", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if the given tuples contain the k or not.\n#\n# $1 is a space-separated list\n# $2 is an integer\ncheck_K() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_K \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 4 5 6 8\" \"6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\" \"7\") = \"false\" ]]\n    [[ $(candidate \"7 8 9 44 11 12\" \"11\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_809_check_smaller", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncheck_smaller() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    check_smaller \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3\" \"2 3 4\") = \"false\" ]]\n    [[ $(candidate \"4 5 6\" \"3 4 5\") = \"true\" ]]\n    [[ $(candidate \"11 12 13\" \"10 11 12\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_80_tetrahedral_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth tetrahedral number.\n#\n# $1 is an integer\ntetrahedral_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    tetrahedral_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"35\" ]]\n    [[ $(candidate \"6\") = \"56\" ]]\n    [[ $(candidate \"7\") = \"84\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_83_get_Char", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n#\n# $1 is a string\nget_Char() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    get_Char \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"abc\") = \"f\" ]]\n    [[ $(candidate \"gfg\") = \"t\" ]]\n    [[ $(candidate \"ab\") = \"c\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_84_sequence", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the nth number in the newman conway sequence.\n#\n# $1 is an integer\nsequence() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    sequence \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"6\" ]]\n    [[ $(candidate \"2\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find nth centered hexagonal number.\n#\n# $1 is an integer\ncentered_hexagonal_number() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    centered_hexagonal_number \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"271\" ]]\n    [[ $(candidate \"2\") = \"7\" ]]\n    [[ $(candidate \"9\") = \"217\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to merge three dictionaries into a single dictionary.\n#\n# $1 is a two column CSV in key,value order\n# $2 is a two column CSV in key,value order\n# $3 is a two column CSV in key,value order\nmerge_dictionaries_three() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    merge_dictionaries_three \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"G,Green\\nW,White\" \"O,Orange\\nW,White\\nB,Black\") = \"B,Black\\nR,Red\\nP,Pink\\nG,Green\\nW,White\\nO,Orange\" ]]\n    [[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"G,Green\\nW,White\" \"L,lavender\\nB,Blue\") = \"W,White\\nP,Pink\\nB,Black\\nR,Red\\nG,Green\\nL,lavender\" ]]\n    [[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"L,lavender\\nB,Blue\" \"G,Green\\nW,White\") = \"B,Black\\nP,Pink\\nR,Red\\nG,Green\\nL,lavender\\nW,White\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_88_freq_count", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n#\n# $1 is a space-separated list\nfreq_count() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    freq_count \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10 10 10 10 20 20 20 20 40 40 50 50 30\") = \"10,4\\n20,4\\n40,2\\n50,2\\n30,1\" ]]\n    [[ $(candidate \"1 2 3 4 3 2 4 1 3 1 4\") = \"1,3\\n2,2\\n3,3\\n4,3\" ]]\n    [[ $(candidate \"5 6 7 4 9 10 4 5 6 7 9 5\") = \"10,1\\n5,3\\n6,2\\n7,2\\n4,2\\n9,2\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_89_closest_num", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find the closest smaller number than n.\n#\n# $1 is an integer\nclosest_num() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    closest_num \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"11\") = \"10\" ]]\n    [[ $(candidate \"7\") = \"6\" ]]\n    [[ $(candidate \"12\") = \"11\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_8_square_nums", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find squares of individual elements in a list.\n#\n# $1 is a space-separated list\nsquare_nums() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    square_nums \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 4 9 16 25 36 49 64 81 100\" ]]\n    [[ $(candidate \"10 20 30\") = \"100 400 900\" ]]\n    [[ $(candidate \"12 15\") = \"144 225\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_90_len_log", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the length of the longest word.\n#\n# $1 is a space-separated list\nlen_log() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    len_log \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"python PHP bigdata\") = \"7\" ]]\n    [[ $(candidate \"a ab abc\") = \"3\" ]]\n    [[ $(candidate \"small big tall\") = \"5\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_91_find_substring", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check if a string is present as a substring in a given list of string values.\n#\n# $1 is a space-separated list\n# $2 is a string\nfind_substring() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_substring \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"red black white green orange\" \"ack\") = \"true\" ]]\n    [[ $(candidate \"red black white green orange\" \"abc\") = \"false\" ]]\n    [[ $(candidate \"red black white green orange\" \"ange\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_92_is_undulating", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to check whether the given number is undulating or not.\n#\n# $1 is an integer\nis_undulating() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    is_undulating \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1212121\") = \"true\" ]]\n    [[ $(candidate \"1991\") = \"false\" ]]\n    [[ $(candidate \"121\") = \"true\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_93_power", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to calculate the value of 'a' to the power 'b'.\n#\n# $1 is an integer\n# $2 is an integer\npower() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    power \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3\" \"4\") = \"81\" ]]\n    [[ $(candidate \"2\" \"3\") = \"8\" ]]\n    [[ $(candidate \"5\" \"5\") = \"3125\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_94_index_minimum", "language": "sh", "prompt": "#!/bin/bash\n# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n#\n# $1 is a newline-separated, space-separated list\nindex_minimum() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    index_minimum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Rash 143\\nManjeet 200\\nVarsha 100\") = \"Varsha\" ]]\n    [[ $(candidate \"Yash 185\\nDawood 125\\nSanya 175\") = \"Dawood\" ]]\n    [[ $(candidate \"Sai 345\\nSalman 145\\nAyesha 96\") = \"Ayesha\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_95_Find_Min_Length", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the length of the smallest list in a list of lists.\n#\n# $1 is a newline-separated, space-separated list\nFind_Min_Length() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    Find_Min_Length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\\n1 2\") = \"1\" ]]\n    [[ $(candidate \"1 2\\n1 2 3\\n1 2 3 4\") = \"2\" ]]\n    [[ $(candidate \"3 3 3\\n4 4 4 4\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_96_divisor", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the number of divisors of a given integer.\n#\n# $1 is an integer\ndivisor() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    divisor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"4\" ]]\n    [[ $(candidate \"12\") = \"6\" ]]\n    [[ $(candidate \"9\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_97_frequency_lists", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n#\n# $1 is a newline-separated, space-separated list\nfrequency_lists() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    frequency_lists \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 2\\n4 5 6 2\\n7 8 9 5\") = \"1,1\\n2,3\\n3,1\\n4,1\\n5,2\\n6,1\\n7,1\\n8,1\\n9,1\" ]]\n    [[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\") = \"1,1\\n2,1\\n3,1\\n4,1\\n5,1\\n6,1\\n7,1\\n8,1\\n9,1\\n10,1\\n11,1\\n12,1\" ]]\n    [[ $(candidate \"20 30 40 17\\n18 16 14 13\\n10 20 30 40\") = \"20,2\\n30,2\\n40,2\\n17,1\\n18,1\\n16,1\\n14,1\\n13,1\\n10,1\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_99_decimal_to_binary", "language": "sh", "prompt": "#!/bin/bash\n# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n#\n# $1 is an integer\ndecimal_to_binary() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"8\") = \"1000\" ]]\n    [[ $(candidate \"18\") = \"10010\" ]]\n    [[ $(candidate \"7\") = \"111\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
{"name": "mbpp_9_find_Rotations", "language": "sh", "prompt": "#!/bin/bash\n# Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n#\n# $1 is a string\nfind_Rotations() {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "}\n\ncandidate() {\n    find_Rotations \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"aaaa\") = \"1\" ]]\n    [[ $(candidate \"ab\") = \"2\" ]]\n    [[ $(candidate \"abc\") = \"3\" ]]\n}\n\nrun_test", "stop_tokens": ["\n}"]}
