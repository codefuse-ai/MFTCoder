{"name": "mbpp_100_next_smallest_palindrome", "language": "go_test.go", "prompt": "package next_smallest_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunc next_smallest_palindrome(num int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "tests": "func TestNext_Smallest_Palindrome(t *testing.T) {\n  candidate := next_smallest_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(99), expected: 101 },\n     { actual: candidate(1221), expected: 1331 },\n     { actual: candidate(120), expected: 121 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_101_kth_element", "language": "go_test.go", "prompt": "package kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the kth element in the given list using 1-based indexing.\nfunc kth_element(arr []int, k int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "tests": "func TestKth_Element(t *testing.T) {\n  candidate := kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 3, 5, 7, 19}, 2), expected: 3 },\n     { actual: candidate([]int{17, 24, 8, 23}, 3), expected: 8 },\n     { actual: candidate([]int{16, 21, 25, 36, 4}, 4), expected: 36 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_102_snake_to_camel", "language": "go_test.go", "prompt": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "func TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_103_eulerian_num", "language": "go_test.go", "prompt": "package eulerian_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n int, m int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "tests": "func TestEulerian_Num(t *testing.T) {\n  candidate := eulerian_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 1), expected: 4 },\n     { actual: candidate(4, 1), expected: 11 },\n     { actual: candidate(5, 3), expected: 26 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_104_sort_sublists", "language": "go_test.go", "prompt": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(input_list [][]string) [][]string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "tests": "func TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\" red \", \"green\"}, []string{\"blue \", \" black\"}, []string{\" orange\", \"brown\"}}), expected: [][]int{[]string{\" red \", \"green\"}, []string{\" black\", \"blue \"}, []string{\" orange\", \"brown\"}} },\n     { actual: candidate([][]int{[]string{\"zilver\", \"gold\"}, []string{\"magnesium\", \"aluminium\"}, []string{\"steel\", \"bronze\"}}), expected: [][]int{[]string{\"gold\", \"zilver\"}, []string{\"aluminium\", \"magnesium\"}, []string{\"bronze\", \"steel\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_105_count", "language": "go_test.go", "prompt": "package count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count true booleans in the given list.\nfunc count(lst []bool) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "tests": "func TestCount(t *testing.T) {\n  candidate := count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]UNKNOWN{true, false, true}), expected: 2 },\n     { actual: candidate([]UNKNOWN{false, false}), expected: 0 },\n     { actual: candidate([]UNKNOWN{true, true, true}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_106_add_lists", "language": "go_test.go", "prompt": "package add_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to append the given list to the given lists.\nfunc add_lists(test_list []int, test_tup []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "tests": "func TestAdd_Lists(t *testing.T) {\n  candidate := add_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []interface{}{9, 10, 5, 6, 7} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []interface{}{10, 11, 6, 7, 8} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []interface{}{11, 12, 7, 8, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_108_merge_sorted_list", "language": "go_test.go", "prompt": "package merge_sorted_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to merge three lists into a single sorted list.\nfunc merge_sorted_list(num1 []int, num2 []int, num3 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "tests": "func TestMerge_Sorted_List(t *testing.T) {\n  candidate := merge_sorted_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 24, 15, 4, 5, 29, 110}, []int{19, 20, 11, 56, 25, 233, 154}, []int{24, 26, 54, 48}), expected: []int{4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233} },\n     { actual: candidate([]int{1, 3, 5, 6, 8, 9}, []int{2, 5, 7, 11}, []int{1, 4, 7, 8, 12}), expected: []int{1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12} },\n     { actual: candidate([]int{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, []int{25, 35, 22, 85, 14, 65, 75, 25, 58}, []int{12, 74, 9, 50, 61, 41}), expected: []int{1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_109_odd_Equivalent", "language": "go_test.go", "prompt": "package odd_Equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfunc odd_Equivalent(s string, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "tests": "func TestOdd_Equivalent(t *testing.T) {\n  candidate := odd_Equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"011001\", 6), expected: 3 },\n     { actual: candidate(\"11011\", 5), expected: 4 },\n     { actual: candidate(\"1010\", 4), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_113_check_integer", "language": "go_test.go", "prompt": "package check_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if a string represents an integer or not.\nfunc check_integer(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Integer(t *testing.T) {\n  candidate := check_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"1\"), expected: true },\n     { actual: candidate(\"12345\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_115_empty_dit", "language": "go_test.go", "prompt": "package empty_dit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether all dictionaries in a list are empty or not.\nfunc empty_dit(list1 interface{}) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "reworded", "tests": "func TestEmpty_Dit(t *testing.T) {\n  candidate := empty_dit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]UNKNOWN{map[interface{}]interface{}{}, map[interface{}]interface{}{}, map[interface{}]interface{}{}}), expected: true },\n     { actual: candidate(interface{}{}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_116_tuple_to_int", "language": "go_test.go", "prompt": "package tuple_to_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given list of positive integers into a single integer.\nfunc tuple_to_int(nums []interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "tests": "func TestTuple_To_Int(t *testing.T) {\n  candidate := tuple_to_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, 3}), expected: 123 },\n     { actual: candidate([]interface{}{4, 5, 6}), expected: 456 },\n     { actual: candidate([]interface{}{5, 6, 7}), expected: 567 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_117_list_to_float", "language": "go_test.go", "prompt": "package list_to_float_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert all possible convertible elements in a list of lists to floats.\nfunc list_to_float(test_list [][]interface{}) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "tests": "func TestList_To_Float(t *testing.T) {\n  candidate := list_to_float\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"3\", \"4\"}, []interface{}{\"1\", \"26.45\"}, []interface{}{\"7.32\", \"8\"}, []interface{}{\"4\", \"8\"}}), expected: [][]int{[]interface{}{3.0, 4.0}, []interface{}{1.0, 26.45}, []interface{}{7.32, 8.0}, []interface{}{4.0, 8.0}} },\n     { actual: candidate([][]int{[]interface{}{\"4\", \"4\"}, []interface{}{\"2\", \"27\"}, []interface{}{\"4.12\", \"9\"}, []interface{}{\"7\", \"11\"}}), expected: [][]int{[]interface{}{4.0, 4.0}, []interface{}{2.0, 27.0}, []interface{}{4.12, 9.0}, []interface{}{7.0, 11.0}} },\n     { actual: candidate([][]int{[]interface{}{\"6\", \"78\"}, []interface{}{\"5\", \"26.45\"}, []interface{}{\"1.33\", \"4\"}, []interface{}{\"82\", \"13\"}}), expected: [][]int{[]interface{}{6.0, 78.0}, []interface{}{5.0, 26.45}, []interface{}{1.33, 4.0}, []interface{}{82.0, 13.0}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_118_string_to_list", "language": "go_test.go", "prompt": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "tests": "func TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_119_search", "language": "go_test.go", "prompt": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the element that appears only once in a sorted list.\nfunc search(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "tests": "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_11_remove_Occ", "language": "go_test.go", "prompt": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_120_max_product_tuple", "language": "go_test.go", "prompt": "package max_product_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\nfunc max_product_tuple(list1 [][]interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "tests": "func TestMax_Product_Tuple(t *testing.T) {\n  candidate := max_product_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 7}, []interface{}{2, 6}, []interface{}{1, 8}, []interface{}{4, 9}}), expected: 36 },\n     { actual: candidate([][]int{[]interface{}{10, 20}, []interface{}{15, 2}, []interface{}{5, 10}}), expected: 200 },\n     { actual: candidate([][]int{[]interface{}{11, 44}, []interface{}{10, 15}, []interface{}{20, 5}, []interface{}{12, 9}}), expected: 484 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "go_test.go", "prompt": "package amicable_numbers_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum all amicable numbers from 1 to a specified number.\nfunc amicable_numbers_sum(limit int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "tests": "func TestAmicable_Numbers_Sum(t *testing.T) {\n  candidate := amicable_numbers_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(999), expected: 504 },\n     { actual: candidate(9999), expected: 31626 },\n     { actual: candidate(99), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_125_find_length", "language": "go_test.go", "prompt": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "tests": "func TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_126_sum", "language": "go_test.go", "prompt": "package sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of common divisors of two given numbers.\nfunc sum(a int, b int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "tests": "func TestSum(t *testing.T) {\n  candidate := sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 15), expected: 6 },\n     { actual: candidate(100, 150), expected: 93 },\n     { actual: candidate(4, 6), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_127_multiply_int", "language": "go_test.go", "prompt": "package multiply_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to multiply two integers.\nfunc multiply_int(x int, y int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "tests": "func TestMultiply_Int(t *testing.T) {\n  candidate := multiply_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(5, 10), expected: 50 },\n     { actual: candidate(4, 8), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_128_long_words", "language": "go_test.go", "prompt": "package long_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find words that are longer than n characters from a given list of words.\nfunc long_words(n int, str string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "tests": "func TestLong_Words(t *testing.T) {\n  candidate := long_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, \"python is a programming language\"), expected: []string{\"python\", \"programming\", \"language\"} },\n     { actual: candidate(2, \"writing a program\"), expected: []string{\"writing\", \"program\"} },\n     { actual: candidate(5, \"sorting list\"), expected: []string{\"sorting\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_129_magic_square_test", "language": "go_test.go", "prompt": "package magic_square_test_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate whether the matrix is a magic square.\nfunc magic_square_test(my_matrix [][]int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "tests": "func TestMagic_Square_Test(t *testing.T) {\n  candidate := magic_square_test\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{7, 12, 1, 14}, []int{2, 13, 8, 11}, []int{16, 3, 10, 5}, []int{9, 6, 15, 4}}), expected: true },\n     { actual: candidate([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 8}}), expected: true },\n     { actual: candidate([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 7}}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_12_sort_matrix", "language": "go_test.go", "prompt": "package sort_matrix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M [][]int) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "tests": "func TestSort_Matrix(t *testing.T) {\n  candidate := sort_matrix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{2, 4, 5}, []int{1, 1, 1}}), expected: [][]int{[]int{1, 1, 1}, []int{1, 2, 3}, []int{2, 4, 5}} },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{-2, 4, -5}, []int{1, -1, 1}}), expected: [][]int{[]int{-2, 4, -5}, []int{1, -1, 1}, []int{1, 2, 3}} },\n     { actual: candidate([][]int{[]int{5, 8, 9}, []int{6, 4, 3}, []int{2, 1, 4}}), expected: [][]int{[]int{2, 1, 4}, []int{6, 4, 3}, []int{5, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_130_max_occurrences", "language": "go_test.go", "prompt": "package max_occurrences_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "tests": "func TestMax_Occurrences(t *testing.T) {\n  candidate := max_occurrences\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), expected: 2 },\n     { actual: candidate([]int{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), expected: 8 },\n     { actual: candidate([]int{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), expected: 20 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_131_reverse_vowels", "language": "go_test.go", "prompt": "package reverse_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to reverse only the vowels of a given string (where y is not a vowel).\nfunc reverse_vowels(str1 string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "tests": "func TestReverse_Vowels(t *testing.T) {\n  candidate := reverse_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"USA\"), expected: \"ASU\" },\n     { actual: candidate(\"ab\"), expected: \"ab\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_132_tup_string", "language": "go_test.go", "prompt": "package tup_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a list to a string.\nfunc tup_string(tup1 []string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "tests": "func TestTup_String(t *testing.T) {\n  candidate := tup_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"}), expected: \"exercises\" },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}), expected: \"python\" },\n     { actual: candidate([]string{\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"}), expected: \"program\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_133_sum_negativenum", "language": "go_test.go", "prompt": "package sum_negativenum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of the negative numbers of a given list of numbers.\nfunc sum_negativenum(nums []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "tests": "func TestSum_Negativenum(t *testing.T) {\n  candidate := sum_negativenum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: -32 },\n     { actual: candidate([]int{10, 15, -14, 13, -18, 12, -20}), expected: -52 },\n     { actual: candidate([]int{19, -65, 57, 39, 152, -639, 121, 44, 90, -190}), expected: -894 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_135_hexagonal_num", "language": "go_test.go", "prompt": "package hexagonal_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth hexagonal number.\nfunc hexagonal_num(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "tests": "func TestHexagonal_Num(t *testing.T) {\n  candidate := hexagonal_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 190 },\n     { actual: candidate(5), expected: 45 },\n     { actual: candidate(7), expected: 91 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "go_test.go", "prompt": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "tests": "func TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_141_pancake_sort", "language": "go_test.go", "prompt": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "tests": "func TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_142_count_samepair", "language": "go_test.go", "prompt": "package count_samepair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1 []int, list2 []int, list3 []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "tests": "func TestCount_Samepair(t *testing.T) {\n  candidate := count_samepair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 9}, []int{2, 1, 3, 1, 2, 6, 7, 9}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 8}, []int{2, 1, 3, 1, 2, 6, 7, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 2, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 8}, []int{2, 1, 3, 1, 2, 6, 7, 8}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_143_find_lists", "language": "go_test.go", "prompt": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input []interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "tests": "func TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_145_max_Abs_Diff", "language": "go_test.go", "prompt": "package max_Abs_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the maximum difference between any two elements in a given list.\nfunc max_Abs_Diff(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "tests": "func TestMax_Abs_Diff(t *testing.T) {\n  candidate := max_Abs_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 5, 3}), expected: 4 },\n     { actual: candidate([]int{9, 3, 2, 5, 1}), expected: 8 },\n     { actual: candidate([]int{3, 2, 1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_14_find_Volume", "language": "go_test.go", "prompt": "package find_Volume_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the volume of a triangular prism.\nfunc find_Volume(l int, b int, h int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "tests": "func TestFind_Volume(t *testing.T) {\n  candidate := find_Volume\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 8, 6), expected: 240 },\n     { actual: candidate(3, 2, 2), expected: 6 },\n     { actual: candidate(1, 2, 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_161_remove_elements", "language": "go_test.go", "prompt": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_162_sum_series", "language": "go_test.go", "prompt": "package sum_series_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfunc sum_series(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "tests": "func TestSum_Series(t *testing.T) {\n  candidate := sum_series\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected: 12 },\n     { actual: candidate(10), expected: 30 },\n     { actual: candidate(9), expected: 25 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_164_are_equivalent", "language": "go_test.go", "prompt": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "tests": "func TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_165_count_char_position", "language": "go_test.go", "prompt": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "tests": "func TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_166_find_even_pair", "language": "go_test.go", "prompt": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "tests": "func TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_167_next_power_of_2", "language": "go_test.go", "prompt": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "tests": "func TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_168_frequency", "language": "go_test.go", "prompt": "package frequency_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurrences of a number in a given list.\nfunc frequency(a []int, x int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "tests": "func TestFrequency(t *testing.T) {\n  candidate := frequency\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 4), expected: 0 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 3, 4}, 3), expected: 3 },\n     { actual: candidate([]int{0, 1, 2, 3, 1, 2}, 1), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "go_test.go", "prompt": "package text_lowercase_underscore_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunc text_lowercase_underscore(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "tests": "func TestText_Lowercase_Underscore(t *testing.T) {\n  candidate := text_lowercase_underscore\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aab_cbbbc\"), expected: true },\n     { actual: candidate(\"aab_Abbbc\"), expected: false },\n     { actual: candidate(\"Aaab_abbbc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_170_sum_range_list", "language": "go_test.go", "prompt": "package sum_range_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of numbers in a list within a range specified by two indices.\nfunc sum_range_list(list1 []int, m int, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "tests": "func TestSum_Range_List(t *testing.T) {\n  candidate := sum_range_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10), expected: 29 },\n     { actual: candidate([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7), expected: 16 },\n     { actual: candidate([]int{2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10), expected: 38 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_171_perimeter_pentagon", "language": "go_test.go", "prompt": "package perimeter_pentagon_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfunc perimeter_pentagon(a int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "tests": "func TestPerimeter_Pentagon(t *testing.T) {\n  candidate := perimeter_pentagon\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 25 },\n     { actual: candidate(10), expected: 50 },\n     { actual: candidate(15), expected: 75 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_172_count_occurance", "language": "go_test.go", "prompt": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "tests": "func TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_17_square_perimeter", "language": "go_test.go", "prompt": "package square_perimeter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns the perimeter of a square given its side length as input.\nfunc square_perimeter(a int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "tests": "func TestSquare_Perimeter(t *testing.T) {\n  candidate := square_perimeter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 40 },\n     { actual: candidate(5), expected: 20 },\n     { actual: candidate(4), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_18_remove_dirty_chars", "language": "go_test.go", "prompt": "package remove_dirty_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(myString string, second_string string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Dirty_Chars(t *testing.T) {\n  candidate := remove_dirty_chars\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"probasscurve\", \"pros\"), expected: \"bacuve\" },\n     { actual: candidate(\"digitalindia\", \"talent\"), expected: \"digiidi\" },\n     { actual: candidate(\"exoticmiles\", \"toxic\"), expected: \"emles\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_19_test_duplicate", "language": "go_test.go", "prompt": "package test_duplicate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether a given list of integers contains any duplicate element.\nfunc test_duplicate(arraynums []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "tests": "func TestTest_Duplicate(t *testing.T) {\n  candidate := test_duplicate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 4}), expected: true },\n     { actual: candidate([]int{1, 1, 2, 2, 3, 3, 4, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_20_is_woodall", "language": "go_test.go", "prompt": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "tests": "func TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_222_check_type", "language": "go_test.go", "prompt": "package check_type_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if all the elements in list have same data type or not.\nfunc check_type(test_tuple interface{}) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Type(t *testing.T) {\n  candidate := check_type\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{5, 6, 7, 3, 5, 6}), expected: true },\n     { actual: candidate([]interface{}{1, 2, \"4\"}), expected: false },\n     { actual: candidate([]interface{}{3, 2, 1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_223_is_majority", "language": "go_test.go", "prompt": "package is_majority_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr []int, n int, x int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "tests": "func TestIs_Majority(t *testing.T) {\n  candidate := is_majority\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 3, 3, 3, 10}, 7, 3), expected: true },\n     { actual: candidate([]int{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), expected: false },\n     { actual: candidate([]int{1, 1, 1, 2, 2}, 5, 1), expected: true },\n     { actual: candidate([]int{1, 1, 2, 2}, 5, 1), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_224_count_Set_Bits", "language": "go_test.go", "prompt": "package count_Set_Bits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of set bits (binary digits with value 1) in a given number.\nfunc count_Set_Bits(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "tests": "func TestCount_Set_Bits(t *testing.T) {\n  candidate := count_Set_Bits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(4), expected: 1 },\n     { actual: candidate(6), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_226_odd_values_string", "language": "go_test.go", "prompt": "package odd_values_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove the characters which have odd index values of a given string.\nfunc odd_values_string(str string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "tests": "func TestOdd_Values_String(t *testing.T) {\n  candidate := odd_values_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abcdef\"), expected: \"ace\" },\n     { actual: candidate(\"python\"), expected: \"pto\" },\n     { actual: candidate(\"data\"), expected: \"dt\" },\n     { actual: candidate(\"lambs\"), expected: \"lms\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_227_min_of_three", "language": "go_test.go", "prompt": "package min_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum of three numbers.\nfunc min_of_three(a int, b int, c int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "tests": "func TestMin_Of_Three(t *testing.T) {\n  candidate := min_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20, 0), expected: 0 },\n     { actual: candidate(19, 15, 18), expected: 15 },\n     { actual: candidate(-10, -20, -30), expected: -30 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "go_test.go", "prompt": "package all_Bits_Set_In_The_Given_Range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the bits are unset in the given range or not.\nfunc all_Bits_Set_In_The_Given_Range(n int, l int, r int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "tests": "func TestAll_Bits_Set_In_The_Given_Range(t *testing.T) {\n  candidate := all_Bits_Set_In_The_Given_Range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4, 1, 2), expected: true },\n     { actual: candidate(17, 2, 4), expected: true },\n     { actual: candidate(39, 4, 6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_229_re_arrange_array", "language": "go_test.go", "prompt": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "tests": "func TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_230_replace_blank", "language": "go_test.go", "prompt": "package replace_blank_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfunc replace_blank(str1 string, char string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "tests": "func TestReplace_Blank(t *testing.T) {\n  candidate := replace_blank\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello people\", \"@\"), expected: \"hello@people\" },\n     { actual: candidate(\"python program language\", \"$\"), expected: \"python$program$language\" },\n     { actual: candidate(\"blank space\", \"-\"), expected: \"blank-space\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_234_volume_cube", "language": "go_test.go", "prompt": "package volume_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the volume of a cube given its side length.\nfunc volume_cube(l int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "tests": "func TestVolume_Cube(t *testing.T) {\n  candidate := volume_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(2), expected: 8 },\n     { actual: candidate(5), expected: 125 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_238_number_of_substrings", "language": "go_test.go", "prompt": "package number_of_substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of non-empty substrings of a given string.\nfunc number_of_substrings(str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "tests": "func TestNumber_Of_Substrings(t *testing.T) {\n  candidate := number_of_substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: 6 },\n     { actual: candidate(\"abcd\"), expected: 10 },\n     { actual: candidate(\"abcde\"), expected: 15 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "go_test.go", "prompt": "package get_total_number_of_sequences_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfunc get_total_number_of_sequences(m int, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "tests": "func TestGet_Total_Number_Of_Sequences(t *testing.T) {\n  candidate := get_total_number_of_sequences\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 4), expected: 4 },\n     { actual: candidate(5, 2), expected: 6 },\n     { actual: candidate(16, 3), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_240_replace_list", "language": "go_test.go", "prompt": "package replace_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nfunc replace_list(list1 []interface{}, list2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "tests": "func TestReplace_List(t *testing.T) {\n  candidate := replace_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 2, 4, 6, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{5, 6, 7, 8}), expected: []int{1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]string{\"red\", \"blue\", \"green\"}, []string{\"yellow\"}), expected: []string{\"red\", \"blue\", \"yellow\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_242_count_charac", "language": "go_test.go", "prompt": "package count_charac_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the total number of characters in a string.\nfunc count_charac(str1 string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "tests": "func TestCount_Charac(t *testing.T) {\n  candidate := count_charac\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: 18 },\n     { actual: candidate(\"language\"), expected: 8 },\n     { actual: candidate(\"words\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_244_next_Perfect_Square", "language": "go_test.go", "prompt": "package next_Perfect_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the next perfect square greater than a given number.\nfunc next_Perfect_Square(N int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "tests": "func TestNext_Perfect_Square(t *testing.T) {\n  candidate := next_Perfect_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(35), expected: 36 },\n     { actual: candidate(6), expected: 9 },\n     { actual: candidate(9), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_245_max_sum", "language": "go_test.go", "prompt": "package max_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "tests": "func TestMax_Sum(t *testing.T) {\n  candidate := max_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 15, 51, 45, 33, 100, 12, 18, 9}), expected: 194 },\n     { actual: candidate([]int{80, 60, 30, 40, 20, 10}), expected: 210 },\n     { actual: candidate([]int{2, 3, 14, 16, 21, 23, 29, 30}), expected: 138 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_247_lps", "language": "go_test.go", "prompt": "package lps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the length of the longest palindromic subsequence in the given string.\nfunc lps(str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "tests": "func TestLps(t *testing.T) {\n  candidate := lps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TENS FOR TENS\"), expected: 5 },\n     { actual: candidate(\"CARDIO FOR CARDS\"), expected: 7 },\n     { actual: candidate(\"PART OF THE JOURNEY IS PART\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_249_intersection_array", "language": "go_test.go", "prompt": "package intersection_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the intersection of two lists.\nfunc intersection_array(array_nums1 []int, array_nums2 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "tests": "func TestIntersection_Array(t *testing.T) {\n  candidate := intersection_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{1, 2, 4, 8, 9}), expected: []int{1, 2, 8, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{3, 5, 7, 9}), expected: []int{3, 5, 7, 9} },\n     { actual: candidate([]int{1, 2, 3, 5, 7, 8, 9, 10}, []int{10, 20, 30, 40}), expected: []int{10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_250_count_X", "language": "go_test.go", "prompt": "package count_X_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in a list and an element and counts the occcurences of the element in the list.\nfunc count_X(tup []int, x int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "tests": "func TestCount_X(t *testing.T) {\n  candidate := count_X\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4), expected: 0 },\n     { actual: candidate([]int{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10), expected: 3 },\n     { actual: candidate([]int{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_251_insert_element", "language": "go_test.go", "prompt": "package insert_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nfunc insert_element(list []string, element string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "tests": "func TestInsert_Element(t *testing.T) {\n  candidate := insert_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Red\", \"Green\", \"Black\"}, \"c\"), expected: []string{\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"} },\n     { actual: candidate([]string{\"python\", \"java\"}, \"program\"), expected: []string{\"program\", \"python\", \"program\", \"java\"} },\n     { actual: candidate([]string{\"happy\", \"sad\"}, \"laugh\"), expected: []string{\"laugh\", \"happy\", \"laugh\", \"sad\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_252_convert", "language": "go_test.go", "prompt": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "tests": "func TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_255_combinations_colors", "language": "go_test.go", "prompt": "package combinations_colors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\nfunc combinations_colors(l []string, n int) [][]string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "tests": "func TestCombinations_Colors(t *testing.T) {\n  candidate := combinations_colors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Red\", \"Green\", \"Blue\"}, 1), expected: [][]int{[]string{\"Red\"}, []string{\"Green\"}, []string{\"Blue\"}} },\n     { actual: candidate([]string{\"Red\", \"Green\", \"Blue\"}, 2), expected: [][]int{[]string{\"Red\", \"Red\"}, []string{\"Red\", \"Green\"}, []string{\"Red\", \"Blue\"}, []string{\"Green\", \"Green\"}, []string{\"Green\", \"Blue\"}, []string{\"Blue\", \"Blue\"}} },\n     { actual: candidate([]string{\"Red\", \"Green\", \"Blue\"}, 3), expected: [][]int{[]string{\"Red\", \"Red\", \"Red\"}, []string{\"Red\", \"Red\", \"Green\"}, []string{\"Red\", \"Red\", \"Blue\"}, []string{\"Red\", \"Green\", \"Green\"}, []string{\"Red\", \"Green\", \"Blue\"}, []string{\"Red\", \"Blue\", \"Blue\"}, []string{\"Green\", \"Green\", \"Green\"}, []string{\"Green\", \"Green\", \"Blue\"}, []string{\"Green\", \"Blue\", \"Blue\"}, []string{\"Blue\", \"Blue\", \"Blue\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_256_count_Primes_nums", "language": "go_test.go", "prompt": "package count_Primes_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunc count_Primes_nums(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "tests": "func TestCount_Primes_Nums(t *testing.T) {\n  candidate := count_Primes_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 2 },\n     { actual: candidate(10), expected: 4 },\n     { actual: candidate(100), expected: 25 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_257_swap_numbers", "language": "go_test.go", "prompt": "package swap_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two numbers and returns a list with the second number and then the first number.\nfunc swap_numbers(a int, b int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "tests": "func TestSwap_Numbers(t *testing.T) {\n  candidate := swap_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: []int{20, 10} },\n     { actual: candidate(15, 17), expected: []int{17, 15} },\n     { actual: candidate(100, 200), expected: []int{200, 100} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_259_maximize_elements", "language": "go_test.go", "prompt": "package maximize_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to maximize the given two lists.\nfunc maximize_elements(test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "tests": "func TestMaximize_Elements(t *testing.T) {\n  candidate := maximize_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}}, [][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}}), expected: [][]int{[]int{6, 7}, []int{4, 9}, []int{2, 9}, []int{7, 10}} },\n     { actual: candidate([][]int{[]int{2, 4}, []int{5, 6}, []int{3, 10}, []int{2, 11}}, [][]int{[]int{7, 8}, []int{4, 10}, []int{2, 2}, []int{8, 4}}), expected: [][]int{[]int{7, 8}, []int{5, 10}, []int{3, 10}, []int{8, 11}} },\n     { actual: candidate([][]int{[]int{3, 5}, []int{6, 7}, []int{4, 11}, []int{3, 12}}, [][]int{[]int{8, 9}, []int{5, 11}, []int{3, 3}, []int{9, 5}}), expected: [][]int{[]int{8, 9}, []int{6, 11}, []int{4, 11}, []int{9, 12}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_260_newman_prime", "language": "go_test.go", "prompt": "package newman_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfunc newman_prime(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "tests": "func TestNewman_Prime(t *testing.T) {\n  candidate := newman_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 7 },\n     { actual: candidate(4), expected: 17 },\n     { actual: candidate(5), expected: 41 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_261_division_elements", "language": "go_test.go", "prompt": "package division_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\nfunc division_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "tests": "func TestDivision_Elements(t *testing.T) {\n  candidate := division_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{2, 2, 2, 3} },\n     { actual: candidate([]interface{}{12, 6, 8, 16}, []interface{}{6, 3, 4, 4}), expected: []interface{}{2, 2, 2, 4} },\n     { actual: candidate([]interface{}{20, 14, 36, 18}, []interface{}{5, 7, 6, 9}), expected: []interface{}{4, 2, 6, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_262_split_two_parts", "language": "go_test.go", "prompt": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 []interface{}, L int) interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "tests": "func TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_264_dog_age", "language": "go_test.go", "prompt": "package dog_age_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate a dog's age in dog's years.\nfunc dog_age(h_age int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "tests": "func TestDog_Age(t *testing.T) {\n  candidate := dog_age\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 61 },\n     { actual: candidate(15), expected: 73 },\n     { actual: candidate(24), expected: 109 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_265_list_split", "language": "go_test.go", "prompt": "package list_split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nfunc list_split(S []interface{}, step int) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "tests": "func TestList_Split(t *testing.T) {\n  candidate := list_split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"}, 3), expected: [][]int{[]string{\"a\", \"d\", \"g\", \"j\", \"m\"}, []string{\"b\", \"e\", \"h\", \"k\", \"n\"}, []string{\"c\", \"f\", \"i\", \"l\"}} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), expected: [][]int{[]int{1, 4, 7, 10, 13}, []int{2, 5, 8, 11, 14}, []int{3, 6, 9, 12}} },\n     { actual: candidate([]string{\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"}, 2), expected: [][]int{[]string{\"python\", \"C\", \"DBMS\"}, []string{\"java\", \"C++\", \"SQL\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_266_lateralsurface_cube", "language": "go_test.go", "prompt": "package lateralsurface_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the lateral surface area of a cube given its side length.\nfunc lateralsurface_cube(l int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "tests": "func TestLateralsurface_Cube(t *testing.T) {\n  candidate := lateralsurface_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 100 },\n     { actual: candidate(9), expected: 324 },\n     { actual: candidate(10), expected: 400 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_267_square_Sum", "language": "go_test.go", "prompt": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfunc square_Sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "tests": "func TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 10 },\n     { actual: candidate(3), expected: 35 },\n     { actual: candidate(4), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_268_find_star_num", "language": "go_test.go", "prompt": "package find_star_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n'th star number.\nfunc find_star_num(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "tests": "func TestFind_Star_Num(t *testing.T) {\n  candidate := find_star_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 37 },\n     { actual: candidate(4), expected: 73 },\n     { actual: candidate(5), expected: 121 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_269_ascii_value", "language": "go_test.go", "prompt": "package ascii_value_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ascii value of a character.\nfunc ascii_value(k string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "tests": "func TestAscii_Value(t *testing.T) {\n  candidate := ascii_value\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"A\"), expected: 65 },\n     { actual: candidate(\"R\"), expected: 82 },\n     { actual: candidate(\"S\"), expected: 83 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "go_test.go", "prompt": "package sum_even_and_even_index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of even numbers at even positions of a list.\nfunc sum_even_and_even_index(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "tests": "func TestSum_Even_And_Even_Index(t *testing.T) {\n  candidate := sum_even_and_even_index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 12, 1, 18, 8}), expected: 30 },\n     { actual: candidate([]int{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}), expected: 26 },\n     { actual: candidate([]int{5, 6, 12, 1}), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_271_even_Power_Sum", "language": "go_test.go", "prompt": "package even_Power_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfunc even_Power_Sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "tests": "func TestEven_Power_Sum(t *testing.T) {\n  candidate := even_Power_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 1056 },\n     { actual: candidate(3), expected: 8832 },\n     { actual: candidate(1), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_272_rear_extract", "language": "go_test.go", "prompt": "package rear_extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list of lists and returns a list containing the rear element of each list.\nfunc rear_extract(test_list [][]interface{}) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "tests": "func TestRear_Extract(t *testing.T) {\n  candidate := rear_extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, \"Rash\", 21}, []interface{}{2, \"Varsha\", 20}, []interface{}{3, \"Kil\", 19}}), expected: []int{21, 20, 19} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sai\", 36}, []interface{}{2, \"Ayesha\", 25}, []interface{}{3, \"Salman\", 45}}), expected: []int{36, 25, 45} },\n     { actual: candidate([][]int{[]interface{}{1, \"Sudeep\", 14}, []interface{}{2, \"Vandana\", 36}, []interface{}{3, \"Dawood\", 56}}), expected: []int{14, 36, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_273_substract_elements", "language": "go_test.go", "prompt": "package substract_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.\nfunc substract_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "tests": "func TestSubstract_Elements(t *testing.T) {\n  candidate := substract_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5}, []interface{}{2, 5, 18}), expected: []interface{}{8, -1, -13} },\n     { actual: candidate([]interface{}{11, 2, 3}, []interface{}{24, 45, 16}), expected: []interface{}{-13, -43, -13} },\n     { actual: candidate([]interface{}{7, 18, 9}, []interface{}{10, 11, 12}), expected: []interface{}{-3, 7, -3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "go_test.go", "prompt": "package even_binomial_Coeff_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfunc even_binomial_Coeff_Sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "tests": "func TestEven_Binomial_Coeff_Sum(t *testing.T) {\n  candidate := even_binomial_Coeff_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 8 },\n     { actual: candidate(6), expected: 32 },\n     { actual: candidate(2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_277_dict_filter", "language": "go_test.go", "prompt": "package dict_filter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\nfunc dict_filter(dict map[string]int, n int) map[string]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "tests": "func TestDict_Filter(t *testing.T) {\n  candidate := dict_filter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]int{\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 170), expected: map[string]int{\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Pierre Cox\": 190} },\n     { actual: candidate(map[string]int{\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 180), expected: map[string]int{\"Alden Cantrell\": 180, \"Pierre Cox\": 190} },\n     { actual: candidate(map[string]int{\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 190), expected: map[string]int{\"Pierre Cox\": 190} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_279_is_num_decagonal", "language": "go_test.go", "prompt": "package is_num_decagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "tests": "func TestIs_Num_Decagonal(t *testing.T) {\n  candidate := is_num_decagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 27 },\n     { actual: candidate(7), expected: 175 },\n     { actual: candidate(10), expected: 370 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_280_sequential_search", "language": "go_test.go", "prompt": "package sequential_search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\nfunc sequential_search(dlist []int, item int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "tests": "func TestSequential_Search(t *testing.T) {\n  candidate := sequential_search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31), expected: []interface{}{true, 3} },\n     { actual: candidate([]int{12, 32, 45, 62, 35, 47, 44, 61}, 61), expected: []interface{}{true, 7} },\n     { actual: candidate([]int{9, 10, 17, 19, 22, 39, 48, 56}, 48), expected: []interface{}{true, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_281_all_unique", "language": "go_test.go", "prompt": "package all_unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if the elements of a given list are unique or not.\nfunc all_unique(test_list []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "tests": "func TestAll_Unique(t *testing.T) {\n  candidate := all_unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_282_sub_list", "language": "go_test.go", "prompt": "package sub_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to subtract two lists element-wise.\nfunc sub_list(nums1 []int, nums2 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "tests": "func TestSub_List(t *testing.T) {\n  candidate := sub_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: []int{-3, -3, -3} },\n     { actual: candidate([]int{1, 2}, []int{3, 4}), expected: []int{-2, -2} },\n     { actual: candidate([]int{90, 120}, []int{50, 70}), expected: []int{40, 50} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_283_validate", "language": "go_test.go", "prompt": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "tests": "func TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_284_check_element", "language": "go_test.go", "prompt": "package check_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nfunc check_element(list []interface{}, element interface{}) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Element(t *testing.T) {\n  candidate := check_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"green\", \"orange\", \"black\", \"white\"}, \"blue\"), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4}, 7), expected: false },\n     { actual: candidate([]string{\"green\", \"green\", \"green\", \"green\"}, \"green\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_285_text_match_two_three", "language": "go_test.go", "prompt": "package text_match_two_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfunc text_match_two_three(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "tests": "func TestText_Match_Two_Three(t *testing.T) {\n  candidate := text_match_two_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "go_test.go", "prompt": "package max_sub_array_sum_repeated_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\nfunc max_sub_array_sum_repeated(a []int, n int, k int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "tests": "func TestMax_Sub_Array_Sum_Repeated(t *testing.T) {\n  candidate := max_sub_array_sum_repeated\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, -30, -1}, 4, 3), expected: 30 },\n     { actual: candidate([]int{-1, 10, 20}, 3, 2), expected: 59 },\n     { actual: candidate([]int{-1, -2, -3}, 3, 3), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_287_square_Sum", "language": "go_test.go", "prompt": "package square_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfunc square_Sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "tests": "func TestSquare_Sum(t *testing.T) {\n  candidate := square_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 20 },\n     { actual: candidate(3), expected: 56 },\n     { actual: candidate(4), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_290_max_length", "language": "go_test.go", "prompt": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "tests": "func TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_291_count_no_of_ways", "language": "go_test.go", "prompt": "package count_no_of_ways_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n int, k int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "tests": "func TestCount_No_Of_Ways(t *testing.T) {\n  candidate := count_no_of_ways\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 4), expected: 16 },\n     { actual: candidate(3, 2), expected: 6 },\n     { actual: candidate(4, 4), expected: 228 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_292_find", "language": "go_test.go", "prompt": "package find_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n int, m int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "tests": "func TestFind(t *testing.T) {\n  candidate := find\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 3), expected: 3 },\n     { actual: candidate(4, 2), expected: 2 },\n     { actual: candidate(20, 5), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_293_otherside_rightangle", "language": "go_test.go", "prompt": "package otherside_rightangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the third side of a right angled triangle.\nfunc otherside_rightangle(w int, h int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "tests": "func TestOtherside_Rightangle(t *testing.T) {\n  candidate := otherside_rightangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7, 8), expected: 10.63014581273465 },\n     { actual: candidate(3, 4), expected: 5 },\n     { actual: candidate(7, 15), expected: 16.55294535724685 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_295_sum_div", "language": "go_test.go", "prompt": "package sum_div_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return the sum of all divisors of a number.\nfunc sum_div(number int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "tests": "func TestSum_Div(t *testing.T) {\n  candidate := sum_div\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: 7 },\n     { actual: candidate(12), expected: 16 },\n     { actual: candidate(7), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_296_get_Inv_Count", "language": "go_test.go", "prompt": "package get_Inv_Count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count inversions in a list.\nfunc get_Inv_Count(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "tests": "func TestGet_Inv_Count(t *testing.T) {\n  candidate := get_Inv_Count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 20, 6, 4, 5}), expected: 5 },\n     { actual: candidate([]int{1, 2, 1}), expected: 1 },\n     { actual: candidate([]int{1, 2, 5, 6, 1}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_299_max_aggregate", "language": "go_test.go", "prompt": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "tests": "func TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_304_find_Element", "language": "go_test.go", "prompt": "package find_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find element at a given index after number of rotations.\nfunc find_Element(arr []int, ranges [][]int, rotations int, index int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "tests": "func TestFind_Element(t *testing.T) {\n  candidate := find_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, [][]int{[]int{0, 2}, []int{0, 3}}, 2, 1), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4}, [][]int{[]int{0, 1}, []int{0, 2}}, 1, 2), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, [][]int{[]int{0, 1}, []int{0, 2}}, 1, 1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_305_start_withp", "language": "go_test.go", "prompt": "package start_withp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return two words from a list of words starting with letter 'p'.\nfunc start_withp(words []string) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "tests": "func TestStart_Withp(t *testing.T) {\n  candidate := start_withp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python PHP\", \"Java JavaScript\", \"c c++\"}), expected: []interface{}{\"Python\", \"PHP\"} },\n     { actual: candidate([]string{\"Python Programming\", \"Java Programming\"}), expected: []interface{}{\"Python\", \"Programming\"} },\n     { actual: candidate([]string{\"Pqrst Pqr\", \"qrstuv\"}), expected: []interface{}{\"Pqrst\", \"Pqr\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "go_test.go", "prompt": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "tests": "func TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_308_large_product", "language": "go_test.go", "prompt": "package large_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfunc large_product(nums1 []int, nums2 []int, N int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "tests": "func TestLarge_Product(t *testing.T) {\n  candidate := large_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, []int{3, 6, 8, 9, 10, 6}, 3), expected: []int{60, 54, 50} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, []int{3, 6, 8, 9, 10, 6}, 4), expected: []int{60, 54, 50, 48} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, []int{3, 6, 8, 9, 10, 6}, 5), expected: []int{60, 54, 50, 48, 45} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_309_maximum", "language": "go_test.go", "prompt": "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the maximum of two numbers.\nfunc maximum(a int, b int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "tests": "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 10), expected: 10 },\n     { actual: candidate(-1, -2), expected: -1 },\n     { actual: candidate(9, 7), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_310_string_to_tuple", "language": "go_test.go", "prompt": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a list of characters.\nfunc string_to_tuple(str1 string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "tests": "func TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []string{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []string{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_388_highest_Power_of_2", "language": "go_test.go", "prompt": "package highest_Power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the highest power of 2 that is less than or equal to n.\nfunc highest_Power_of_2(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "tests": "func TestHighest_Power_Of_2(t *testing.T) {\n  candidate := highest_Power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 8 },\n     { actual: candidate(19), expected: 16 },\n     { actual: candidate(32), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_389_find_lucas", "language": "go_test.go", "prompt": "package find_lucas_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n'th lucas number.\nfunc find_lucas(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "tests": "func TestFind_Lucas(t *testing.T) {\n  candidate := find_lucas\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 76 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(3), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_390_add_string", "language": "go_test.go", "prompt": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ []interface{}, myString string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "tests": "func TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_392_get_max_sum", "language": "go_test.go", "prompt": "package get_max_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "tests": "func TestGet_Max_Sum(t *testing.T) {\n  candidate := get_max_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(60), expected: 106 },\n     { actual: candidate(10), expected: 12 },\n     { actual: candidate(2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_393_max_length_list", "language": "go_test.go", "prompt": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "tests": "func TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_394_check_distinct", "language": "go_test.go", "prompt": "package check_distinct_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if given list contains no duplicates.\nfunc check_distinct(test_tup []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Distinct(t *testing.T) {\n  candidate := check_distinct\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 5, 6, 1, 4}), expected: false },\n     { actual: candidate([]int{1, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 6}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_396_check_char", "language": "go_test.go", "prompt": "package check_char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string starts and ends with the same character or not.\nfunc check_char(myString string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Char(t *testing.T) {\n  candidate := check_char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abba\"), expected: \"Valid\" },\n     { actual: candidate(\"a\"), expected: \"Valid\" },\n     { actual: candidate(\"abcd\"), expected: \"Invalid\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_397_median_numbers", "language": "go_test.go", "prompt": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "tests": "func TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_398_sum_of_digits", "language": "go_test.go", "prompt": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums []interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "tests": "func TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_399_bitwise_xor", "language": "go_test.go", "prompt": "package bitwise_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform the mathematical bitwise xor operation across the given lists.\nfunc bitwise_xor(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "tests": "func TestBitwise_Xor(t *testing.T) {\n  candidate := bitwise_xor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{15, 6, 5, 10} },\n     { actual: candidate([]interface{}{11, 5, 7, 10}, []interface{}{6, 3, 4, 4}), expected: []interface{}{13, 6, 3, 14} },\n     { actual: candidate([]interface{}{12, 6, 8, 11}, []interface{}{7, 4, 5, 6}), expected: []interface{}{11, 2, 13, 13} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_3_is_not_prime", "language": "go_test.go", "prompt": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "tests": "func TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_400_extract_freq", "language": "go_test.go", "prompt": "package extract_freq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the number of unique lists in the given list.\nfunc extract_freq(test_list [][]interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Freq(t *testing.T) {\n  candidate := extract_freq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{3, 4}, []interface{}{1, 2}, []interface{}{4, 3}, []interface{}{5, 6}}), expected: 3 },\n     { actual: candidate([][]int{[]interface{}{4, 15}, []interface{}{2, 3}, []interface{}{5, 4}, []interface{}{6, 7}}), expected: 4 },\n     { actual: candidate([][]int{[]interface{}{5, 16}, []interface{}{2, 3}, []interface{}{6, 5}, []interface{}{6, 9}}), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_401_add_nested_tuples", "language": "go_test.go", "prompt": "package add_nested_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise addition of list elements in the given two nested lists.\nfunc add_nested_tuples(test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "tests": "func TestAdd_Nested_Tuples(t *testing.T) {\n  candidate := add_nested_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}}, [][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}}), expected: [][]int{[]int{7, 10}, []int{7, 14}, []int{3, 10}, []int{8, 13}} },\n     { actual: candidate([][]int{[]int{2, 4}, []int{5, 6}, []int{3, 10}, []int{2, 11}}, [][]int{[]int{7, 8}, []int{4, 10}, []int{2, 2}, []int{8, 4}}), expected: [][]int{[]int{9, 12}, []int{9, 16}, []int{5, 12}, []int{10, 15}} },\n     { actual: candidate([][]int{[]int{3, 5}, []int{6, 7}, []int{4, 11}, []int{3, 12}}, [][]int{[]int{8, 9}, []int{5, 11}, []int{3, 3}, []int{9, 5}}), expected: [][]int{[]int{11, 14}, []int{11, 18}, []int{7, 14}, []int{12, 17}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_404_minimum", "language": "go_test.go", "prompt": "package minimum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum of two numbers.\nfunc minimum(a int, b int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "tests": "func TestMinimum(t *testing.T) {\n  candidate := minimum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(-5, -4), expected: -5 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_406_find_Parity", "language": "go_test.go", "prompt": "package find_Parity_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether the parity of a given number is odd.\nfunc find_Parity(x int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "tests": "func TestFind_Parity(t *testing.T) {\n  candidate := find_Parity\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: false },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_407_rearrange_bigger", "language": "go_test.go", "prompt": "package rearrange_bigger_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n int) interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "tests": "func TestRearrange_Bigger(t *testing.T) {\n  candidate := rearrange_bigger\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12), expected: 21 },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(102), expected: 120 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_408_k_smallest_pairs", "language": "go_test.go", "prompt": "package k_smallest_pairs_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\nfunc k_smallest_pairs(nums1 []int, nums2 []int, k int) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "tests": "func TestK_Smallest_Pairs(t *testing.T) {\n  candidate := k_smallest_pairs\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 7}, []int{2, 4, 6}, 2), expected: [][]int{[]int{1, 2}, []int{1, 4}} },\n     { actual: candidate([]int{1, 3, 7}, []int{2, 4, 6}, 1), expected: [][]int{[]int{1, 2}} },\n     { actual: candidate([]int{1, 3, 7}, []int{2, 4, 6}, 7), expected: [][]int{[]int{1, 2}, []int{1, 4}, []int{3, 2}, []int{1, 6}, []int{3, 4}, []int{3, 6}, []int{7, 2}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_409_min_product_tuple", "language": "go_test.go", "prompt": "package min_product_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the minimum product from the pairs of lists within a given list.\nfunc min_product_tuple(list1 [][]interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "tests": "func TestMin_Product_Tuple(t *testing.T) {\n  candidate := min_product_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 7}, []interface{}{2, 6}, []interface{}{1, 8}, []interface{}{4, 9}}), expected: 8 },\n     { actual: candidate([][]int{[]interface{}{10, 20}, []interface{}{15, 2}, []interface{}{5, 10}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{11, 44}, []interface{}{10, 15}, []interface{}{20, 5}, []interface{}{12, 9}}), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_411_snake_to_camel", "language": "go_test.go", "prompt": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "func TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"android_tv\"), expected: \"AndroidTv\" },\n     { actual: candidate(\"google_pixel\"), expected: \"GooglePixel\" },\n     { actual: candidate(\"apple_watch\"), expected: \"AppleWatch\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_412_remove_odd", "language": "go_test.go", "prompt": "package remove_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove odd numbers from a given list.\nfunc remove_odd(l []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Odd(t *testing.T) {\n  candidate := remove_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2} },\n     { actual: candidate([]int{2, 4, 6}), expected: []int{2, 4, 6} },\n     { actual: candidate([]int{10, 20, 3}), expected: []int{10, 20} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_413_extract_nth_element", "language": "go_test.go", "prompt": "package extract_nth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the nth element from a given list of lists.\nfunc extract_nth_element(list1 [][]interface{}, n int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Nth_Element(t *testing.T) {\n  candidate := extract_nth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}}, 0), expected: []string{\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"} },\n     { actual: candidate([][]int{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}}, 2), expected: []int{99, 96, 94, 98} },\n     { actual: candidate([][]int{[]interface{}{\"Greyson Fulton\", 98, 99}, []interface{}{\"Brady Kent\", 97, 96}, []interface{}{\"Wyatt Knott\", 91, 94}, []interface{}{\"Beau Turnbull\", 94, 98}}, 1), expected: []int{98, 97, 91, 94} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_414_overlapping", "language": "go_test.go", "prompt": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "tests": "func TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_415_max_Product", "language": "go_test.go", "prompt": "package max_Product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find a pair with highest product from a given list of integers.\nfunc max_Product(arr []int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_Product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 7, 0, 8, 4}), expected: []interface{}{7, 8} },\n     { actual: candidate([]int{0, -1, -2, -4, 5, 0, -6}), expected: []interface{}{-4, -6} },\n     { actual: candidate([]int{1, 2, 3}), expected: []interface{}{2, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_417_group_tuples", "language": "go_test.go", "prompt": "package group_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find common first element in given list of lists.\nfunc group_tuples(Input [][]string) [][]string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "tests": "func TestGroup_Tuples(t *testing.T) {\n  candidate := group_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"x\", \"y\"}, []string{\"x\", \"z\"}, []string{\"w\", \"t\"}}), expected: [][]int{[]string{\"x\", \"y\", \"z\"}, []string{\"w\", \"t\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"a\", \"c\"}, []string{\"d\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\", \"c\"}, []string{\"d\", \"e\"}} },\n     { actual: candidate([][]int{[]string{\"f\", \"g\"}, []string{\"f\", \"g\"}, []string{\"h\", \"i\"}}), expected: [][]int{[]string{\"f\", \"g\", \"g\"}, []string{\"h\", \"i\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_418_Find_Max", "language": "go_test.go", "prompt": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the element of a list having maximum length.\nfunc Find_Max(lst [][]interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "tests": "func TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_420_cube_Sum", "language": "go_test.go", "prompt": "package cube_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the cube sum of first n even natural numbers.\nfunc cube_Sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "tests": "func TestCube_Sum(t *testing.T) {\n  candidate := cube_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 72 },\n     { actual: candidate(3), expected: 288 },\n     { actual: candidate(4), expected: 800 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_421_concatenate_tuple", "language": "go_test.go", "prompt": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "tests": "func TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "go_test.go", "prompt": "package find_Average_Of_Cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the average of cubes of first n natural numbers.\nfunc find_Average_Of_Cube(n int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "tests": "func TestFind_Average_Of_Cube(t *testing.T) {\n  candidate := find_Average_Of_Cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4.5 },\n     { actual: candidate(3), expected: 12 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_424_extract_rear", "language": "go_test.go", "prompt": "package extract_rear_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract only the rear index element of each string in the given list.\nfunc extract_rear(test_tuple []interface{}) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Rear(t *testing.T) {\n  candidate := extract_rear\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"Mers\", \"for\", \"Vers\"}), expected: []string{\"s\", \"r\", \"s\"} },\n     { actual: candidate([]interface{}{\"Avenge\", \"for\", \"People\"}), expected: []string{\"e\", \"r\", \"e\"} },\n     { actual: candidate([]interface{}{\"Gotta\", \"get\", \"go\"}), expected: []string{\"a\", \"t\", \"o\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_425_count_element_in_list", "language": "go_test.go", "prompt": "package count_element_in_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of sublists containing a particular element.\nfunc count_element_in_list(list1 [][]interface{}, x interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "tests": "func TestCount_Element_In_List(t *testing.T) {\n  candidate := count_element_in_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 11}, []int{1, 15, 7}}, 1), expected: 3 },\n     { actual: candidate([][]int{[]string{\"A\", \"B\"}, []string{\"A\", \"C\"}, []string{\"A\", \"D\", \"E\"}, []string{\"B\", \"C\", \"D\"}}, \"A\"), expected: 3 },\n     { actual: candidate([][]int{[]string{\"A\", \"B\"}, []string{\"A\", \"C\"}, []string{\"A\", \"D\", \"E\"}, []string{\"B\", \"C\", \"D\"}}, \"E\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_426_filter_oddnumbers", "language": "go_test.go", "prompt": "package filter_oddnumbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to filter odd numbers.\nfunc filter_oddnumbers(nums []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "tests": "func TestFilter_Oddnumbers(t *testing.T) {\n  candidate := filter_oddnumbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: []int{1, 3, 5, 7, 9} },\n     { actual: candidate([]int{10, 20, 45, 67, 84, 93}), expected: []int{45, 67, 93} },\n     { actual: candidate([]int{5, 7, 9, 8, 6, 4, 3}), expected: []int{5, 7, 9, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_427_change_date_format", "language": "go_test.go", "prompt": "package change_date_format_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfunc change_date_format(dt string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "tests": "func TestChange_Date_Format(t *testing.T) {\n  candidate := change_date_format\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"2026-01-02\"), expected: \"02-01-2026\" },\n     { actual: candidate(\"2020-11-13\"), expected: \"13-11-2020\" },\n     { actual: candidate(\"2021-04-26\"), expected: \"26-04-2021\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_428_shell_sort", "language": "go_test.go", "prompt": "package shell_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list by using shell sort.\nfunc shell_sort(my_list []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "tests": "func TestShell_Sort(t *testing.T) {\n  candidate := shell_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 23, 4, 5, 3, 2, 12, 81, 56, 95}), expected: []int{2, 3, 4, 5, 12, 12, 23, 56, 81, 95} },\n     { actual: candidate([]int{24, 22, 39, 34, 87, 73, 68}), expected: []int{22, 24, 34, 39, 68, 73, 87} },\n     { actual: candidate([]int{32, 30, 16, 96, 82, 83, 74}), expected: []int{16, 30, 32, 74, 82, 83, 96} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_429_and_tuples", "language": "go_test.go", "prompt": "package and_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract the elementwise and lists from the given two lists.\nfunc and_tuples(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "tests": "func TestAnd_Tuples(t *testing.T) {\n  candidate := and_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 6, 9}, []interface{}{5, 2, 3, 3}), expected: []interface{}{0, 0, 2, 1} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{5, 6, 7, 8}), expected: []interface{}{1, 2, 3, 0} },\n     { actual: candidate([]interface{}{8, 9, 11, 12}, []interface{}{7, 13, 14, 17}), expected: []interface{}{0, 9, 10, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_430_parabola_directrix", "language": "go_test.go", "prompt": "package parabola_directrix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the directrix of a parabola.\nfunc parabola_directrix(a int, b int, c int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "tests": "func TestParabola_Directrix(t *testing.T) {\n  candidate := parabola_directrix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 3, 2), expected: -198 },\n     { actual: candidate(9, 8, 4), expected: -2336 },\n     { actual: candidate(2, 4, 6), expected: -130 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_432_median_trapezium", "language": "go_test.go", "prompt": "package median_trapezium_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median length of a trapezium.\nfunc median_trapezium(base1 int, base2 int, height int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "tests": "func TestMedian_Trapezium(t *testing.T) {\n  candidate := median_trapezium\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15, 25, 35), expected: 20 },\n     { actual: candidate(10, 20, 30), expected: 15 },\n     { actual: candidate(6, 9, 4), expected: 7.5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_433_check_greater", "language": "go_test.go", "prompt": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given list.\nfunc check_greater(arr []int, number int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_434_text_match_one", "language": "go_test.go", "prompt": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "tests": "func TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_435_last_Digit", "language": "go_test.go", "prompt": "package last_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last digit of a given number.\nfunc last_Digit(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "tests": "func TestLast_Digit(t *testing.T) {\n  candidate := last_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 3 },\n     { actual: candidate(25), expected: 5 },\n     { actual: candidate(30), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_436_neg_nos", "language": "go_test.go", "prompt": "package neg_nos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to return the negative numbers in a list.\nfunc neg_nos(list1 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "tests": "func TestNeg_Nos(t *testing.T) {\n  candidate := neg_nos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 4, 5, -6}), expected: []int{-1, -6} },\n     { actual: candidate([]int{-1, -2, 3, 4}), expected: []int{-1, -2} },\n     { actual: candidate([]int{-7, -6, 8, 9}), expected: []int{-7, -6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_437_remove_odd", "language": "go_test.go", "prompt": "package remove_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove odd characters in a string.\nfunc remove_odd(str1 string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Odd(t *testing.T) {\n  candidate := remove_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: \"yhn\" },\n     { actual: candidate(\"program\"), expected: \"rga\" },\n     { actual: candidate(\"language\"), expected: \"agae\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_438_count_bidirectional", "language": "go_test.go", "prompt": "package count_bidirectional_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count bidirectional list pairs.\nfunc count_bidirectional(test_list [][]interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "tests": "func TestCount_Bidirectional(t *testing.T) {\n  candidate := count_bidirectional\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 6}, []interface{}{1, 2}, []interface{}{6, 5}, []interface{}{9, 1}, []interface{}{6, 5}, []interface{}{2, 1}}), expected: 3 },\n     { actual: candidate([][]int{[]interface{}{5, 6}, []interface{}{1, 3}, []interface{}{6, 5}, []interface{}{9, 1}, []interface{}{6, 5}, []interface{}{2, 1}}), expected: 2 },\n     { actual: candidate([][]int{[]interface{}{5, 6}, []interface{}{1, 2}, []interface{}{6, 5}, []interface{}{9, 2}, []interface{}{6, 5}, []interface{}{2, 1}}), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_439_multiple_to_single", "language": "go_test.go", "prompt": "package multiple_to_single_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to join a list of multiple integers into a single integer.\nfunc multiple_to_single(L []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "tests": "func TestMultiple_To_Single(t *testing.T) {\n  candidate := multiple_to_single\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{11, 33, 50}), expected: 113350 },\n     { actual: candidate([]int{-1, 2, 3, 4, 5, 6}), expected: -123456 },\n     { actual: candidate([]int{10, 15, 20, 25}), expected: 10152025 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_440_find_adverb_position", "language": "go_test.go", "prompt": "package find_adverb_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the first adverb and their positions in a given sentence.\nfunc find_adverb_position(text string) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "tests": "func TestFind_Adverb_Position(t *testing.T) {\n  candidate := find_adverb_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"clearly!! we can see the sky\"), expected: []interface{}{0, 7, \"clearly\"} },\n     { actual: candidate(\"seriously!! there are many roses\"), expected: []interface{}{0, 9, \"seriously\"} },\n     { actual: candidate(\"unfortunately!! sita is going to home\"), expected: []interface{}{0, 13, \"unfortunately\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_441_surfacearea_cube", "language": "go_test.go", "prompt": "package surfacearea_cube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cube of a given size.\nfunc surfacearea_cube(l int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "tests": "func TestSurfacearea_Cube(t *testing.T) {\n  candidate := surfacearea_cube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 150 },\n     { actual: candidate(3), expected: 54 },\n     { actual: candidate(10), expected: 600 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_442_positive_count", "language": "go_test.go", "prompt": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in a list of integers.\nfunc positive_count(nums []int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "tests": "func TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_443_largest_neg", "language": "go_test.go", "prompt": "package largest_neg_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest negative number from the given list.\nfunc largest_neg(list1 []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "tests": "func TestLargest_Neg(t *testing.T) {\n  candidate := largest_neg\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, -4, -6}), expected: -6 },\n     { actual: candidate([]int{1, 2, 3, -8, -9}), expected: -9 },\n     { actual: candidate([]int{1, 2, 3, 4, -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_444_trim_tuple", "language": "go_test.go", "prompt": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given lists.\nfunc trim_tuple(test_list [][]int, K int) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "tests": "func TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{5, 3, 2, 1, 4}, []int{3, 4, 9, 2, 1}, []int{9, 1, 2, 3, 5}, []int{4, 8, 2, 1, 7}}, 2), expected: [][]int{[]int{2}, []int{9}, []int{2}, []int{2}} },\n     { actual: candidate([][]int{[]int{5, 3, 2, 1, 4}, []int{3, 4, 9, 2, 1}, []int{9, 1, 2, 3, 5}, []int{4, 8, 2, 1, 7}}, 1), expected: [][]int{[]int{3, 2, 1}, []int{4, 9, 2}, []int{1, 2, 3}, []int{8, 2, 1}} },\n     { actual: candidate([][]int{[]int{7, 8, 4, 9}, []int{11, 8, 12, 4}, []int{4, 1, 7, 8}, []int{3, 6, 9, 7}}, 1), expected: [][]int{[]int{8, 4}, []int{8, 12}, []int{1, 7}, []int{6, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_445_index_multiplication", "language": "go_test.go", "prompt": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 [][]int, test_tup2 [][]int) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "tests": "func TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{4, 5}, []int{2, 9}, []int{1, 10}}, [][]int{[]int{6, 7}, []int{3, 9}, []int{1, 1}, []int{7, 3}}), expected: [][]int{[]int{6, 21}, []int{12, 45}, []int{2, 9}, []int{7, 30}} },\n     { actual: candidate([][]int{[]int{2, 4}, []int{5, 6}, []int{3, 10}, []int{2, 11}}, [][]int{[]int{7, 8}, []int{4, 10}, []int{2, 2}, []int{8, 4}}), expected: [][]int{[]int{14, 32}, []int{20, 60}, []int{6, 20}, []int{16, 44}} },\n     { actual: candidate([][]int{[]int{3, 5}, []int{6, 7}, []int{4, 11}, []int{3, 12}}, [][]int{[]int{8, 9}, []int{5, 11}, []int{3, 3}, []int{9, 5}}), expected: [][]int{[]int{24, 45}, []int{30, 77}, []int{12, 33}, []int{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_446_count_Occurrence", "language": "go_test.go", "prompt": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the occurence of all elements of list in a list.\nfunc count_Occurrence(tup interface{}, lst []interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "tests": "func TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_447_cube_nums", "language": "go_test.go", "prompt": "package cube_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find cubes of individual elements in a list.\nfunc cube_nums(nums []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "tests": "func TestCube_Nums(t *testing.T) {\n  candidate := cube_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: []int{1, 8, 27, 64, 125, 216, 343, 512, 729, 1000} },\n     { actual: candidate([]int{10, 20, 30}), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}), expected: []int{1728, 3375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_448_cal_sum", "language": "go_test.go", "prompt": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "tests": "func TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_450_extract_string", "language": "go_test.go", "prompt": "package extract_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract specified size of strings from a given list of string values.\nfunc extract_string(str []string, l int) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "tests": "func TestExtract_String(t *testing.T) {\n  candidate := extract_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 8), expected: []string{\"practice\", \"solution\"} },\n     { actual: candidate([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 6), expected: []string{\"Python\"} },\n     { actual: candidate([]string{\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 9), expected: []string{\"exercises\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_451_remove_whitespaces", "language": "go_test.go", "prompt": "package remove_whitespaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all whitespaces from the given string.\nfunc remove_whitespaces(text1 string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Whitespaces(t *testing.T) {\n  candidate := remove_whitespaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\" Google    Flutter \"), expected: \"GoogleFlutter\" },\n     { actual: candidate(\" Google    Dart \"), expected: \"GoogleDart\" },\n     { actual: candidate(\" iOS    Swift \"), expected: \"iOSSwift\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_452_loss_amount", "language": "go_test.go", "prompt": "package loss_amount_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfunc loss_amount(actual_cost int, sale_amount int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "tests": "func TestLoss_Amount(t *testing.T) {\n  candidate := loss_amount\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: 0 },\n     { actual: candidate(100, 200), expected: 100 },\n     { actual: candidate(2000, 5000), expected: 3000 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_453_sumofFactors", "language": "go_test.go", "prompt": "package sumofFactors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of even factors of a number.\nfunc sumofFactors(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "tests": "func TestSumoffactors(t *testing.T) {\n  candidate := sumofFactors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(18), expected: 26 },\n     { actual: candidate(30), expected: 48 },\n     { actual: candidate(6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_454_text_match_wordz", "language": "go_test.go", "prompt": "package text_match_wordz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a word containing 'z'.\nfunc text_match_wordz(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "tests": "func TestText_Match_Wordz(t *testing.T) {\n  candidate := text_match_wordz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonz.\"), expected: true },\n     { actual: candidate(\"xyz.\"), expected: true },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_455_check_monthnumb_number", "language": "go_test.go", "prompt": "package check_monthnumb_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given month number contains 31 days or not.\nfunc check_monthnumb_number(monthnum2 int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Monthnumb_Number(t *testing.T) {\n  candidate := check_monthnumb_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(6), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_456_reverse_string_list", "language": "go_test.go", "prompt": "package reverse_string_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to reverse each string in a given list of string values.\nfunc reverse_string_list(stringlist []string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "tests": "func TestReverse_String_List(t *testing.T) {\n  candidate := reverse_string_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"}), expected: []string{\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"} },\n     { actual: candidate([]string{\"john\", \"amal\", \"joel\", \"george\"}), expected: []string{\"nhoj\", \"lama\", \"leoj\", \"egroeg\"} },\n     { actual: candidate([]string{\"jack\", \"john\", \"mary\"}), expected: []string{\"kcaj\", \"nhoj\", \"yram\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_457_Find_Min", "language": "go_test.go", "prompt": "package Find_Min_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sublist having minimum length.\nfunc Find_Min(lst [][]interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "tests": "func TestFind_Min(t *testing.T) {\n  candidate := Find_Min\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 1, 1}, []int{1, 2, 7, 8}}), expected: []int{1, 1} },\n     { actual: candidate([][]int{[]string{\"x\"}, []string{\"x\", \"y\"}, []string{\"x\", \"y\", \"z\"}}), expected: []string{\"x\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_458_rectangle_area", "language": "go_test.go", "prompt": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "tests": "func TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_459_remove_uppercase", "language": "go_test.go", "prompt": "package remove_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1 string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Uppercase(t *testing.T) {\n  candidate := remove_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"cAstyoUrFavoRitETVshoWs\"), expected: \"cstyoravoitshos\" },\n     { actual: candidate(\"wAtchTheinTernEtrAdIo\"), expected: \"wtchheinerntrdo\" },\n     { actual: candidate(\"VoicESeaRchAndreComMendaTionS\"), expected: \"oiceachndreomendaion\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_460_Extract", "language": "go_test.go", "prompt": "package Extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to get the first element of each sublist.\nfunc Extract(lst [][]int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "tests": "func TestExtract(t *testing.T) {\n  candidate := Extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4, 5}, []int{6, 7, 8, 9}}), expected: []int{1, 3, 6} },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5}}), expected: []int{1, 4} },\n     { actual: candidate([][]int{[]int{9, 8, 1}, []int{1, 2}}), expected: []int{9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_461_upper_ctr", "language": "go_test.go", "prompt": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "tests": "func TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_463_max_subarray_product", "language": "go_test.go", "prompt": "package max_subarray_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product sublist of the given list.\nfunc max_subarray_product(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "tests": "func TestMax_Subarray_Product(t *testing.T) {\n  candidate := max_subarray_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2, -3, 0, 7, -8, -2}), expected: 112 },\n     { actual: candidate([]int{6, -3, -10, 0, 2}), expected: 180 },\n     { actual: candidate([]int{-2, -40, 0, -2, -3}), expected: 80 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_464_check_value", "language": "go_test.go", "prompt": "package check_value_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if all values are same in a map.\nfunc check_value(dict map[string]int, n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Value(t *testing.T) {\n  candidate := check_value\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]int{\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 10), expected: false },\n     { actual: candidate(map[string]int{\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 12), expected: true },\n     { actual: candidate(map[string]int{\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 5), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_468_max_product", "language": "go_test.go", "prompt": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\nfunc max_product(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_470_add_pairwise", "language": "go_test.go", "prompt": "package add_pairwise_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the pairwise addition of the neighboring elements of the given list.\nfunc add_pairwise(test_tup []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "tests": "func TestAdd_Pairwise(t *testing.T) {\n  candidate := add_pairwise\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 8, 10}), expected: []interface{}{6, 12, 15, 18} },\n     { actual: candidate([]interface{}{2, 6, 8, 9, 11}), expected: []interface{}{8, 14, 17, 20} },\n     { actual: candidate([]interface{}{3, 7, 9, 10, 12}), expected: []interface{}{10, 16, 19, 22} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_471_find_remainder", "language": "go_test.go", "prompt": "package find_remainder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the product of the list multiplication modulo n.\nfunc find_remainder(arr []int, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "tests": "func TestFind_Remainder(t *testing.T) {\n  candidate := find_remainder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{100, 10, 5, 25, 35, 14}, 11), expected: 9 },\n     { actual: candidate([]int{1, 1, 1}, 1), expected: 0 },\n     { actual: candidate([]int{1, 2, 1}, 2), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_472_check_Consecutive", "language": "go_test.go", "prompt": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_474_replace_char", "language": "go_test.go", "prompt": "package replace_char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace characters in a string.\nfunc replace_char(str1 string, ch string, newch string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "tests": "func TestReplace_Char(t *testing.T) {\n  candidate := replace_char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"polygon\", \"y\", \"l\"), expected: \"pollgon\" },\n     { actual: candidate(\"character\", \"c\", \"a\"), expected: \"aharaater\" },\n     { actual: candidate(\"python\", \"l\", \"a\"), expected: \"python\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_475_sort_counter", "language": "go_test.go", "prompt": "package sort_counter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a map by value.\nfunc sort_counter(dict1 map[string]int) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "tests": "func TestSort_Counter(t *testing.T) {\n  candidate := sort_counter\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]int{\"Math\": 81, \"Physics\": 83, \"Chemistry\": 87}), expected: [][]int{[]interface{}{\"Chemistry\", 87}, []interface{}{\"Physics\", 83}, []interface{}{\"Math\", 81}} },\n     { actual: candidate(map[string]int{\"Math\": 400, \"Physics\": 300, \"Chemistry\": 250}), expected: [][]int{[]interface{}{\"Math\", 400}, []interface{}{\"Physics\", 300}, []interface{}{\"Chemistry\", 250}} },\n     { actual: candidate(map[string]int{\"Math\": 900, \"Physics\": 1000, \"Chemistry\": 1250}), expected: [][]int{[]interface{}{\"Chemistry\", 1250}, []interface{}{\"Physics\", 1000}, []interface{}{\"Math\", 900}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_476_big_sum", "language": "go_test.go", "prompt": "package big_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the largest and smallest value in a given list.\nfunc big_sum(nums []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "tests": "func TestBig_Sum(t *testing.T) {\n  candidate := big_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{-1, 2, 3, 4}), expected: 3 },\n     { actual: candidate([]int{2, 3, 6}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_477_is_lower", "language": "go_test.go", "prompt": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "tests": "func TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_478_remove_lowercase", "language": "go_test.go", "prompt": "package remove_lowercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove lowercase substrings from a given string.\nfunc remove_lowercase(str1 string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Lowercase(t *testing.T) {\n  candidate := remove_lowercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYTHon\"), expected: \"PYTH\" },\n     { actual: candidate(\"FInD\"), expected: \"FID\" },\n     { actual: candidate(\"STRinG\"), expected: \"STRG\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_479_first_Digit", "language": "go_test.go", "prompt": "package first_Digit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the first digit of a given number.\nfunc first_Digit(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "tests": "func TestFirst_Digit(t *testing.T) {\n  candidate := first_Digit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123), expected: 1 },\n     { actual: candidate(456), expected: 4 },\n     { actual: candidate(12), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_4_heap_queue_largest", "language": "go_test.go", "prompt": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "tests": "func TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_554_Split", "language": "go_test.go", "prompt": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list of integers and only returns the odd ones.\nfunc Split(list []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "tests": "func TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: []int{1, 3, 5} },\n     { actual: candidate([]int{10, 11, 12, 13}), expected: []int{11, 13} },\n     { actual: candidate([]int{7, 8, 9, 1}), expected: []int{7, 9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_555_difference", "language": "go_test.go", "prompt": "package difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfunc difference(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "tests": "func TestDifference(t *testing.T) {\n  candidate := difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 30 },\n     { actual: candidate(5), expected: 210 },\n     { actual: candidate(2), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_556_find_Odd_Pair", "language": "go_test.go", "prompt": "package find_Odd_Pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of pairs whose xor value is odd.\nfunc find_Odd_Pair(A []int, N int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "tests": "func TestFind_Odd_Pair(t *testing.T) {\n  candidate := find_Odd_Pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}, 5), expected: 6 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}, 7), expected: 12 },\n     { actual: candidate([]int{1, 2, 3}, 3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_557_toggle_string", "language": "go_test.go", "prompt": "package toggle_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to toggle the case of all characters in a string.\nfunc toggle_string(myString string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "tests": "func TestToggle_String(t *testing.T) {\n  candidate := toggle_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"pYTHON\" },\n     { actual: candidate(\"Pangram\"), expected: \"pANGRAM\" },\n     { actual: candidate(\"LIttLE\"), expected: \"liTTle\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_558_digit_distance_nums", "language": "go_test.go", "prompt": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "tests": "func TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_559_max_sub_array_sum", "language": "go_test.go", "prompt": "package max_sub_array_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the sum of the largest contiguous sublist in the given list.\nfunc max_sub_array_sum(a []int, size int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "tests": "func TestMax_Sub_Array_Sum(t *testing.T) {\n  candidate := max_sub_array_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-2, -3, 4, -1, -2, 1, 5, -3}, 8), expected: 7 },\n     { actual: candidate([]int{-3, -4, 5, -2, -3, 2, 6, -4}, 8), expected: 8 },\n     { actual: candidate([]int{-4, -5, 6, -3, -4, 3, 7, -5}, 8), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_560_union_elements", "language": "go_test.go", "prompt": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfunc union_elements(test_tup1 []int, test_tup2 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "tests": "func TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 4, 5, 6}, []int{5, 7, 4, 10}), expected: []int{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{3, 4, 5, 6}), expected: []int{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]int{11, 12, 13, 14}, []int{13, 15, 16, 17}), expected: []int{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_562_Find_Max_Length", "language": "go_test.go", "prompt": "package Find_Max_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the longest sublists.\nfunc Find_Max_Length(lst [][]int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "tests": "func TestFind_Max_Length(t *testing.T) {\n  candidate := Find_Max_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 4}, []int{5, 6, 7, 8}}), expected: 4 },\n     { actual: candidate([][]int{[]int{0, 1}, []int{2, 2}, []int{3, 2, 1}}), expected: 3 },\n     { actual: candidate([][]int{[]int{7}, []int{22, 23}, []int{13, 14, 15}, []int{10, 20, 30, 40, 50}}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_563_extract_values", "language": "go_test.go", "prompt": "package extract_values_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract values between quotation marks from a string.\nfunc extract_values(text string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Values(t *testing.T) {\n  candidate := extract_values\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"Python\", \"PHP\", \"Java\"\"), expected: []string{\"Python\", \"PHP\", \"Java\"} },\n     { actual: candidate(\"\"python\",\"program\",\"language\"\"), expected: []string{\"python\", \"program\", \"language\"} },\n     { actual: candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\"), expected: []string{\"red\", \"blue\", \"green\", \"yellow\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_564_count_Pairs", "language": "go_test.go", "prompt": "package count_Pairs_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfunc count_Pairs(arr []int, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "tests": "func TestCount_Pairs(t *testing.T) {\n  candidate := count_Pairs\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 1}, 3), expected: 2 },\n     { actual: candidate([]int{1, 1, 1, 1}, 4), expected: 0 },\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 5), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_565_split", "language": "go_test.go", "prompt": "package split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to split a string into characters.\nfunc split(word string) []string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "tests": "func TestSplit(t *testing.T) {\n  candidate := split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: []string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"} },\n     { actual: candidate(\"Name\"), expected: []string{\"N\", \"a\", \"m\", \"e\"} },\n     { actual: candidate(\"program\"), expected: []string{\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_566_sum_digits", "language": "go_test.go", "prompt": "package sum_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "tests": "func TestSum_Digits(t *testing.T) {\n  candidate := sum_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(345), expected: 12 },\n     { actual: candidate(12), expected: 3 },\n     { actual: candidate(97), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_567_issort_list", "language": "go_test.go", "prompt": "package issort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a specified list is sorted or not.\nfunc issort_list(list1 []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "tests": "func TestIssort_List(t *testing.T) {\n  candidate := issort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 6, 8, 10, 12, 14, 16, 17}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 6, 8, 10, 12, 14, 20, 17}), expected: false },\n     { actual: candidate([]int{1, 2, 4, 6, 8, 10, 15, 14, 20}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_569_sort_sublists", "language": "go_test.go", "prompt": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "tests": "func TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_56_checks", "language": "go_test.go", "prompt": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "tests": "func TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_572_two_unique_nums", "language": "go_test.go", "prompt": "package two_unique_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove duplicate numbers from a given number of lists.\nfunc two_unique_nums(nums []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "tests": "func TestTwo_Unique_Nums(t *testing.T) {\n  candidate := two_unique_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 2, 3, 4, 5}), expected: []int{1, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 2, 4, 5}), expected: []int{1, 3, 4, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_573_unique_product", "language": "go_test.go", "prompt": "package unique_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "tests": "func TestUnique_Product(t *testing.T) {\n  candidate := unique_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30, 40, 20, 50, 60, 40}), expected: 720000000 },\n     { actual: candidate([]int{1, 2, 3, 1}), expected: 6 },\n     { actual: candidate([]int{7, 8, 9, 0, 1, 1}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "go_test.go", "prompt": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "tests": "func TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_576_is_Sub_Array", "language": "go_test.go", "prompt": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "tests": "func TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "go_test.go", "prompt": "package last_Digit_Factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last digit in factorial of a given number.\nfunc last_Digit_Factorial(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "tests": "func TestLast_Digit_Factorial(t *testing.T) {\n  candidate := last_Digit_Factorial\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(4), expected: 4 },\n     { actual: candidate(21), expected: 0 },\n     { actual: candidate(30), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_578_interleave_lists", "language": "go_test.go", "prompt": "package interleave_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1 []int, list2 []int, list3 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "tests": "func TestInterleave_Lists(t *testing.T) {\n  candidate := interleave_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}, []int{10, 20, 30, 40, 50, 60, 70}, []int{100, 200, 300, 400, 500, 600, 700}), expected: []int{1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700} },\n     { actual: candidate([]int{10, 20}, []int{15, 2}, []int{5, 10}), expected: []int{10, 15, 5, 20, 2, 10} },\n     { actual: candidate([]int{11, 44}, []int{10, 15}, []int{20, 5}), expected: []int{11, 10, 20, 44, 15, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_579_find_dissimilar", "language": "go_test.go", "prompt": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "tests": "func TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_57_find_Max_Num", "language": "go_test.go", "prompt": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "tests": "func TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_580_extract_even", "language": "go_test.go", "prompt": "package extract_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove uneven elements in the nested mixed list.\nfunc extract_even(test_tuple []interface{}) interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Even(t *testing.T) {\n  candidate := extract_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{4, 5, []interface{}{7, 6, []interface{}{2, 4}}, 6, 8}), expected: []interface{}{4, []interface{}{6, []interface{}{2, 4}}, 6, 8} },\n     { actual: candidate([]interface{}{5, 6, []interface{}{8, 7, []interface{}{4, 8}}, 7, 9}), expected: []interface{}{6, []interface{}{8, []interface{}{4, 8}}} },\n     { actual: candidate([]interface{}{5, 6, []interface{}{9, 8, []interface{}{4, 6}}, 8, 10}), expected: []interface{}{6, []interface{}{8, []interface{}{4, 6}}, 8, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_581_surface_Area", "language": "go_test.go", "prompt": "package surface_Area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the surface area of a square goramid with a given base edge and height.\nfunc surface_Area(b int, s int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "tests": "func TestSurface_Area(t *testing.T) {\n  candidate := surface_Area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4), expected: 33 },\n     { actual: candidate(4, 5), expected: 56 },\n     { actual: candidate(1, 2), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_583_catalan_number", "language": "go_test.go", "prompt": "package catalan_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which returns nth catalan number.\nfunc catalan_number(num int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "tests": "func TestCatalan_Number(t *testing.T) {\n  candidate := catalan_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 16796 },\n     { actual: candidate(9), expected: 4862 },\n     { actual: candidate(7), expected: 429 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_584_find_adverbs", "language": "go_test.go", "prompt": "package find_adverbs_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the first adverb ending with ly and its positions in a given string.\nfunc find_adverbs(text string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "tests": "func TestFind_Adverbs(t *testing.T) {\n  candidate := find_adverbs\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Clearly, he has no excuse for such behavior.\"), expected: \"0-7: Clearly\" },\n     { actual: candidate(\"Please handle the situation carefuly\"), expected: \"28-36: carefuly\" },\n     { actual: candidate(\"Complete the task quickly\"), expected: \"18-25: quickly\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_586_split_Arr", "language": "go_test.go", "prompt": "package split_Arr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l []int, n int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "tests": "func TestSplit_Arr(t *testing.T) {\n  candidate := split_Arr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 10, 5, 6, 52, 36}, 2), expected: []int{5, 6, 52, 36, 12, 10} },\n     { actual: candidate([]int{1, 2, 3, 4}, 1), expected: []int{2, 3, 4, 1} },\n     { actual: candidate([]int{0, 1, 2, 3, 4, 5, 6, 7}, 3), expected: []int{3, 4, 5, 6, 7, 0, 1, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_587_list_tuple", "language": "go_test.go", "prompt": "package list_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a list to a list.\nfunc list_tuple(listx []int) interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "tests": "func TestList_Tuple(t *testing.T) {\n  candidate := list_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 10, 7, 4, 15, 3}), expected: []interface{}{5, 10, 7, 4, 15, 3} },\n     { actual: candidate([]int{2, 4, 5, 6, 2, 3, 4, 4, 7}), expected: []interface{}{2, 4, 5, 6, 2, 3, 4, 4, 7} },\n     { actual: candidate([]int{58, 44, 56}), expected: []interface{}{58, 44, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_588_big_diff", "language": "go_test.go", "prompt": "package big_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "tests": "func TestBig_Diff(t *testing.T) {\n  candidate := big_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 3 },\n     { actual: candidate([]int{4, 5, 12}), expected: 8 },\n     { actual: candidate([]int{9, 2, 3}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_589_perfect_squares", "language": "go_test.go", "prompt": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "tests": "func TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_58_opposite_Signs", "language": "go_test.go", "prompt": "package opposite_Signs_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given two integers have opposite sign or not.\nfunc opposite_Signs(x int, y int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "tests": "func TestOpposite_Signs(t *testing.T) {\n  candidate := opposite_Signs\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, -2), expected: true },\n     { actual: candidate(3, 2), expected: false },\n     { actual: candidate(-10, -10), expected: false },\n     { actual: candidate(-2, 2), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_591_swap_List", "language": "go_test.go", "prompt": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "tests": "func TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_592_sum_Of_product", "language": "go_test.go", "prompt": "package sum_Of_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the product of consecutive binomial co-efficients.\nfunc sum_Of_product(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "tests": "func TestSum_Of_Product(t *testing.T) {\n  candidate := sum_Of_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 15 },\n     { actual: candidate(4), expected: 56 },\n     { actual: candidate(1), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_593_removezero_ip", "language": "go_test.go", "prompt": "package removezero_ip_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "tests": "func TestRemovezero_Ip(t *testing.T) {\n  candidate := removezero_ip\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"216.08.094.196\"), expected: \"216.8.94.196\" },\n     { actual: candidate(\"12.01.024\"), expected: \"12.1.24\" },\n     { actual: candidate(\"216.08.094.0196\"), expected: \"216.8.94.196\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_594_diff_even_odd", "language": "go_test.go", "prompt": "package diff_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1 []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "tests": "func TestDiff_Even_Odd(t *testing.T) {\n  candidate := diff_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 1 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_595_min_Swaps", "language": "go_test.go", "prompt": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "tests": "func TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_597_find_kth", "language": "go_test.go", "prompt": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "tests": "func TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_598_armstrong_number", "language": "go_test.go", "prompt": "package armstrong_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "tests": "func TestArmstrong_Number(t *testing.T) {\n  candidate := armstrong_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(153), expected: true },\n     { actual: candidate(259), expected: false },\n     { actual: candidate(4458), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_599_sum_average", "language": "go_test.go", "prompt": "package sum_average_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find sum and average of first n natural numbers.\nfunc sum_average(number int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "tests": "func TestSum_Average(t *testing.T) {\n  candidate := sum_average\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: []interface{}{55, 5.5} },\n     { actual: candidate(15), expected: []interface{}{120, 8.0} },\n     { actual: candidate(20), expected: []interface{}{210, 10.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_59_is_octagonal", "language": "go_test.go", "prompt": "package is_octagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth octagonal number.\nfunc is_octagonal(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "tests": "func TestIs_Octagonal(t *testing.T) {\n  candidate := is_octagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 65 },\n     { actual: candidate(10), expected: 280 },\n     { actual: candidate(15), expected: 645 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_600_is_Even", "language": "go_test.go", "prompt": "package is_Even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number is even or not.\nfunc is_Even(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "tests": "func TestIs_Even(t *testing.T) {\n  candidate := is_Even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: false },\n     { actual: candidate(2), expected: true },\n     { actual: candidate(3), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_603_get_ludic", "language": "go_test.go", "prompt": "package get_ludic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfunc get_ludic(n int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "tests": "func TestGet_Ludic(t *testing.T) {\n  candidate := get_ludic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: []int{1, 2, 3, 5, 7} },\n     { actual: candidate(25), expected: []int{1, 2, 3, 5, 7, 11, 13, 17, 23, 25} },\n     { actual: candidate(45), expected: []int{1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_604_reverse_words", "language": "go_test.go", "prompt": "package reverse_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to reverse words seperated by spaces in a given string.\nfunc reverse_words(s string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "tests": "func TestReverse_Words(t *testing.T) {\n  candidate := reverse_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python program\"), expected: \"program python\" },\n     { actual: candidate(\"java language\"), expected: \"language java\" },\n     { actual: candidate(\"indian man\"), expected: \"man indian\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_605_prime_num", "language": "go_test.go", "prompt": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "tests": "func TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_606_radian_degree", "language": "go_test.go", "prompt": "package radian_degree_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert degrees to radians.\nfunc radian_degree(degree int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "tests": "func TestRadian_Degree(t *testing.T) {\n  candidate := radian_degree\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(90), expected: 1.5707963267948966 },\n     { actual: candidate(60), expected: 1.0471975511965976 },\n     { actual: candidate(120), expected: 2.0943951023931953 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_607_find_literals", "language": "go_test.go", "prompt": "package find_literals_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfunc find_literals(text string, pattern string) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "tests": "func TestFind_Literals(t *testing.T) {\n  candidate := find_literals\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"), expected: []interface{}{\"fox\", 16, 19} },\n     { actual: candidate(\"Its been a very crazy procedure right\", \"crazy\"), expected: []interface{}{\"crazy\", 16, 21} },\n     { actual: candidate(\"Hardest choices required strongest will\", \"will\"), expected: []interface{}{\"will\", 35, 39} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_608_bell_Number", "language": "go_test.go", "prompt": "package bell_Number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find nth bell number.\nfunc bell_Number(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "tests": "func TestBell_Number(t *testing.T) {\n  candidate := bell_Number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 2 },\n     { actual: candidate(3), expected: 5 },\n     { actual: candidate(4), expected: 15 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_610_remove_kth_element", "language": "go_test.go", "prompt": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_611_max_of_nth", "language": "go_test.go", "prompt": "package max_of_nth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfunc max_of_nth(test_list [][]int, N int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "tests": "func TestMax_Of_Nth(t *testing.T) {\n  candidate := max_of_nth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{5, 6, 7}, []int{1, 3, 5}, []int{8, 9, 19}}, 2), expected: 19 },\n     { actual: candidate([][]int{[]int{6, 7, 8}, []int{2, 4, 6}, []int{9, 10, 20}}, 1), expected: 10 },\n     { actual: candidate([][]int{[]int{7, 8, 9}, []int{3, 5, 7}, []int{10, 11, 21}}, 1), expected: 11 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_612_merge", "language": "go_test.go", "prompt": "package merge_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nfunc merge(lst [][]interface{}) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "tests": "func TestMerge(t *testing.T) {\n  candidate := merge\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"x\", \"y\"}, []string{\"a\", \"b\"}, []string{\"m\", \"n\"}}), expected: [][]int{[]string{\"x\", \"a\", \"m\"}, []string{\"y\", \"b\", \"n\"}} },\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4}, []int{5, 6}, []int{7, 8}}), expected: [][]int{[]int{1, 3, 5, 7}, []int{2, 4, 6, 8}} },\n     { actual: candidate([][]int{[]string{\"x\", \"y\", \"z\"}, []string{\"a\", \"b\", \"c\"}, []string{\"m\", \"n\", \"o\"}}), expected: [][]int{[]string{\"x\", \"a\", \"m\"}, []string{\"y\", \"b\", \"n\"}, []string{\"z\", \"c\", \"o\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_614_cummulative_sum", "language": "go_test.go", "prompt": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list of lists.\nfunc cummulative_sum(test_list [][]int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "tests": "func TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 6, 7}, []int{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]int{2, 4}, []int{6, 7, 8}, []int{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]int{3, 5}, []int{7, 8, 9}, []int{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_615_average_tuple", "language": "go_test.go", "prompt": "package average_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes a lists of lists and returns the average value for each sublist as a list.\nfunc average_tuple(nums [][]int) []float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "tests": "func TestAverage_Tuple(t *testing.T) {\n  candidate := average_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{10, 10, 10, 12}, []int{30, 45, 56, 45}, []int{81, 80, 39, 32}, []int{1, 2, 3, 4}}), expected: []float64{30.5, 34.25, 27.0, 23.25} },\n     { actual: candidate([][]int{[]int{1, 1, -5}, []int{30, -15, 56}, []int{81, -60, -39}, []int{-10, 2, 3}}), expected: []float64{25.5, -18.0, 3.75} },\n     { actual: candidate([][]int{[]int{100, 100, 100, 120}, []int{300, 450, 560, 450}, []int{810, 800, 390, 320}, []int{10, 20, 30, 40}}), expected: []float64{305.0, 342.5, 270.0, 232.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_616_tuple_modulo", "language": "go_test.go", "prompt": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "tests": "func TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_617_min_Jumps", "language": "go_test.go", "prompt": "package min_Jumps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfunc min_Jumps(steps []interface{}, d int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "tests": "func TestMin_Jumps(t *testing.T) {\n  candidate := min_Jumps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4}, 11), expected: 3.5 },\n     { actual: candidate([]interface{}{3, 4}, 0), expected: 0 },\n     { actual: candidate([]interface{}{11, 14}, 11), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_618_div_list", "language": "go_test.go", "prompt": "package div_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to divide two lists element wise.\nfunc div_list(nums1 []int, nums2 []int) []float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "tests": "func TestDiv_List(t *testing.T) {\n  candidate := div_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{4, 5, 6}, []int{1, 2, 3}), expected: []float64{4.0, 2.5, 2.0} },\n     { actual: candidate([]int{3, 2}, []int{1, 4}), expected: []float64{3.0, 0.5} },\n     { actual: candidate([]int{90, 120}, []int{50, 70}), expected: []float64{1.8, 1.7142857142857142} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_619_move_num", "language": "go_test.go", "prompt": "package move_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to move all the numbers to the end of the given string.\nfunc move_num(test_str string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "tests": "func TestMove_Num(t *testing.T) {\n  candidate := move_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"I1love143you55three3000thousand\"), expected: \"Iloveyouthreethousand1143553000\" },\n     { actual: candidate(\"Avengers124Assemble\"), expected: \"AvengersAssemble124\" },\n     { actual: candidate(\"Its11our12path13to14see15things16do17things\"), expected: \"Itsourpathtoseethingsdothings11121314151617\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_61_count_Substrings", "language": "go_test.go", "prompt": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "tests": "func TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_622_get_median", "language": "go_test.go", "prompt": "package get_median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of two sorted lists of same size.\nfunc get_median(arr1 []int, arr2 []int, n int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "tests": "func TestGet_Median(t *testing.T) {\n  candidate := get_median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 12, 15, 26, 38}, []int{2, 13, 17, 30, 45}, 5), expected: 16.0 },\n     { actual: candidate([]int{2, 4, 8, 9}, []int{7, 13, 19, 28}, 4), expected: 8.5 },\n     { actual: candidate([]int{3, 6, 14, 23, 36, 42}, []int{2, 18, 27, 39, 49, 55}, 6), expected: 25.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_623_nth_nums", "language": "go_test.go", "prompt": "package nth_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums []int, n int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "tests": "func TestNth_Nums(t *testing.T) {\n  candidate := nth_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}, 3), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}, 5), expected: []int{248832, 759375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_624_is_upper", "language": "go_test.go", "prompt": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "tests": "func TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_625_swap_List", "language": "go_test.go", "prompt": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to interchange the first and last element in a given list.\nfunc swap_List(newList []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "tests": "func TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 4}), expected: []int{4, 2, 3, 4, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_627_find_First_Missing", "language": "go_test.go", "prompt": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "tests": "func TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_628_replace_spaces", "language": "go_test.go", "prompt": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all spaces in the given string with '%20'.\nfunc replace_spaces(myString string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "tests": "func TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"My Name is Dawood\"), expected: \"My%20Name%20is%20Dawood\" },\n     { actual: candidate(\"I am a Programmer\"), expected: \"I%20am%20a%20Programmer\" },\n     { actual: candidate(\"I love Coding\"), expected: \"I%20love%20Coding\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_629_Split", "language": "go_test.go", "prompt": "package Split_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find even numbers from a list of numbers.\nfunc Split(list []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "tests": "func TestSplit(t *testing.T) {\n  candidate := Split\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{2, 4} },\n     { actual: candidate([]int{4, 5, 6, 7, 8, 0, 1}), expected: []int{4, 6, 8, 0} },\n     { actual: candidate([]int{8, 12, 15, 19}), expected: []int{8, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_62_smallest_num", "language": "go_test.go", "prompt": "package smallest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find smallest number in a list.\nfunc smallest_num(xs []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "tests": "func TestSmallest_Num(t *testing.T) {\n  candidate := smallest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 1, 45, 99}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n     { actual: candidate([]int{45, 46, 50, 60}), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_630_get_coordinates", "language": "go_test.go", "prompt": "package get_coordinates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract all the adjacent coordinates of the given coordinate list.\nfunc get_coordinates(test_tup []interface{}) [][]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "tests": "func TestGet_Coordinates(t *testing.T) {\n  candidate := get_coordinates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4}), expected: [][]int{[]int{2, 3}, []int{2, 4}, []int{2, 5}, []int{3, 3}, []int{3, 4}, []int{3, 5}, []int{4, 3}, []int{4, 4}, []int{4, 5}} },\n     { actual: candidate([]interface{}{4, 5}), expected: [][]int{[]int{3, 4}, []int{3, 5}, []int{3, 6}, []int{4, 4}, []int{4, 5}, []int{4, 6}, []int{5, 4}, []int{5, 5}, []int{5, 6}} },\n     { actual: candidate([]interface{}{5, 6}), expected: [][]int{[]int{4, 5}, []int{4, 6}, []int{4, 7}, []int{5, 5}, []int{5, 6}, []int{5, 7}, []int{6, 5}, []int{6, 6}, []int{6, 7}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_631_replace_spaces", "language": "go_test.go", "prompt": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "tests": "func TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_632_move_zero", "language": "go_test.go", "prompt": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "tests": "func TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_633_pair_xor_Sum", "language": "go_test.go", "prompt": "package pair_xor_Sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of xor of all pairs of numbers in the given list.\nfunc pair_xor_Sum(arr []int, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "tests": "func TestPair_Xor_Sum(t *testing.T) {\n  candidate := pair_xor_Sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 9, 7, 6}, 4), expected: 47 },\n     { actual: candidate([]int{7, 3, 5}, 3), expected: 12 },\n     { actual: candidate([]int{7, 3}, 2), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_635_heap_sort", "language": "go_test.go", "prompt": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "tests": "func TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_637_noprofit_noloss", "language": "go_test.go", "prompt": "package noprofit_noloss_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given amount has no profit and no loss\nfunc noprofit_noloss(actual_cost int, sale_amount int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "tests": "func TestNoprofit_Noloss(t *testing.T) {\n  candidate := noprofit_noloss\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1500, 1200), expected: false },\n     { actual: candidate(100, 100), expected: true },\n     { actual: candidate(2000, 5000), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_638_wind_chill", "language": "go_test.go", "prompt": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "tests": "func TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_639_sample_nam", "language": "go_test.go", "prompt": "package sample_nam_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfunc sample_nam(sample_names []string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "tests": "func TestSample_Nam(t *testing.T) {\n  candidate := sample_nam\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"}), expected: 16 },\n     { actual: candidate([]string{\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"}), expected: 10 },\n     { actual: candidate([]string{\"abcd\", \"Python\", \"abba\", \"aba\"}), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_63_max_difference", "language": "go_test.go", "prompt": "package max_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between available pairs in the given list list.\nfunc max_difference(test_list [][]interface{}) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "tests": "func TestMax_Difference(t *testing.T) {\n  candidate := max_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{1, 7}, []interface{}{10, 3}, []interface{}{1, 2}}), expected: 7 },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{2, 17}, []interface{}{9, 13}, []interface{}{11, 12}}), expected: 15 },\n     { actual: candidate([][]int{[]interface{}{12, 35}, []interface{}{21, 27}, []interface{}{13, 23}, []interface{}{41, 22}}), expected: 23 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_640_remove_parenthesis", "language": "go_test.go", "prompt": "package remove_parenthesis_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove the parenthesis and what is inbetween them from a string.\nfunc remove_parenthesis(items []string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Parenthesis(t *testing.T) {\n  candidate := remove_parenthesis\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python (chrome)\"}), expected: \"python\" },\n     { actual: candidate([]string{\"string(.abc)\"}), expected: \"string\" },\n     { actual: candidate([]string{\"alpha(num)\"}), expected: \"alpha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_641_is_nonagonal", "language": "go_test.go", "prompt": "package is_nonagonal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth nonagonal number.\nfunc is_nonagonal(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "tests": "func TestIs_Nonagonal(t *testing.T) {\n  candidate := is_nonagonal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 325 },\n     { actual: candidate(15), expected: 750 },\n     { actual: candidate(18), expected: 1089 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "go_test.go", "prompt": "package text_match_wordz_middle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfunc text_match_wordz_middle(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "tests": "func TestText_Match_Wordz_Middle(t *testing.T) {\n  candidate := text_match_wordz_middle\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"pythonzabc.\"), expected: true },\n     { actual: candidate(\"zxyabc.\"), expected: false },\n     { actual: candidate(\"  lang  .\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "go_test.go", "prompt": "package reverse_Array_Upto_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to reverse a list upto a given position.\nfunc reverse_Array_Upto_K(input []int, k int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "tests": "func TestReverse_Array_Upto_K(t *testing.T) {\n  candidate := reverse_Array_Upto_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, 4), expected: []int{4, 3, 2, 1, 5, 6} },\n     { actual: candidate([]int{4, 5, 6, 7}, 2), expected: []int{5, 4, 6, 7} },\n     { actual: candidate([]int{9, 8, 7, 6, 5}, 3), expected: []int{7, 8, 9, 6, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_64_subject_marks", "language": "go_test.go", "prompt": "package subject_marks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of lists using the second value of each list.\nfunc subject_marks(subjectmarks [][]interface{}) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "tests": "func TestSubject_Marks(t *testing.T) {\n  candidate := subject_marks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}, []interface{}{\"Social sciences\", 82}}), expected: [][]int{[]interface{}{\"Social sciences\", 82}, []interface{}{\"English\", 88}, []interface{}{\"Science\", 90}, []interface{}{\"Maths\", 97}} },\n     { actual: candidate([][]int{[]interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}, []interface{}{\"Social\", 33}}), expected: [][]int{[]interface{}{\"Social\", 33}, []interface{}{\"Telugu\", 49}, []interface{}{\"Hindhi\", 54}} },\n     { actual: candidate([][]int{[]interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}, []interface{}{\"Biology\", 45}}), expected: [][]int{[]interface{}{\"Biology\", 45}, []interface{}{\"Physics\", 96}, []interface{}{\"Chemistry\", 97}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_66_pos_count", "language": "go_test.go", "prompt": "package pos_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of positive numbers in a list.\nfunc pos_count(list []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "tests": "func TestPos_Count(t *testing.T) {\n  candidate := pos_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, -2, 3, -4}), expected: 2 },\n     { actual: candidate([]int{3, 4, 5, -1}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_67_bell_number", "language": "go_test.go", "prompt": "package bell_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the number of ways to partition a set of Bell numbers.\nfunc bell_number(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "tests": "func TestBell_Number(t *testing.T) {\n  candidate := bell_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 2 },\n     { actual: candidate(10), expected: 115975 },\n     { actual: candidate(56), expected: 6775685320645824322581483068371419745979053216268760300 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_68_is_Monotonic", "language": "go_test.go", "prompt": "package is_Monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given list is monotonic or not.\nfunc is_Monotonic(A []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "tests": "func TestIs_Monotonic(t *testing.T) {\n  candidate := is_Monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{6, 5, 4, 4}), expected: true },\n     { actual: candidate([]int{1, 2, 2, 3}), expected: true },\n     { actual: candidate([]int{1, 3, 2}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_69_is_sublist", "language": "go_test.go", "prompt": "package is_sublist_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a list contains the given sublist or not.\nfunc is_sublist(l []int, s []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "tests": "func TestIs_Sublist(t *testing.T) {\n  candidate := is_sublist\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{3, 7}), expected: false },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{4, 3}), expected: true },\n     { actual: candidate([]int{2, 4, 3, 5, 7}, []int{1, 6}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "go_test.go", "prompt": "package differ_At_One_Bit_Pos_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a int, b int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "tests": "func TestDiffer_At_One_Bit_Pos(t *testing.T) {\n  candidate := differ_At_One_Bit_Pos\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13, 9), expected: true },\n     { actual: candidate(15, 8), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(2, 3), expected: true },\n     { actual: candidate(5, 1), expected: true },\n     { actual: candidate(1, 5), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_70_get_equal", "language": "go_test.go", "prompt": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "tests": "func TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{11, 22, 33}, []int{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_71_comb_sort", "language": "go_test.go", "prompt": "package comb_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc comb_sort(nums []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "tests": "func TestComb_Sort(t *testing.T) {\n  candidate := comb_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 15, 37, 25, 79}), expected: []int{5, 15, 25, 37, 79} },\n     { actual: candidate([]int{41, 32, 15, 19, 22}), expected: []int{15, 19, 22, 32, 41} },\n     { actual: candidate([]int{99, 15, 13, 47}), expected: []int{13, 15, 47, 99} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "go_test.go", "prompt": "package add_dict_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to add a map to the list. The output should be a list.\nfunc add_dict_to_tuple(test_tup []interface{}, test_dict map[string]int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "tests": "func TestAdd_Dict_To_Tuple(t *testing.T) {\n  candidate := add_dict_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{4, 5, 6}, map[string]int{\"MSAM\": 1, \"is\": 2, \"best\": 3}), expected: []interface{}{4, 5, 6, map[string]int{\"MSAM\": 1, \"is\": 2, \"best\": 3}} },\n     { actual: candidate([]interface{}{1, 2, 3}, map[string]int{\"UTS\": 2, \"is\": 3, \"Worst\": 4}), expected: []interface{}{1, 2, 3, map[string]int{\"UTS\": 2, \"is\": 3, \"Worst\": 4}} },\n     { actual: candidate([]interface{}{8, 9, 10}, map[string]int{\"POS\": 3, \"is\": 4, \"Okay\": 5}), expected: []interface{}{8, 9, 10, map[string]int{\"POS\": 3, \"is\": 4, \"Okay\": 5}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_721_maxAverageOfPath", "language": "go_test.go", "prompt": "package maxAverageOfPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunc maxAverageOfPath(cost [][]int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "tests": "func TestMaxaverageofpath(t *testing.T) {\n  candidate := maxAverageOfPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{6, 5, 4}, []int{7, 3, 9}}), expected: 5.2 },\n     { actual: candidate([][]int{[]int{2, 3, 4}, []int{7, 6, 5}, []int{8, 4, 10}}), expected: 6.2 },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{8, 7, 6}, []int{9, 5, 11}}), expected: 7.2 },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}), expected: 5.8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_723_count_same_pair", "language": "go_test.go", "prompt": "package count_same_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nfunc count_same_pair(nums1 []int, nums2 []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "tests": "func TestCount_Same_Pair(t *testing.T) {\n  candidate := count_same_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 9}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, []int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 11 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}, []int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 1 },\n     { actual: candidate([]int{0, 1, 1, 2}, []int{0, 1, 2, 2}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_724_power_base_sum", "language": "go_test.go", "prompt": "package power_base_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base int, power int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "tests": "func TestPower_Base_Sum(t *testing.T) {\n  candidate := power_base_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 100), expected: 115 },\n     { actual: candidate(8, 10), expected: 37 },\n     { actual: candidate(8, 15), expected: 62 },\n     { actual: candidate(3, 3), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_725_extract_quotation", "language": "go_test.go", "prompt": "package extract_quotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract values between quotation marks \" \" of the given string.\nfunc extract_quotation(text1 string) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Quotation(t *testing.T) {\n  candidate := extract_quotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"), expected: []string{\"A53\", \"multi\", \"Processor\"} },\n     { actual: candidate(\"Cast your \"favorite\" entertainment \"apps\"\"), expected: []string{\"favorite\", \"apps\"} },\n     { actual: candidate(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"), expected: []string{\"4k Ultra HD\", \"HDR 10\"} },\n     { actual: candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"), expected: []interface{}{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_726_multiply_elements", "language": "go_test.go", "prompt": "package multiply_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the list is equal to t_i * t_{i+1}.\nfunc multiply_elements(test_tup []int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "tests": "func TestMultiply_Elements(t *testing.T) {\n  candidate := multiply_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5, 7, 8, 10}), expected: []int{5, 35, 56, 80} },\n     { actual: candidate([]int{2, 4, 5, 6, 7}), expected: []int{8, 20, 30, 42} },\n     { actual: candidate([]int{12, 13, 14, 9, 15}), expected: []int{156, 182, 126, 135} },\n     { actual: candidate([]int{12}), expected: []interface{}{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_728_sum_list", "language": "go_test.go", "prompt": "package sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1 []int, lst2 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "tests": "func TestSum_List(t *testing.T) {\n  candidate := sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30}, []int{15, 25, 35}), expected: []int{25, 45, 65} },\n     { actual: candidate([]int{1, 2, 3}, []int{5, 6, 7}), expected: []int{6, 8, 10} },\n     { actual: candidate([]int{15, 20, 30}, []int{15, 45, 75}), expected: []int{30, 65, 105} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_72_dif_Square", "language": "go_test.go", "prompt": "package dif_Square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as the difference of two squares or not.\nfunc dif_Square(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "tests": "func TestDif_Square(t *testing.T) {\n  candidate := dif_Square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(15), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_730_consecutive_duplicates", "language": "go_test.go", "prompt": "package consecutive_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove consecutive duplicates of a given list.\nfunc consecutive_duplicates(nums []interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "tests": "func TestConsecutive_Duplicates(t *testing.T) {\n  candidate := consecutive_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), expected: []int{10, 15, 19, 18, 17, 26, 17, 18, 10} },\n     { actual: candidate([]string{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"}), expected: []string{\"a\", \"b\", \"c\", \"d\"} },\n     { actual: candidate([]string{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"}), expected: []string{\"a\", \"b\", \"c\", \"d\", \"a\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_731_lateralsurface_cone", "language": "go_test.go", "prompt": "package lateralsurface_cone_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfunc lateralsurface_cone(r int, h int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "tests": "func TestLateralsurface_Cone(t *testing.T) {\n  candidate := lateralsurface_cone\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 12), expected: 204.20352248333654 },\n     { actual: candidate(10, 15), expected: 566.3586699569488 },\n     { actual: candidate(19, 17), expected: 1521.8090132193388 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_732_replace_specialchar", "language": "go_test.go", "prompt": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "tests": "func TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_733_find_first_occurrence", "language": "go_test.go", "prompt": "package find_first_occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the index of the first occurrence of a given number in a sorted list.\nfunc find_first_occurrence(A []int, x int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "tests": "func TestFind_First_Occurrence(t *testing.T) {\n  candidate := find_first_occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 1 },\n     { actual: candidate([]int{2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 2 },\n     { actual: candidate([]int{2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "go_test.go", "prompt": "package sum_Of_Subarray_Prod_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\nfunc sum_Of_Subarray_Prod(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "tests": "func TestSum_Of_Subarray_Prod(t *testing.T) {\n  candidate := sum_Of_Subarray_Prod\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 20 },\n     { actual: candidate([]int{1, 2}), expected: 5 },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_735_toggle_middle_bits", "language": "go_test.go", "prompt": "package toggle_middle_bits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfunc toggle_middle_bits(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "tests": "func TestToggle_Middle_Bits(t *testing.T) {\n  candidate := toggle_middle_bits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 15 },\n     { actual: candidate(10), expected: 12 },\n     { actual: candidate(11), expected: 13 },\n     { actual: candidate(65), expected: 127 },\n     { actual: candidate(77), expected: 115 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_736_left_insertion", "language": "go_test.go", "prompt": "package left_insertion_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/gothon-exercises/data-structures-and-algorithms/gothon-data-structure-exercise-24.php\nfunc left_insertion(a []int, x int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "tests": "func TestLeft_Insertion(t *testing.T) {\n  candidate := left_insertion\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 5}, 6), expected: 4 },\n     { actual: candidate([]int{1, 2, 4, 5}, 3), expected: 2 },\n     { actual: candidate([]int{1, 2, 4, 5}, 7), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_737_check_str", "language": "go_test.go", "prompt": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_738_geometric_sum", "language": "go_test.go", "prompt": "package geometric_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/gothon-exercises/data-structures-and-algorithms/gothon-recursion-exercise-9.php\nfunc geometric_sum(n int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "tests": "func TestGeometric_Sum(t *testing.T) {\n  candidate := geometric_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 1.9921875 },\n     { actual: candidate(4), expected: 1.9375 },\n     { actual: candidate(8), expected: 1.99609375 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_739_find_Index", "language": "go_test.go", "prompt": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "tests": "func TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_740_tuple_to_dict", "language": "go_test.go", "prompt": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given list to a key-value map using adjacent elements. https://www.geeksforgeeks.org/gothon-convert-list-to-adjacent-pair-map/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "tests": "func TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_741_all_Characters_Same", "language": "go_test.go", "prompt": "package all_Characters_Same_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether all the characters are same or not.\nfunc all_Characters_Same(s string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "tests": "func TestAll_Characters_Same(t *testing.T) {\n  candidate := all_Characters_Same\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python\"), expected: false },\n     { actual: candidate(\"aaa\"), expected: true },\n     { actual: candidate(\"data\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_742_area_tetrahedron", "language": "go_test.go", "prompt": "package area_tetrahedron_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to caluclate the area of a tetrahedron.\nfunc area_tetrahedron(side int) float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "tests": "func TestArea_Tetrahedron(t *testing.T) {\n  candidate := area_tetrahedron\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: 15.588457268119894 },\n     { actual: candidate(20), expected: 692.8203230275509 },\n     { actual: candidate(10), expected: 173.20508075688772 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_743_rotate_right", "language": "go_test.go", "prompt": "package rotate_right_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/gothon-program-right-rotate-list-n/\nfunc rotate_right(list []int, m int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "tests": "func TestRotate_Right(t *testing.T) {\n  candidate := rotate_right\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), expected: []int{8, 9, 10, 1, 2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), expected: []int{9, 10, 1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), expected: []int{6, 7, 8, 9, 10, 1, 2, 3, 4, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_744_check_none", "language": "go_test.go", "prompt": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "tests": "func TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_745_divisible_by_digits", "language": "go_test.go", "prompt": "package divisible_by_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/gothon-exercises/lambda/gothon-lambda-exercise-24.php\nfunc divisible_by_digits(startnum int, endnum int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "tests": "func TestDivisible_By_Digits(t *testing.T) {\n  candidate := divisible_by_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 22), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22} },\n     { actual: candidate(1, 15), expected: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15} },\n     { actual: candidate(20, 25), expected: []int{22, 24} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_747_lcs_of_three", "language": "go_test.go", "prompt": "package lcs_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X string, Y string, Z string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "tests": "func TestLcs_Of_Three(t *testing.T) {\n  candidate := lcs_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"), expected: 2 },\n     { actual: candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"), expected: 5 },\n     { actual: candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_748_capital_words_spaces", "language": "go_test.go", "prompt": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "tests": "func TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_749_sort_numeric_strings", "language": "go_test.go", "prompt": "package sort_numeric_strings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/gothon-sort-numeric-strings-in-a-list/\nfunc sort_numeric_strings(nums_str []string) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "tests": "func TestSort_Numeric_Strings(t *testing.T) {\n  candidate := sort_numeric_strings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"}), expected: []int{-500, -12, 0, 4, 7, 12, 45, 100, 200} },\n     { actual: candidate([]string{\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"}), expected: []int{1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9} },\n     { actual: candidate([]string{\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"}), expected: []int{1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_74_is_samepatterns", "language": "go_test.go", "prompt": "package is_samepatterns_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether it follows the sequence given in the patterns list.\nfunc is_samepatterns(colors []string, patterns []string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "tests": "func TestIs_Samepatterns(t *testing.T) {\n  candidate := is_samepatterns\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"red\", \"green\", \"green\"}, []string{\"a\", \"b\", \"b\"}), expected: true },\n     { actual: candidate([]string{\"red\", \"green\", \"greenn\"}, []string{\"a\", \"b\", \"b\"}), expected: false },\n     { actual: candidate([]string{\"red\", \"green\", \"greenn\"}, []string{\"a\", \"b\"}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_750_add_tuple", "language": "go_test.go", "prompt": "package add_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to add the given list to the given list.\nfunc add_tuple(test_list []int, test_tup []interface{}) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "tests": "func TestAdd_Tuple(t *testing.T) {\n  candidate := add_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 6, 7}, []interface{}{9, 10}), expected: []int{5, 6, 7, 9, 10} },\n     { actual: candidate([]int{6, 7, 8}, []interface{}{10, 11}), expected: []int{6, 7, 8, 10, 11} },\n     { actual: candidate([]int{7, 8, 9}, []interface{}{11, 12}), expected: []int{7, 8, 9, 11, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_751_check_min_heap", "language": "go_test.go", "prompt": "package check_min_heap_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\nfunc check_min_heap(arr []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Min_Heap(t *testing.T) {\n  candidate := check_min_heap\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{2, 3, 4, 5, 10, 15}), expected: true },\n     { actual: candidate([]int{2, 10, 4, 5, 3, 15}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_752_jacobsthal_num", "language": "go_test.go", "prompt": "package jacobsthal_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfunc jacobsthal_num(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "tests": "func TestJacobsthal_Num(t *testing.T) {\n  candidate := jacobsthal_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 11 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(4), expected: 5 },\n     { actual: candidate(13), expected: 2731 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_753_min_k", "language": "go_test.go", "prompt": "package min_k_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/gothon-find-minimum-k-records-from-list-list/ - in this case a verbatim cogo of test cases\nfunc min_k(test_list [][]interface{}, K int) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "tests": "func TestMin_K(t *testing.T) {\n  candidate := min_k\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Manjeet\", 10}, []interface{}{\"Akshat\", 4}, []interface{}{\"Akash\", 2}, []interface{}{\"Nikhil\", 8}}, 2), expected: [][]int{[]interface{}{\"Akash\", 2}, []interface{}{\"Akshat\", 4}} },\n     { actual: candidate([][]int{[]interface{}{\"Sanjeev\", 11}, []interface{}{\"Angat\", 5}, []interface{}{\"Akash\", 3}, []interface{}{\"Nepin\", 9}}, 3), expected: [][]int{[]interface{}{\"Akash\", 3}, []interface{}{\"Angat\", 5}, []interface{}{\"Nepin\", 9}} },\n     { actual: candidate([][]int{[]interface{}{\"tanmay\", 14}, []interface{}{\"Amer\", 11}, []interface{}{\"Ayesha\", 9}, []interface{}{\"SKD\", 16}}, 1), expected: [][]int{[]interface{}{\"Ayesha\", 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_754_extract_index_list", "language": "go_test.go", "prompt": "package extract_index_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nfunc extract_index_list(l1 []int, l2 []int, l3 []int) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "tests": "func TestExtract_Index_List(t *testing.T) {\n  candidate := extract_index_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 3, 4, 5, 6, 7}, []int{0, 1, 2, 3, 4, 5, 7}, []int{0, 1, 2, 3, 4, 5, 7}), expected: []int{1, 7} },\n     { actual: candidate([]int{1, 1, 3, 4, 5, 6, 7}, []int{0, 1, 2, 3, 4, 6, 5}, []int{0, 1, 2, 3, 4, 6, 7}), expected: []int{1, 6} },\n     { actual: candidate([]int{1, 1, 3, 4, 6, 5, 6}, []int{0, 1, 2, 3, 4, 5, 7}, []int{0, 1, 2, 3, 4, 5, 7}), expected: []int{1, 5} },\n     { actual: candidate([]int{1, 2, 3, 4, 6, 6, 6}, []int{0, 1, 2, 3, 4, 5, 7}, []int{0, 1, 2, 3, 4, 5, 7}), expected: []interface{}{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_756_text_match_zero_one", "language": "go_test.go", "prompt": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/gothon-exercises/re/gothon-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "tests": "func TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_757_count_reverse_pairs", "language": "go_test.go", "prompt": "package count_reverse_pairs_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/gothon-program-to-count-the-pairs-of-reverse-strings/\nfunc count_reverse_pairs(test_list []string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "tests": "func TestCount_Reverse_Pairs(t *testing.T) {\n  candidate := count_reverse_pairs\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"}), expected: 2 },\n     { actual: candidate([]string{\"geeks\", \"best\", \"for\", \"skeeg\"}), expected: 1 },\n     { actual: candidate([]string{\"makes\", \"best\", \"sekam\", \"for\", \"rof\"}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_759_is_decimal", "language": "go_test.go", "prompt": "package is_decimal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether a given string is a decimal number with a precision of 2.\nfunc is_decimal(num string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "tests": "func TestIs_Decimal(t *testing.T) {\n  candidate := is_decimal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"123.11\"), expected: true },\n     { actual: candidate(\"e666.86\"), expected: false },\n     { actual: candidate(\"3.124587\"), expected: false },\n     { actual: candidate(\"1.11\"), expected: true },\n     { actual: candidate(\"1.1.11\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_75_find_tuples", "language": "go_test.go", "prompt": "package find_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find lists which have all elements divisible by k from the given list of lists.\nfunc find_tuples(test_list [][]interface{}, K int) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "tests": "func TestFind_Tuples(t *testing.T) {\n  candidate := find_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{6, 24, 12}, []interface{}{7, 9, 6}, []interface{}{12, 18, 21}}, 6), expected: [][]int{[]interface{}{6, 24, 12}} },\n     { actual: candidate([][]int{[]interface{}{5, 25, 30}, []interface{}{4, 2, 3}, []interface{}{7, 8, 9}}, 5), expected: [][]int{[]interface{}{5, 25, 30}} },\n     { actual: candidate([][]int{[]interface{}{7, 9, 16}, []interface{}{8, 16, 4}, []interface{}{19, 17, 18}}, 4), expected: [][]int{[]interface{}{8, 16, 4}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_760_unique_Element", "language": "go_test.go", "prompt": "package unique_Element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list of numbers contains only one distinct element or not.\nfunc unique_Element(arr []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "tests": "func TestUnique_Element(t *testing.T) {\n  candidate := unique_Element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_762_check_monthnumber_number", "language": "go_test.go", "prompt": "package check_monthnumber_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfunc check_monthnumber_number(monthnum3 int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Monthnumber_Number(t *testing.T) {\n  candidate := check_monthnumber_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected: true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(12), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_763_find_min_diff", "language": "go_test.go", "prompt": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []int, n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "tests": "func TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]int{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]int{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_764_number_ctr", "language": "go_test.go", "prompt": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "tests": "func TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_765_is_polite", "language": "go_test.go", "prompt": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "tests": "func TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_766_pair_wise", "language": "go_test.go", "prompt": "package pair_wise_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return a list of all pairs of consecutive items in a given list.\nfunc pair_wise(l1 []int) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "tests": "func TestPair_Wise(t *testing.T) {\n  candidate := pair_wise\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 3, 4, 4, 5}), expected: [][]int{[]interface{}{1, 1}, []interface{}{1, 2}, []interface{}{2, 3}, []interface{}{3, 3}, []interface{}{3, 4}, []interface{}{4, 4}, []interface{}{4, 5}} },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: [][]int{[]interface{}{1, 5}, []interface{}{5, 7}, []interface{}{7, 9}, []interface{}{9, 10}} },\n     { actual: candidate([]int{5, 1, 9, 7, 10}), expected: [][]int{[]interface{}{5, 1}, []interface{}{1, 9}, []interface{}{9, 7}, []interface{}{7, 10}} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: [][]int{[]interface{}{1, 2}, []interface{}{2, 3}, []interface{}{3, 4}, []interface{}{4, 5}, []interface{}{5, 6}, []interface{}{6, 7}, []interface{}{7, 8}, []interface{}{8, 9}, []interface{}{9, 10}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_767_get_pairs_count", "language": "go_test.go", "prompt": "package get_pairs_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfunc get_pairs_count(arr []int, sum int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "tests": "func TestGet_Pairs_Count(t *testing.T) {\n  candidate := get_pairs_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 1, 1}, 2), expected: 6 },\n     { actual: candidate([]int{1, 5, 7, -1, 5}, 6), expected: 3 },\n     { actual: candidate([]int{1, -2, 3}, 1), expected: 1 },\n     { actual: candidate([]int{-1, -2, 3}, -3), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_769_Diff", "language": "go_test.go", "prompt": "package Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to get the difference between two lists.\nfunc Diff(li1 []int, li2 []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "tests": "func TestDiff(t *testing.T) {\n  candidate := Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 15, 20, 25, 30, 35, 40}, []int{25, 40, 35}), expected: []int{10, 20, 30, 15} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 1}), expected: []int{2, 3, 4, 5, 6, 7} },\n     { actual: candidate([]int{1, 2, 3}, []int{6, 7, 1}), expected: []int{2, 3, 6, 7} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_770_odd_num_sum", "language": "go_test.go", "prompt": "package odd_num_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of fourth power of first n odd natural numbers.\nfunc odd_num_sum(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "tests": "func TestOdd_Num_Sum(t *testing.T) {\n  candidate := odd_num_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 82 },\n     { actual: candidate(3), expected: 707 },\n     { actual: candidate(4), expected: 3108 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_771_check_expression", "language": "go_test.go", "prompt": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_772_remove_length", "language": "go_test.go", "prompt": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_775_odd_position", "language": "go_test.go", "prompt": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "tests": "func TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_776_count_vowels", "language": "go_test.go", "prompt": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "tests": "func TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_777_find_sum", "language": "go_test.go", "prompt": "package find_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of non-repeated elements in a given list.\nfunc find_sum(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "tests": "func TestFind_Sum(t *testing.T) {\n  candidate := find_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 1, 1, 4, 5, 6}), expected: 21 },\n     { actual: candidate([]int{1, 10, 9, 4, 2, 10, 10, 45, 4}), expected: 71 },\n     { actual: candidate([]int{12, 10, 9, 45, 2, 10, 10, 45, 10}), expected: 78 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "go_test.go", "prompt": "package pack_consecutive_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to pack consecutive duplicates of a given list elements into sublists.\nfunc pack_consecutive_duplicates(list1 []interface{}) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "tests": "func TestPack_Consecutive_Duplicates(t *testing.T) {\n  candidate := pack_consecutive_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), expected: [][]int{[]int{0, 0}, []int{1}, []int{2}, []int{3}, []int{4, 4}, []int{5}, []int{6, 6, 6}, []int{7}, []int{8}, []int{9}, []int{4, 4}} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), expected: [][]int{[]int{10, 10}, []int{15}, []int{19}, []int{18, 18}, []int{17}, []int{26, 26}, []int{17}, []int{18}, []int{10}} },\n     { actual: candidate([]string{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"}), expected: [][]int{[]string{\"a\", \"a\"}, []string{\"b\"}, []string{\"c\"}, []string{\"d\", \"d\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_77_is_Diff", "language": "go_test.go", "prompt": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "tests": "func TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_780_find_combinations", "language": "go_test.go", "prompt": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with lists in the given list list. https://www.geeksforgeeks.org/gothon-combinations-of-sum-with-lists-in-list-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "tests": "func TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_781_count_divisors", "language": "go_test.go", "prompt": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "tests": "func TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_782_odd_length_sum", "language": "go_test.go", "prompt": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\nfunc odd_length_sum(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "tests": "func TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_783_rgb_to_hsv", "language": "go_test.go", "prompt": "package rgb_to_hsv_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r int, g int, b int) []float64 {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "tests": "func TestRgb_To_Hsv(t *testing.T) {\n  candidate := rgb_to_hsv\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(255, 255, 255), expected: []float64{0.0, 0.0, 100.0} },\n     { actual: candidate(0, 215, 0), expected: []float64{120.0, 100.0, 84.31372549019608} },\n     { actual: candidate(10, 215, 110), expected: []float64{149.26829268292684, 95.34883720930233, 84.31372549019608} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_784_mul_even_odd", "language": "go_test.go", "prompt": "package mul_even_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1 []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "tests": "func TestMul_Even_Odd(t *testing.T) {\n  candidate := mul_even_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 4, 1, 6, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: 2 },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: 10 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_785_tuple_str_int", "language": "go_test.go", "prompt": "package tuple_str_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert list string to integer list.\nfunc tuple_str_int(test_str string) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "tests": "func TestTuple_Str_Int(t *testing.T) {\n  candidate := tuple_str_int\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(7, 8, 9)\"), expected: []interface{}{7, 8, 9} },\n     { actual: candidate(\"(1, 2, 3)\"), expected: []interface{}{1, 2, 3} },\n     { actual: candidate(\"(4, 5, 6)\"), expected: []interface{}{4, 5, 6} },\n     { actual: candidate(\"(7, 81, 19)\"), expected: []interface{}{7, 81, 19} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_786_right_insertion", "language": "go_test.go", "prompt": "package right_insertion_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to locate the right insertion point for a specified value in sorted order.\nfunc right_insertion(a []int, x int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "tests": "func TestRight_Insertion(t *testing.T) {\n  candidate := right_insertion\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 5}, 6), expected: 4 },\n     { actual: candidate([]int{1, 2, 4, 5}, 3), expected: 2 },\n     { actual: candidate([]int{1, 2, 4, 5}, 7), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_787_text_match_three", "language": "go_test.go", "prompt": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "tests": "func TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_788_new_tuple", "language": "go_test.go", "prompt": "package new_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to create a new list from the given string and list.\nfunc new_tuple(test_list []string, test_str string) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "tests": "func TestNew_Tuple(t *testing.T) {\n  candidate := new_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"WEB\", \"is\"}, \"best\"), expected: []interface{}{\"WEB\", \"is\", \"best\"} },\n     { actual: candidate([]string{\"We\", \"are\"}, \"Developers\"), expected: []interface{}{\"We\", \"are\", \"Developers\"} },\n     { actual: candidate([]string{\"Part\", \"is\"}, \"Wrong\"), expected: []interface{}{\"Part\", \"is\", \"Wrong\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_790_even_position", "language": "go_test.go", "prompt": "package even_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every even index contains even numbers of a given list.\nfunc even_position(nums []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "tests": "func TestEven_Position(t *testing.T) {\n  candidate := even_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n     { actual: candidate([]int{2, 1, 4}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_791_remove_nested", "language": "go_test.go", "prompt": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove lists from the given list.\nfunc remove_nested(test_tup interface{}) []interface{} {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "tests": "func TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_792_count_list", "language": "go_test.go", "prompt": "package count_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of lists in a given number of lists.\nfunc count_list(input_list [][]int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "tests": "func TestCount_List(t *testing.T) {\n  candidate := count_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{2, 3}, []int{4, 5}}), expected: 3 },\n     { actual: candidate([][]int{[]int{1, 0}, []int{2, 0}}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_793_last", "language": "go_test.go", "prompt": "package last_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the last position of an element in a sorted list.\nfunc last(arr []int, x int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "tests": "func TestLast(t *testing.T) {\n  candidate := last\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, 1), expected: 0 },\n     { actual: candidate([]int{1, 1, 1, 2, 3, 4}, 1), expected: 2 },\n     { actual: candidate([]int{2, 3, 2, 3, 6, 8, 9}, 3), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_794_text_starta_endb", "language": "go_test.go", "prompt": "package text_starta_endb_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfunc text_starta_endb(text string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "tests": "func TestText_Starta_Endb(t *testing.T) {\n  candidate := text_starta_endb\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aabbbb\"), expected: true },\n     { actual: candidate(\"aabAbbbc\"), expected: false },\n     { actual: candidate(\"accddbbjjj\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_796_return_sum", "language": "go_test.go", "prompt": "package return_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write function to find the sum of all items in the given map.\nfunc return_sum(dict map[string]int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "tests": "func TestReturn_Sum(t *testing.T) {\n  candidate := return_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]int{\"a\": 100, \"b\": 200, \"c\": 300}), expected: 600 },\n     { actual: candidate(map[string]int{\"a\": 25, \"b\": 18, \"c\": 45}), expected: 88 },\n     { actual: candidate(map[string]int{\"a\": 36, \"b\": 39, \"c\": 49}), expected: 124 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_797_sum_in_range", "language": "go_test.go", "prompt": "package sum_in_range_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of all odd natural numbers within the range l and r.\nfunc sum_in_range(l int, r int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "tests": "func TestSum_In_Range(t *testing.T) {\n  candidate := sum_in_range\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 5), expected: 8 },\n     { actual: candidate(5, 7), expected: 12 },\n     { actual: candidate(7, 13), expected: 40 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_798__sum", "language": "go_test.go", "prompt": "package _sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of a list.\nfunc _sum(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "tests": "func Test_Sum(t *testing.T) {\n  candidate := _sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 6 },\n     { actual: candidate([]int{15, 12, 13, 10}), expected: 50 },\n     { actual: candidate([]int{0, 1, 2}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_799_left_rotate", "language": "go_test.go", "prompt": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "tests": "func TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_79_word_len", "language": "go_test.go", "prompt": "package word_len_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the length of the word is odd or not.\nfunc word_len(s string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "tests": "func TestWord_Len(t *testing.T) {\n  candidate := word_len\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hadoop\"), expected: false },\n     { actual: candidate(\"great\"), expected: true },\n     { actual: candidate(\"structure\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_800_remove_all_spaces", "language": "go_test.go", "prompt": "package remove_all_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all whitespaces from a string.\nfunc remove_all_spaces(text string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "tests": "func TestRemove_All_Spaces(t *testing.T) {\n  candidate := remove_all_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python  program\"), expected: \"pythonprogram\" },\n     { actual: candidate(\"python   programming    language\"), expected: \"pythonprogramminglanguage\" },\n     { actual: candidate(\"python                     program\"), expected: \"pythonprogram\" },\n     { actual: candidate(\"   python                     program\"), expected: \"pythonprogram\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_801_test_three_equal", "language": "go_test.go", "prompt": "package test_three_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of equal numbers from three given integers.\nfunc test_three_equal(x int, y int, z int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "tests": "func TestTest_Three_Equal(t *testing.T) {\n  candidate := test_three_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 1, 1), expected: 3 },\n     { actual: candidate(-1, -2, -3), expected: 0 },\n     { actual: candidate(1, 2, 2), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_802_count_rotation", "language": "go_test.go", "prompt": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\nfunc count_rotation(arr []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "tests": "func TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_803_is_perfect_square", "language": "go_test.go", "prompt": "package is_perfect_square_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfunc is_perfect_square(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "tests": "func TestIs_Perfect_Square(t *testing.T) {\n  candidate := is_perfect_square\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: false },\n     { actual: candidate(36), expected: true },\n     { actual: candidate(14), expected: false },\n     { actual: candidate(196), expected: true },\n     { actual: candidate(125), expected: false },\n     { actual: candidate(15625), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_804_is_product_even", "language": "go_test.go", "prompt": "package is_product_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the product of numbers in a list is even or not.\nfunc is_product_even(arr []int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "tests": "func TestIs_Product_Even(t *testing.T) {\n  candidate := is_product_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: true },\n     { actual: candidate([]int{1, 2, 1, 4}), expected: true },\n     { actual: candidate([]int{1, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_805_max_sum_list", "language": "go_test.go", "prompt": "package max_sum_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists [][]int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "tests": "func TestMax_Sum_List(t *testing.T) {\n  candidate := max_sum_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{10, 11, 12}, []int{7, 8, 9}}), expected: []int{10, 11, 12} },\n     { actual: candidate([][]int{[]int{3, 2, 1}, []int{6, 5, 4}, []int{12, 11, 10}}), expected: []int{12, 11, 10} },\n     { actual: candidate([][]int{[]int{2, 3, 1}}), expected: []int{2, 3, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_806_max_run_uppercase", "language": "go_test.go", "prompt": "package max_run_uppercase_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find maximum run of uppercase characters in the given string.\nfunc max_run_uppercase(test_str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "tests": "func TestMax_Run_Uppercase(t *testing.T) {\n  candidate := max_run_uppercase\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"GeMKSForGERksISBESt\"), expected: 5 },\n     { actual: candidate(\"PrECIOusMOVemENTSYT\"), expected: 6 },\n     { actual: candidate(\"GooGLEFluTTER\"), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_807_first_odd", "language": "go_test.go", "prompt": "package first_odd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the first odd number in a given list of numbers.\nfunc first_odd(nums []int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "tests": "func TestFirst_Odd(t *testing.T) {\n  candidate := first_odd\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5}), expected: 1 },\n     { actual: candidate([]int{2, 4, 1, 3}), expected: 1 },\n     { actual: candidate([]int{8, 9, 1}), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_808_check_K", "language": "go_test.go", "prompt": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []int, K int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "tests": "func TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]int{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_809_check_smaller", "language": "go_test.go", "prompt": "package check_smaller_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if each element of second list is smaller than its corresponding element in the first list.\nfunc check_smaller(test_tup1 []interface{}, test_tup2 []interface{}) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "tests": "func TestCheck_Smaller(t *testing.T) {\n  candidate := check_smaller\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, 3}, []interface{}{2, 3, 4}), expected: false },\n     { actual: candidate([]interface{}{4, 5, 6}, []interface{}{3, 4, 5}), expected: true },\n     { actual: candidate([]interface{}{11, 12, 13}, []interface{}{10, 11, 12}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_80_tetrahedral_number", "language": "go_test.go", "prompt": "package tetrahedral_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth tetrahedral number.\nfunc tetrahedral_number(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "tests": "func TestTetrahedral_Number(t *testing.T) {\n  candidate := tetrahedral_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 35 },\n     { actual: candidate(6), expected: 56 },\n     { actual: candidate(7), expected: 84 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_83_get_Char", "language": "go_test.go", "prompt": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "tests": "func TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_84_sequence", "language": "go_test.go", "prompt": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "tests": "func TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "go_test.go", "prompt": "package centered_hexagonal_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth centered hexagonal number.\nfunc centered_hexagonal_number(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "tests": "func TestCentered_Hexagonal_Number(t *testing.T) {\n  candidate := centered_hexagonal_number\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 271 },\n     { actual: candidate(2), expected: 7 },\n     { actual: candidate(9), expected: 217 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "go_test.go", "prompt": "package merge_dictionaries_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to merge three dictionaries into a single map.\nfunc merge_dictionaries_three(dict1 map[string]string, dict2 map[string]string, dict3 map[string]string) map[string]string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "tests": "func TestMerge_Dictionaries_Three(t *testing.T) {\n  candidate := merge_dictionaries_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(map[string]string{\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, map[string]string{\"G\": \"Green\", \"W\": \"White\"}, map[string]string{\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}), expected: map[string]string{\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"} },\n     { actual: candidate(map[string]string{\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, map[string]string{\"G\": \"Green\", \"W\": \"White\"}, map[string]string{\"L\": \"lavender\", \"B\": \"Blue\"}), expected: map[string]string{\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"} },\n     { actual: candidate(map[string]string{\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, map[string]string{\"L\": \"lavender\", \"B\": \"Blue\"}, map[string]string{\"G\": \"Green\", \"W\": \"White\"}), expected: map[string]string{\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_88_freq_count", "language": "go_test.go", "prompt": "package freq_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the frequency of all the elements in a list, returned as a map.\nfunc freq_count(list1 []int) map[int]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "tests": "func TestFreq_Count(t *testing.T) {\n  candidate := freq_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), expected: map[int]int{10: 4, 20: 4, 40: 2, 50: 2, 30: 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), expected: map[int]int{1: 3, 2: 2, 3: 3, 4: 3} },\n     { actual: candidate([]int{5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), expected: map[int]int{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_89_closest_num", "language": "go_test.go", "prompt": "package closest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the closest smaller number than n.\nfunc closest_num(N int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "tests": "func TestClosest_Num(t *testing.T) {\n  candidate := closest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(11), expected: 10 },\n     { actual: candidate(7), expected: 6 },\n     { actual: candidate(12), expected: 11 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_8_square_nums", "language": "go_test.go", "prompt": "package square_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find squares of individual elements in a list.\nfunc square_nums(nums []int) []int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "tests": "func TestSquare_Nums(t *testing.T) {\n  candidate := square_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}), expected: []int{100, 400, 900} },\n     { actual: candidate([]int{12, 15}), expected: []int{144, 225} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_90_len_log", "language": "go_test.go", "prompt": "package len_log_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the longest word.\nfunc len_log(list1 []string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "tests": "func TestLen_Log(t *testing.T) {\n  candidate := len_log\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"python\", \"PHP\", \"bigdata\"}), expected: 7 },\n     { actual: candidate([]string{\"a\", \"ab\", \"abc\"}), expected: 3 },\n     { actual: candidate([]string{\"small\", \"big\", \"tall\"}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_91_find_substring", "language": "go_test.go", "prompt": "package find_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if a string is present as a substring in a given list of string values.\nfunc find_substring(str1 []string, sub_str string) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "tests": "func TestFind_Substring(t *testing.T) {\n  candidate := find_substring\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"ack\"), expected: true },\n     { actual: candidate([]string{\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"abc\"), expected: false },\n     { actual: candidate([]string{\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"ange\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_92_is_undulating", "language": "go_test.go", "prompt": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "tests": "func TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_93_power", "language": "go_test.go", "prompt": "package power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the value of 'a' to the power 'b'.\nfunc power(a int, b int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "tests": "func TestPower(t *testing.T) {\n  candidate := power\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4), expected: 81 },\n     { actual: candidate(2, 3), expected: 8 },\n     { actual: candidate(5, 5), expected: 3125 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_94_index_minimum", "language": "go_test.go", "prompt": "package index_minimum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of lists, write a function that returns the first value of the list with the smallest second value.\nfunc index_minimum(test_list [][]interface{}) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "tests": "func TestIndex_Minimum(t *testing.T) {\n  candidate := index_minimum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Rash\", 143}, []interface{}{\"Manjeet\", 200}, []interface{}{\"Varsha\", 100}}), expected: \"Varsha\" },\n     { actual: candidate([][]int{[]interface{}{\"Yash\", 185}, []interface{}{\"Dawood\", 125}, []interface{}{\"Sanya\", 175}}), expected: \"Dawood\" },\n     { actual: candidate([][]int{[]interface{}{\"Sai\", 345}, []interface{}{\"Salman\", 145}, []interface{}{\"Ayesha\", 96}}), expected: \"Ayesha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_95_Find_Min_Length", "language": "go_test.go", "prompt": "package Find_Min_Length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst [][]int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "tests": "func TestFind_Min_Length(t *testing.T) {\n  candidate := Find_Min_Length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}}), expected: 1 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{1, 2, 3}, []int{1, 2, 3, 4}}), expected: 2 },\n     { actual: candidate([][]int{[]int{3, 3, 3}, []int{4, 4, 4, 4}}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_96_divisor", "language": "go_test.go", "prompt": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "tests": "func TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_97_frequency_lists", "language": "go_test.go", "prompt": "package frequency_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find frequency of each element in a flattened list of lists, returned in a map.\nfunc frequency_lists(list1 [][]int) map[int]int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "tests": "func TestFrequency_Lists(t *testing.T) {\n  candidate := frequency_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3, 2}, []int{4, 5, 6, 2}, []int{7, 8, 9, 5}}), expected: map[int]int{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12}}), expected: map[int]int{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1} },\n     { actual: candidate([][]int{[]int{20, 30, 40, 17}, []int{18, 16, 14, 13}, []int{10, 20, 30, 40}}), expected: map[int]int{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_99_decimal_to_binary", "language": "go_test.go", "prompt": "package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunc decimal_to_binary(n int) string {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "func TestDecimal_To_Binary(t *testing.T) {\n  candidate := decimal_to_binary\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8), expected: \"1000\" },\n     { actual: candidate(18), expected: \"10010\" },\n     { actual: candidate(7), expected: \"111\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
{"name": "mbpp_9_find_Rotations", "language": "go_test.go", "prompt": "package find_Rotations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum number of rotations (greater than 0) required to get the same string.\nfunc find_Rotations(str string) int {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "tests": "func TestFind_Rotations(t *testing.T) {\n  candidate := find_Rotations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aaaa\"), expected: 1 },\n     { actual: candidate(\"ab\"), expected: 2 },\n     { actual: candidate(\"abc\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n", "stop_tokens": ["\nfunc", "struct", "\n// "]}
