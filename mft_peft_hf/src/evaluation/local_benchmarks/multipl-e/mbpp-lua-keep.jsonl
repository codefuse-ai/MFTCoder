{"name": "mbpp_100_next_smallest_palindrome", "language": "lua", "prompt": "-- \tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nlocal function next_smallest_palindrome(num)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest_palindrome\n    lu.assertEquals(candidate(99), 101)\n    lu.assertEquals(candidate(1221), 1331)\n    lu.assertEquals(candidate(120), 121)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_101_kth_element", "language": "lua", "prompt": "-- \tWrite a function to find the kth element in the given array using 1-based indexing.\nlocal function kth_element(arr, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_102_snake_to_camel", "language": "lua", "prompt": "-- \tWrite a function to convert a snake case string to camel case string.\nlocal function snake_to_camel(word)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('python_program'), 'PythonProgram')\n    lu.assertEquals(candidate('python_language'), 'PythonLanguage')\n    lu.assertEquals(candidate('programming_language'), 'ProgrammingLanguage')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_103_eulerian_num", "language": "lua", "prompt": "-- \tWrite a function to find the Eulerian number a(n, m).\nlocal function eulerian_num(n, m)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eulerian_num\n    lu.assertEquals(candidate(3, 1), 4)\n    lu.assertEquals(candidate(4, 1), 11)\n    lu.assertEquals(candidate(5, 3), 26)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_104_sort_sublists", "language": "lua", "prompt": "-- \tWrite a function to sort each sublist of strings in a given list of lists.\nlocal function sort_sublists(input_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{' red ', 'green'}, {'blue ', ' black'}, {' orange', 'brown'}}), {{' red ', 'green'}, {' black', 'blue '}, {' orange', 'brown'}})\n    lu.assertEquals(candidate({{'zilver', 'gold'}, {'magnesium', 'aluminium'}, {'steel', 'bronze'}}), {{'gold', 'zilver'}, {'aluminium', 'magnesium'}, {'bronze', 'steel'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_105_count", "language": "lua", "prompt": "-- \tWrite a python function to count true booleans in the given list.\nlocal function count(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count\n    lu.assertEquals(candidate({true, false, true}), 2)\n    lu.assertEquals(candidate({false, false}), 0)\n    lu.assertEquals(candidate({true, true, true}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_106_add_lists", "language": "lua", "prompt": "-- \tWrite a function to append the given list to the given tuples.\nlocal function add_lists(test_list, test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_lists\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {9, 10, 5, 6, 7})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {10, 11, 6, 7, 8})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_108_merge_sorted_list", "language": "lua", "prompt": "-- \tWrite a function to merge three lists into a single sorted list.\nlocal function merge_sorted_list(num1, num2, num3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge_sorted_list\n    lu.assertEquals(candidate({25, 24, 15, 4, 5, 29, 110}, {19, 20, 11, 56, 25, 233, 154}, {24, 26, 54, 48}), {4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233})\n    lu.assertEquals(candidate({1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}), {1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12})\n    lu.assertEquals(candidate({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, {25, 35, 22, 85, 14, 65, 75, 25, 58}, {12, 74, 9, 50, 61, 41}), {1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_109_odd_Equivalent", "language": "lua", "prompt": "-- \tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nlocal function odd_Equivalent(s, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_Equivalent\n    lu.assertEquals(candidate('011001', 6), 3)\n    lu.assertEquals(candidate('11011', 5), 4)\n    lu.assertEquals(candidate('1010', 4), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_113_check_integer", "language": "lua", "prompt": "-- \tWrite a function to check if a string represents an integer or not.\nlocal function check_integer(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_integer\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('1'), true)\n    lu.assertEquals(candidate('12345'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_115_empty_dit", "language": "lua", "prompt": "-- \tWrite a function to check whether all dictionaries in a list are empty or not.\nlocal function empty_dit(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = empty_dit\n    lu.assertEquals(candidate({{}, {}, {}}), true)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_116_tuple_to_int", "language": "lua", "prompt": "-- \tWrite a function to convert a given tuple of positive integers into a single integer.\nlocal function tuple_to_int(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_int\n    lu.assertEquals(candidate({1, 2, 3}), 123)\n    lu.assertEquals(candidate({4, 5, 6}), 456)\n    lu.assertEquals(candidate({5, 6, 7}), 567)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_117_list_to_float", "language": "lua", "prompt": "-- \tWrite a function to convert all possible convertible elements in a list of lists to floats.\nlocal function list_to_float(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_to_float\n    lu.assertEquals(candidate({{'3', '4'}, {'1', '26.45'}, {'7.32', '8'}, {'4', '8'}}), {{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}})\n    lu.assertEquals(candidate({{'4', '4'}, {'2', '27'}, {'4.12', '9'}, {'7', '11'}}), {{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}})\n    lu.assertEquals(candidate({{'6', '78'}, {'5', '26.45'}, {'1.33', '4'}, {'82', '13'}}), {{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_118_string_to_list", "language": "lua", "prompt": "-- \tWrite a function to convert a string to a list of strings split on the space character.\nlocal function string_to_list(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_list\n    lu.assertEquals(candidate('python programming'), {'python', 'programming'})\n    lu.assertEquals(candidate('lists tuples strings'), {'lists', 'tuples', 'strings'})\n    lu.assertEquals(candidate('write a program'), {'write', 'a', 'program'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_119_search", "language": "lua", "prompt": "-- \tWrite a python function to find the element that appears only once in a sorted array.\nlocal function search(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n    lu.assertEquals(candidate({1, 1, 2, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), 8)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4, 4}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_11_remove_Occ", "language": "lua", "prompt": "-- \tWrite a python function to remove first and last occurrence of a given character from the string.\nlocal function remove_Occ(s, ch)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_Occ\n    lu.assertEquals(candidate('hello', 'l'), 'heo')\n    lu.assertEquals(candidate('abcda', 'a'), 'bcd')\n    lu.assertEquals(candidate('PHP', 'P'), 'H')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_120_max_product_tuple", "language": "lua", "prompt": "-- \tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nlocal function max_product_tuple(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 36)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 200)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 484)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "lua", "prompt": "-- \tWrite a function to sum all amicable numbers from 1 to a specified number.\nlocal function amicable_numbers_sum(limit)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = amicable_numbers_sum\n    lu.assertEquals(candidate(999), 504)\n    lu.assertEquals(candidate(9999), 31626)\n    lu.assertEquals(candidate(99), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_125_find_length", "language": "lua", "prompt": "-- \tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_126_sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of common divisors of two given numbers.\nlocal function sum(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum\n    lu.assertEquals(candidate(10, 15), 6)\n    lu.assertEquals(candidate(100, 150), 93)\n    lu.assertEquals(candidate(4, 6), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_127_multiply_int", "language": "lua", "prompt": "-- \tWrite a function to multiply two integers.\nlocal function multiply_int(x, y)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_int\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(5, 10), 50)\n    lu.assertEquals(candidate(4, 8), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_128_long_words", "language": "lua", "prompt": "-- \tWrite a function to find words that are longer than n characters from a given list of words.\nlocal function long_words(n, str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = long_words\n    lu.assertEquals(candidate(3, 'python is a programming language'), {'python', 'programming', 'language'})\n    lu.assertEquals(candidate(2, 'writing a program'), {'writing', 'program'})\n    lu.assertEquals(candidate(5, 'sorting list'), {'sorting'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_129_magic_square_test", "language": "lua", "prompt": "-- \tWrite a function to calculate whether the matrix is a magic square.\nlocal function magic_square_test(my_matrix)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = magic_square_test\n    lu.assertEquals(candidate({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}), true)\n    lu.assertEquals(candidate({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_12_sort_matrix", "language": "lua", "prompt": "-- \tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nlocal function sort_matrix(M)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_matrix\n    lu.assertEquals(candidate({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}), {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}})\n    lu.assertEquals(candidate({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}), {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}})\n    lu.assertEquals(candidate({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}), {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_130_max_occurrences", "language": "lua", "prompt": "-- \tWrite a function to find the item with maximum frequency in a given list.\nlocal function max_occurrences(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_131_reverse_vowels", "language": "lua", "prompt": "-- \tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_132_tup_string", "language": "lua", "prompt": "-- \tWrite a function to convert a list to a string.\nlocal function tup_string(tup1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tup_string\n    lu.assertEquals(candidate({'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'}), 'exercises')\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}), 'python')\n    lu.assertEquals(candidate({'p', 'r', 'o', 'g', 'r', 'a', 'm'}), 'program')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_133_sum_negativenum", "language": "lua", "prompt": "-- \tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nlocal function sum_negativenum(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_negativenum\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), -32)\n    lu.assertEquals(candidate({10, 15, -14, 13, -18, 12, -20}), -52)\n    lu.assertEquals(candidate({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}), -894)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_135_hexagonal_num", "language": "lua", "prompt": "-- \tWrite a function to find the nth hexagonal number.\nlocal function hexagonal_num(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hexagonal_num\n    lu.assertEquals(candidate(10), 190)\n    lu.assertEquals(candidate(5), 45)\n    lu.assertEquals(candidate(7), 91)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "lua", "prompt": "-- \tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nlocal function is_Sum_Of_Powers_Of_Two(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sum_Of_Powers_Of_Two\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(7), false)\n    lu.assertEquals(candidate(14), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_141_pancake_sort", "language": "lua", "prompt": "-- \tWrite a function to sort a list of elements.\nlocal function pancake_sort(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pancake_sort\n    lu.assertEquals(candidate({15, 79, 25, 38, 69}), {15, 25, 38, 69, 79})\n    lu.assertEquals(candidate({98, 12, 54, 36, 85}), {12, 36, 54, 85, 98})\n    lu.assertEquals(candidate({41, 42, 32, 12, 23}), {12, 23, 32, 41, 42})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_142_count_samepair", "language": "lua", "prompt": "-- \tWrite a function to count number items that are identical in the same position of three given lists.\nlocal function count_samepair(list1, list2, list3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_samepair\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}, {2, 1, 3, 1, 2, 6, 7, 9}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 2, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 8}, {2, 1, 3, 1, 2, 6, 7, 8}), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_143_find_lists", "language": "lua", "prompt": "-- \tWrite a function to find number of lists present in the given list.\nlocal function find_lists(Input)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_lists\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}}), 2)\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}}), 3)\n    lu.assertEquals(candidate({9, 8, 7, 6, 5, 4, 3, 2, 1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "lua", "prompt": "-- \tWrite a python function to find the maximum difference between any two elements in a given array.\nlocal function max_Abs_Diff(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Abs_Diff\n    lu.assertEquals(candidate({2, 1, 5, 3}), 4)\n    lu.assertEquals(candidate({9, 3, 2, 5, 1}), 8)\n    lu.assertEquals(candidate({3, 2, 1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_14_find_Volume", "language": "lua", "prompt": "-- \tWrite a python function to find the volume of a triangular prism.\nlocal function find_Volume(l, b, h)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Volume\n    lu.assertEquals(candidate(10, 8, 6), 240)\n    lu.assertEquals(candidate(3, 2, 2), 6)\n    lu.assertEquals(candidate(1, 2, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_160_find_solution", "language": "lua", "prompt": "-- \tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nlocal function find_solution(a, b, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_solution\n    lu.assertEquals(candidate(2, 3, 7), {2, 1})\n    lu.assertEquals(candidate(4, 2, 7), None)\n    lu.assertEquals(candidate(1, 13, 17), {4, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_161_remove_elements", "language": "lua", "prompt": "-- \tWrite a function to remove all elements from a given list present in another list.\nlocal function remove_elements(list1, list2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_elements\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7}), {2, 4, 6, 8, 9, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7}), {1, 2, 3, 4, 6, 8, 9, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_162_sum_series", "language": "lua", "prompt": "-- \tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nlocal function sum_series(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_series\n    lu.assertEquals(candidate(6), 12)\n    lu.assertEquals(candidate(10), 30)\n    lu.assertEquals(candidate(9), 25)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_164_are_equivalent", "language": "lua", "prompt": "-- \tWrite a function to determine if the sum of the divisors of two integers are the same.\nlocal function are_equivalent(num1, num2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = are_equivalent\n    lu.assertEquals(candidate(36, 57), false)\n    lu.assertEquals(candidate(2, 4), false)\n    lu.assertEquals(candidate(23, 47), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_165_count_char_position", "language": "lua", "prompt": "-- \tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nlocal function count_char_position(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_char_position\n    lu.assertEquals(candidate('xbcefg'), 2)\n    lu.assertEquals(candidate('ABcED'), 3)\n    lu.assertEquals(candidate('AbgdeF'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_166_find_even_pair", "language": "lua", "prompt": "-- \tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nlocal function find_even_pair(A)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_even_pair\n    lu.assertEquals(candidate({5, 4, 7, 2, 1}), 4)\n    lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}), 9)\n    lu.assertEquals(candidate({1, 2, 3}), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_167_next_power_of_2", "language": "lua", "prompt": "-- \tWrite a python function to find the smallest power of 2 greater than or equal to n.\nlocal function next_power_of_2(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_power_of_2\n    lu.assertEquals(candidate(0), 1)\n    lu.assertEquals(candidate(5), 8)\n    lu.assertEquals(candidate(17), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_168_frequency", "language": "lua", "prompt": "-- \tWrite a function to count the number of occurrences of a number in a given list.\nlocal function frequency(a, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = frequency\n    lu.assertEquals(candidate({1, 2, 3}, 4), 0)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 3, 4}, 3), 3)\n    lu.assertEquals(candidate({0, 1, 2, 3, 1, 2}, 1), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "lua", "prompt": "-- \tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nlocal function text_lowercase_underscore(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_lowercase_underscore\n    lu.assertEquals(candidate('aab_cbbbc'), true)\n    lu.assertEquals(candidate('aab_Abbbc'), false)\n    lu.assertEquals(candidate('Aaab_abbbc'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_170_sum_range_list", "language": "lua", "prompt": "-- \tWrite a function to find the sum of numbers in a list within a range specified by two indices.\nlocal function sum_range_list(list1, m, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_range_list\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 8, 10), 29)\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 5, 7), 16)\n    lu.assertEquals(candidate({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}, 7, 10), 38)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "lua", "prompt": "-- \tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nlocal function perimeter_pentagon(a)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perimeter_pentagon\n    lu.assertEquals(candidate(5), 25)\n    lu.assertEquals(candidate(10), 50)\n    lu.assertEquals(candidate(15), 75)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_172_count_occurance", "language": "lua", "prompt": "-- \tWrite a function to count the number of occurence of the string 'std' in a given string.\nlocal function count_occurance(s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_occurance\n    lu.assertEquals(candidate('letstdlenstdporstd'), 3)\n    lu.assertEquals(candidate('truststdsolensporsd'), 1)\n    lu.assertEquals(candidate('makestdsostdworthit'), 2)\n    lu.assertEquals(candidate('stds'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_17_square_perimeter", "language": "lua", "prompt": "-- \tWrite a function that returns the perimeter of a square given its side length as input.\nlocal function square_perimeter(a)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_perimeter\n    lu.assertEquals(candidate(10), 40)\n    lu.assertEquals(candidate(5), 20)\n    lu.assertEquals(candidate(4), 16)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "lua", "prompt": "-- \tWrite a function to remove characters from the first string which are present in the second string.\nlocal function remove_dirty_chars(string, second_string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_dirty_chars\n    lu.assertEquals(candidate('probasscurve', 'pros'), 'bacuve')\n    lu.assertEquals(candidate('digitalindia', 'talent'), 'digiidi')\n    lu.assertEquals(candidate('exoticmiles', 'toxic'), 'emles')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_19_test_duplicate", "language": "lua", "prompt": "-- \tWrite a function to find whether a given array of integers contains any duplicate element.\nlocal function test_duplicate(arraynums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = test_duplicate\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 4}), true)\n    lu.assertEquals(candidate({1, 1, 2, 2, 3, 3, 4, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_20_is_woodall", "language": "lua", "prompt": "-- \tWrite a function to check if the given number is woodball or not.\nlocal function is_woodall(x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_woodall\n    lu.assertEquals(candidate(383), true)\n    lu.assertEquals(candidate(254), false)\n    lu.assertEquals(candidate(200), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_222_check_type", "language": "lua", "prompt": "-- \tWrite a function to check if all the elements in tuple have same data type or not.\nlocal function check_type(test_tuple)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_type\n    lu.assertEquals(candidate({5, 6, 7, 3, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, '4'}), false)\n    lu.assertEquals(candidate({3, 2, 1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_223_is_majority", "language": "lua", "prompt": "-- \tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nlocal function is_majority(arr, n, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_majority\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 3, 10}, 7, 3), true)\n    lu.assertEquals(candidate({1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), false)\n    lu.assertEquals(candidate({1, 1, 1, 2, 2}, 5, 1), true)\n    lu.assertEquals(candidate({1, 1, 2, 2}, 5, 1), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_224_count_Set_Bits", "language": "lua", "prompt": "-- \tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nlocal function count_Set_Bits(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Set_Bits\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(4), 1)\n    lu.assertEquals(candidate(6), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_226_odd_values_string", "language": "lua", "prompt": "-- \tWrite a python function to remove the characters which have odd index values of a given string.\nlocal function odd_values_string(str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_values_string\n    lu.assertEquals(candidate('abcdef'), 'ace')\n    lu.assertEquals(candidate('python'), 'pto')\n    lu.assertEquals(candidate('data'), 'dt')\n    lu.assertEquals(candidate('lambs'), 'lms')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_227_min_of_three", "language": "lua", "prompt": "-- \tWrite a function to find minimum of three numbers.\nlocal function min_of_three(a, b, c)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_of_three\n    lu.assertEquals(candidate(10, 20, 0), 0)\n    lu.assertEquals(candidate(19, 15, 18), 15)\n    lu.assertEquals(candidate(-10, -20, -30), -30)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "lua", "prompt": "-- \tWrite a python function to check whether all the bits are unset in the given range or not.\nlocal function all_Bits_Set_In_The_Given_Range(n, l, r)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_Bits_Set_In_The_Given_Range\n    lu.assertEquals(candidate(4, 1, 2), true)\n    lu.assertEquals(candidate(17, 2, 4), true)\n    lu.assertEquals(candidate(39, 4, 6), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_229_re_arrange_array", "language": "lua", "prompt": "-- \tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nlocal function re_arrange_array(arr, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = re_arrange_array\n    lu.assertEquals(candidate({-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), {-1, -3, -7, 4, 5, 6, 2, 8, 9})\n    lu.assertEquals(candidate({12, -14, -26, 13, 15}, 5), {-14, -26, 12, 13, 15})\n    lu.assertEquals(candidate({10, 24, 36, -42, -39, -78, 85}, 7), {-42, -39, -78, 10, 24, 36, 85})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_230_replace_blank", "language": "lua", "prompt": "-- \tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nlocal function replace_blank(str1, char)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_blank\n    lu.assertEquals(candidate('hello people', '@'), 'hello@people')\n    lu.assertEquals(candidate('python program language', '$'), 'python$program$language')\n    lu.assertEquals(candidate('blank space', '-'), 'blank-space')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_234_volume_cube", "language": "lua", "prompt": "-- \tWrite a function to find the volume of a cube given its side length.\nlocal function volume_cube(l)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = volume_cube\n    lu.assertEquals(candidate(3), 27)\n    lu.assertEquals(candidate(2), 8)\n    lu.assertEquals(candidate(5), 125)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_237_check_occurences", "language": "lua", "prompt": "-- \tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nlocal function check_occurences(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_occurences\n    lu.assertEquals(candidate({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}), {[{1, 3}] = 2, [{2, 5}] = 2, [{3, 6}] = 1})\n    lu.assertEquals(candidate({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}), {[{2, 4}] = 2, [{3, 6}] = 2, [{4, 7}] = 1})\n    lu.assertEquals(candidate({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}), {[{2, 13}] = 1, [{11, 23}] = 1, [{12, 25}] = 2, [{16, 23}] = 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_238_number_of_substrings", "language": "lua", "prompt": "-- \tWrite a python function to count the number of non-empty substrings of a given string.\nlocal function number_of_substrings(str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = number_of_substrings\n    lu.assertEquals(candidate('abc'), 6)\n    lu.assertEquals(candidate('abcd'), 10)\n    lu.assertEquals(candidate('abcde'), 15)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "lua", "prompt": "-- \tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlocal function get_total_number_of_sequences(m, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_total_number_of_sequences\n    lu.assertEquals(candidate(10, 4), 4)\n    lu.assertEquals(candidate(5, 2), 6)\n    lu.assertEquals(candidate(16, 3), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_240_replace_list", "language": "lua", "prompt": "-- \tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nlocal function replace_list(list1, list2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_list\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 10}, {2, 4, 6, 8}), {1, 3, 5, 7, 9, 2, 4, 6, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8}), {1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({'red', 'blue', 'green'}, {'yellow'}), {'red', 'blue', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_242_count_charac", "language": "lua", "prompt": "-- \tWrite a function to count the total number of characters in a string.\nlocal function count_charac(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_charac\n    lu.assertEquals(candidate('python programming'), 18)\n    lu.assertEquals(candidate('language'), 8)\n    lu.assertEquals(candidate('words'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "lua", "prompt": "-- \tWrite a python function to find the next perfect square greater than a given number.\nlocal function next_Perfect_Square(N)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_Perfect_Square\n    lu.assertEquals(candidate(35), 36)\n    lu.assertEquals(candidate(6), 9)\n    lu.assertEquals(candidate(9), 16)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_245_max_sum", "language": "lua", "prompt": "-- \tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_247_lps", "language": "lua", "prompt": "-- \tWrite a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_249_intersection_array", "language": "lua", "prompt": "-- \tWrite a function to find the intersection of two arrays.\nlocal function intersection_array(array_nums1, array_nums2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection_array\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {1, 2, 4, 8, 9}), {1, 2, 8, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {3, 5, 7, 9}), {3, 5, 7, 9})\n    lu.assertEquals(candidate({1, 2, 3, 5, 7, 8, 9, 10}, {10, 20, 30, 40}), {10})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_250_count_X", "language": "lua", "prompt": "-- \tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\nlocal function count_X(tup, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_X\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4), 0)\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10), 3)\n    lu.assertEquals(candidate({10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_251_insert_element", "language": "lua", "prompt": "-- \tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nlocal function insert_element(list, element)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = insert_element\n    lu.assertEquals(candidate({'Red', 'Green', 'Black'}, 'c'), {'c', 'Red', 'c', 'Green', 'c', 'Black'})\n    lu.assertEquals(candidate({'python', 'java'}, 'program'), {'program', 'python', 'program', 'java'})\n    lu.assertEquals(candidate({'happy', 'sad'}, 'laugh'), {'laugh', 'happy', 'laugh', 'sad'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_252_convert", "language": "lua", "prompt": "-- \tWrite a python function to convert complex numbers to polar coordinates.\nlocal function convert(numbers)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert\n    lu.assertEquals(candidate(1), {1.0, 0.0})\n    lu.assertEquals(candidate(4), {4.0, 0.0})\n    lu.assertEquals(candidate(5), {5.0, 0.0})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_253_count_integer", "language": "lua", "prompt": "-- \tWrite a python function that returns the number of integer elements in a given list.\nlocal function count_integer(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_integer\n    lu.assertEquals(candidate({1, 2, 'abc', 1.2}), 2)\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 1.2, 4, 5.1}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_255_combinations_colors", "language": "lua", "prompt": "-- \tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\nlocal function combinations_colors(l, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_colors\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 1), {{'Red'}, {'Green'}, {'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 2), {{'Red', 'Red'}, {'Red', 'Green'}, {'Red', 'Blue'}, {'Green', 'Green'}, {'Green', 'Blue'}, {'Blue', 'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 3), {{'Red', 'Red', 'Red'}, {'Red', 'Red', 'Green'}, {'Red', 'Red', 'Blue'}, {'Red', 'Green', 'Green'}, {'Red', 'Green', 'Blue'}, {'Red', 'Blue', 'Blue'}, {'Green', 'Green', 'Green'}, {'Green', 'Green', 'Blue'}, {'Green', 'Blue', 'Blue'}, {'Blue', 'Blue', 'Blue'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_256_count_Primes_nums", "language": "lua", "prompt": "-- \tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nlocal function count_Primes_nums(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Primes_nums\n    lu.assertEquals(candidate(5), 2)\n    lu.assertEquals(candidate(10), 4)\n    lu.assertEquals(candidate(100), 25)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_257_swap_numbers", "language": "lua", "prompt": "-- \tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\nlocal function swap_numbers(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_numbers\n    lu.assertEquals(candidate(10, 20), {20, 10})\n    lu.assertEquals(candidate(15, 17), {17, 15})\n    lu.assertEquals(candidate(100, 200), {200, 100})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_259_maximize_elements", "language": "lua", "prompt": "-- \tWrite a function to maximize the given two lists.\nlocal function maximize_elements(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximize_elements\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 7}, {4, 9}, {2, 9}, {7, 10}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{7, 8}, {5, 10}, {3, 10}, {8, 11}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{8, 9}, {6, 11}, {4, 11}, {9, 12}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_260_newman_prime", "language": "lua", "prompt": "-- \tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nlocal function newman_prime(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = newman_prime\n    lu.assertEquals(candidate(3), 7)\n    lu.assertEquals(candidate(4), 17)\n    lu.assertEquals(candidate(5), 41)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_261_division_elements", "language": "lua", "prompt": "-- \tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nlocal function division_elements(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = division_elements\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {2, 2, 2, 3})\n    lu.assertEquals(candidate({12, 6, 8, 16}, {6, 3, 4, 4}), {2, 2, 2, 4})\n    lu.assertEquals(candidate({20, 14, 36, 18}, {5, 7, 6, 9}), {4, 2, 6, 2})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_262_split_two_parts", "language": "lua", "prompt": "-- \tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nlocal function split_two_parts(list1, L)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_two_parts\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {{1, 1, 2}, {3, 4, 4, 5, 1}})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 2), {{'a', 'b'}, {'c', 'd'}})\n    lu.assertEquals(candidate({'p', 'y', 't', 'h', 'o', 'n'}, 4), {{'p', 'y', 't', 'h'}, {'o', 'n'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_264_dog_age", "language": "lua", "prompt": "-- \tWrite a function to calculate a dog's age in dog's years.\nlocal function dog_age(h_age)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dog_age\n    lu.assertEquals(candidate(12), 61)\n    lu.assertEquals(candidate(15), 73)\n    lu.assertEquals(candidate(24), 109)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_265_list_split", "language": "lua", "prompt": "-- \tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nlocal function list_split(S, step)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_split\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3), {{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, 3), {{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}})\n    lu.assertEquals(candidate({'python', 'java', 'C', 'C++', 'DBMS', 'SQL'}, 2), {{'python', 'C', 'DBMS'}, {'java', 'C++', 'SQL'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "lua", "prompt": "-- \tWrite a function to find the lateral surface area of a cube given its side length.\nlocal function lateralsurface_cube(l)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lateralsurface_cube\n    lu.assertEquals(candidate(5), 100)\n    lu.assertEquals(candidate(9), 324)\n    lu.assertEquals(candidate(10), 400)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_267_square_Sum", "language": "lua", "prompt": "-- \tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nlocal function square_Sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_Sum\n    lu.assertEquals(candidate(2), 10)\n    lu.assertEquals(candidate(3), 35)\n    lu.assertEquals(candidate(4), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_268_find_star_num", "language": "lua", "prompt": "-- \tWrite a function to find the n'th star number.\nlocal function find_star_num(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_star_num\n    lu.assertEquals(candidate(3), 37)\n    lu.assertEquals(candidate(4), 73)\n    lu.assertEquals(candidate(5), 121)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_269_ascii_value", "language": "lua", "prompt": "-- \tWrite a function to find the ascii value of a character.\nlocal function ascii_value(k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = ascii_value\n    lu.assertEquals(candidate('A'), 65)\n    lu.assertEquals(candidate('R'), 82)\n    lu.assertEquals(candidate('S'), 83)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of even numbers at even positions of a list.\nlocal function sum_even_and_even_index(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_even_and_even_index\n    lu.assertEquals(candidate({5, 6, 12, 1, 18, 8}), 30)\n    lu.assertEquals(candidate({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}), 26)\n    lu.assertEquals(candidate({5, 6, 12, 1}), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_271_even_Power_Sum", "language": "lua", "prompt": "-- \tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nlocal function even_Power_Sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_Power_Sum\n    lu.assertEquals(candidate(2), 1056)\n    lu.assertEquals(candidate(3), 8832)\n    lu.assertEquals(candidate(1), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_272_rear_extract", "language": "lua", "prompt": "-- \tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nlocal function rear_extract(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rear_extract\n    lu.assertEquals(candidate({{1, 'Rash', 21}, {2, 'Varsha', 20}, {3, 'Kil', 19}}), {21, 20, 19})\n    lu.assertEquals(candidate({{1, 'Sai', 36}, {2, 'Ayesha', 25}, {3, 'Salman', 45}}), {36, 25, 45})\n    lu.assertEquals(candidate({{1, 'Sudeep', 14}, {2, 'Vandana', 36}, {3, 'Dawood', 56}}), {14, 36, 56})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_273_substract_elements", "language": "lua", "prompt": "-- \tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nlocal function substract_elements(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = substract_elements\n    lu.assertEquals(candidate({10, 4, 5}, {2, 5, 18}), {8, -1, -13})\n    lu.assertEquals(candidate({11, 2, 3}, {24, 45, 16}), {-13, -43, -13})\n    lu.assertEquals(candidate({7, 18, 9}, {10, 11, 12}), {-3, 7, -3})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "lua", "prompt": "-- \tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nlocal function even_binomial_Coeff_Sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_binomial_Coeff_Sum\n    lu.assertEquals(candidate(4), 8)\n    lu.assertEquals(candidate(6), 32)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_277_dict_filter", "language": "lua", "prompt": "-- \tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nlocal function dict_filter(dict, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_filter\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 170), {['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 180), {['Alden Cantrell'] = 180, ['Pierre Cox'] = 190})\n    lu.assertEquals(candidate({['Cierra Vega'] = 175, ['Alden Cantrell'] = 180, ['Kierra Gentry'] = 165, ['Pierre Cox'] = 190}, 190), {['Pierre Cox'] = 190})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_278_count_first_elements", "language": "lua", "prompt": "-- \tWrite a function to find the number of elements that occurs before the list element in the given tuple.\nlocal function count_first_elements(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_first_elements\n    lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), 3)\n    lu.assertEquals(candidate({2, 9, {5, 7}, 11}), 2)\n    lu.assertEquals(candidate({11, 15, 5, 8, {2, 3}, 8}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_279_is_num_decagonal", "language": "lua", "prompt": "-- \tWrite a function to find the nth decagonal number.\nlocal function is_num_decagonal(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_num_decagonal\n    lu.assertEquals(candidate(3), 27)\n    lu.assertEquals(candidate(7), 175)\n    lu.assertEquals(candidate(10), 370)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_280_sequential_search", "language": "lua", "prompt": "-- \tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nlocal function sequential_search(dlist, item)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sequential_search\n    lu.assertEquals(candidate({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31), {true, 3})\n    lu.assertEquals(candidate({12, 32, 45, 62, 35, 47, 44, 61}, 61), {true, 7})\n    lu.assertEquals(candidate({9, 10, 17, 19, 22, 39, 48, 56}, 48), {true, 6})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_281_all_unique", "language": "lua", "prompt": "-- \tWrite a python function to check if the elements of a given list are unique or not.\nlocal function all_unique(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_unique\n    lu.assertEquals(candidate({1, 2, 3}), true)\n    lu.assertEquals(candidate({1, 2, 1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_282_sub_list", "language": "lua", "prompt": "-- \tWrite a function to subtract two lists element-wise.\nlocal function sub_list(nums1, nums2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sub_list\n    lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), {-3, -3, -3})\n    lu.assertEquals(candidate({1, 2}, {3, 4}), {-2, -2})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {40, 50})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_283_validate", "language": "lua", "prompt": "-- \tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nlocal function validate(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = validate\n    lu.assertEquals(candidate(1234), true)\n    lu.assertEquals(candidate(51241), false)\n    lu.assertEquals(candidate(321), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_284_check_element", "language": "lua", "prompt": "-- \tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nlocal function check_element(list, element)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_element\n    lu.assertEquals(candidate({'green', 'orange', 'black', 'white'}, 'blue'), false)\n    lu.assertEquals(candidate({1, 2, 3, 4}, 7), false)\n    lu.assertEquals(candidate({'green', 'green', 'green', 'green'}, 'green'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_285_text_match_two_three", "language": "lua", "prompt": "-- \tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nlocal function text_match_two_three(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_two_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "lua", "prompt": "-- \tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nlocal function max_sub_array_sum_repeated(a, n, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum_repeated\n    lu.assertEquals(candidate({10, 20, -30, -1}, 4, 3), 30)\n    lu.assertEquals(candidate({-1, 10, 20}, 3, 2), 59)\n    lu.assertEquals(candidate({-1, -2, -3}, 3, 3), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_287_square_Sum", "language": "lua", "prompt": "-- \tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nlocal function square_Sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_Sum\n    lu.assertEquals(candidate(2), 20)\n    lu.assertEquals(candidate(3), 56)\n    lu.assertEquals(candidate(4), 120)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_290_max_length", "language": "lua", "prompt": "-- \tWrite a function to find the list of maximum length in a list of lists.\nlocal function max_length(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_length\n    lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})\n    lu.assertEquals(candidate({{1}, {5, 7}, {10, 12, 14, 15}}), {4, {10, 12, 14, 15}})\n    lu.assertEquals(candidate({{5}, {15, 20, 25}}), {3, {15, 20, 25}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_291_count_no_of_ways", "language": "lua", "prompt": "-- \tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nlocal function count_no_of_ways(n, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_no_of_ways\n    lu.assertEquals(candidate(2, 4), 16)\n    lu.assertEquals(candidate(3, 2), 6)\n    lu.assertEquals(candidate(4, 4), 228)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_292_find", "language": "lua", "prompt": "-- \tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nlocal function find(n, m)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find\n    lu.assertEquals(candidate(10, 3), 3)\n    lu.assertEquals(candidate(4, 2), 2)\n    lu.assertEquals(candidate(20, 5), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_293_otherside_rightangle", "language": "lua", "prompt": "-- \tWrite a function to find the third side of a right angled triangle.\nlocal function otherside_rightangle(w, h)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = otherside_rightangle\n    lu.assertEquals(candidate(7, 8), 10.63014581273465)\n    lu.assertEquals(candidate(3, 4), 5)\n    lu.assertEquals(candidate(7, 15), 16.55294535724685)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_294_max_val", "language": "lua", "prompt": "-- \tWrite a function to find the maximum value in a given heterogeneous list.\nlocal function max_val(listval)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_val\n    lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 5)\n    lu.assertEquals(candidate({'Python', 15, 20, 25}), 25)\n    lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 50)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_295_sum_div", "language": "lua", "prompt": "-- \tWrite a function to return the sum of all divisors of a number.\nlocal function sum_div(number)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_div\n    lu.assertEquals(candidate(8), 7)\n    lu.assertEquals(candidate(12), 16)\n    lu.assertEquals(candidate(7), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_296_get_Inv_Count", "language": "lua", "prompt": "-- \tWrite a python function to count inversions in an array.\nlocal function get_Inv_Count(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Inv_Count\n    lu.assertEquals(candidate({1, 20, 6, 4, 5}), 5)\n    lu.assertEquals(candidate({1, 2, 1}), 1)\n    lu.assertEquals(candidate({1, 2, 5, 6, 1}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_297_flatten_list", "language": "lua", "prompt": "-- \tWrite a function to flatten a given nested list structure.\nlocal function flatten_list(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flatten_list\n    lu.assertEquals(candidate({0, 10, {20, 30}, 40, 50, {60, 70, 80}, {90, 100, 110, 120}}), {0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120})\n    lu.assertEquals(candidate({{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}}), {10, 20, 40, 30, 56, 25, 10, 20, 33, 40})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_299_max_aggregate", "language": "lua", "prompt": "-- \tWrite a function to calculate the maximum aggregate from the list of tuples.\nlocal function max_aggregate(stdata)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_aggregate\n    lu.assertEquals(candidate({{'Juan Whelan', 90}, {'Sabah Colley', 88}, {'Peter Nichols', 7}, {'Juan Whelan', 122}, {'Sabah Colley', 84}}), {'Juan Whelan', 212})\n    lu.assertEquals(candidate({{'Juan Whelan', 50}, {'Sabah Colley', 48}, {'Peter Nichols', 37}, {'Juan Whelan', 22}, {'Sabah Colley', 14}}), {'Juan Whelan', 72})\n    lu.assertEquals(candidate({{'Juan Whelan', 10}, {'Sabah Colley', 20}, {'Peter Nichols', 30}, {'Juan Whelan', 40}, {'Sabah Colley', 50}}), {'Sabah Colley', 70})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_304_find_Element", "language": "lua", "prompt": "-- \tWrite a python function to find element at a given index after number of rotations.\nlocal function find_Element(arr, ranges, rotations, index)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_305_start_withp", "language": "lua", "prompt": "-- \tWrite a function to return two words from a list of words starting with letter 'p'.\nlocal function start_withp(words)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = start_withp\n    lu.assertEquals(candidate({'Python PHP', 'Java JavaScript', 'c c++'}), {'Python', 'PHP'})\n    lu.assertEquals(candidate({'Python Programming', 'Java Programming'}), {'Python', 'Programming'})\n    lu.assertEquals(candidate({'Pqrst Pqr', 'qrstuv'}), {'Pqrst', 'Pqr'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "lua", "prompt": "-- \tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nlocal function max_sum_increasing_subseq(a, n, index, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_increasing_subseq\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), 11)\n    lu.assertEquals(candidate({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), 7)\n    lu.assertEquals(candidate({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), 71)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_308_large_product", "language": "lua", "prompt": "-- \tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nlocal function large_product(nums1, nums2, N)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_309_maximum", "language": "lua", "prompt": "-- \tWrite a python function to find the maximum of two numbers.\nlocal function maximum(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate(5, 10), 10)\n    lu.assertEquals(candidate(-1, -2), -1)\n    lu.assertEquals(candidate(9, 7), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_310_string_to_tuple", "language": "lua", "prompt": "-- \tWrite a function to convert a given string to a list of characters.\nlocal function string_to_tuple(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_tuple\n    lu.assertEquals(candidate('python 3.0'), {'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'})\n    lu.assertEquals(candidate('item1'), {'i', 't', 'e', 'm', '1'})\n    lu.assertEquals(candidate('15.10'), {'1', '5', '.', '1', '0'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "lua", "prompt": "-- \tWrite a python function to find the highest power of 2 that is less than or equal to n.\nlocal function highest_Power_of_2(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = highest_Power_of_2\n    lu.assertEquals(candidate(10), 8)\n    lu.assertEquals(candidate(19), 16)\n    lu.assertEquals(candidate(32), 32)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_389_find_lucas", "language": "lua", "prompt": "-- \tWrite a function to find the n'th lucas number.\nlocal function find_lucas(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_lucas\n    lu.assertEquals(candidate(9), 76)\n    lu.assertEquals(candidate(4), 7)\n    lu.assertEquals(candidate(3), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_390_add_string", "language": "lua", "prompt": "-- \tWrite a function to apply a given format string to all of the elements in a list.\nlocal function add_string(list_, string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_string\n    lu.assertEquals(candidate({1, 2, 3, 4}, 'temp{0}'), {'temp1', 'temp2', 'temp3', 'temp4'})\n    lu.assertEquals(candidate({'a', 'b', 'c', 'd'}, 'python{0}'), {'pythona', 'pythonb', 'pythonc', 'pythond'})\n    lu.assertEquals(candidate({5, 6, 7, 8}, 'string{0}'), {'string5', 'string6', 'string7', 'string8'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "lua", "prompt": "-- \tWrite a function to convert more than one list to nested dictionary.\nlocal function convert_list_dictionary(l1, l2, l3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = convert_list_dictionary\n    lu.assertEquals(candidate({'S001', 'S002', 'S003', 'S004'}, {'Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'}, {85, 98, 89, 92}), {{['S001'] = {['Adina Park'] = 85}}, {['S002'] = {['Leyton Marsh'] = 98}}, {['S003'] = {['Duncan Boyle'] = 89}}, {['S004'] = {['Saim Richards'] = 92}}})\n    lu.assertEquals(candidate({'abc', 'def', 'ghi', 'jkl'}, {'python', 'program', 'language', 'programs'}, {100, 200, 300, 400}), {{['abc'] = {['python'] = 100}}, {['def'] = {['program'] = 200}}, {['ghi'] = {['language'] = 300}}, {['jkl'] = {['programs'] = 400}}})\n    lu.assertEquals(candidate({'A1', 'A2', 'A3', 'A4'}, {'java', 'C', 'C++', 'DBMS'}, {10, 20, 30, 40}), {{['A1'] = {['java'] = 10}}, {['A2'] = {['C'] = 20}}, {['A3'] = {['C++'] = 30}}, {['A4'] = {['DBMS'] = 40}}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_392_get_max_sum", "language": "lua", "prompt": "-- \tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_393_max_length_list", "language": "lua", "prompt": "-- \tWrite a function to find the list with maximum length.\nlocal function max_length_list(input_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_length_list\n    lu.assertEquals(candidate({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), {3, {13, 15, 17}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1}}), {5, {1, 2, 3, 4, 5}})\n    lu.assertEquals(candidate({{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}}), {4, {6, 7, 8, 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_394_check_distinct", "language": "lua", "prompt": "-- \tWrite a function to check if given list contains no duplicates.\nlocal function check_distinct(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_distinct\n    lu.assertEquals(candidate({1, 4, 5, 6, 1, 4}), false)\n    lu.assertEquals(candidate({1, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "lua", "prompt": "-- \tWrite a python function to find the first non-repeated character in a given string.\nlocal function first_non_repeating_character(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_non_repeating_character\n    lu.assertEquals(candidate('abcabc'), None)\n    lu.assertEquals(candidate('abc'), 'a')\n    lu.assertEquals(candidate('ababc'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_396_check_char", "language": "lua", "prompt": "-- \tWrite a function to check whether the given string starts and ends with the same character or not.\nlocal function check_char(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_char\n    lu.assertEquals(candidate('abba'), 'Valid')\n    lu.assertEquals(candidate('a'), 'Valid')\n    lu.assertEquals(candidate('abcd'), 'Invalid')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_397_median_numbers", "language": "lua", "prompt": "-- \tWrite a function to find the median of three numbers.\nlocal function median_numbers(a, b, c)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_numbers\n    lu.assertEquals(candidate(25, 55, 65), 55.0)\n    lu.assertEquals(candidate(20, 10, 30), 20.0)\n    lu.assertEquals(candidate(15, 45, 75), 45.0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_398_sum_of_digits", "language": "lua", "prompt": "-- \tWrite a function to compute the sum of digits of each number of a given list.\nlocal function sum_of_digits(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_of_digits\n    lu.assertEquals(candidate({10, 2, 56}), 14)\n    lu.assertEquals(candidate({{10, 20, 4, 5, 'b', 70, 'a'}}), 19)\n    lu.assertEquals(candidate({10, 20, -4, 5, -70}), 19)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_399_bitwise_xor", "language": "lua", "prompt": "-- \tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nlocal function bitwise_xor(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bitwise_xor\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {15, 6, 5, 10})\n    lu.assertEquals(candidate({11, 5, 7, 10}, {6, 3, 4, 4}), {13, 6, 3, 14})\n    lu.assertEquals(candidate({12, 6, 8, 11}, {7, 4, 5, 6}), {11, 2, 13, 13})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_3_is_not_prime", "language": "lua", "prompt": "-- \tWrite a python function to identify non-prime numbers.\nlocal function is_not_prime(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_not_prime\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(35), true)\n    lu.assertEquals(candidate(37), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_400_extract_freq", "language": "lua", "prompt": "-- \tWrite a function to extract the number of unique tuples in the given list.\nlocal function extract_freq(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_freq\n    lu.assertEquals(candidate({{3, 4}, {1, 2}, {4, 3}, {5, 6}}), 3)\n    lu.assertEquals(candidate({{4, 15}, {2, 3}, {5, 4}, {6, 7}}), 4)\n    lu.assertEquals(candidate({{5, 16}, {2, 3}, {6, 5}, {6, 9}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_401_add_nested_tuples", "language": "lua", "prompt": "-- \tWrite a function to perform index wise addition of list elements in the given two nested lists.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_404_minimum", "language": "lua", "prompt": "-- \tWrite a python function to find the minimum of two numbers.\nlocal function minimum(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minimum\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(-5, -4), -5)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_405_check_tuplex", "language": "lua", "prompt": "-- \tWrite a function to check whether an element exists within a tuple.\nlocal function check_tuplex(tuplex, tuple1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_tuplex\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 'r'), true)\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, '5'), false)\n    lu.assertEquals(candidate({'w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'}, 3), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_406_find_Parity", "language": "lua", "prompt": "-- \tWrite a python function to find whether the parity of a given number is odd.\nlocal function find_Parity(x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Parity\n    lu.assertEquals(candidate(12), false)\n    lu.assertEquals(candidate(7), true)\n    lu.assertEquals(candidate(10), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_407_rearrange_bigger", "language": "lua", "prompt": "-- \tWrite a function to create the next bigger number by rearranging the digits of a given number.\nlocal function rearrange_bigger(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rearrange_bigger\n    lu.assertEquals(candidate(12), 21)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(102), 120)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "lua", "prompt": "-- \tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nlocal function k_smallest_pairs(nums1, nums2, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = k_smallest_pairs\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 2), {{1, 2}, {1, 4}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 1), {{1, 2}})\n    lu.assertEquals(candidate({1, 3, 7}, {2, 4, 6}, 7), {{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_409_min_product_tuple", "language": "lua", "prompt": "-- \tWrite a function to find the minimum product from the pairs of tuples within a given list.\nlocal function min_product_tuple(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_product_tuple\n    lu.assertEquals(candidate({{2, 7}, {2, 6}, {1, 8}, {4, 9}}), 8)\n    lu.assertEquals(candidate({{10, 20}, {15, 2}, {5, 10}}), 30)\n    lu.assertEquals(candidate({{11, 44}, {10, 15}, {20, 5}, {12, 9}}), 100)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_410_min_val", "language": "lua", "prompt": "-- \tWrite a function to find the minimum value in a given heterogeneous list.\nlocal function min_val(listval)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_val\n    lu.assertEquals(candidate({'Python', 3, 2, 4, 5, 'version'}), 2)\n    lu.assertEquals(candidate({'Python', 15, 20, 25}), 15)\n    lu.assertEquals(candidate({'Python', 30, 20, 40, 50, 'version'}), 20)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_411_snake_to_camel", "language": "lua", "prompt": "-- \tWrite a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_412_remove_odd", "language": "lua", "prompt": "-- \tWrite a python function to remove odd numbers from a given list.\nlocal function remove_odd(l)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate({1, 2, 3}), {2})\n    lu.assertEquals(candidate({2, 4, 6}), {2, 4, 6})\n    lu.assertEquals(candidate({10, 20, 3}), {10, 20})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_413_extract_nth_element", "language": "lua", "prompt": "-- \tWrite a function to extract the nth element from a given list of tuples.\nlocal function extract_nth_element(list1, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_nth_element\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 0), {'Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'})\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 2), {99, 96, 94, 98})\n    lu.assertEquals(candidate({{'Greyson Fulton', 98, 99}, {'Brady Kent', 97, 96}, {'Wyatt Knott', 91, 94}, {'Beau Turnbull', 94, 98}}, 1), {98, 97, 91, 94})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_414_overlapping", "language": "lua", "prompt": "-- \tWrite a python function to check whether any value in a sequence exists in a sequence or not.\nlocal function overlapping(list1, list2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = overlapping\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), false)\n    lu.assertEquals(candidate({1, 2, 3}, {4, 5, 6}), false)\n    lu.assertEquals(candidate({1, 4, 5}, {1, 4, 5}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_415_max_Product", "language": "lua", "prompt": "-- \tWrite a python function to find a pair with highest product from a given array of integers.\nlocal function max_Product(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_Product\n    lu.assertEquals(candidate({1, 2, 3, 4, 7, 0, 8, 4}), {7, 8})\n    lu.assertEquals(candidate({0, -1, -2, -4, 5, 0, -6}), {-4, -6})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_417_group_tuples", "language": "lua", "prompt": "-- \tWrite a function to find common first element in given list of lists.\nlocal function group_tuples(Input)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = group_tuples\n    lu.assertEquals(candidate({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}), {{'x', 'y', 'z'}, {'w', 't'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}), {{'a', 'b', 'c'}, {'d', 'e'}})\n    lu.assertEquals(candidate({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}), {{'f', 'g', 'g'}, {'h', 'i'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_418_Find_Max", "language": "lua", "prompt": "-- \tWrite a python function to find the element of a list having maximum length.\nlocal function Find_Max(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max\n    lu.assertEquals(candidate({{'A'}, {'A', 'B'}, {'A', 'B', 'C'}}), {'A', 'B', 'C'})\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1, 2, 3})\n    lu.assertEquals(candidate({{1, 1}, {1, 2, 3}, {1, 5, 6, 1}}), {1, 5, 6, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_419_round_and_sum", "language": "lua", "prompt": "-- \tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nlocal function round_and_sum(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = round_and_sum\n    lu.assertEquals(candidate({22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), 243)\n    lu.assertEquals(candidate({5, 2, 9, 24.3, 29}), 345)\n    lu.assertEquals(candidate({25.0, 56.7, 89.2}), 513)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_420_cube_Sum", "language": "lua", "prompt": "-- \tWrite a python function to find the cube sum of first n even natural numbers.\nlocal function cube_Sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cube_Sum\n    lu.assertEquals(candidate(2), 72)\n    lu.assertEquals(candidate(3), 288)\n    lu.assertEquals(candidate(4), 800)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_421_concatenate_tuple", "language": "lua", "prompt": "-- \tWrite a function to concatenate each element of tuple by the delimiter.\nlocal function concatenate_tuple(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = concatenate_tuple\n    lu.assertEquals(candidate({'ID', 'is', 4, 'UTS'}), 'ID-is-4-UTS')\n    lu.assertEquals(candidate({'QWE', 'is', 4, 'RTY'}), 'QWE-is-4-RTY')\n    lu.assertEquals(candidate({'ZEN', 'is', 4, 'OP'}), 'ZEN-is-4-OP')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "lua", "prompt": "-- \tWrite a python function to find the average of cubes of first n natural numbers.\nlocal function find_Average_Of_Cube(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Average_Of_Cube\n    lu.assertEquals(candidate(2), 4.5)\n    lu.assertEquals(candidate(3), 12)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_424_extract_rear", "language": "lua", "prompt": "-- \tWrite a function to extract only the rear index element of each string in the given tuple.\nlocal function extract_rear(test_tuple)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_rear\n    lu.assertEquals(candidate({'Mers', 'for', 'Vers'}), {'s', 'r', 's'})\n    lu.assertEquals(candidate({'Avenge', 'for', 'People'}), {'e', 'r', 'e'})\n    lu.assertEquals(candidate({'Gotta', 'get', 'go'}), {'a', 't', 'o'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_425_count_element_in_list", "language": "lua", "prompt": "-- \tWrite a function to count the number of sublists containing a particular element.\nlocal function count_element_in_list(list1, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_element_in_list\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {1, 11}, {1, 15, 7}}, 1), 3)\n    lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'A'), 3)\n    lu.assertEquals(candidate({{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'E'), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "lua", "prompt": "-- \tWrite a function to filter odd numbers.\nlocal function filter_oddnumbers(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_oddnumbers\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 3, 5, 7, 9})\n    lu.assertEquals(candidate({10, 20, 45, 67, 84, 93}), {45, 67, 93})\n    lu.assertEquals(candidate({5, 7, 9, 8, 6, 4, 3}), {5, 7, 9, 3})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_427_change_date_format", "language": "lua", "prompt": "-- \tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nlocal function change_date_format(dt)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_date_format\n    lu.assertEquals(candidate('2026-01-02'), '02-01-2026')\n    lu.assertEquals(candidate('2020-11-13'), '13-11-2020')\n    lu.assertEquals(candidate('2021-04-26'), '26-04-2021')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_428_shell_sort", "language": "lua", "prompt": "-- \tWrite a function to sort the given array by using shell sort.\nlocal function shell_sort(my_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = shell_sort\n    lu.assertEquals(candidate({12, 23, 4, 5, 3, 2, 12, 81, 56, 95}), {2, 3, 4, 5, 12, 12, 23, 56, 81, 95})\n    lu.assertEquals(candidate({24, 22, 39, 34, 87, 73, 68}), {22, 24, 34, 39, 68, 73, 87})\n    lu.assertEquals(candidate({32, 30, 16, 96, 82, 83, 74}), {16, 30, 32, 74, 82, 83, 96})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_429_and_tuples", "language": "lua", "prompt": "-- \tWrite a function to extract the elementwise and tuples from the given two tuples.\nlocal function and_tuples(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = and_tuples\n    lu.assertEquals(candidate({10, 4, 6, 9}, {5, 2, 3, 3}), {0, 0, 2, 1})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {5, 6, 7, 8}), {1, 2, 3, 0})\n    lu.assertEquals(candidate({8, 9, 11, 12}, {7, 13, 14, 17}), {0, 9, 10, 0})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_430_parabola_directrix", "language": "lua", "prompt": "-- \tWrite a function to find the directrix of a parabola.\nlocal function parabola_directrix(a, b, c)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parabola_directrix\n    lu.assertEquals(candidate(5, 3, 2), -198)\n    lu.assertEquals(candidate(9, 8, 4), -2336)\n    lu.assertEquals(candidate(2, 4, 6), -130)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_431_common_element", "language": "lua", "prompt": "-- \tWrite a function that takes two lists and returns true if they have at least one common element.\nlocal function common_element(list1, list2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common_element\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {5, 6, 7, 8, 9}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 8, 9}), None)\n    lu.assertEquals(candidate({'a', 'b', 'c'}, {'d', 'b', 'e'}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_432_median_trapezium", "language": "lua", "prompt": "-- \tWrite a function to find the median length of a trapezium.\nlocal function median_trapezium(base1, base2, height)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median_trapezium\n    lu.assertEquals(candidate(15, 25, 35), 20)\n    lu.assertEquals(candidate(10, 20, 30), 15)\n    lu.assertEquals(candidate(6, 9, 4), 7.5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_433_check_greater", "language": "lua", "prompt": "-- \tWrite a function to check whether the entered number is greater than the elements of the given array.\nlocal function check_greater(arr, number)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_greater\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, 4), false)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}, 8), true)\n    lu.assertEquals(candidate({9, 7, 4, 8, 6, 1}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_434_text_match_one", "language": "lua", "prompt": "-- \tWrite a function that matches a string that has an a followed by one or more b's.\nlocal function text_match_one(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_one\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abba'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_435_last_Digit", "language": "lua", "prompt": "-- \tWrite a python function to find the last digit of a given number.\nlocal function last_Digit(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last_Digit\n    lu.assertEquals(candidate(123), 3)\n    lu.assertEquals(candidate(25), 5)\n    lu.assertEquals(candidate(30), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_436_neg_nos", "language": "lua", "prompt": "-- \tWrite a python function to return the negative numbers in a list.\nlocal function neg_nos(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = neg_nos\n    lu.assertEquals(candidate({-1, 4, 5, -6}), {-1, -6})\n    lu.assertEquals(candidate({-1, -2, 3, 4}), {-1, -2})\n    lu.assertEquals(candidate({-7, -6, 8, 9}), {-7, -6})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_437_remove_odd", "language": "lua", "prompt": "-- \tWrite a function to remove odd characters in a string.\nlocal function remove_odd(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_odd\n    lu.assertEquals(candidate('python'), 'yhn')\n    lu.assertEquals(candidate('program'), 'rga')\n    lu.assertEquals(candidate('language'), 'agae')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_438_count_bidirectional", "language": "lua", "prompt": "-- \tWrite a function to count bidirectional tuple pairs.\nlocal function count_bidirectional(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_bidirectional\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 3)\n    lu.assertEquals(candidate({{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}}), 2)\n    lu.assertEquals(candidate({{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_439_multiple_to_single", "language": "lua", "prompt": "-- \tWrite a function to join a list of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_440_find_adverb_position", "language": "lua", "prompt": "-- \tWrite a function to find the first adverb and their positions in a given sentence.\nlocal function find_adverb_position(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_adverb_position\n    lu.assertEquals(candidate('clearly!! we can see the sky'), {0, 7, 'clearly'})\n    lu.assertEquals(candidate('seriously!! there are many roses'), {0, 9, 'seriously'})\n    lu.assertEquals(candidate('unfortunately!! sita is going to home'), {0, 13, 'unfortunately'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_441_surfacearea_cube", "language": "lua", "prompt": "-- \tWrite a function to find the surface area of a cube of a given size.\nlocal function surfacearea_cube(l)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surfacearea_cube\n    lu.assertEquals(candidate(5), 150)\n    lu.assertEquals(candidate(3), 54)\n    lu.assertEquals(candidate(10), 600)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_442_positive_count", "language": "lua", "prompt": "-- \tWrite a function to find the ration of positive numbers in an array of integers.\nlocal function positive_count(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_443_largest_neg", "language": "lua", "prompt": "-- \tWrite a python function to find the largest negative number from the given list.\nlocal function largest_neg(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_neg\n    lu.assertEquals(candidate({1, 2, 3, -4, -6}), -6)\n    lu.assertEquals(candidate({1, 2, 3, -8, -9}), -9)\n    lu.assertEquals(candidate({1, 2, 3, 4, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_444_trim_tuple", "language": "lua", "prompt": "-- \tWrite a function to trim each list by k in the given lists.\nlocal function trim_tuple(test_list, K)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = trim_tuple\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2), {{2}, {9}, {2}, {2}})\n    lu.assertEquals(candidate({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1), {{3, 2, 1}, {4, 9, 2}, {1, 2, 3}, {8, 2, 1}})\n    lu.assertEquals(candidate({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1), {{8, 4}, {8, 12}, {1, 7}, {6, 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_445_index_multiplication", "language": "lua", "prompt": "-- \tWrite a function to perform index wise multiplication of list elements in the given two lists.\nlocal function index_multiplication(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_multiplication\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{6, 21}, {12, 45}, {2, 9}, {7, 30}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{14, 32}, {20, 60}, {6, 20}, {16, 44}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{24, 45}, {30, 77}, {12, 33}, {27, 60}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_446_count_Occurrence", "language": "lua", "prompt": "-- \tWrite a python function to count the occurence of all elements of list in a tuple.\nlocal function count_Occurrence(tup, lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Occurrence\n    lu.assertEquals(candidate({'a', 'a', 'c', 'b', 'd'}, {'a', 'b'}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 1, 4, 6, 7, 1, 4}, {1, 4, 7}), 6)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {1, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_447_cube_nums", "language": "lua", "prompt": "-- \tWrite a function to find cubes of individual elements in a list.\nlocal function cube_nums(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cube_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 8, 27, 64, 125, 216, 343, 512, 729, 1000})\n    lu.assertEquals(candidate({10, 20, 30}), {1000, 8000, 27000})\n    lu.assertEquals(candidate({12, 15}), {1728, 3375})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_448_cal_sum", "language": "lua", "prompt": "-- \tWrite a function to calculate the sum of perrin numbers.\nlocal function cal_sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cal_sum\n    lu.assertEquals(candidate(9), 49)\n    lu.assertEquals(candidate(10), 66)\n    lu.assertEquals(candidate(11), 88)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_450_extract_string", "language": "lua", "prompt": "-- \tWrite a function to extract specified size of strings from a given list of string values.\nlocal function extract_string(str, l)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_string\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 8), {'practice', 'solution'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 6), {'Python'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 9), {'exercises'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_451_remove_whitespaces", "language": "lua", "prompt": "-- \tWrite a function to remove all whitespaces from the given string.\nlocal function remove_whitespaces(text1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_whitespaces\n    lu.assertEquals(candidate(' Google    Flutter '), 'GoogleFlutter')\n    lu.assertEquals(candidate(' Google    Dart '), 'GoogleDart')\n    lu.assertEquals(candidate(' iOS    Swift '), 'iOSSwift')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_452_loss_amount", "language": "lua", "prompt": "-- \tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\nlocal function loss_amount(actual_cost, sale_amount)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = loss_amount\n    lu.assertEquals(candidate(1500, 1200), 0)\n    lu.assertEquals(candidate(100, 200), 100)\n    lu.assertEquals(candidate(2000, 5000), 3000)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_453_sumofFactors", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of even factors of a number.\nlocal function sumofFactors(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sumofFactors\n    lu.assertEquals(candidate(18), 26)\n    lu.assertEquals(candidate(30), 48)\n    lu.assertEquals(candidate(6), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_454_text_match_wordz", "language": "lua", "prompt": "-- \tWrite a function that matches a word containing 'z'.\nlocal function text_match_wordz(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz\n    lu.assertEquals(candidate('pythonz.'), true)\n    lu.assertEquals(candidate('xyz.'), true)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "lua", "prompt": "-- \tWrite a function to check whether the given month number contains 31 days or not.\nlocal function check_monthnumb_number(monthnum2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_monthnumb_number\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(6), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_456_reverse_string_list", "language": "lua", "prompt": "-- \tWrite a function to reverse each string in a given list of string values.\nlocal function reverse_string_list(stringlist)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_string_list\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue', 'White', 'Black'}), {'deR', 'neerG', 'eulB', 'etihW', 'kcalB'})\n    lu.assertEquals(candidate({'john', 'amal', 'joel', 'george'}), {'nhoj', 'lama', 'leoj', 'egroeg'})\n    lu.assertEquals(candidate({'jack', 'john', 'mary'}), {'kcaj', 'nhoj', 'yram'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_457_Find_Min", "language": "lua", "prompt": "-- \tWrite a python function to find the sublist having minimum length.\nlocal function Find_Min(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1})\n    lu.assertEquals(candidate({{1, 1}, {1, 1, 1}, {1, 2, 7, 8}}), {1, 1})\n    lu.assertEquals(candidate({{'x'}, {'x', 'y'}, {'x', 'y', 'z'}}), {'x'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_458_rectangle_area", "language": "lua", "prompt": "-- \tWrite a function to find the area of a rectangle.\nlocal function rectangle_area(l, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rectangle_area\n    lu.assertEquals(candidate(10, 20), 200)\n    lu.assertEquals(candidate(10, 5), 50)\n    lu.assertEquals(candidate(4, 2), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_459_remove_uppercase", "language": "lua", "prompt": "-- \tWrite a function to remove uppercase substrings from a given string.\nlocal function remove_uppercase(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_uppercase\n    lu.assertEquals(candidate('cAstyoUrFavoRitETVshoWs'), 'cstyoravoitshos')\n    lu.assertEquals(candidate('wAtchTheinTernEtrAdIo'), 'wtchheinerntrdo')\n    lu.assertEquals(candidate('VoicESeaRchAndreComMendaTionS'), 'oiceachndreomendaion')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_460_Extract", "language": "lua", "prompt": "-- \tWrite a python function to get the first element of each sublist.\nlocal function Extract(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Extract\n    lu.assertEquals(candidate({{1, 2}, {3, 4, 5}, {6, 7, 8, 9}}), {1, 3, 6})\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5}}), {1, 4})\n    lu.assertEquals(candidate({{9, 8, 1}, {1, 2}}), {9, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_461_upper_ctr", "language": "lua", "prompt": "-- \tWrite a python function to count the upper case characters in a given string.\nlocal function upper_ctr(str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = upper_ctr\n    lu.assertEquals(candidate('PYthon'), 1)\n    lu.assertEquals(candidate('BigData'), 1)\n    lu.assertEquals(candidate('program'), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_462_combinations_list", "language": "lua", "prompt": "-- \tWrite a function to find all possible combinations of the elements of a given list.\nlocal function combinations_list(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_list\n    lu.assertEquals(candidate({'orange', 'red', 'green', 'blue'}), {{}, {'orange'}, {'red'}, {'red', 'orange'}, {'green'}, {'green', 'orange'}, {'green', 'red'}, {'green', 'red', 'orange'}, {'blue'}, {'blue', 'orange'}, {'blue', 'red'}, {'blue', 'red', 'orange'}, {'blue', 'green'}, {'blue', 'green', 'orange'}, {'blue', 'green', 'red'}, {'blue', 'green', 'red', 'orange'}})\n    lu.assertEquals(candidate({'red', 'green', 'blue', 'white', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'blue'}, {'blue', 'red'}, {'blue', 'green'}, {'blue', 'green', 'red'}, {'white'}, {'white', 'red'}, {'white', 'green'}, {'white', 'green', 'red'}, {'white', 'blue'}, {'white', 'blue', 'red'}, {'white', 'blue', 'green'}, {'white', 'blue', 'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'black', 'blue'}, {'black', 'blue', 'red'}, {'black', 'blue', 'green'}, {'black', 'blue', 'green', 'red'}, {'black', 'white'}, {'black', 'white', 'red'}, {'black', 'white', 'green'}, {'black', 'white', 'green', 'red'}, {'black', 'white', 'blue'}, {'black', 'white', 'blue', 'red'}, {'black', 'white', 'blue', 'green'}, {'black', 'white', 'blue', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'blue'}, {'orange', 'blue', 'red'}, {'orange', 'blue', 'green'}, {'orange', 'blue', 'green', 'red'}, {'orange', 'white'}, {'orange', 'white', 'red'}, {'orange', 'white', 'green'}, {'orange', 'white', 'green', 'red'}, {'orange', 'white', 'blue'}, {'orange', 'white', 'blue', 'red'}, {'orange', 'white', 'blue', 'green'}, {'orange', 'white', 'blue', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}, {'orange', 'black', 'blue'}, {'orange', 'black', 'blue', 'red'}, {'orange', 'black', 'blue', 'green'}, {'orange', 'black', 'blue', 'green', 'red'}, {'orange', 'black', 'white'}, {'orange', 'black', 'white', 'red'}, {'orange', 'black', 'white', 'green'}, {'orange', 'black', 'white', 'green', 'red'}, {'orange', 'black', 'white', 'blue'}, {'orange', 'black', 'white', 'blue', 'red'}, {'orange', 'black', 'white', 'blue', 'green'}, {'orange', 'black', 'white', 'blue', 'green', 'red'}})\n    lu.assertEquals(candidate({'red', 'green', 'black', 'orange'}), {{}, {'red'}, {'green'}, {'green', 'red'}, {'black'}, {'black', 'red'}, {'black', 'green'}, {'black', 'green', 'red'}, {'orange'}, {'orange', 'red'}, {'orange', 'green'}, {'orange', 'green', 'red'}, {'orange', 'black'}, {'orange', 'black', 'red'}, {'orange', 'black', 'green'}, {'orange', 'black', 'green', 'red'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_463_max_subarray_product", "language": "lua", "prompt": "-- \tWrite a function to find the maximum product subarray of the given array.\nlocal function max_subarray_product(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_464_check_value", "language": "lua", "prompt": "-- \tWrite a function to check if all values are same in a dictionary.\nlocal function check_value(dict, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_value\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 10), false)\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 12), true)\n    lu.assertEquals(candidate({['Cierra Vega'] = 12, ['Alden Cantrell'] = 12, ['Kierra Gentry'] = 12, ['Pierre Cox'] = 12}, 5), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_465_drop_empty", "language": "lua", "prompt": "-- \tWrite a function to drop empty items from a given dictionary.\nlocal function drop_empty(dict1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_468_max_product", "language": "lua", "prompt": "-- \tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nlocal function max_product(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product\n    lu.assertEquals(candidate({3, 100, 4, 5, 150, 6}), 3000)\n    lu.assertEquals(candidate({4, 42, 55, 68, 80}), 50265600)\n    lu.assertEquals(candidate({10, 22, 9, 33, 21, 50, 41, 60}), 2460)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_470_add_pairwise", "language": "lua", "prompt": "-- \tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nlocal function add_pairwise(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_pairwise\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {6, 12, 15, 18})\n    lu.assertEquals(candidate({2, 6, 8, 9, 11}), {8, 14, 17, 20})\n    lu.assertEquals(candidate({3, 7, 9, 10, 12}), {10, 16, 19, 22})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_471_find_remainder", "language": "lua", "prompt": "-- \tWrite a python function to find the product of the array multiplication modulo n.\nlocal function find_remainder(arr, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_remainder\n    lu.assertEquals(candidate({100, 10, 5, 25, 35, 14}, 11), 9)\n    lu.assertEquals(candidate({1, 1, 1}, 1), 0)\n    lu.assertEquals(candidate({1, 2, 1}, 2), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_472_check_Consecutive", "language": "lua", "prompt": "-- \tWrite a python function to check whether the given list contains consecutive numbers or not.\nlocal function check_Consecutive(l)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_Consecutive\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 5, 6}), false)\n    lu.assertEquals(candidate({1, 2, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_474_replace_char", "language": "lua", "prompt": "-- \tWrite a function to replace characters in a string.\nlocal function replace_char(str1, ch, newch)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_char\n    lu.assertEquals(candidate('polygon', 'y', 'l'), 'pollgon')\n    lu.assertEquals(candidate('character', 'c', 'a'), 'aharaater')\n    lu.assertEquals(candidate('python', 'l', 'a'), 'python')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_475_sort_counter", "language": "lua", "prompt": "-- \tWrite a function to sort a dictionary by value.\nlocal function sort_counter(dict1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_counter\n    lu.assertEquals(candidate({['Math'] = 81, ['Physics'] = 83, ['Chemistry'] = 87}), {{'Chemistry', 87}, {'Physics', 83}, {'Math', 81}})\n    lu.assertEquals(candidate({['Math'] = 400, ['Physics'] = 300, ['Chemistry'] = 250}), {{'Math', 400}, {'Physics', 300}, {'Chemistry', 250}})\n    lu.assertEquals(candidate({['Math'] = 900, ['Physics'] = 1000, ['Chemistry'] = 1250}), {{'Chemistry', 1250}, {'Physics', 1000}, {'Math', 900}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_476_big_sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of the largest and smallest value in a given array.\nlocal function big_sum(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = big_sum\n    lu.assertEquals(candidate({1, 2, 3}), 4)\n    lu.assertEquals(candidate({-1, 2, 3, 4}), 3)\n    lu.assertEquals(candidate({2, 3, 6}), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_477_is_lower", "language": "lua", "prompt": "-- \tWrite a python function to convert the given string to lower case.\nlocal function is_lower(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_lower\n    lu.assertEquals(candidate('InValid'), 'invalid')\n    lu.assertEquals(candidate('TruE'), 'true')\n    lu.assertEquals(candidate('SenTenCE'), 'sentence')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_478_remove_lowercase", "language": "lua", "prompt": "-- \tWrite a function to remove lowercase substrings from a given string.\nlocal function remove_lowercase(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_lowercase\n    lu.assertEquals(candidate('PYTHon'), 'PYTH')\n    lu.assertEquals(candidate('FInD'), 'FID')\n    lu.assertEquals(candidate('STRinG'), 'STRG')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_479_first_Digit", "language": "lua", "prompt": "-- \tWrite a python function to find the first digit of a given number.\nlocal function first_Digit(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_Digit\n    lu.assertEquals(candidate(123), 1)\n    lu.assertEquals(candidate(456), 4)\n    lu.assertEquals(candidate(12), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_4_heap_queue_largest", "language": "lua", "prompt": "-- \tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_554_Split", "language": "lua", "prompt": "-- \tWrite a python function which takes a list of integers and only returns the odd ones.\nlocal function Split(list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {1, 3, 5})\n    lu.assertEquals(candidate({10, 11, 12, 13}), {11, 13})\n    lu.assertEquals(candidate({7, 8, 9, 1}), {7, 9, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_555_difference", "language": "lua", "prompt": "-- \tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nlocal function difference(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = difference\n    lu.assertEquals(candidate(3), 30)\n    lu.assertEquals(candidate(5), 210)\n    lu.assertEquals(candidate(2), 6)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "lua", "prompt": "-- \tWrite a python function to count the number of pairs whose xor value is odd.\nlocal function find_Odd_Pair(A, N)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Odd_Pair\n    lu.assertEquals(candidate({5, 4, 7, 2, 1}, 5), 6)\n    lu.assertEquals(candidate({7, 2, 8, 1, 0, 5, 11}, 7), 12)\n    lu.assertEquals(candidate({1, 2, 3}, 3), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_557_toggle_string", "language": "lua", "prompt": "-- \tWrite a function to toggle the case of all characters in a string.\nlocal function toggle_string(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_string\n    lu.assertEquals(candidate('Python'), 'pYTHON')\n    lu.assertEquals(candidate('Pangram'), 'pANGRAM')\n    lu.assertEquals(candidate('LIttLE'), 'liTTle')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_558_digit_distance_nums", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of the per-digit difference between two integers.\nlocal function digit_distance_nums(n1, n2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digit_distance_nums\n    lu.assertEquals(candidate(1, 2), 1)\n    lu.assertEquals(candidate(23, 56), 6)\n    lu.assertEquals(candidate(123, 256), 7)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "lua", "prompt": "-- \tWrite a function to find the sum of the largest contiguous sublist in the given list.\nlocal function max_sub_array_sum(a, size)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sub_array_sum\n    lu.assertEquals(candidate({-2, -3, 4, -1, -2, 1, 5, -3}, 8), 7)\n    lu.assertEquals(candidate({-3, -4, 5, -2, -3, 2, 6, -4}, 8), 8)\n    lu.assertEquals(candidate({-4, -5, 6, -3, -4, 3, 7, -5}, 8), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_560_union_elements", "language": "lua", "prompt": "-- \tWrite a function to find the union of the elements of two given lists and output them in sorted order.\nlocal function union_elements(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = union_elements\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 4, 5, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {3, 4, 5, 6}), {1, 2, 3, 4, 5, 6})\n    lu.assertEquals(candidate({11, 12, 13, 14}, {13, 15, 16, 17}), {11, 12, 13, 14, 15, 16, 17})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_562_Find_Max_Length", "language": "lua", "prompt": "-- \tWrite a python function to find the length of the longest sublists.\nlocal function Find_Max_Length(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max_Length\n    lu.assertEquals(candidate({{1}, {1, 4}, {5, 6, 7, 8}}), 4)\n    lu.assertEquals(candidate({{0, 1}, {2, 2}, {3, 2, 1}}), 3)\n    lu.assertEquals(candidate({{7}, {22, 23}, {13, 14, 15}, {10, 20, 30, 40, 50}}), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_563_extract_values", "language": "lua", "prompt": "-- \tWrite a function to extract values between quotation marks from a string.\nlocal function extract_values(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_values\n    lu.assertEquals(candidate('\"Python\", \"PHP\", \"Java\"'), {'Python', 'PHP', 'Java'})\n    lu.assertEquals(candidate('\"python\",\"program\",\"language\"'), {'python', 'program', 'language'})\n    lu.assertEquals(candidate('\"red\",\"blue\",\"green\",\"yellow\"'), {'red', 'blue', 'green', 'yellow'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_564_count_Pairs", "language": "lua", "prompt": "-- \tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nlocal function count_Pairs(arr, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Pairs\n    lu.assertEquals(candidate({1, 2, 1}, 3), 2)\n    lu.assertEquals(candidate({1, 1, 1, 1}, 4), 0)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, 5), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_565_split", "language": "lua", "prompt": "-- \tWrite a python function to split a string into characters.\nlocal function split(word)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split\n    lu.assertEquals(candidate('python'), {'p', 'y', 't', 'h', 'o', 'n'})\n    lu.assertEquals(candidate('Name'), {'N', 'a', 'm', 'e'})\n    lu.assertEquals(candidate('program'), {'p', 'r', 'o', 'g', 'r', 'a', 'm'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_566_sum_digits", "language": "lua", "prompt": "-- \tWrite a function to get the sum of the digits of a non-negative integer.\nlocal function sum_digits(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_digits\n    lu.assertEquals(candidate(345), 12)\n    lu.assertEquals(candidate(12), 3)\n    lu.assertEquals(candidate(97), 16)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_567_issort_list", "language": "lua", "prompt": "-- \tWrite a function to check whether a specified list is sorted or not.\nlocal function issort_list(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = issort_list\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 16, 17}), true)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 12, 14, 20, 17}), false)\n    lu.assertEquals(candidate({1, 2, 4, 6, 8, 10, 15, 14, 20}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_568_empty_list", "language": "lua", "prompt": "-- \tWrite a function to create a list of N empty dictionaries.\nlocal function empty_list(length)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = empty_list\n    lu.assertEquals(candidate(5), {{}, {}, {}, {}, {}})\n    lu.assertEquals(candidate(6), {{}, {}, {}, {}, {}, {}})\n    lu.assertEquals(candidate(7), {{}, {}, {}, {}, {}, {}, {}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_569_sort_sublists", "language": "lua", "prompt": "-- \tWrite a function to sort each sublist of strings in a given list of lists.\nlocal function sort_sublists(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}}), {{'green', 'orange'}, {'black'}, {'green', 'orange'}, {'white'}})\n    lu.assertEquals(candidate({{'a', 'b'}, {'d', 'c'}, {'g', 'h'}, {'f', 'e'}}), {{'a', 'b'}, {'c', 'd'}, {'g', 'h'}, {'e', 'f'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_56_checks", "language": "lua", "prompt": "-- \tWrite a python function to check if a given number is one less than twice its reverse.\nlocal function checks(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = checks\n    lu.assertEquals(candidate(70), false)\n    lu.assertEquals(candidate(23), false)\n    lu.assertEquals(candidate(73), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_572_two_unique_nums", "language": "lua", "prompt": "-- \tWrite a python function to remove duplicate numbers from a given number of lists.\nlocal function two_unique_nums(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = two_unique_nums\n    lu.assertEquals(candidate({1, 2, 3, 2, 3, 4, 5}), {1, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 5}), {1, 3, 4, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_573_unique_product", "language": "lua", "prompt": "-- \tWrite a python function to calculate the product of the unique numbers in a given list.\nlocal function unique_product(list_data)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_product\n    lu.assertEquals(candidate({10, 20, 30, 40, 20, 50, 60, 40}), 720000000)\n    lu.assertEquals(candidate({1, 2, 3, 1}), 6)\n    lu.assertEquals(candidate({7, 8, 9, 0, 1, 1}), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "lua", "prompt": "-- \tWrite a function to find the surface area of a cylinder.\nlocal function surfacearea_cylinder(r, h)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surfacearea_cylinder\n    lu.assertEquals(candidate(10, 5), 942.45)\n    lu.assertEquals(candidate(4, 5), 226.18800000000002)\n    lu.assertEquals(candidate(4, 10), 351.848)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_576_is_Sub_Array", "language": "lua", "prompt": "-- \tWrite a python function to check whether a list is sublist of another or not.\nlocal function is_Sub_Array(A, B)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Sub_Array\n    lu.assertEquals(candidate({1, 4, 3, 5}, {1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 1}, {1, 2, 1}), true)\n    lu.assertEquals(candidate({1, 0, 2, 2}, {2, 2, 0}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "lua", "prompt": "-- \tWrite a python function to find the last digit in factorial of a given number.\nlocal function last_Digit_Factorial(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last_Digit_Factorial\n    lu.assertEquals(candidate(4), 4)\n    lu.assertEquals(candidate(21), 0)\n    lu.assertEquals(candidate(30), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_578_interleave_lists", "language": "lua", "prompt": "-- \tWrite a function to interleave 3 lists of the same length into a single flat list.\nlocal function interleave_lists(list1, list2, list3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = interleave_lists\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}, {10, 20, 30, 40, 50, 60, 70}, {100, 200, 300, 400, 500, 600, 700}), {1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700})\n    lu.assertEquals(candidate({10, 20}, {15, 2}, {5, 10}), {10, 15, 5, 20, 2, 10})\n    lu.assertEquals(candidate({11, 44}, {10, 15}, {20, 5}), {11, 10, 20, 44, 15, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_579_find_dissimilar", "language": "lua", "prompt": "-- \tWrite a function to find the dissimilar elements in the given two tuples.\nlocal function find_dissimilar(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_dissimilar\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {7, 2, 3, 9}), {1, 4, 7, 9})\n    lu.assertEquals(candidate({21, 11, 25, 26}, {26, 34, 21, 36}), {34, 36, 11, 25})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_57_find_Max_Num", "language": "lua", "prompt": "-- \tWrite a python function to find the largest number that can be formed with the given list of digits.\nlocal function find_Max_Num(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Max_Num\n    lu.assertEquals(candidate({1, 2, 3}), 321)\n    lu.assertEquals(candidate({4, 5, 6, 1}), 6541)\n    lu.assertEquals(candidate({1, 2, 3, 9}), 9321)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_580_extract_even", "language": "lua", "prompt": "-- \tWrite a function to remove uneven elements in the nested mixed tuple.\nlocal function extract_even(test_tuple)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_even\n    lu.assertEquals(candidate({4, 5, {7, 6, {2, 4}}, 6, 8}), {4, {6, {2, 4}}, 6, 8})\n    lu.assertEquals(candidate({5, 6, {8, 7, {4, 8}}, 7, 9}), {6, {8, {4, 8}}})\n    lu.assertEquals(candidate({5, 6, {9, 8, {4, 6}}, 8, 10}), {6, {8, {4, 6}}, 8, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_581_surface_Area", "language": "lua", "prompt": "-- \tWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nlocal function surface_Area(b, s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = surface_Area\n    lu.assertEquals(candidate(3, 4), 33)\n    lu.assertEquals(candidate(4, 5), 56)\n    lu.assertEquals(candidate(1, 2), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_582_my_dict", "language": "lua", "prompt": "-- \tWrite a function to check if a dictionary is empty\nlocal function my_dict(dict1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_582_my_dict.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = my_dict\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_583_catalan_number", "language": "lua", "prompt": "-- \tWrite a function which returns nth catalan number.\nlocal function catalan_number(num)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = catalan_number\n    lu.assertEquals(candidate(10), 16796)\n    lu.assertEquals(candidate(9), 4862)\n    lu.assertEquals(candidate(7), 429)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_584_find_adverbs", "language": "lua", "prompt": "-- \tWrite a function to find the first adverb ending with ly and its positions in a given string.\nlocal function find_adverbs(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_adverbs\n    lu.assertEquals(candidate('Clearly, he has no excuse for such behavior.'), '0-7: Clearly')\n    lu.assertEquals(candidate('Please handle the situation carefuly'), '28-36: carefuly')\n    lu.assertEquals(candidate('Complete the task quickly'), '18-25: quickly')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_585_expensive_items", "language": "lua", "prompt": "-- \tWrite a function to find the n most expensive items in a given dataset.\nlocal function expensive_items(items, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = expensive_items\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}}, 2), {{['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-1', ['price'] = 101.1}})\n    lu.assertEquals(candidate({{['name'] = 'Item-1', ['price'] = 101.1}, {['name'] = 'Item-2', ['price'] = 555.22}, {['name'] = 'Item-3', ['price'] = 45.09}, {['name'] = 'Item-4', ['price'] = 22.75}}, 1), {{['name'] = 'Item-2', ['price'] = 555.22}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_586_split_Arr", "language": "lua", "prompt": "-- \tWrite a python function to split a list at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_587_list_tuple", "language": "lua", "prompt": "-- \tWrite a function to convert a list to a tuple.\nlocal function list_tuple(listx)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_tuple\n    lu.assertEquals(candidate({5, 10, 7, 4, 15, 3}), {5, 10, 7, 4, 15, 3})\n    lu.assertEquals(candidate({2, 4, 5, 6, 2, 3, 4, 4, 7}), {2, 4, 5, 6, 2, 3, 4, 4, 7})\n    lu.assertEquals(candidate({58, 44, 56}), {58, 44, 56})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_588_big_diff", "language": "lua", "prompt": "-- \tWrite a python function to find the difference between largest and smallest value in a given list.\nlocal function big_diff(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = big_diff\n    lu.assertEquals(candidate({1, 2, 3, 4}), 3)\n    lu.assertEquals(candidate({4, 5, 12}), 8)\n    lu.assertEquals(candidate({9, 2, 3}), 7)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_589_perfect_squares", "language": "lua", "prompt": "-- \tWrite a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_58_opposite_Signs", "language": "lua", "prompt": "-- \tWrite a python function to check whether the given two integers have opposite sign or not.\nlocal function opposite_Signs(x, y)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = opposite_Signs\n    lu.assertEquals(candidate(1, -2), true)\n    lu.assertEquals(candidate(3, 2), false)\n    lu.assertEquals(candidate(-10, -10), false)\n    lu.assertEquals(candidate(-2, 2), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_591_swap_List", "language": "lua", "prompt": "-- \tWrite a python function to interchange the first and last elements in a list.\nlocal function swap_List(newList)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_List\n    lu.assertEquals(candidate({12, 35, 9, 56, 24}), {24, 35, 9, 56, 12})\n    lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})\n    lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_592_sum_Of_product", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nlocal function sum_Of_product(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_Of_product\n    lu.assertEquals(candidate(3), 15)\n    lu.assertEquals(candidate(4), 56)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_593_removezero_ip", "language": "lua", "prompt": "-- \tWrite a function to remove leading zeroes from an ip address.\nlocal function removezero_ip(ip)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = removezero_ip\n    lu.assertEquals(candidate('216.08.094.196'), '216.8.94.196')\n    lu.assertEquals(candidate('12.01.024'), '12.1.24')\n    lu.assertEquals(candidate('216.08.094.0196'), '216.8.94.196')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_594_diff_even_odd", "language": "lua", "prompt": "-- \tWrite a function to find the difference of the first even and first odd number of a given list.\nlocal function diff_even_odd(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = diff_even_odd\n    lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 1)\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_595_min_Swaps", "language": "lua", "prompt": "-- \tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_597_find_kth", "language": "lua", "prompt": "-- \tWrite a function to find kth element from the given two sorted arrays.\nlocal function find_kth(arr1, arr2, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_kth\n    lu.assertEquals(candidate({2, 3, 6, 7, 9}, {1, 4, 8, 10}, 5), 6)\n    lu.assertEquals(candidate({100, 112, 256, 349, 770}, {72, 86, 113, 119, 265, 445, 892}, 7), 256)\n    lu.assertEquals(candidate({3, 4, 7, 8, 10}, {2, 5, 9, 11}, 6), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_598_armstrong_number", "language": "lua", "prompt": "-- \tWrite a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_599_sum_average", "language": "lua", "prompt": "-- \tWrite a function to find sum and average of first n natural numbers.\nlocal function sum_average(number)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_average\n    lu.assertEquals(candidate(10), {55, 5.5})\n    lu.assertEquals(candidate(15), {120, 8.0})\n    lu.assertEquals(candidate(20), {210, 10.5})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_59_is_octagonal", "language": "lua", "prompt": "-- \tWrite a function to find the nth octagonal number.\nlocal function is_octagonal(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_octagonal\n    lu.assertEquals(candidate(5), 65)\n    lu.assertEquals(candidate(10), 280)\n    lu.assertEquals(candidate(15), 645)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_600_is_Even", "language": "lua", "prompt": "-- \tWrite a python function to check whether the given number is even or not.\nlocal function is_Even(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Even\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(2), true)\n    lu.assertEquals(candidate(3), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_602_first_repeated_char", "language": "lua", "prompt": "-- \tWrite a python function to find the first repeated character in a given string.\nlocal function first_repeated_char(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_repeated_char\n    lu.assertEquals(candidate('abcabc'), 'a')\n    lu.assertEquals(candidate('abc'), None)\n    lu.assertEquals(candidate('123123'), '1')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_603_get_ludic", "language": "lua", "prompt": "-- \tWrite a function to get all lucid numbers smaller than or equal to a given integer.\nlocal function get_ludic(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_ludic\n    lu.assertEquals(candidate(10), {1, 2, 3, 5, 7})\n    lu.assertEquals(candidate(25), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25})\n    lu.assertEquals(candidate(45), {1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_604_reverse_words", "language": "lua", "prompt": "-- \tWrite a function to reverse words seperated by spaces in a given string.\nlocal function reverse_words(s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_words\n    lu.assertEquals(candidate('python program'), 'program python')\n    lu.assertEquals(candidate('java language'), 'language java')\n    lu.assertEquals(candidate('indian man'), 'man indian')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_605_prime_num", "language": "lua", "prompt": "-- \tWrite a function to check if the given integer is a prime number.\nlocal function prime_num(num)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_num\n    lu.assertEquals(candidate(13), true)\n    lu.assertEquals(candidate(7), true)\n    lu.assertEquals(candidate(-1010), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_606_radian_degree", "language": "lua", "prompt": "-- \tWrite a function to convert degrees to radians.\nlocal function radian_degree(degree)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = radian_degree\n    lu.assertEquals(candidate(90), 1.5707963267948966)\n    lu.assertEquals(candidate(60), 1.0471975511965976)\n    lu.assertEquals(candidate(120), 2.0943951023931953)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_607_find_literals", "language": "lua", "prompt": "-- \tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nlocal function find_literals(text, pattern)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_literals\n    lu.assertEquals(candidate('The quick brown fox jumps over the lazy dog.', 'fox'), {'fox', 16, 19})\n    lu.assertEquals(candidate('Its been a very crazy procedure right', 'crazy'), {'crazy', 16, 21})\n    lu.assertEquals(candidate('Hardest choices required strongest will', 'will'), {'will', 35, 39})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_608_bell_Number", "language": "lua", "prompt": "-- \tWrite a python function to find nth bell number.\nlocal function bell_Number(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_Number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 15)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_610_remove_kth_element", "language": "lua", "prompt": "-- \tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nlocal function remove_kth_element(list1, L)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_kth_element\n    lu.assertEquals(candidate({1, 1, 2, 3, 4, 4, 5, 1}, 3), {1, 1, 3, 4, 4, 5, 1})\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), {0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), {10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_611_max_of_nth", "language": "lua", "prompt": "-- \tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nlocal function max_of_nth(test_list, N)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_of_nth\n    lu.assertEquals(candidate({{5, 6, 7}, {1, 3, 5}, {8, 9, 19}}, 2), 19)\n    lu.assertEquals(candidate({{6, 7, 8}, {2, 4, 6}, {9, 10, 20}}, 1), 10)\n    lu.assertEquals(candidate({{7, 8, 9}, {3, 5, 7}, {10, 11, 21}}, 1), 11)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_612_merge", "language": "lua", "prompt": "-- \tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nlocal function merge(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge\n    lu.assertEquals(candidate({{'x', 'y'}, {'a', 'b'}, {'m', 'n'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}, {5, 6}, {7, 8}}), {{1, 3, 5, 7}, {2, 4, 6, 8}})\n    lu.assertEquals(candidate({{'x', 'y', 'z'}, {'a', 'b', 'c'}, {'m', 'n', 'o'}}), {{'x', 'a', 'm'}, {'y', 'b', 'n'}, {'z', 'c', 'o'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_614_cummulative_sum", "language": "lua", "prompt": "-- \tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\nlocal function cummulative_sum(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cummulative_sum\n    lu.assertEquals(candidate({{1, 3}, {5, 6, 7}, {2, 6}}), 30)\n    lu.assertEquals(candidate({{2, 4}, {6, 7, 8}, {3, 7}}), 37)\n    lu.assertEquals(candidate({{3, 5}, {7, 8, 9}, {4, 8}}), 44)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_615_average_tuple", "language": "lua", "prompt": "-- \tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\nlocal function average_tuple(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = average_tuple\n    lu.assertEquals(candidate({{10, 10, 10, 12}, {30, 45, 56, 45}, {81, 80, 39, 32}, {1, 2, 3, 4}}), {30.5, 34.25, 27.0, 23.25})\n    lu.assertEquals(candidate({{1, 1, -5}, {30, -15, 56}, {81, -60, -39}, {-10, 2, 3}}), {25.5, -18.0, 3.75})\n    lu.assertEquals(candidate({{100, 100, 100, 120}, {300, 450, 560, 450}, {810, 800, 390, 320}, {10, 20, 30, 40}}), {305.0, 342.5, 270.0, 232.5})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_616_tuple_modulo", "language": "lua", "prompt": "-- \tWrite a function which takes two tuples of the same length and performs the element wise modulo.\nlocal function tuple_modulo(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_modulo\n    lu.assertEquals(candidate({10, 4, 5, 6}, {5, 6, 7, 5}), {0, 4, 5, 1})\n    lu.assertEquals(candidate({11, 5, 6, 7}, {6, 7, 8, 6}), {5, 5, 6, 1})\n    lu.assertEquals(candidate({12, 6, 7, 8}, {7, 8, 9, 7}), {5, 6, 7, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_617_min_Jumps", "language": "lua", "prompt": "-- \tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Jumps\n    lu.assertEquals(candidate({3, 4}, 11), 3.5)\n    lu.assertEquals(candidate({3, 4}, 0), 0)\n    lu.assertEquals(candidate({11, 14}, 11), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_618_div_list", "language": "lua", "prompt": "-- \tWrite a function to divide two lists element wise.\nlocal function div_list(nums1, nums2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = div_list\n    lu.assertEquals(candidate({4, 5, 6}, {1, 2, 3}), {4.0, 2.5, 2.0})\n    lu.assertEquals(candidate({3, 2}, {1, 4}), {3.0, 0.5})\n    lu.assertEquals(candidate({90, 120}, {50, 70}), {1.8, 1.7142857142857142})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_619_move_num", "language": "lua", "prompt": "-- \tWrite a function to move all the numbers to the end of the given string.\nlocal function move_num(test_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_num\n    lu.assertEquals(candidate('I1love143you55three3000thousand'), 'Iloveyouthreethousand1143553000')\n    lu.assertEquals(candidate('Avengers124Assemble'), 'AvengersAssemble124')\n    lu.assertEquals(candidate('Its11our12path13to14see15things16do17things'), 'Itsourpathtoseethingsdothings11121314151617')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_61_count_Substrings", "language": "lua", "prompt": "-- \tWrite a python function to count the number of substrings with the sum of digits equal to their length.\nlocal function count_Substrings(s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_Substrings\n    lu.assertEquals(candidate('112112'), 6)\n    lu.assertEquals(candidate('111'), 6)\n    lu.assertEquals(candidate('1101112'), 12)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_622_get_median", "language": "lua", "prompt": "-- \tWrite a function to find the median of two sorted lists of same size.\nlocal function get_median(arr1, arr2, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_623_nth_nums", "language": "lua", "prompt": "-- \tWrite a function to compute the n-th power of each number in a list.\nlocal function nth_nums(nums, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = nth_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})\n    lu.assertEquals(candidate({10, 20, 30}, 3), {1000, 8000, 27000})\n    lu.assertEquals(candidate({12, 15}, 5), {248832, 759375})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_624_is_upper", "language": "lua", "prompt": "-- \tWrite a python function to convert a given string to uppercase.\nlocal function is_upper(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_upper\n    lu.assertEquals(candidate('person'), 'PERSON')\n    lu.assertEquals(candidate('final'), 'FINAL')\n    lu.assertEquals(candidate('Valid'), 'VALID')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_625_swap_List", "language": "lua", "prompt": "-- \tWrite a python function to interchange the first and last element in a given list.\nlocal function swap_List(newList)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = swap_List\n    lu.assertEquals(candidate({1, 2, 3}), {3, 2, 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 4}), {4, 2, 3, 4, 1})\n    lu.assertEquals(candidate({4, 5, 6}), {6, 5, 4})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_626_triangle_area", "language": "lua", "prompt": "-- \tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nlocal function triangle_area(r)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n    lu.assertEquals(candidate(-1), None)\n    lu.assertEquals(candidate(0), 0)\n    lu.assertEquals(candidate(2), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_627_find_First_Missing", "language": "lua", "prompt": "-- \tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\nlocal function find_First_Missing(array)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_First_Missing\n    lu.assertEquals(candidate({0, 1, 2, 3}), 4)\n    lu.assertEquals(candidate({0, 1, 2, 6, 9}), 3)\n    lu.assertEquals(candidate({2, 3, 5, 8, 9}), 0)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_628_replace_spaces", "language": "lua", "prompt": "-- \tWrite a function to replace all spaces in the given string with '%20'.\nlocal function replace_spaces(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_spaces\n    lu.assertEquals(candidate('My Name is Dawood'), 'My%20Name%20is%20Dawood')\n    lu.assertEquals(candidate('I am a Programmer'), 'I%20am%20a%20Programmer')\n    lu.assertEquals(candidate('I love Coding'), 'I%20love%20Coding')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_629_Split", "language": "lua", "prompt": "-- \tWrite a python function to find even numbers from a list of numbers.\nlocal function Split(list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Split\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), {2, 4})\n    lu.assertEquals(candidate({4, 5, 6, 7, 8, 0, 1}), {4, 6, 8, 0})\n    lu.assertEquals(candidate({8, 12, 15, 19}), {8, 12})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_62_smallest_num", "language": "lua", "prompt": "-- \tWrite a python function to find smallest number in a list.\nlocal function smallest_num(xs)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = smallest_num\n    lu.assertEquals(candidate({10, 20, 1, 45, 99}), 1)\n    lu.assertEquals(candidate({1, 2, 3}), 1)\n    lu.assertEquals(candidate({45, 46, 50, 60}), 45)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_630_get_coordinates", "language": "lua", "prompt": "-- \tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nlocal function get_coordinates(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_coordinates\n    lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})\n    lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_631_replace_spaces", "language": "lua", "prompt": "-- \tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nlocal function replace_spaces(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_spaces\n    lu.assertEquals(candidate('Jumanji The Jungle'), 'Jumanji_The_Jungle')\n    lu.assertEquals(candidate('The_Avengers'), 'The Avengers')\n    lu.assertEquals(candidate('Fast and Furious'), 'Fast_and_Furious')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_632_move_zero", "language": "lua", "prompt": "-- \tWrite a python function to move all zeroes to the end of the given list.\nlocal function move_zero(num_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_zero\n    lu.assertEquals(candidate({1, 0, 2, 0, 3, 4}), {1, 2, 3, 4, 0, 0})\n    lu.assertEquals(candidate({2, 3, 2, 0, 0, 4, 0, 5, 0}), {2, 3, 2, 4, 5, 0, 0, 0, 0})\n    lu.assertEquals(candidate({0, 1, 0, 1, 1}), {1, 1, 1, 0, 0})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nlocal function pair_xor_Sum(arr, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pair_xor_Sum\n    lu.assertEquals(candidate({5, 9, 7, 6}, 4), 47)\n    lu.assertEquals(candidate({7, 3, 5}, 3), 12)\n    lu.assertEquals(candidate({7, 3}, 2), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_635_heap_sort", "language": "lua", "prompt": "-- \tWrite a function to sort the given list.\nlocal function heap_sort(iterable)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_sort\n    lu.assertEquals(candidate({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 25, 58}), {14, 22, 25, 25, 35, 58, 65, 75, 85})\n    lu.assertEquals(candidate({7, 1, 9, 5}), {1, 5, 7, 9})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_637_noprofit_noloss", "language": "lua", "prompt": "-- \tWrite a function to check whether the given amount has no profit and no loss\nlocal function noprofit_noloss(actual_cost, sale_amount)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = noprofit_noloss\n    lu.assertEquals(candidate(1500, 1200), false)\n    lu.assertEquals(candidate(100, 100), true)\n    lu.assertEquals(candidate(2000, 5000), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_638_wind_chill", "language": "lua", "prompt": "-- \tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nlocal function wind_chill(v, t)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = wind_chill\n    lu.assertEquals(candidate(120, 35), 40)\n    lu.assertEquals(candidate(40, 20), 19)\n    lu.assertEquals(candidate(10, 8), 6)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_639_sample_nam", "language": "lua", "prompt": "-- \tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nlocal function sample_nam(sample_names)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sample_nam\n    lu.assertEquals(candidate({'sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'}), 16)\n    lu.assertEquals(candidate({'php', 'res', 'Python', 'abcd', 'Java', 'aaa'}), 10)\n    lu.assertEquals(candidate({'abcd', 'Python', 'abba', 'aba'}), 6)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_63_max_difference", "language": "lua", "prompt": "-- \tWrite a function to find the maximum difference between available pairs in the given tuple list.\nlocal function max_difference(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_difference\n    lu.assertEquals(candidate({{3, 5}, {1, 7}, {10, 3}, {1, 2}}), 7)\n    lu.assertEquals(candidate({{4, 6}, {2, 17}, {9, 13}, {11, 12}}), 15)\n    lu.assertEquals(candidate({{12, 35}, {21, 27}, {13, 23}, {41, 22}}), 23)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_640_remove_parenthesis", "language": "lua", "prompt": "-- \tWrite a function to remove the parenthesis and what is inbetween them from a string.\nlocal function remove_parenthesis(items)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_parenthesis\n    lu.assertEquals(candidate({'python (chrome)'}), 'python')\n    lu.assertEquals(candidate({'string(.abc)'}), 'string')\n    lu.assertEquals(candidate({'alpha(num)'}), 'alpha')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_641_is_nonagonal", "language": "lua", "prompt": "-- \tWrite a function to find the nth nonagonal number.\nlocal function is_nonagonal(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nonagonal\n    lu.assertEquals(candidate(10), 325)\n    lu.assertEquals(candidate(15), 750)\n    lu.assertEquals(candidate(18), 1089)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "lua", "prompt": "-- \tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nlocal function text_match_wordz_middle(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_wordz_middle\n    lu.assertEquals(candidate('pythonzabc.'), true)\n    lu.assertEquals(candidate('zxyabc.'), false)\n    lu.assertEquals(candidate('  lang  .'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "lua", "prompt": "-- \tWrite a python function to reverse an array upto a given position.\nlocal function reverse_Array_Upto_K(input, k)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_Array_Upto_K\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 4), {4, 3, 2, 1, 5, 6})\n    lu.assertEquals(candidate({4, 5, 6, 7}, 2), {5, 4, 6, 7})\n    lu.assertEquals(candidate({9, 8, 7, 6, 5}, 3), {7, 8, 9, 6, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_64_subject_marks", "language": "lua", "prompt": "-- \tWrite a function to sort a list of tuples using the second value of each tuple.\nlocal function subject_marks(subjectmarks)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = subject_marks\n    lu.assertEquals(candidate({{'English', 88}, {'Science', 90}, {'Maths', 97}, {'Social sciences', 82}}), {{'Social sciences', 82}, {'English', 88}, {'Science', 90}, {'Maths', 97}})\n    lu.assertEquals(candidate({{'Telugu', 49}, {'Hindhi', 54}, {'Social', 33}}), {{'Social', 33}, {'Telugu', 49}, {'Hindhi', 54}})\n    lu.assertEquals(candidate({{'Physics', 96}, {'Chemistry', 97}, {'Biology', 45}}), {{'Biology', 45}, {'Physics', 96}, {'Chemistry', 97}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_65_recursive_list_sum", "language": "lua", "prompt": "-- \tWrite a function to flatten a list and sum all of its elements.\nlocal function recursive_list_sum(data_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = recursive_list_sum\n    lu.assertEquals(candidate({1, 2, {3, 4}, {5, 6}}), 21)\n    lu.assertEquals(candidate({7, 10, {15, 14}, {19, 41}}), 106)\n    lu.assertEquals(candidate({10, 20, {30, 40}, {50, 60}}), 210)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_66_pos_count", "language": "lua", "prompt": "-- \tWrite a python function to count the number of positive numbers in a list.\nlocal function pos_count(list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pos_count\n    lu.assertEquals(candidate({1, -2, 3, -4}), 2)\n    lu.assertEquals(candidate({3, 4, 5, -1}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_67_bell_number", "language": "lua", "prompt": "-- \tWrite a function to find the number of ways to partition a set of Bell numbers.\nlocal function bell_number(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(10), 115975)\n    lu.assertEquals(candidate(56), 6775685320645824322581483068371419745979053216268760300)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_68_is_Monotonic", "language": "lua", "prompt": "-- \tWrite a python function to check whether the given array is monotonic or not.\nlocal function is_Monotonic(A)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_69_is_sublist", "language": "lua", "prompt": "-- \tWrite a function to check whether a list contains the given sublist or not.\nlocal function is_sublist(l, s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sublist\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {3, 7}), false)\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {4, 3}), true)\n    lu.assertEquals(candidate({2, 4, 3, 5, 7}, {1, 6}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "lua", "prompt": "-- \tWrite a python function to check whether the two numbers differ at one bit position only or not.\nlocal function differ_At_One_Bit_Pos(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = differ_At_One_Bit_Pos\n    lu.assertEquals(candidate(13, 9), true)\n    lu.assertEquals(candidate(15, 8), false)\n    lu.assertEquals(candidate(2, 4), false)\n    lu.assertEquals(candidate(2, 3), true)\n    lu.assertEquals(candidate(5, 1), true)\n    lu.assertEquals(candidate(1, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_70_get_equal", "language": "lua", "prompt": "-- \tWrite a function to find whether all the given lists have equal length or not.\nlocal function get_equal(Input)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_equal\n    lu.assertEquals(candidate({{11, 22, 33}, {44, 55, 66}}), true)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6, 7}}), false)\n    lu.assertEquals(candidate({{1, 2}, {3, 4}}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_71_comb_sort", "language": "lua", "prompt": "-- \tWrite a function to sort a list of elements.\nlocal function comb_sort(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "lua", "prompt": "-- \tWrite a function to add a dictionary to the tuple. The output should be a tuple.\nlocal function add_dict_to_tuple(test_tup, test_dict)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_dict_to_tuple\n    lu.assertEquals(candidate({4, 5, 6}, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}), {4, 5, 6, {['MSAM'] = 1, ['is'] = 2, ['best'] = 3}})\n    lu.assertEquals(candidate({1, 2, 3}, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}), {1, 2, 3, {['UTS'] = 2, ['is'] = 3, ['Worst'] = 4}})\n    lu.assertEquals(candidate({8, 9, 10}, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}), {8, 9, 10, {['POS'] = 3, ['is'] = 4, ['Okay'] = 5}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "lua", "prompt": "-- \tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_722_filter_data", "language": "lua", "prompt": "-- \tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nlocal function filter_data(students, h, w)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_data\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 6.0, 70), {['Cierra Vega'] = {6.2, 70}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.9, 67), {['Cierra Vega'] = {6.2, 70}, ['Kierra Gentry'] = {6.0, 68}})\n    lu.assertEquals(candidate({['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}}, 5.7, 64), {['Cierra Vega'] = {6.2, 70}, ['Alden Cantrell'] = {5.9, 65}, ['Kierra Gentry'] = {6.0, 68}, ['Pierre Cox'] = {5.8, 66}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_723_count_same_pair", "language": "lua", "prompt": "-- \tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nlocal function count_same_pair(nums1, nums2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_same_pair\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}, {2, 2, 3, 1, 2, 6, 7, 9}), 4)\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 11)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}, {2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 1)\n    lu.assertEquals(candidate({0, 1, 1, 2}, {0, 1, 2, 2}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_724_power_base_sum", "language": "lua", "prompt": "-- \tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nlocal function power_base_sum(base, power)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power_base_sum\n    lu.assertEquals(candidate(2, 100), 115)\n    lu.assertEquals(candidate(8, 10), 37)\n    lu.assertEquals(candidate(8, 15), 62)\n    lu.assertEquals(candidate(3, 3), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_725_extract_quotation", "language": "lua", "prompt": "-- \tWrite a function to extract values between quotation marks \" \" of the given string.\nlocal function extract_quotation(text1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_quotation\n    lu.assertEquals(candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"'), {'A53', 'multi', 'Processor'})\n    lu.assertEquals(candidate('Cast your \"favorite\" entertainment \"apps\"'), {'favorite', 'apps'})\n    lu.assertEquals(candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support'), {'4k Ultra HD', 'HDR 10'})\n    lu.assertEquals(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"), {})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_726_multiply_elements", "language": "lua", "prompt": "-- \tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nlocal function multiply_elements(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply_elements\n    lu.assertEquals(candidate({1, 5, 7, 8, 10}), {5, 35, 56, 80})\n    lu.assertEquals(candidate({2, 4, 5, 6, 7}), {8, 20, 30, 42})\n    lu.assertEquals(candidate({12, 13, 14, 9, 15}), {156, 182, 126, 135})\n    lu.assertEquals(candidate({12}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_728_sum_list", "language": "lua", "prompt": "-- \tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nlocal function sum_list(lst1, lst2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_list\n    lu.assertEquals(candidate({10, 20, 30}, {15, 25, 35}), {25, 45, 65})\n    lu.assertEquals(candidate({1, 2, 3}, {5, 6, 7}), {6, 8, 10})\n    lu.assertEquals(candidate({15, 20, 30}, {15, 45, 75}), {30, 65, 105})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_72_dif_Square", "language": "lua", "prompt": "-- \tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nlocal function dif_Square(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dif_Square\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(15), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "lua", "prompt": "-- \tWrite a function to remove consecutive duplicates of a given list.\nlocal function consecutive_duplicates(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {10, 15, 19, 18, 17, 26, 17, 18, 10})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {'a', 'b', 'c', 'd'})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'}), {'a', 'b', 'c', 'd', 'a'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "lua", "prompt": "-- \tWrite a function to find the lateral surface area of a cone given radius r and the height h.\nlocal function lateralsurface_cone(r, h)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lateralsurface_cone\n    lu.assertEquals(candidate(5, 12), 204.20352248333654)\n    lu.assertEquals(candidate(10, 15), 566.3586699569488)\n    lu.assertEquals(candidate(19, 17), 1521.8090132193388)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_732_replace_specialchar", "language": "lua", "prompt": "-- \tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nlocal function replace_specialchar(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = replace_specialchar\n    lu.assertEquals(candidate('Python language, Programming language.'), 'Python:language::Programming:language:')\n    lu.assertEquals(candidate('a b c,d e f'), 'a:b:c:d:e:f')\n    lu.assertEquals(candidate('ram reshma,ram rahim'), 'ram:reshma:ram:rahim')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_733_find_first_occurrence", "language": "lua", "prompt": "-- \tWrite a function to find the index of the first occurrence of a given number in a sorted array.\nlocal function find_first_occurrence(A, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "lua", "prompt": "-- \tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nlocal function sum_Of_Subarray_Prod(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_Of_Subarray_Prod\n    lu.assertEquals(candidate({1, 2, 3}), 20)\n    lu.assertEquals(candidate({1, 2}), 5)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "lua", "prompt": "-- \tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nlocal function toggle_middle_bits(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = toggle_middle_bits\n    lu.assertEquals(candidate(9), 15)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(11), 13)\n    lu.assertEquals(candidate(65), 127)\n    lu.assertEquals(candidate(77), 115)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_736_left_insertion", "language": "lua", "prompt": "-- \tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nlocal function left_insertion(a, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_737_check_str", "language": "lua", "prompt": "-- \tWrite a function to check whether the given string is starting with a vowel or not using regex.\nlocal function check_str(string)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_str\n    lu.assertEquals(candidate('annie'), true)\n    lu.assertEquals(candidate('dawood'), false)\n    lu.assertEquals(candidate('Else'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_738_geometric_sum", "language": "lua", "prompt": "-- \tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nlocal function geometric_sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = geometric_sum\n    lu.assertEquals(candidate(7), 1.9921875)\n    lu.assertEquals(candidate(4), 1.9375)\n    lu.assertEquals(candidate(8), 1.99609375)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_739_find_Index", "language": "lua", "prompt": "-- \tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nlocal function find_Index(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Index\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 14)\n    lu.assertEquals(candidate(4), 45)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_740_tuple_to_dict", "language": "lua", "prompt": "-- \tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nlocal function tuple_to_dict(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_to_dict\n    lu.assertEquals(candidate({1, 5, 7, 10, 13, 5}), {[1] = 5, [7] = 10, [13] = 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), {[1] = 2, [3] = 4, [5] = 6})\n    lu.assertEquals(candidate({7, 8, 9, 10, 11, 12}), {[7] = 8, [9] = 10, [11] = 12})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_741_all_Characters_Same", "language": "lua", "prompt": "-- \tWrite a python function to check whether all the characters are same or not.\nlocal function all_Characters_Same(s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_Characters_Same\n    lu.assertEquals(candidate('python'), false)\n    lu.assertEquals(candidate('aaa'), true)\n    lu.assertEquals(candidate('data'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_742_area_tetrahedron", "language": "lua", "prompt": "-- \tWrite a function to caluclate the area of a tetrahedron.\nlocal function area_tetrahedron(side)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = area_tetrahedron\n    lu.assertEquals(candidate(3), 15.588457268119894)\n    lu.assertEquals(candidate(20), 692.8203230275509)\n    lu.assertEquals(candidate(10), 173.20508075688772)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_743_rotate_right", "language": "lua", "prompt": "-- \tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nlocal function rotate_right(list, m)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rotate_right\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3), {8, 9, 10, 1, 2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2), {9, 10, 1, 2, 3, 4, 5, 6, 7, 8})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5), {6, 7, 8, 9, 10, 1, 2, 3, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_744_check_none", "language": "lua", "prompt": "-- \tWrite a function to check if the given tuple has any none value or not.\nlocal function check_none(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_none\n    lu.assertEquals(candidate({10, 4, 5, 6, None}), true)\n    lu.assertEquals(candidate({7, 8, 9, 11, 14}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, None}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_745_divisible_by_digits", "language": "lua", "prompt": "-- \tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_746_sector_area", "language": "lua", "prompt": "-- \tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nlocal function sector_area(r, a)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sector_area\n    lu.assertEquals(candidate(4, 45), 6.283185307179586)\n    lu.assertEquals(candidate(9, 45), 31.808625617596654)\n    lu.assertEquals(candidate(9, 361), None)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_747_lcs_of_three", "language": "lua", "prompt": "-- \tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nlocal function lcs_of_three(X, Y, Z)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lcs_of_three\n    lu.assertEquals(candidate('AGGT12', '12TXAYB', '12XBA'), 2)\n    lu.assertEquals(candidate('Reels', 'Reelsfor', 'ReelsforReels'), 5)\n    lu.assertEquals(candidate('abcd1e2', 'bc12ea', 'bd1ea'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_748_capital_words_spaces", "language": "lua", "prompt": "-- \tWrite a function to put spaces between words starting with capital letters in a given string.\nlocal function capital_words_spaces(str1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = capital_words_spaces\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('PythonProgrammingExamples'), 'Python Programming Examples')\n    lu.assertEquals(candidate('GetReadyToBeCodingFreak'), 'Get Ready To Be Coding Freak')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "lua", "prompt": "-- \tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nlocal function sort_numeric_strings(nums_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_74_is_samepatterns", "language": "lua", "prompt": "-- \tWrite a function to check whether it follows the sequence given in the patterns array.\nlocal function is_samepatterns(colors, patterns)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_samepatterns\n    lu.assertEquals(candidate({'red', 'green', 'green'}, {'a', 'b', 'b'}), true)\n    lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b', 'b'}), false)\n    lu.assertEquals(candidate({'red', 'green', 'greenn'}, {'a', 'b'}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_750_add_tuple", "language": "lua", "prompt": "-- \tWrite a function to add the given tuple to the given list.\nlocal function add_tuple(test_list, test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_tuple\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {5, 6, 7, 9, 10})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {6, 7, 8, 10, 11})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {7, 8, 9, 11, 12})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_751_check_min_heap", "language": "lua", "prompt": "-- \tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nlocal function check_min_heap(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_min_heap\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 10, 15}), true)\n    lu.assertEquals(candidate({2, 10, 4, 5, 3, 15}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_752_jacobsthal_num", "language": "lua", "prompt": "-- \tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nlocal function jacobsthal_num(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = jacobsthal_num\n    lu.assertEquals(candidate(5), 11)\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(4), 5)\n    lu.assertEquals(candidate(13), 2731)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_753_min_k", "language": "lua", "prompt": "-- \tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nlocal function min_k(test_list, K)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_754_extract_index_list", "language": "lua", "prompt": "-- \tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nlocal function extract_index_list(l1, l2, l3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_755_second_smallest", "language": "lua", "prompt": "-- \tWrite a function to find the second smallest number in a list.\nlocal function second_smallest(numbers)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = second_smallest\n    lu.assertEquals(candidate({1, 2, -8, -2, 0, -2}), -2)\n    lu.assertEquals(candidate({1, 1, -0.5, 0, 2, -2, -2}), -0.5)\n    lu.assertEquals(candidate({2, 2}), None)\n    lu.assertEquals(candidate({2, 2, 2}), None)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_756_text_match_zero_one", "language": "lua", "prompt": "-- \tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nlocal function text_match_zero_one(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_zero_one\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('dsabbbba'), true)\n    lu.assertEquals(candidate('asbbbba'), false)\n    lu.assertEquals(candidate('abaaa'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "lua", "prompt": "-- \tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nlocal function count_reverse_pairs(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_reverse_pairs\n    lu.assertEquals(candidate({'julia', 'best', 'tseb', 'for', 'ailuj'}), 2)\n    lu.assertEquals(candidate({'geeks', 'best', 'for', 'skeeg'}), 1)\n    lu.assertEquals(candidate({'makes', 'best', 'sekam', 'for', 'rof'}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_759_is_decimal", "language": "lua", "prompt": "-- \tWrite a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_75_find_tuples", "language": "lua", "prompt": "-- \tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nlocal function find_tuples(test_list, K)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_tuples\n    lu.assertEquals(candidate({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6), {{6, 24, 12}})\n    lu.assertEquals(candidate({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5), {{5, 25, 30}})\n    lu.assertEquals(candidate({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4), {{8, 16, 4}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_760_unique_Element", "language": "lua", "prompt": "-- \tWrite a python function to check whether a list of numbers contains only one distinct element or not.\nlocal function unique_Element(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_Element\n    lu.assertEquals(candidate({1, 1, 1}), true)\n    lu.assertEquals(candidate({1, 2, 1, 2}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "lua", "prompt": "-- \tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nlocal function check_monthnumber_number(monthnum3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_monthnumber_number\n    lu.assertEquals(candidate(6), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(12), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_763_find_min_diff", "language": "lua", "prompt": "-- \tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nlocal function find_min_diff(arr, n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_min_diff\n    lu.assertEquals(candidate({1, 5, 3, 19, 18, 25}, 6), 1)\n    lu.assertEquals(candidate({4, 3, 2, 6}, 4), 1)\n    lu.assertEquals(candidate({30, 5, 20, 9}, 4), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_764_number_ctr", "language": "lua", "prompt": "-- \tWrite a python function to count number of digits in a given string.\nlocal function number_ctr(str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = number_ctr\n    lu.assertEquals(candidate('program2bedone'), 1)\n    lu.assertEquals(candidate('3wonders'), 1)\n    lu.assertEquals(candidate('123'), 3)\n    lu.assertEquals(candidate('3wond-1ers2'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_765_is_polite", "language": "lua", "prompt": "-- \tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nlocal function is_polite(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_polite\n    lu.assertEquals(candidate(7), 11)\n    lu.assertEquals(candidate(4), 7)\n    lu.assertEquals(candidate(9), 13)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_766_pair_wise", "language": "lua", "prompt": "-- \tWrite a function to return a list of all pairs of consecutive items in a given list.\nlocal function pair_wise(l1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pair_wise\n    lu.assertEquals(candidate({1, 1, 2, 3, 3, 4, 4, 5}), {{1, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), {{1, 5}, {5, 7}, {7, 9}, {9, 10}})\n    lu.assertEquals(candidate({5, 1, 9, 7, 10}), {{5, 1}, {1, 9}, {9, 7}, {7, 10}})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_767_get_pairs_count", "language": "lua", "prompt": "-- \tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nlocal function get_pairs_count(arr, sum)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_pairs_count\n    lu.assertEquals(candidate({1, 1, 1, 1}, 2), 6)\n    lu.assertEquals(candidate({1, 5, 7, -1, 5}, 6), 3)\n    lu.assertEquals(candidate({1, -2, 3}, 1), 1)\n    lu.assertEquals(candidate({-1, -2, 3}, -3), 1)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_769_Diff", "language": "lua", "prompt": "-- \tWrite a python function to get the difference between two lists.\nlocal function Diff(li1, li2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Diff\n    lu.assertEquals(candidate({10, 15, 20, 25, 30, 35, 40}, {25, 40, 35}), {10, 20, 30, 15})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}, {6, 7, 1}), {2, 3, 4, 5, 6, 7})\n    lu.assertEquals(candidate({1, 2, 3}, {6, 7, 1}), {2, 3, 6, 7})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_770_odd_num_sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of fourth power of first n odd natural numbers.\nlocal function odd_num_sum(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_num_sum\n    lu.assertEquals(candidate(2), 82)\n    lu.assertEquals(candidate(3), 707)\n    lu.assertEquals(candidate(4), 3108)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_771_check_expression", "language": "lua", "prompt": "-- \tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_772_remove_length", "language": "lua", "prompt": "-- \tWrite a function to remove all the words with k length in the given string.\nlocal function remove_length(test_str, K)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_length\n    lu.assertEquals(candidate('The person is most value tet', 3), 'person is most value')\n    lu.assertEquals(candidate('If you told me about this ok', 4), 'If you me about ok')\n    lu.assertEquals(candidate('Forces of darkeness is come into the play', 4), 'Forces of darkeness is the')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_773_occurance_substring", "language": "lua", "prompt": "-- \tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nlocal function occurance_substring(text, pattern)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = occurance_substring\n    lu.assertEquals(candidate('python programming, python language', 'python'), {'python', 0, 6})\n    lu.assertEquals(candidate('python programming,programming language', 'programming'), {'programming', 7, 18})\n    lu.assertEquals(candidate('python programming,programming language', 'language'), {'language', 31, 39})\n    lu.assertEquals(candidate('c++ programming, c++ language', 'python'), None)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_775_odd_position", "language": "lua", "prompt": "-- \tWrite a python function to check whether every odd index contains odd numbers of a given list.\nlocal function odd_position(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_position\n    lu.assertEquals(candidate({2, 1, 4, 3, 6, 7, 6, 3}), true)\n    lu.assertEquals(candidate({4, 1, 2}), true)\n    lu.assertEquals(candidate({1, 2, 3}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_776_count_vowels", "language": "lua", "prompt": "-- \tWrite a function to count those characters which have vowels as their neighbors in the given string.\nlocal function count_vowels(test_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_vowels\n    lu.assertEquals(candidate('bestinstareels'), 7)\n    lu.assertEquals(candidate('partofthejourneyistheend'), 12)\n    lu.assertEquals(candidate('amazonprime'), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_777_find_sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of non-repeated elements in a given list.\nlocal function find_sum(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_sum\n    lu.assertEquals(candidate({1, 2, 3, 1, 1, 4, 5, 6}), 21)\n    lu.assertEquals(candidate({1, 10, 9, 4, 2, 10, 10, 45, 4}), 71)\n    lu.assertEquals(candidate({12, 10, 9, 45, 2, 10, 10, 45, 10}), 78)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "lua", "prompt": "-- \tWrite a function to pack consecutive duplicates of a given list elements into sublists.\nlocal function pack_consecutive_duplicates(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pack_consecutive_duplicates\n    lu.assertEquals(candidate({0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), {{0, 0}, {1}, {2}, {3}, {4, 4}, {5}, {6, 6, 6}, {7}, {8}, {9}, {4, 4}})\n    lu.assertEquals(candidate({10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), {{10, 10}, {15}, {19}, {18, 18}, {17}, {26, 26}, {17}, {18}, {10}})\n    lu.assertEquals(candidate({'a', 'a', 'b', 'c', 'd', 'd'}), {{'a', 'a'}, {'b'}, {'c'}, {'d', 'd'}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_77_is_Diff", "language": "lua", "prompt": "-- \tWrite a python function to find whether a number is divisible by 11.\nlocal function is_Diff(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Diff\n    lu.assertEquals(candidate(12345), false)\n    lu.assertEquals(candidate(1212112), true)\n    lu.assertEquals(candidate(1212), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_780_find_combinations", "language": "lua", "prompt": "-- \tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nlocal function find_combinations(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_combinations\n    lu.assertEquals(candidate({{2, 4}, {6, 7}, {5, 1}, {6, 10}}), {{8, 11}, {7, 5}, {8, 14}, {11, 8}, {12, 17}, {11, 11}})\n    lu.assertEquals(candidate({{3, 5}, {7, 8}, {6, 2}, {7, 11}}), {{10, 13}, {9, 7}, {10, 16}, {13, 10}, {14, 19}, {13, 13}})\n    lu.assertEquals(candidate({{4, 6}, {8, 9}, {7, 3}, {8, 12}}), {{12, 15}, {11, 9}, {12, 18}, {15, 12}, {16, 21}, {15, 15}})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_781_count_divisors", "language": "lua", "prompt": "-- \tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nlocal function count_divisors(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_divisors\n    lu.assertEquals(candidate(10), true)\n    lu.assertEquals(candidate(100), false)\n    lu.assertEquals(candidate(125), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_782_odd_length_sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nlocal function odd_length_sum(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_length_sum\n    lu.assertEquals(candidate({1, 2, 4}), 14)\n    lu.assertEquals(candidate({1, 2, 1, 2}), 15)\n    lu.assertEquals(candidate({1, 7}), 8)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "lua", "prompt": "-- \tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nlocal function rgb_to_hsv(r, g, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rgb_to_hsv\n    lu.assertEquals(candidate(255, 255, 255), {0.0, 0.0, 100.0})\n    lu.assertEquals(candidate(0, 215, 0), {120.0, 100.0, 84.31372549019608})\n    lu.assertEquals(candidate(10, 215, 110), {149.26829268292684, 95.34883720930233, 84.31372549019608})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_784_mul_even_odd", "language": "lua", "prompt": "-- \tWrite a function to find the product of first even and odd number of a given list.\nlocal function mul_even_odd(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mul_even_odd\n    lu.assertEquals(candidate({1, 3, 5, 7, 4, 1, 6, 8}), 4)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), 2)\n    lu.assertEquals(candidate({1, 5, 7, 9, 10}), 10)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_785_tuple_str_int", "language": "lua", "prompt": "-- \tWrite a function to convert tuple string to integer tuple.\nlocal function tuple_str_int(test_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tuple_str_int\n    lu.assertEquals(candidate('(7, 8, 9)'), {7, 8, 9})\n    lu.assertEquals(candidate('(1, 2, 3)'), {1, 2, 3})\n    lu.assertEquals(candidate('(4, 5, 6)'), {4, 5, 6})\n    lu.assertEquals(candidate('(7, 81, 19)'), {7, 81, 19})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_786_right_insertion", "language": "lua", "prompt": "-- \tWrite a function to locate the right insertion point for a specified value in sorted order.\nlocal function right_insertion(a, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_787_text_match_three", "language": "lua", "prompt": "-- \tWrite a function that matches a string that has an a followed by three 'b'.\nlocal function text_match_three(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('caacabbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_788_new_tuple", "language": "lua", "prompt": "-- \tWrite a function to create a new tuple from the given string and list.\nlocal function new_tuple(test_list, test_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = new_tuple\n    lu.assertEquals(candidate({'WEB', 'is'}, 'best'), {'WEB', 'is', 'best'})\n    lu.assertEquals(candidate({'We', 'are'}, 'Developers'), {'We', 'are', 'Developers'})\n    lu.assertEquals(candidate({'Part', 'is'}, 'Wrong'), {'Part', 'is', 'Wrong'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_790_even_position", "language": "lua", "prompt": "-- \tWrite a python function to check whether every even index contains even numbers of a given list.\nlocal function even_position(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_position\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3}), false)\n    lu.assertEquals(candidate({2, 1, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_791_remove_nested", "language": "lua", "prompt": "-- \tWrite a function to remove tuples from the given tuple.\nlocal function remove_nested(test_tup)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_nested\n    lu.assertEquals(candidate({1, 5, 7, {4, 6}, 10}), {1, 5, 7, 10})\n    lu.assertEquals(candidate({2, 6, 8, {5, 7}, 11}), {2, 6, 8, 11})\n    lu.assertEquals(candidate({3, 7, 9, {6, 8}, 12}), {3, 7, 9, 12})\n    lu.assertEquals(candidate({3, 7, 9, {6, 8}, {5, 12}, 12}), {3, 7, 9, 12})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_792_count_list", "language": "lua", "prompt": "-- \tWrite a python function to count the number of lists in a given number of lists.\nlocal function count_list(input_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_list\n    lu.assertEquals(candidate({{1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}), 4)\n    lu.assertEquals(candidate({{1, 2}, {2, 3}, {4, 5}}), 3)\n    lu.assertEquals(candidate({{1, 0}, {2, 0}}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_793_last", "language": "lua", "prompt": "-- \tWrite a python function to find the last position of an element in a sorted array.\nlocal function last(arr, x)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = last\n    lu.assertEquals(candidate({1, 2, 3}, 1), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, 4}, 1), 2)\n    lu.assertEquals(candidate({2, 3, 2, 3, 6, 8, 9}, 3), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_794_text_starta_endb", "language": "lua", "prompt": "-- \tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nlocal function text_starta_endb(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_starta_endb\n    lu.assertEquals(candidate('aabbbb'), true)\n    lu.assertEquals(candidate('aabAbbbc'), false)\n    lu.assertEquals(candidate('accddbbjjj'), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_796_return_sum", "language": "lua", "prompt": "-- \tWrite function to find the sum of all items in the given dictionary.\nlocal function return_sum(dict)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = return_sum\n    lu.assertEquals(candidate({['a'] = 100, ['b'] = 200, ['c'] = 300}), 600)\n    lu.assertEquals(candidate({['a'] = 25, ['b'] = 18, ['c'] = 45}), 88)\n    lu.assertEquals(candidate({['a'] = 36, ['b'] = 39, ['c'] = 49}), 124)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_797_sum_in_range", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of all odd natural numbers within the range l and r.\nlocal function sum_in_range(l, r)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_in_range\n    lu.assertEquals(candidate(2, 5), 8)\n    lu.assertEquals(candidate(5, 7), 12)\n    lu.assertEquals(candidate(7, 13), 40)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_798__sum", "language": "lua", "prompt": "-- \tWrite a python function to find the sum of an array.\nlocal function _sum(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = _sum\n    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({15, 12, 13, 10}), 50)\n    lu.assertEquals(candidate({0, 1, 2}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_799_left_rotate", "language": "lua", "prompt": "-- \tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_rotate\n    lu.assertEquals(candidate(16, 2), 64)\n    lu.assertEquals(candidate(10, 2), 40)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(1, 3), 8)\n    lu.assertEquals(candidate(5, 3), 40)\n    lu.assertEquals(candidate(29, 3), 232)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_79_word_len", "language": "lua", "prompt": "-- \tWrite a python function to check whether the length of the word is odd or not.\nlocal function word_len(s)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = word_len\n    lu.assertEquals(candidate('Hadoop'), false)\n    lu.assertEquals(candidate('great'), true)\n    lu.assertEquals(candidate('structure'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_800_remove_all_spaces", "language": "lua", "prompt": "-- \tWrite a function to remove all whitespaces from a string.\nlocal function remove_all_spaces(text)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_all_spaces\n    lu.assertEquals(candidate('python  program'), 'pythonprogram')\n    lu.assertEquals(candidate('python   programming    language'), 'pythonprogramminglanguage')\n    lu.assertEquals(candidate('python                     program'), 'pythonprogram')\n    lu.assertEquals(candidate('   python                     program'), 'pythonprogram')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_801_test_three_equal", "language": "lua", "prompt": "-- \tWrite a python function to count the number of equal numbers from three given integers.\nlocal function test_three_equal(x, y, z)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = test_three_equal\n    lu.assertEquals(candidate(1, 1, 1), 3)\n    lu.assertEquals(candidate(-1, -2, -3), 0)\n    lu.assertEquals(candidate(1, 2, 2), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_802_count_rotation", "language": "lua", "prompt": "-- \tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nlocal function count_rotation(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_rotation\n    lu.assertEquals(candidate({3, 2, 1}), 1)\n    lu.assertEquals(candidate({4, 5, 1, 2, 3}), 2)\n    lu.assertEquals(candidate({7, 8, 9, 1, 2, 3}), 3)\n    lu.assertEquals(candidate({1, 2, 3}), 0)\n    lu.assertEquals(candidate({1, 3, 2}), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_803_is_perfect_square", "language": "lua", "prompt": "-- \tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nlocal function is_perfect_square(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_perfect_square\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(36), true)\n    lu.assertEquals(candidate(14), false)\n    lu.assertEquals(candidate(196), true)\n    lu.assertEquals(candidate(125), false)\n    lu.assertEquals(candidate(15625), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_804_is_product_even", "language": "lua", "prompt": "-- \tWrite a function to check whether the product of numbers in a list is even or not.\nlocal function is_product_even(arr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_product_even\n    lu.assertEquals(candidate({1, 2, 3}), true)\n    lu.assertEquals(candidate({1, 2, 1, 4}), true)\n    lu.assertEquals(candidate({1, 1}), false)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_805_max_sum_list", "language": "lua", "prompt": "-- \tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nlocal function max_sum_list(lists)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum_list\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}}), {10, 11, 12})\n    lu.assertEquals(candidate({{3, 2, 1}, {6, 5, 4}, {12, 11, 10}}), {12, 11, 10})\n    lu.assertEquals(candidate({{2, 3, 1}}), {2, 3, 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_806_max_run_uppercase", "language": "lua", "prompt": "-- \tWrite a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_807_first_odd", "language": "lua", "prompt": "-- \tWrite a python function to find the first odd number in a given list of numbers.\nlocal function first_odd(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = first_odd\n    lu.assertEquals(candidate({1, 3, 5}), 1)\n    lu.assertEquals(candidate({2, 4, 1, 3}), 1)\n    lu.assertEquals(candidate({8, 9, 1}), 9)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_808_check_K", "language": "lua", "prompt": "-- \tWrite a function to check if the given tuples contain the k or not.\nlocal function check_K(test_tup, K)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_K\n    lu.assertEquals(candidate({10, 4, 5, 6, 8}, 6), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, 7), false)\n    lu.assertEquals(candidate({7, 8, 9, 44, 11, 12}, 11), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_809_check_smaller", "language": "lua", "prompt": "-- \tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nlocal function check_smaller(test_tup1, test_tup2)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_smaller\n    lu.assertEquals(candidate({1, 2, 3}, {2, 3, 4}), false)\n    lu.assertEquals(candidate({4, 5, 6}, {3, 4, 5}), true)\n    lu.assertEquals(candidate({11, 12, 13}, {10, 11, 12}), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_80_tetrahedral_number", "language": "lua", "prompt": "-- \tWrite a function to find the nth tetrahedral number.\nlocal function tetrahedral_number(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tetrahedral_number\n    lu.assertEquals(candidate(5), 35)\n    lu.assertEquals(candidate(6), 56)\n    lu.assertEquals(candidate(7), 84)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_83_get_Char", "language": "lua", "prompt": "-- \tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nlocal function get_Char(strr)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_Char\n    lu.assertEquals(candidate('abc'), 'f')\n    lu.assertEquals(candidate('gfg'), 't')\n    lu.assertEquals(candidate('ab'), 'c')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_84_sequence", "language": "lua", "prompt": "-- \tWrite a function to find the nth number in the newman conway sequence.\nlocal function sequence(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sequence\n    lu.assertEquals(candidate(10), 6)\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(3), 2)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "lua", "prompt": "-- \tWrite a function to find nth centered hexagonal number.\nlocal function centered_hexagonal_number(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = centered_hexagonal_number\n    lu.assertEquals(candidate(10), 271)\n    lu.assertEquals(candidate(2), 7)\n    lu.assertEquals(candidate(9), 217)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "lua", "prompt": "-- \tWrite a function to merge three dictionaries into a single dictionary.\nlocal function merge_dictionaries_three(dict1, dict2, dict3)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = merge_dictionaries_three\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['O'] = 'Orange', ['W'] = 'White', ['B'] = 'Black'}), {['B'] = 'Black', ['R'] = 'Red', ['P'] = 'Pink', ['G'] = 'Green', ['W'] = 'White', ['O'] = 'Orange'})\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['G'] = 'Green', ['W'] = 'White'}, {['L'] = 'lavender', ['B'] = 'Blue'}), {['W'] = 'White', ['P'] = 'Pink', ['B'] = 'Black', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender'})\n    lu.assertEquals(candidate({['R'] = 'Red', ['B'] = 'Black', ['P'] = 'Pink'}, {['L'] = 'lavender', ['B'] = 'Blue'}, {['G'] = 'Green', ['W'] = 'White'}), {['B'] = 'Black', ['P'] = 'Pink', ['R'] = 'Red', ['G'] = 'Green', ['L'] = 'lavender', ['W'] = 'White'})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_88_freq_count", "language": "lua", "prompt": "-- \tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nlocal function freq_count(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_89_closest_num", "language": "lua", "prompt": "-- \tWrite a function to find the closest smaller number than n.\nlocal function closest_num(N)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_num\n    lu.assertEquals(candidate(11), 10)\n    lu.assertEquals(candidate(7), 6)\n    lu.assertEquals(candidate(12), 11)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_8_square_nums", "language": "lua", "prompt": "-- \tWrite a function to find squares of individual elements in a list.\nlocal function square_nums(nums)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = square_nums\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), {1, 4, 9, 16, 25, 36, 49, 64, 81, 100})\n    lu.assertEquals(candidate({10, 20, 30}), {100, 400, 900})\n    lu.assertEquals(candidate({12, 15}), {144, 225})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_90_len_log", "language": "lua", "prompt": "-- \tWrite a python function to find the length of the longest word.\nlocal function len_log(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = len_log\n    lu.assertEquals(candidate({'python', 'PHP', 'bigdata'}), 7)\n    lu.assertEquals(candidate({'a', 'ab', 'abc'}), 3)\n    lu.assertEquals(candidate({'small', 'big', 'tall'}), 5)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_91_find_substring", "language": "lua", "prompt": "-- \tWrite a function to check if a string is present as a substring in a given list of string values.\nlocal function find_substring(str1, sub_str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_substring\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ack'), true)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'abc'), false)\n    lu.assertEquals(candidate({'red', 'black', 'white', 'green', 'orange'}, 'ange'), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_92_is_undulating", "language": "lua", "prompt": "-- \tWrite a function to check whether the given number is undulating or not.\nlocal function is_undulating(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_undulating\n    lu.assertEquals(candidate(1212121), true)\n    lu.assertEquals(candidate(1991), false)\n    lu.assertEquals(candidate(121), true)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_93_power", "language": "lua", "prompt": "-- \tWrite a function to calculate the value of 'a' to the power 'b'.\nlocal function power(a, b)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = power\n    lu.assertEquals(candidate(3, 4), 81)\n    lu.assertEquals(candidate(2, 3), 8)\n    lu.assertEquals(candidate(5, 5), 3125)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_94_index_minimum", "language": "lua", "prompt": "-- \tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nlocal function index_minimum(test_list)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_95_Find_Min_Length", "language": "lua", "prompt": "-- \tWrite a python function to find the length of the smallest list in a list of lists.\nlocal function Find_Min_Length(lst)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Min_Length\n    lu.assertEquals(candidate({{1}, {1, 2}}), 1)\n    lu.assertEquals(candidate({{1, 2}, {1, 2, 3}, {1, 2, 3, 4}}), 2)\n    lu.assertEquals(candidate({{3, 3, 3}, {4, 4, 4, 4}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_96_divisor", "language": "lua", "prompt": "-- \tWrite a python function to find the number of divisors of a given integer.\nlocal function divisor(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisor\n    lu.assertEquals(candidate(15), 4)\n    lu.assertEquals(candidate(12), 6)\n    lu.assertEquals(candidate(9), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_97_frequency_lists", "language": "lua", "prompt": "-- \tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nlocal function frequency_lists(list1)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = frequency_lists\n    lu.assertEquals(candidate({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}}), {[1] = 1, [2] = 3, [3] = 1, [4] = 1, [5] = 2, [6] = 1, [7] = 1, [8] = 1, [9] = 1})\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}}), {[1] = 1, [2] = 1, [3] = 1, [4] = 1, [5] = 1, [6] = 1, [7] = 1, [8] = 1, [9] = 1, [10] = 1, [11] = 1, [12] = 1})\n    lu.assertEquals(candidate({{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}}), {[20] = 2, [30] = 2, [40] = 2, [17] = 1, [18] = 1, [16] = 1, [14] = 1, [13] = 1, [10] = 1})\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_99_decimal_to_binary", "language": "lua", "prompt": "-- \tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
{"name": "mbpp_9_find_Rotations", "language": "lua", "prompt": "-- \tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nlocal function find_Rotations(str)\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Rotations\n    lu.assertEquals(candidate('aaaa'), 1)\n    lu.assertEquals(candidate('ab'), 2)\n    lu.assertEquals(candidate('abc'), 3)\nend\n\nos.exit(lu.LuaUnit.run())", "stop_tokens": ["\nlocal", "\nfunction", "\n--", "\n\n"]}
