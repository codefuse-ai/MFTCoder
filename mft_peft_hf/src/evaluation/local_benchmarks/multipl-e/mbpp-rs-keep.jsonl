{"name": "mbpp_100_next_smallest_palindrome", "language": "rs", "prompt": "/// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfn next_smallest_palindrome(num: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = next_smallest_palindrome;\n    assert_eq!(candidate(99), 101);\n    assert_eq!(candidate(1221), 1331);\n    assert_eq!(candidate(120), 121);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_101_kth_element", "language": "rs", "prompt": "/// Write a function to find the kth element in the given array using 1-based indexing.\nfn kth_element(arr: Vec<isize>, k: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = kth_element;\n    assert_eq!(candidate(vec![12, 3, 5, 7, 19], 2), 3);\n    assert_eq!(candidate(vec![17, 24, 8, 23], 3), 8);\n    assert_eq!(candidate(vec![16, 21, 25, 36, 4], 4), 36);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_102_snake_to_camel", "language": "rs", "prompt": "/// Write a function to convert a snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"python_program\")), String::from(\"PythonProgram\"));\n    assert_eq!(candidate(String::from(\"python_language\")), String::from(\"PythonLanguage\"));\n    assert_eq!(candidate(String::from(\"programming_language\")), String::from(\"ProgrammingLanguage\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_103_eulerian_num", "language": "rs", "prompt": "/// Write a function to find the Eulerian number a(n, m).\nfn eulerian_num(n: isize, m: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = eulerian_num;\n    assert_eq!(candidate(3, 1), 4);\n    assert_eq!(candidate(4, 1), 11);\n    assert_eq!(candidate(5, 3), 26);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_104_sort_sublists", "language": "rs", "prompt": "/// Write a function to sort each sublist of strings in a given list of lists.\nfn sort_sublists(input_list: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sort_sublists;\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\"blue \"), String::from(\" black\")], vec![String::from(\" orange\"), String::from(\"brown\")]]), vec![vec![String::from(\" red \"), String::from(\"green\")], vec![String::from(\" black\"), String::from(\"blue \")], vec![String::from(\" orange\"), String::from(\"brown\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"zilver\"), String::from(\"gold\")], vec![String::from(\"magnesium\"), String::from(\"aluminium\")], vec![String::from(\"steel\"), String::from(\"bronze\")]]), vec![vec![String::from(\"gold\"), String::from(\"zilver\")], vec![String::from(\"aluminium\"), String::from(\"magnesium\")], vec![String::from(\"bronze\"), String::from(\"steel\")]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_105_count", "language": "rs", "prompt": "/// Write a python function to count true booleans in the given list.\nfn count(lst: Vec<bool>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count;\n    assert_eq!(candidate(vec![true, false, true]), 2);\n    assert_eq!(candidate(vec![false, false]), 0);\n    assert_eq!(candidate(vec![true, true, true]), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_106_add_lists", "language": "rs", "prompt": "/// Write a function to append the given list to the given tuples.\nfn add_lists(test_list: Vec<isize>, test_tup: (isize, isize)) -> (isize, isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = add_lists;\n    assert_eq!(candidate(vec![5, 6, 7], (9, 10)), (9, 10, 5, 6, 7));\n    assert_eq!(candidate(vec![6, 7, 8], (10, 11)), (10, 11, 6, 7, 8));\n    assert_eq!(candidate(vec![7, 8, 9], (11, 12)), (11, 12, 7, 8, 9));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_108_merge_sorted_list", "language": "rs", "prompt": "/// Write a function to merge three lists into a single sorted list.\nfn merge_sorted_list(num1: Vec<isize>, num2: Vec<isize>, num3: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = merge_sorted_list;\n    assert_eq!(candidate(vec![25, 24, 15, 4, 5, 29, 110], vec![19, 20, 11, 56, 25, 233, 154], vec![24, 26, 54, 48]), vec![4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);\n    assert_eq!(candidate(vec![1, 3, 5, 6, 8, 9], vec![2, 5, 7, 11], vec![1, 4, 7, 8, 12]), vec![1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);\n    assert_eq!(candidate(vec![18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], vec![25, 35, 22, 85, 14, 65, 75, 25, 58], vec![12, 74, 9, 50, 61, 41]), vec![1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_109_odd_Equivalent", "language": "rs", "prompt": "/// Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nfn odd_Equivalent(s: String, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = odd_Equivalent;\n    assert_eq!(candidate(String::from(\"011001\"), 6), 3);\n    assert_eq!(candidate(String::from(\"11011\"), 5), 4);\n    assert_eq!(candidate(String::from(\"1010\"), 4), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_113_check_integer", "language": "rs", "prompt": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_116_tuple_to_int", "language": "rs", "prompt": "/// Write a function to convert a given tuple of positive integers into a single integer.\nfn tuple_to_int(nums: (isize, isize, isize)) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = tuple_to_int;\n    assert_eq!(candidate((1, 2, 3)), 123);\n    assert_eq!(candidate((4, 5, 6)), 456);\n    assert_eq!(candidate((5, 6, 7)), 567);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_117_list_to_float", "language": "rs", "prompt": "/// Write a function to convert all possible convertible elements in a list of lists to floats.\nfn list_to_float(test_list: Vec<(String, String)>) -> Vec<(f64, f64)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = list_to_float;\n    assert_eq!(candidate(vec![(String::from(\"3\"), String::from(\"4\")), (String::from(\"1\"), String::from(\"26.45\")), (String::from(\"7.32\"), String::from(\"8\")), (String::from(\"4\"), String::from(\"8\"))]), vec![(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]);\n    assert_eq!(candidate(vec![(String::from(\"4\"), String::from(\"4\")), (String::from(\"2\"), String::from(\"27\")), (String::from(\"4.12\"), String::from(\"9\")), (String::from(\"7\"), String::from(\"11\"))]), vec![(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]);\n    assert_eq!(candidate(vec![(String::from(\"6\"), String::from(\"78\")), (String::from(\"5\"), String::from(\"26.45\")), (String::from(\"1.33\"), String::from(\"4\")), (String::from(\"82\"), String::from(\"13\"))]), vec![(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_118_string_to_list", "language": "rs", "prompt": "/// Write a function to convert a string to a list of strings split on the space character.\nfn string_to_list(string: String) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = string_to_list;\n    assert_eq!(candidate(String::from(\"python programming\")), vec![String::from(\"python\"), String::from(\"programming\")]);\n    assert_eq!(candidate(String::from(\"lists tuples strings\")), vec![String::from(\"lists\"), String::from(\"tuples\"), String::from(\"strings\")]);\n    assert_eq!(candidate(String::from(\"write a program\")), vec![String::from(\"write\"), String::from(\"a\"), String::from(\"program\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_119_search", "language": "rs", "prompt": "/// Write a python function to find the element that appears only once in a sorted array.\nfn search(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]), 8);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4, 4]), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_11_remove_Occ", "language": "rs", "prompt": "/// Write a python function to remove first and last occurrence of a given character from the string.\nfn remove_Occ(s: String, ch: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_Occ;\n    assert_eq!(candidate(String::from(\"hello\"), String::from(\"l\")), String::from(\"heo\"));\n    assert_eq!(candidate(String::from(\"abcda\"), String::from(\"a\")), String::from(\"bcd\"));\n    assert_eq!(candidate(String::from(\"PHP\"), String::from(\"P\")), String::from(\"H\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_120_max_product_tuple", "language": "rs", "prompt": "/// Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nfn max_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_product_tuple;\n    assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 36);\n    assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 200);\n    assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 484);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "rs", "prompt": "/// Write a function to sum all amicable numbers from 1 to a specified number.\nfn amicable_numbers_sum(limit: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = amicable_numbers_sum;\n    assert_eq!(candidate(999), 504);\n    assert_eq!(candidate(9999), 31626);\n    assert_eq!(candidate(99), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_125_find_length", "language": "rs", "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_126_sum", "language": "rs", "prompt": "/// Write a python function to find the sum of common divisors of two given numbers.\nfn sum(a: isize, b: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum;\n    assert_eq!(candidate(10, 15), 6);\n    assert_eq!(candidate(100, 150), 93);\n    assert_eq!(candidate(4, 6), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_127_multiply_int", "language": "rs", "prompt": "/// Write a function to multiply two integers.\nfn multiply_int(x: isize, y: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = multiply_int;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(5, 10), 50);\n    assert_eq!(candidate(4, 8), 32);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_128_long_words", "language": "rs", "prompt": "/// Write a function to find words that are longer than n characters from a given list of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_129_magic_square_test", "language": "rs", "prompt": "/// Write a function to calculate whether the matrix is a magic square.\nfn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = magic_square_test;\n    assert_eq!(candidate(vec![vec![7, 12, 1, 14], vec![2, 13, 8, 11], vec![16, 3, 10, 5], vec![9, 6, 15, 4]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 8]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 7]]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_12_sort_matrix", "language": "rs", "prompt": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_130_max_occurrences", "language": "rs", "prompt": "/// Write a function to find the item with maximum frequency in a given list.\nfn max_occurrences(nums: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_occurrences;\n    assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]), 2);\n    assert_eq!(candidate(vec![2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]), 8);\n    assert_eq!(candidate(vec![10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]), 20);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_131_reverse_vowels", "language": "rs", "prompt": "/// Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nfn reverse_vowels(str1: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = reverse_vowels;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"USA\")), String::from(\"ASU\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"ab\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_132_tup_string", "language": "rs", "prompt": "/// Write a function to convert a list to a string.\nfn tup_string(tup1: Vec<String>) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = tup_string;\n    assert_eq!(candidate(vec![String::from(\"e\"), String::from(\"x\"), String::from(\"e\"), String::from(\"r\"), String::from(\"c\"), String::from(\"i\"), String::from(\"s\"), String::from(\"e\"), String::from(\"s\")]), String::from(\"exercises\"));\n    assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]), String::from(\"program\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_133_sum_negativenum", "language": "rs", "prompt": "/// Write a function to calculate the sum of the negative numbers of a given list of numbers.\nfn sum_negativenum(nums: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_negativenum;\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), -32);\n    assert_eq!(candidate(vec![10, 15, -14, 13, -18, 12, -20]), -52);\n    assert_eq!(candidate(vec![19, -65, 57, 39, 152, -639, 121, 44, 90, -190]), -894);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_135_hexagonal_num", "language": "rs", "prompt": "/// Write a function to find the nth hexagonal number.\nfn hexagonal_num(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = hexagonal_num;\n    assert_eq!(candidate(10), 190);\n    assert_eq!(candidate(5), 45);\n    assert_eq!(candidate(7), 91);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "rs", "prompt": "/// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfn is_Sum_Of_Powers_Of_Two(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_Sum_Of_Powers_Of_Two;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(7), false);\n    assert_eq!(candidate(14), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_141_pancake_sort", "language": "rs", "prompt": "/// Write a function to sort a list of elements.\nfn pancake_sort(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = pancake_sort;\n    assert_eq!(candidate(vec![15, 79, 25, 38, 69]), vec![15, 25, 38, 69, 79]);\n    assert_eq!(candidate(vec![98, 12, 54, 36, 85]), vec![12, 36, 54, 85, 98]);\n    assert_eq!(candidate(vec![41, 42, 32, 12, 23]), vec![12, 23, 32, 41, 42]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_142_count_samepair", "language": "rs", "prompt": "/// Write a function to count number items that are identical in the same position of three given lists.\nfn count_samepair(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_samepair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9], vec![2, 1, 3, 1, 2, 6, 7, 9]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 2, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 8], vec![2, 1, 3, 1, 2, 6, 7, 8]), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "rs", "prompt": "/// Write a python function to find the maximum difference between any two elements in a given array.\nfn max_Abs_Diff(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_Abs_Diff;\n    assert_eq!(candidate(vec![2, 1, 5, 3]), 4);\n    assert_eq!(candidate(vec![9, 3, 2, 5, 1]), 8);\n    assert_eq!(candidate(vec![3, 2, 1]), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_14_find_Volume", "language": "rs", "prompt": "/// Write a python function to find the volume of a triangular prism.\nfn find_Volume(l: isize, b: isize, h: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Volume;\n    assert_eq!(candidate(10, 8, 6), 240);\n    assert_eq!(candidate(3, 2, 2), 6);\n    assert_eq!(candidate(1, 2, 1), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_160_find_solution", "language": "rs", "prompt": "/// Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nfn find_solution(a: isize, b: isize, n: isize) -> Option<(isize, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_solution;\n    assert_eq!(candidate(2, 3, 7), Some((2, 1)));\n    assert_eq!(candidate(4, 2, 7), None);\n    assert_eq!(candidate(1, 13, 17), Some((4, 1)));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_161_remove_elements", "language": "rs", "prompt": "/// Write a function to remove all elements from a given list present in another list.\nfn remove_elements(list1: Vec<isize>, list2: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_elements;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![2, 4, 6, 8]), vec![1, 3, 5, 7, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![1, 3, 5, 7]), vec![2, 4, 6, 8, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![5, 7]), vec![1, 2, 3, 4, 6, 8, 9, 10]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_162_sum_series", "language": "rs", "prompt": "/// Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nfn sum_series(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_series;\n    assert_eq!(candidate(6), 12);\n    assert_eq!(candidate(10), 30);\n    assert_eq!(candidate(9), 25);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_164_are_equivalent", "language": "rs", "prompt": "/// Write a function to determine if the sum of the divisors of two integers are the same.\nfn are_equivalent(num1: isize, num2: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = are_equivalent;\n    assert_eq!(candidate(36, 57), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(23, 47), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_165_count_char_position", "language": "rs", "prompt": "/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfn count_char_position(str1: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_char_position;\n    assert_eq!(candidate(String::from(\"xbcefg\")), 2);\n    assert_eq!(candidate(String::from(\"ABcED\")), 3);\n    assert_eq!(candidate(String::from(\"AbgdeF\")), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_166_find_even_pair", "language": "rs", "prompt": "/// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfn find_even_pair(A: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_even_pair;\n    assert_eq!(candidate(vec![5, 4, 7, 2, 1]), 4);\n    assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11]), 9);\n    assert_eq!(candidate(vec![1, 2, 3]), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_167_next_power_of_2", "language": "rs", "prompt": "/// Write a python function to find the smallest power of 2 greater than or equal to n.\nfn next_power_of_2(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = next_power_of_2;\n    assert_eq!(candidate(0), 1);\n    assert_eq!(candidate(5), 8);\n    assert_eq!(candidate(17), 32);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_168_frequency", "language": "rs", "prompt": "/// Write a function to count the number of occurrences of a number in a given list.\nfn frequency(a: Vec<isize>, x: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = frequency;\n    assert_eq!(candidate(vec![1, 2, 3], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 3, 4], 3), 3);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 1, 2], 1), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "rs", "prompt": "/// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfn text_lowercase_underscore(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_lowercase_underscore;\n    assert_eq!(candidate(String::from(\"aab_cbbbc\")), true);\n    assert_eq!(candidate(String::from(\"aab_Abbbc\")), false);\n    assert_eq!(candidate(String::from(\"Aaab_abbbc\")), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_170_sum_range_list", "language": "rs", "prompt": "/// Write a function to find the sum of numbers in a list within a range specified by two indices.\nfn sum_range_list(list1: Vec<isize>, m: isize, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_range_list;\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10), 29);\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7), 16);\n    assert_eq!(candidate(vec![2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10), 38);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "rs", "prompt": "/// Write a function to find the perimeter of a regular pentagon from the length of its sides.\nfn perimeter_pentagon(a: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = perimeter_pentagon;\n    assert_eq!(candidate(5), 25);\n    assert_eq!(candidate(10), 50);\n    assert_eq!(candidate(15), 75);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_172_count_occurance", "language": "rs", "prompt": "/// Write a function to count the number of occurence of the string 'std' in a given string.\nfn count_occurance(s: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_occurance;\n    assert_eq!(candidate(String::from(\"letstdlenstdporstd\")), 3);\n    assert_eq!(candidate(String::from(\"truststdsolensporsd\")), 1);\n    assert_eq!(candidate(String::from(\"makestdsostdworthit\")), 2);\n    assert_eq!(candidate(String::from(\"stds\")), 1);\n    assert_eq!(candidate(String::from(\"\")), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_17_square_perimeter", "language": "rs", "prompt": "/// Write a function that returns the perimeter of a square given its side length as input.\nfn square_perimeter(a: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = square_perimeter;\n    assert_eq!(candidate(10), 40);\n    assert_eq!(candidate(5), 20);\n    assert_eq!(candidate(4), 16);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "rs", "prompt": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_19_test_duplicate", "language": "rs", "prompt": "/// Write a function to find whether a given array of integers contains any duplicate element.\nfn test_duplicate(arraynums: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = test_duplicate;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3, 3, 4, 4, 5]), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_20_is_woodall", "language": "rs", "prompt": "/// Write a function to check if the given number is woodball or not.\nfn is_woodall(x: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_woodall;\n    assert_eq!(candidate(383), true);\n    assert_eq!(candidate(254), false);\n    assert_eq!(candidate(200), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_223_is_majority", "language": "rs", "prompt": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_224_count_Set_Bits", "language": "rs", "prompt": "/// Write a python function to count the number of set bits (binary digits with value 1) in a given number.\nfn count_Set_Bits(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_Set_Bits;\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(4), 1);\n    assert_eq!(candidate(6), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_226_odd_values_string", "language": "rs", "prompt": "/// Write a python function to remove the characters which have odd index values of a given string.\nfn odd_values_string(str: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = odd_values_string;\n    assert_eq!(candidate(String::from(\"abcdef\")), String::from(\"ace\"));\n    assert_eq!(candidate(String::from(\"python\")), String::from(\"pto\"));\n    assert_eq!(candidate(String::from(\"data\")), String::from(\"dt\"));\n    assert_eq!(candidate(String::from(\"lambs\")), String::from(\"lms\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_227_min_of_three", "language": "rs", "prompt": "/// Write a function to find minimum of three numbers.\nfn min_of_three(a: isize, b: isize, c: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = min_of_three;\n    assert_eq!(candidate(10, 20, 0), 0);\n    assert_eq!(candidate(19, 15, 18), 15);\n    assert_eq!(candidate(-10, -20, -30), -30);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "rs", "prompt": "/// Write a python function to check whether all the bits are unset in the given range or not.\nfn all_Bits_Set_In_The_Given_Range(n: isize, l: isize, r: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = all_Bits_Set_In_The_Given_Range;\n    assert_eq!(candidate(4, 1, 2), true);\n    assert_eq!(candidate(17, 2, 4), true);\n    assert_eq!(candidate(39, 4, 6), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_229_re_arrange_array", "language": "rs", "prompt": "/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfn re_arrange_array(arr: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = re_arrange_array;\n    assert_eq!(candidate(vec![-1, 2, -3, 4, 5, 6, -7, 8, 9], 9), vec![-1, -3, -7, 4, 5, 6, 2, 8, 9]);\n    assert_eq!(candidate(vec![12, -14, -26, 13, 15], 5), vec![-14, -26, 12, 13, 15]);\n    assert_eq!(candidate(vec![10, 24, 36, -42, -39, -78, 85], 7), vec![-42, -39, -78, 10, 24, 36, 85]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_230_replace_blank", "language": "rs", "prompt": "/// Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nfn replace_blank(str1: String, char: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = replace_blank;\n    assert_eq!(candidate(String::from(\"hello people\"), String::from(\"@\")), String::from(\"hello@people\"));\n    assert_eq!(candidate(String::from(\"python program language\"), String::from(\"$\")), String::from(\"python$program$language\"));\n    assert_eq!(candidate(String::from(\"blank space\"), String::from(\"-\")), String::from(\"blank-space\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_234_volume_cube", "language": "rs", "prompt": "/// Write a function to find the volume of a cube given its side length.\nfn volume_cube(l: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = volume_cube;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(2), 8);\n    assert_eq!(candidate(5), 125);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_238_number_of_substrings", "language": "rs", "prompt": "/// Write a python function to count the number of non-empty substrings of a given string.\nfn number_of_substrings(str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = number_of_substrings;\n    assert_eq!(candidate(String::from(\"abc\")), 6);\n    assert_eq!(candidate(String::from(\"abcd\")), 10);\n    assert_eq!(candidate(String::from(\"abcde\")), 15);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "rs", "prompt": "/// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfn get_total_number_of_sequences(m: isize, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_total_number_of_sequences;\n    assert_eq!(candidate(10, 4), 4);\n    assert_eq!(candidate(5, 2), 6);\n    assert_eq!(candidate(16, 3), 84);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_242_count_charac", "language": "rs", "prompt": "/// Write a function to count the total number of characters in a string.\nfn count_charac(str1: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_charac;\n    assert_eq!(candidate(String::from(\"python programming\")), 18);\n    assert_eq!(candidate(String::from(\"language\")), 8);\n    assert_eq!(candidate(String::from(\"words\")), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "rs", "prompt": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_245_max_sum", "language": "rs", "prompt": "/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfn max_sum(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_sum;\n    assert_eq!(candidate(vec![1, 15, 51, 45, 33, 100, 12, 18, 9]), 194);\n    assert_eq!(candidate(vec![80, 60, 30, 40, 20, 10]), 210);\n    assert_eq!(candidate(vec![2, 3, 14, 16, 21, 23, 29, 30]), 138);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_247_lps", "language": "rs", "prompt": "/// Write a function to find the length of the longest palindromic subsequence in the given string.\nfn lps(str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = lps;\n    assert_eq!(candidate(String::from(\"TENS FOR TENS\")), 5);\n    assert_eq!(candidate(String::from(\"CARDIO FOR CARDS\")), 7);\n    assert_eq!(candidate(String::from(\"PART OF THE JOURNEY IS PART\")), 9);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_249_intersection_array", "language": "rs", "prompt": "/// Write a function to find the intersection of two arrays.\nfn intersection_array(array_nums1: Vec<isize>, array_nums2: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = intersection_array;\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![1, 2, 4, 8, 9]), vec![1, 2, 8, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![3, 5, 7, 9]), vec![3, 5, 7, 9]);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 7, 8, 9, 10], vec![10, 20, 30, 40]), vec![10]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_250_count_X", "language": "rs", "prompt": "/// Write a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\nfn count_X(tup: Vec<isize>, x: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_X;\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4), 0);\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10), 3);\n    assert_eq!(candidate(vec![10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_251_insert_element", "language": "rs", "prompt": "/// Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nfn insert_element(list: Vec<String>, element: String) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = insert_element;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Black\")], String::from(\"c\")), vec![String::from(\"c\"), String::from(\"Red\"), String::from(\"c\"), String::from(\"Green\"), String::from(\"c\"), String::from(\"Black\")]);\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"java\")], String::from(\"program\")), vec![String::from(\"program\"), String::from(\"python\"), String::from(\"program\"), String::from(\"java\")]);\n    assert_eq!(candidate(vec![String::from(\"happy\"), String::from(\"sad\")], String::from(\"laugh\")), vec![String::from(\"laugh\"), String::from(\"happy\"), String::from(\"laugh\"), String::from(\"sad\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_252_convert", "language": "rs", "prompt": "/// Write a python function to convert complex numbers to polar coordinates.\nfn convert(numbers: isize) -> (f64, f64) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = convert;\n    assert_eq!(candidate(1), (1.0, 0.0));\n    assert_eq!(candidate(4), (4.0, 0.0));\n    assert_eq!(candidate(5), (5.0, 0.0));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_255_combinations_colors", "language": "rs", "prompt": "/// Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\nfn combinations_colors(l: Vec<String>, n: isize) -> Vec<Vec<String>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = combinations_colors;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 1), vec![vec![String::from(\"Red\")], vec![String::from(\"Green\")], vec![String::from(\"Blue\")]]);\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 2), vec![vec![String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\")]]);\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], 3), vec![vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Red\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Red\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Red\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Green\")], vec![String::from(\"Green\"), String::from(\"Green\"), String::from(\"Blue\")], vec![String::from(\"Green\"), String::from(\"Blue\"), String::from(\"Blue\")], vec![String::from(\"Blue\"), String::from(\"Blue\"), String::from(\"Blue\")]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_256_count_Primes_nums", "language": "rs", "prompt": "/// Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfn count_Primes_nums(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_Primes_nums;\n    assert_eq!(candidate(5), 2);\n    assert_eq!(candidate(10), 4);\n    assert_eq!(candidate(100), 25);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_257_swap_numbers", "language": "rs", "prompt": "/// Write a function that takes in two numbers and returns a list with the second number and then the first number.\nfn swap_numbers(a: isize, b: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = swap_numbers;\n    assert_eq!(candidate(10, 20), vec![20, 10]);\n    assert_eq!(candidate(15, 17), vec![17, 15]);\n    assert_eq!(candidate(100, 200), vec![200, 100]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_259_maximize_elements", "language": "rs", "prompt": "/// Write a function to maximize the given two lists.\nfn maximize_elements(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = maximize_elements;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 7], vec![4, 9], vec![2, 9], vec![7, 10]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![7, 8], vec![5, 10], vec![3, 10], vec![8, 11]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![8, 9], vec![6, 11], vec![4, 11], vec![9, 12]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_260_newman_prime", "language": "rs", "prompt": "/// Write a function to find the nth newman\u2013shanks\u2013williams prime number.\nfn newman_prime(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = newman_prime;\n    assert_eq!(candidate(3), 7);\n    assert_eq!(candidate(4), 17);\n    assert_eq!(candidate(5), 41);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_261_division_elements", "language": "rs", "prompt": "/// Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nfn division_elements(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = division_elements;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (2, 2, 2, 3));\n    assert_eq!(candidate((12, 6, 8, 16), (6, 3, 4, 4)), (2, 2, 2, 4));\n    assert_eq!(candidate((20, 14, 36, 18), (5, 7, 6, 9)), (4, 2, 6, 2));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_264_dog_age", "language": "rs", "prompt": "/// Write a function to calculate a dog's age in dog's years.\nfn dog_age(h_age: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = dog_age;\n    assert_eq!(candidate(12), 61);\n    assert_eq!(candidate(15), 73);\n    assert_eq!(candidate(24), 109);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "rs", "prompt": "/// Write a function to find the lateral surface area of a cube given its side length.\nfn lateralsurface_cube(l: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = lateralsurface_cube;\n    assert_eq!(candidate(5), 100);\n    assert_eq!(candidate(9), 324);\n    assert_eq!(candidate(10), 400);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_267_square_Sum", "language": "rs", "prompt": "/// Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nfn square_Sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = square_Sum;\n    assert_eq!(candidate(2), 10);\n    assert_eq!(candidate(3), 35);\n    assert_eq!(candidate(4), 84);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_268_find_star_num", "language": "rs", "prompt": "/// Write a function to find the n'th star number.\nfn find_star_num(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_star_num;\n    assert_eq!(candidate(3), 37);\n    assert_eq!(candidate(4), 73);\n    assert_eq!(candidate(5), 121);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_269_ascii_value", "language": "rs", "prompt": "/// Write a function to find the ascii value of a character.\nfn ascii_value(k: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = ascii_value;\n    assert_eq!(candidate(String::from(\"A\")), 65);\n    assert_eq!(candidate(String::from(\"R\")), 82);\n    assert_eq!(candidate(String::from(\"S\")), 83);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "rs", "prompt": "/// Write a python function to find the sum of even numbers at even positions of a list.\nfn sum_even_and_even_index(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_even_and_even_index;\n    assert_eq!(candidate(vec![5, 6, 12, 1, 18, 8]), 30);\n    assert_eq!(candidate(vec![3, 20, 17, 9, 2, 10, 18, 13, 6, 18]), 26);\n    assert_eq!(candidate(vec![5, 6, 12, 1]), 12);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_271_even_Power_Sum", "language": "rs", "prompt": "/// Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nfn even_Power_Sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = even_Power_Sum;\n    assert_eq!(candidate(2), 1056);\n    assert_eq!(candidate(3), 8832);\n    assert_eq!(candidate(1), 32);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_272_rear_extract", "language": "rs", "prompt": "/// Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nfn rear_extract(test_list: Vec<(isize, String, isize)>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = rear_extract;\n    assert_eq!(candidate(vec![(1, String::from(\"Rash\"), 21), (2, String::from(\"Varsha\"), 20), (3, String::from(\"Kil\"), 19)]), vec![21, 20, 19]);\n    assert_eq!(candidate(vec![(1, String::from(\"Sai\"), 36), (2, String::from(\"Ayesha\"), 25), (3, String::from(\"Salman\"), 45)]), vec![36, 25, 45]);\n    assert_eq!(candidate(vec![(1, String::from(\"Sudeep\"), 14), (2, String::from(\"Vandana\"), 36), (3, String::from(\"Dawood\"), 56)]), vec![14, 36, 56]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_273_substract_elements", "language": "rs", "prompt": "/// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfn substract_elements(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> (isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = substract_elements;\n    assert_eq!(candidate((10, 4, 5), (2, 5, 18)), (8, -1, -13));\n    assert_eq!(candidate((11, 2, 3), (24, 45, 16)), (-13, -43, -13));\n    assert_eq!(candidate((7, 18, 9), (10, 11, 12)), (-3, 7, -3));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "rs", "prompt": "/// Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nfn even_binomial_Coeff_Sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = even_binomial_Coeff_Sum;\n    assert_eq!(candidate(4), 8);\n    assert_eq!(candidate(6), 32);\n    assert_eq!(candidate(2), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_277_dict_filter", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nfn dict_filter(dict: HashMap<String, isize>, n: isize) -> HashMap<String, isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = dict_filter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 170), HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 180), HashMap::from([(String::from(\"Alden Cantrell\"), 180), (String::from(\"Pierre Cox\"), 190)]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 175), (String::from(\"Alden Cantrell\"), 180), (String::from(\"Kierra Gentry\"), 165), (String::from(\"Pierre Cox\"), 190)]), 190), HashMap::from([(String::from(\"Pierre Cox\"), 190)]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_279_is_num_decagonal", "language": "rs", "prompt": "/// Write a function to find the nth decagonal number.\nfn is_num_decagonal(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_num_decagonal;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(7), 175);\n    assert_eq!(candidate(10), 370);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_280_sequential_search", "language": "rs", "prompt": "/// Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nfn sequential_search(dlist: Vec<isize>, item: isize) -> (bool, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sequential_search;\n    assert_eq!(candidate(vec![11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31), (true, 3));\n    assert_eq!(candidate(vec![12, 32, 45, 62, 35, 47, 44, 61], 61), (true, 7));\n    assert_eq!(candidate(vec![9, 10, 17, 19, 22, 39, 48, 56], 48), (true, 6));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_281_all_unique", "language": "rs", "prompt": "/// Write a python function to check if the elements of a given list are unique or not.\nfn all_unique(test_list: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = all_unique;\n    assert_eq!(candidate(vec![1, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_282_sub_list", "language": "rs", "prompt": "/// Write a function to subtract two lists element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_283_validate", "language": "rs", "prompt": "/// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = validate;\n    assert_eq!(candidate(1234), true);\n    assert_eq!(candidate(51241), false);\n    assert_eq!(candidate(321), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_285_text_match_two_three", "language": "rs", "prompt": "/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfn text_match_two_three(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_match_two_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "rs", "prompt": "/// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_sub_array_sum_repeated;\n    assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);\n    assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);\n    assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_287_square_Sum", "language": "rs", "prompt": "/// Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nfn square_Sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = square_Sum;\n    assert_eq!(candidate(2), 20);\n    assert_eq!(candidate(3), 56);\n    assert_eq!(candidate(4), 120);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_290_max_length", "language": "rs", "prompt": "/// Write a function to find the list of maximum length in a list of lists.\nfn max_length(list1: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_length;\n    assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));\n    assert_eq!(candidate(vec![vec![1], vec![5, 7], vec![10, 12, 14, 15]]), (4, vec![10, 12, 14, 15]));\n    assert_eq!(candidate(vec![vec![5], vec![15, 20, 25]]), (3, vec![15, 20, 25]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_291_count_no_of_ways", "language": "rs", "prompt": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_292_find", "language": "rs", "prompt": "/// Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_293_otherside_rightangle", "language": "rs", "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_295_sum_div", "language": "rs", "prompt": "/// Write a function to return the sum of all divisors of a number.\nfn sum_div(number: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_div;\n    assert_eq!(candidate(8), 7);\n    assert_eq!(candidate(12), 16);\n    assert_eq!(candidate(7), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_296_get_Inv_Count", "language": "rs", "prompt": "/// Write a python function to count inversions in an array.\nfn get_Inv_Count(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_Inv_Count;\n    assert_eq!(candidate(vec![1, 20, 6, 4, 5]), 5);\n    assert_eq!(candidate(vec![1, 2, 1]), 1);\n    assert_eq!(candidate(vec![1, 2, 5, 6, 1]), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_299_max_aggregate", "language": "rs", "prompt": "/// Write a function to calculate the maximum aggregate from the list of tuples.\nfn max_aggregate(stdata: Vec<(String, isize)>) -> (String, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_aggregate;\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 90), (String::from(\"Sabah Colley\"), 88), (String::from(\"Peter Nichols\"), 7), (String::from(\"Juan Whelan\"), 122), (String::from(\"Sabah Colley\"), 84)]), (String::from(\"Juan Whelan\"), 212));\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 50), (String::from(\"Sabah Colley\"), 48), (String::from(\"Peter Nichols\"), 37), (String::from(\"Juan Whelan\"), 22), (String::from(\"Sabah Colley\"), 14)]), (String::from(\"Juan Whelan\"), 72));\n    assert_eq!(candidate(vec![(String::from(\"Juan Whelan\"), 10), (String::from(\"Sabah Colley\"), 20), (String::from(\"Peter Nichols\"), 30), (String::from(\"Juan Whelan\"), 40), (String::from(\"Sabah Colley\"), 50)]), (String::from(\"Sabah Colley\"), 70));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_304_find_Element", "language": "rs", "prompt": "/// Write a python function to find element at a given index after number of rotations.\nfn find_Element(arr: Vec<isize>, ranges: Vec<Vec<isize>>, rotations: isize, index: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Element;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![vec![0, 2], vec![0, 3]], 2, 1), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![vec![0, 1], vec![0, 2]], 1, 2), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![vec![0, 1], vec![0, 2]], 1, 1), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_305_start_withp", "language": "rs", "prompt": "/// Write a function to return two words from a list of words starting with letter 'p'.\nfn start_withp(words: Vec<String>) -> (String, String) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = start_withp;\n    assert_eq!(candidate(vec![String::from(\"Python PHP\"), String::from(\"Java JavaScript\"), String::from(\"c c++\")]), (String::from(\"Python\"), String::from(\"PHP\")));\n    assert_eq!(candidate(vec![String::from(\"Python Programming\"), String::from(\"Java Programming\")]), (String::from(\"Python\"), String::from(\"Programming\")));\n    assert_eq!(candidate(vec![String::from(\"Pqrst Pqr\"), String::from(\"qrstuv\")]), (String::from(\"Pqrst\"), String::from(\"Pqr\")));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "rs", "prompt": "/// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfn max_sum_increasing_subseq(a: Vec<isize>, n: isize, index: isize, k: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_sum_increasing_subseq;\n    assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 4, 6), 11);\n    assert_eq!(candidate(vec![1, 101, 2, 3, 100, 4, 5], 7, 2, 5), 7);\n    assert_eq!(candidate(vec![11, 15, 19, 21, 26, 28, 31], 7, 2, 4), 71);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_308_large_product", "language": "rs", "prompt": "/// Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nfn large_product(nums1: Vec<isize>, nums2: Vec<isize>, N: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = large_product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 3), vec![60, 54, 50]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 4), vec![60, 54, 50, 48]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], vec![3, 6, 8, 9, 10, 6], 5), vec![60, 54, 50, 48, 45]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_309_maximum", "language": "rs", "prompt": "/// Write a python function to find the maximum of two numbers.\nfn maximum(a: isize, b: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(5, 10), 10);\n    assert_eq!(candidate(-1, -2), -1);\n    assert_eq!(candidate(9, 7), 9);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_310_string_to_tuple", "language": "rs", "prompt": "/// Write a function to convert a given string to a list of characters.\nfn string_to_tuple(str1: String) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = string_to_tuple;\n    assert_eq!(candidate(String::from(\"python 3.0\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\"), String::from(\"3\"), String::from(\".\"), String::from(\"0\")]);\n    assert_eq!(candidate(String::from(\"item1\")), vec![String::from(\"i\"), String::from(\"t\"), String::from(\"e\"), String::from(\"m\"), String::from(\"1\")]);\n    assert_eq!(candidate(String::from(\"15.10\")), vec![String::from(\"1\"), String::from(\"5\"), String::from(\".\"), String::from(\"1\"), String::from(\"0\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "rs", "prompt": "/// Write a python function to find the highest power of 2 that is less than or equal to n.\nfn highest_Power_of_2(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = highest_Power_of_2;\n    assert_eq!(candidate(10), 8);\n    assert_eq!(candidate(19), 16);\n    assert_eq!(candidate(32), 32);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_389_find_lucas", "language": "rs", "prompt": "/// Write a function to find the n'th lucas number.\nfn find_lucas(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_lucas;\n    assert_eq!(candidate(9), 76);\n    assert_eq!(candidate(4), 7);\n    assert_eq!(candidate(3), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_392_get_max_sum", "language": "rs", "prompt": "/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfn get_max_sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_max_sum;\n    assert_eq!(candidate(60), 106);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(2), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_393_max_length_list", "language": "rs", "prompt": "/// Write a function to find the list with maximum length.\nfn max_length_list(input_list: Vec<Vec<isize>>) -> (isize, Vec<isize>) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_length_list;\n    assert_eq!(candidate(vec![vec![0], vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), (3, vec![13, 15, 17]));\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4, 5], vec![1, 2, 3, 4], vec![1, 2, 3], vec![1, 2], vec![1]]), (5, vec![1, 2, 3, 4, 5]));\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![6, 7, 8, 9], vec![10, 11, 12]]), (4, vec![6, 7, 8, 9]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_394_check_distinct", "language": "rs", "prompt": "/// Write a function to check if given list contains no duplicates.\nfn check_distinct(test_tup: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_distinct;\n    assert_eq!(candidate(vec![1, 4, 5, 6, 1, 4]), false);\n    assert_eq!(candidate(vec![1, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 6]), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "rs", "prompt": "/// Write a python function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = first_non_repeating_character;\n    assert_eq!(candidate(String::from(\"abcabc\")), None);\n    assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_396_check_char", "language": "rs", "prompt": "/// Write a function to check whether the given string starts and ends with the same character or not.\nfn check_char(string: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_char;\n    assert_eq!(candidate(String::from(\"abba\")), String::from(\"Valid\"));\n    assert_eq!(candidate(String::from(\"a\")), String::from(\"Valid\"));\n    assert_eq!(candidate(String::from(\"abcd\")), String::from(\"Invalid\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_397_median_numbers", "language": "rs", "prompt": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = median_numbers;\n    assert_eq!(candidate(25, 55, 65), 55.0);\n    assert_eq!(candidate(20, 10, 30), 20.0);\n    assert_eq!(candidate(15, 45, 75), 45.0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_399_bitwise_xor", "language": "rs", "prompt": "/// Write a function to perform the mathematical bitwise xor operation across the given tuples.\nfn bitwise_xor(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = bitwise_xor;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (15, 6, 5, 10));\n    assert_eq!(candidate((11, 5, 7, 10), (6, 3, 4, 4)), (13, 6, 3, 14));\n    assert_eq!(candidate((12, 6, 8, 11), (7, 4, 5, 6)), (11, 2, 13, 13));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_3_is_not_prime", "language": "rs", "prompt": "/// Write a python function to identify non-prime numbers.\nfn is_not_prime(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_not_prime;\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(35), true);\n    assert_eq!(candidate(37), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_400_extract_freq", "language": "rs", "prompt": "/// Write a function to extract the number of unique tuples in the given list.\nfn extract_freq(test_list: Vec<(isize, isize)>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = extract_freq;\n    assert_eq!(candidate(vec![(3, 4), (1, 2), (4, 3), (5, 6)]), 3);\n    assert_eq!(candidate(vec![(4, 15), (2, 3), (5, 4), (6, 7)]), 4);\n    assert_eq!(candidate(vec![(5, 16), (2, 3), (6, 5), (6, 9)]), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_401_add_nested_tuples", "language": "rs", "prompt": "/// Write a function to perform index wise addition of list elements in the given two nested lists.\nfn add_nested_tuples(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = add_nested_tuples;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![7, 10], vec![7, 14], vec![3, 10], vec![8, 13]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![9, 12], vec![9, 16], vec![5, 12], vec![10, 15]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![11, 14], vec![11, 18], vec![7, 14], vec![12, 17]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_404_minimum", "language": "rs", "prompt": "/// Write a python function to find the minimum of two numbers.\nfn minimum(a: isize, b: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = minimum;\n    assert_eq!(candidate(1, 2), 1);\n    assert_eq!(candidate(-5, -4), -5);\n    assert_eq!(candidate(0, 0), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_406_find_Parity", "language": "rs", "prompt": "/// Write a python function to find whether the parity of a given number is odd.\nfn find_Parity(x: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Parity;\n    assert_eq!(candidate(12), false);\n    assert_eq!(candidate(7), true);\n    assert_eq!(candidate(10), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "rs", "prompt": "/// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_409_min_product_tuple", "language": "rs", "prompt": "/// Write a function to find the minimum product from the pairs of tuples within a given list.\nfn min_product_tuple(list1: Vec<(isize, isize)>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = min_product_tuple;\n    assert_eq!(candidate(vec![(2, 7), (2, 6), (1, 8), (4, 9)]), 8);\n    assert_eq!(candidate(vec![(10, 20), (15, 2), (5, 10)]), 30);\n    assert_eq!(candidate(vec![(11, 44), (10, 15), (20, 5), (12, 9)]), 100);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_411_snake_to_camel", "language": "rs", "prompt": "/// Write a function to convert the given snake case string to camel case string.\nfn snake_to_camel(word: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = snake_to_camel;\n    assert_eq!(candidate(String::from(\"android_tv\")), String::from(\"AndroidTv\"));\n    assert_eq!(candidate(String::from(\"google_pixel\")), String::from(\"GooglePixel\"));\n    assert_eq!(candidate(String::from(\"apple_watch\")), String::from(\"AppleWatch\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_412_remove_odd", "language": "rs", "prompt": "/// Write a python function to remove odd numbers from a given list.\nfn remove_odd(l: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![2]);\n    assert_eq!(candidate(vec![2, 4, 6]), vec![2, 4, 6]);\n    assert_eq!(candidate(vec![10, 20, 3]), vec![10, 20]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_414_overlapping", "language": "rs", "prompt": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_415_max_Product", "language": "rs", "prompt": "/// Write a python function to find a pair with highest product from a given array of integers.\nfn max_Product(arr: Vec<isize>) -> (isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_Product;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 7, 0, 8, 4]), (7, 8));\n    assert_eq!(candidate(vec![0, -1, -2, -4, 5, 0, -6]), (-4, -6));\n    assert_eq!(candidate(vec![1, 2, 3]), (2, 3));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_417_group_tuples", "language": "rs", "prompt": "/// Write a function to find common first element in given list of lists.\nfn group_tuples(Input: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = group_tuples;\n    assert_eq!(candidate(vec![vec![String::from(\"x\"), String::from(\"y\")], vec![String::from(\"x\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]), vec![vec![String::from(\"x\"), String::from(\"y\"), String::from(\"z\")], vec![String::from(\"w\"), String::from(\"t\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"a\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\"), String::from(\"c\")], vec![String::from(\"d\"), String::from(\"e\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"f\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]), vec![vec![String::from(\"f\"), String::from(\"g\"), String::from(\"g\")], vec![String::from(\"h\"), String::from(\"i\")]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_420_cube_Sum", "language": "rs", "prompt": "/// Write a python function to find the cube sum of first n even natural numbers.\nfn cube_Sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = cube_Sum;\n    assert_eq!(candidate(2), 72);\n    assert_eq!(candidate(3), 288);\n    assert_eq!(candidate(4), 800);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_421_concatenate_tuple", "language": "rs", "prompt": "/// Write a function to concatenate each element of tuple by the delimiter.\nfn concatenate_tuple(test_tup: (String, String, isize, String)) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = concatenate_tuple;\n    assert_eq!(candidate((String::from(\"ID\"), String::from(\"is\"), 4, String::from(\"UTS\"))), String::from(\"ID-is-4-UTS\"));\n    assert_eq!(candidate((String::from(\"QWE\"), String::from(\"is\"), 4, String::from(\"RTY\"))), String::from(\"QWE-is-4-RTY\"));\n    assert_eq!(candidate((String::from(\"ZEN\"), String::from(\"is\"), 4, String::from(\"OP\"))), String::from(\"ZEN-is-4-OP\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "rs", "prompt": "/// Write a python function to find the average of cubes of first n natural numbers.\nfn find_Average_Of_Cube(n: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Average_Of_Cube;\n    assert_eq!(candidate(2), 4.5);\n    assert_eq!(candidate(3), 12.0);\n    assert_eq!(candidate(1), 1.0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_424_extract_rear", "language": "rs", "prompt": "/// Write a function to extract only the rear index element of each string in the given tuple.\nfn extract_rear(test_tuple: (String, String, String)) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = extract_rear;\n    assert_eq!(candidate((String::from(\"Mers\"), String::from(\"for\"), String::from(\"Vers\"))), vec![String::from(\"s\"), String::from(\"r\"), String::from(\"s\")]);\n    assert_eq!(candidate((String::from(\"Avenge\"), String::from(\"for\"), String::from(\"People\"))), vec![String::from(\"e\"), String::from(\"r\"), String::from(\"e\")]);\n    assert_eq!(candidate((String::from(\"Gotta\"), String::from(\"get\"), String::from(\"go\"))), vec![String::from(\"a\"), String::from(\"t\"), String::from(\"o\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "rs", "prompt": "/// Write a function to filter odd numbers.\nfn filter_oddnumbers(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = filter_oddnumbers;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 3, 5, 7, 9]);\n    assert_eq!(candidate(vec![10, 20, 45, 67, 84, 93]), vec![45, 67, 93]);\n    assert_eq!(candidate(vec![5, 7, 9, 8, 6, 4, 3]), vec![5, 7, 9, 3]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_427_change_date_format", "language": "rs", "prompt": "/// Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nfn change_date_format(dt: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = change_date_format;\n    assert_eq!(candidate(String::from(\"2026-01-02\")), String::from(\"02-01-2026\"));\n    assert_eq!(candidate(String::from(\"2020-11-13\")), String::from(\"13-11-2020\"));\n    assert_eq!(candidate(String::from(\"2021-04-26\")), String::from(\"26-04-2021\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_428_shell_sort", "language": "rs", "prompt": "/// Write a function to sort the given array by using shell sort.\nfn shell_sort(my_list: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = shell_sort;\n    assert_eq!(candidate(vec![12, 23, 4, 5, 3, 2, 12, 81, 56, 95]), vec![2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);\n    assert_eq!(candidate(vec![24, 22, 39, 34, 87, 73, 68]), vec![22, 24, 34, 39, 68, 73, 87]);\n    assert_eq!(candidate(vec![32, 30, 16, 96, 82, 83, 74]), vec![16, 30, 32, 74, 82, 83, 96]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_429_and_tuples", "language": "rs", "prompt": "/// Write a function to extract the elementwise and tuples from the given two tuples.\nfn and_tuples(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = and_tuples;\n    assert_eq!(candidate((10, 4, 6, 9), (5, 2, 3, 3)), (0, 0, 2, 1));\n    assert_eq!(candidate((1, 2, 3, 4), (5, 6, 7, 8)), (1, 2, 3, 0));\n    assert_eq!(candidate((8, 9, 11, 12), (7, 13, 14, 17)), (0, 9, 10, 0));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_430_parabola_directrix", "language": "rs", "prompt": "/// Write a function to find the directrix of a parabola.\nfn parabola_directrix(a: isize, b: isize, c: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = parabola_directrix;\n    assert_eq!(candidate(5, 3, 2), -198);\n    assert_eq!(candidate(9, 8, 4), -2336);\n    assert_eq!(candidate(2, 4, 6), -130);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_432_median_trapezium", "language": "rs", "prompt": "/// Write a function to find the median length of a trapezium.\nfn median_trapezium(base1: isize, base2: isize, height: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = median_trapezium;\n    assert_eq!(candidate(15, 25, 35), 20.0);\n    assert_eq!(candidate(10, 20, 30), 15.0);\n    assert_eq!(candidate(6, 9, 4), 7.5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_433_check_greater", "language": "rs", "prompt": "/// Write a function to check whether the entered number is greater than the elements of the given array.\nfn check_greater(arr: Vec<isize>, number: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_greater;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 4), false);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 6], 8), true);\n    assert_eq!(candidate(vec![9, 7, 4, 8, 6, 1], 11), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_434_text_match_one", "language": "rs", "prompt": "/// Write a function that matches a string that has an a followed by one or more b's.\nfn text_match_one(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_match_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abba\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_435_last_Digit", "language": "rs", "prompt": "/// Write a python function to find the last digit of a given number.\nfn last_Digit(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = last_Digit;\n    assert_eq!(candidate(123), 3);\n    assert_eq!(candidate(25), 5);\n    assert_eq!(candidate(30), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_436_neg_nos", "language": "rs", "prompt": "/// Write a python function to return the negative numbers in a list.\nfn neg_nos(list1: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = neg_nos;\n    assert_eq!(candidate(vec![-1, 4, 5, -6]), vec![-1, -6]);\n    assert_eq!(candidate(vec![-1, -2, 3, 4]), vec![-1, -2]);\n    assert_eq!(candidate(vec![-7, -6, 8, 9]), vec![-7, -6]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_437_remove_odd", "language": "rs", "prompt": "/// Write a function to remove odd characters in a string.\nfn remove_odd(str1: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_odd;\n    assert_eq!(candidate(String::from(\"python\")), String::from(\"yhn\"));\n    assert_eq!(candidate(String::from(\"program\")), String::from(\"rga\"));\n    assert_eq!(candidate(String::from(\"language\")), String::from(\"agae\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_438_count_bidirectional", "language": "rs", "prompt": "/// Write a function to count bidirectional tuple pairs.\nfn count_bidirectional(test_list: Vec<(isize, isize)>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_bidirectional;\n    assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]), 3);\n    assert_eq!(candidate(vec![(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]), 2);\n    assert_eq!(candidate(vec![(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_439_multiple_to_single", "language": "rs", "prompt": "/// Write a function to join a list of multiple integers into a single integer.\nfn multiple_to_single(L: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = multiple_to_single;\n    assert_eq!(candidate(vec![11, 33, 50]), 113350);\n    assert_eq!(candidate(vec![-1, 2, 3, 4, 5, 6]), -123456);\n    assert_eq!(candidate(vec![10, 15, 20, 25]), 10152025);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_440_find_adverb_position", "language": "rs", "prompt": "/// Write a function to find the first adverb and their positions in a given sentence.\nfn find_adverb_position(text: String) -> (isize, isize, String) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_adverb_position;\n    assert_eq!(candidate(String::from(\"clearly!! we can see the sky\")), (0, 7, String::from(\"clearly\")));\n    assert_eq!(candidate(String::from(\"seriously!! there are many roses\")), (0, 9, String::from(\"seriously\")));\n    assert_eq!(candidate(String::from(\"unfortunately!! sita is going to home\")), (0, 13, String::from(\"unfortunately\")));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_441_surfacearea_cube", "language": "rs", "prompt": "/// Write a function to find the surface area of a cube of a given size.\nfn surfacearea_cube(l: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = surfacearea_cube;\n    assert_eq!(candidate(5), 150);\n    assert_eq!(candidate(3), 54);\n    assert_eq!(candidate(10), 600);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_442_positive_count", "language": "rs", "prompt": "/// Write a function to find the ration of positive numbers in an array of integers.\nfn positive_count(nums: Vec<isize>) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = positive_count;\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.54);\n    assert_eq!(candidate(vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.69);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.56);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_443_largest_neg", "language": "rs", "prompt": "/// Write a python function to find the largest negative number from the given list.\nfn largest_neg(list1: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = largest_neg;\n    assert_eq!(candidate(vec![1, 2, 3, -4, -6]), -6);\n    assert_eq!(candidate(vec![1, 2, 3, -8, -9]), -9);\n    assert_eq!(candidate(vec![1, 2, 3, 4, -1]), -1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_444_trim_tuple", "language": "rs", "prompt": "/// Write a function to trim each list by k in the given lists.\nfn trim_tuple(test_list: Vec<Vec<isize>>, K: isize) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = trim_tuple;\n    assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 2), vec![vec![2], vec![9], vec![2], vec![2]]);\n    assert_eq!(candidate(vec![vec![5, 3, 2, 1, 4], vec![3, 4, 9, 2, 1], vec![9, 1, 2, 3, 5], vec![4, 8, 2, 1, 7]], 1), vec![vec![3, 2, 1], vec![4, 9, 2], vec![1, 2, 3], vec![8, 2, 1]]);\n    assert_eq!(candidate(vec![vec![7, 8, 4, 9], vec![11, 8, 12, 4], vec![4, 1, 7, 8], vec![3, 6, 9, 7]], 1), vec![vec![8, 4], vec![8, 12], vec![1, 7], vec![6, 9]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_445_index_multiplication", "language": "rs", "prompt": "/// Write a function to perform index wise multiplication of list elements in the given two lists.\nfn index_multiplication(test_tup1: Vec<Vec<isize>>, test_tup2: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = index_multiplication;\n    assert_eq!(candidate(vec![vec![1, 3], vec![4, 5], vec![2, 9], vec![1, 10]], vec![vec![6, 7], vec![3, 9], vec![1, 1], vec![7, 3]]), vec![vec![6, 21], vec![12, 45], vec![2, 9], vec![7, 30]]);\n    assert_eq!(candidate(vec![vec![2, 4], vec![5, 6], vec![3, 10], vec![2, 11]], vec![vec![7, 8], vec![4, 10], vec![2, 2], vec![8, 4]]), vec![vec![14, 32], vec![20, 60], vec![6, 20], vec![16, 44]]);\n    assert_eq!(candidate(vec![vec![3, 5], vec![6, 7], vec![4, 11], vec![3, 12]], vec![vec![8, 9], vec![5, 11], vec![3, 3], vec![9, 5]]), vec![vec![24, 45], vec![30, 77], vec![12, 33], vec![27, 60]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_447_cube_nums", "language": "rs", "prompt": "/// Write a function to find cubes of individual elements in a list.\nfn cube_nums(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = cube_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15]), vec![1728, 3375]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_448_cal_sum", "language": "rs", "prompt": "/// Write a function to calculate the sum of perrin numbers.\nfn cal_sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = cal_sum;\n    assert_eq!(candidate(9), 49);\n    assert_eq!(candidate(10), 66);\n    assert_eq!(candidate(11), 88);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_450_extract_string", "language": "rs", "prompt": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_451_remove_whitespaces", "language": "rs", "prompt": "/// Write a function to remove all whitespaces from the given string.\nfn remove_whitespaces(text1: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_whitespaces;\n    assert_eq!(candidate(String::from(\" Google    Flutter \")), String::from(\"GoogleFlutter\"));\n    assert_eq!(candidate(String::from(\" Google    Dart \")), String::from(\"GoogleDart\"));\n    assert_eq!(candidate(String::from(\" iOS    Swift \")), String::from(\"iOSSwift\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_452_loss_amount", "language": "rs", "prompt": "/// Write a function that gives loss amount on a sale if the given amount has loss else return 0.\nfn loss_amount(actual_cost: isize, sale_amount: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = loss_amount;\n    assert_eq!(candidate(1500, 1200), 0);\n    assert_eq!(candidate(100, 200), 100);\n    assert_eq!(candidate(2000, 5000), 3000);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_453_sumofFactors", "language": "rs", "prompt": "/// Write a python function to find the sum of even factors of a number.\nfn sumofFactors(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sumofFactors;\n    assert_eq!(candidate(18), 26);\n    assert_eq!(candidate(30), 48);\n    assert_eq!(candidate(6), 8);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_454_text_match_wordz", "language": "rs", "prompt": "/// Write a function that matches a word containing 'z'.\nfn text_match_wordz(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_match_wordz;\n    assert_eq!(candidate(String::from(\"pythonz.\")), true);\n    assert_eq!(candidate(String::from(\"xyz.\")), true);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "rs", "prompt": "/// Write a function to check whether the given month number contains 31 days or not.\nfn check_monthnumb_number(monthnum2: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_monthnumb_number;\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(6), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_456_reverse_string_list", "language": "rs", "prompt": "/// Write a function to reverse each string in a given list of string values.\nfn reverse_string_list(stringlist: Vec<String>) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = reverse_string_list;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Blue\"), String::from(\"White\"), String::from(\"Black\")]), vec![String::from(\"deR\"), String::from(\"neerG\"), String::from(\"eulB\"), String::from(\"etihW\"), String::from(\"kcalB\")]);\n    assert_eq!(candidate(vec![String::from(\"john\"), String::from(\"amal\"), String::from(\"joel\"), String::from(\"george\")]), vec![String::from(\"nhoj\"), String::from(\"lama\"), String::from(\"leoj\"), String::from(\"egroeg\")]);\n    assert_eq!(candidate(vec![String::from(\"jack\"), String::from(\"john\"), String::from(\"mary\")]), vec![String::from(\"kcaj\"), String::from(\"nhoj\"), String::from(\"yram\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_458_rectangle_area", "language": "rs", "prompt": "/// Write a function to find the area of a rectangle.\nfn rectangle_area(l: isize, b: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = rectangle_area;\n    assert_eq!(candidate(10, 20), 200);\n    assert_eq!(candidate(10, 5), 50);\n    assert_eq!(candidate(4, 2), 8);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_459_remove_uppercase", "language": "rs", "prompt": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_460_Extract", "language": "rs", "prompt": "/// Write a python function to get the first element of each sublist.\nfn Extract(lst: Vec<Vec<isize>>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = Extract;\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4, 5], vec![6, 7, 8, 9]]), vec![1, 3, 6]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5]]), vec![1, 4]);\n    assert_eq!(candidate(vec![vec![9, 8, 1], vec![1, 2]]), vec![9, 1]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_461_upper_ctr", "language": "rs", "prompt": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_463_max_subarray_product", "language": "rs", "prompt": "/// Write a function to find the maximum product subarray of the given array.\nfn max_subarray_product(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_subarray_product;\n    assert_eq!(candidate(vec![1, -2, -3, 0, 7, -8, -2]), 112);\n    assert_eq!(candidate(vec![6, -3, -10, 0, 2]), 180);\n    assert_eq!(candidate(vec![-2, -40, 0, -2, -3]), 80);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_464_check_value", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to check if all values are same in a dictionary.\nfn check_value(dict: HashMap<String, isize>, n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_value;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 10), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 12), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Cierra Vega\"), 12), (String::from(\"Alden Cantrell\"), 12), (String::from(\"Kierra Gentry\"), 12), (String::from(\"Pierre Cox\"), 12)]), 5), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_468_max_product", "language": "rs", "prompt": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfn max_product(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_470_add_pairwise", "language": "rs", "prompt": "/// Write a function to find the pairwise addition of the neighboring elements of the given tuple.\nfn add_pairwise(test_tup: (isize, isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = add_pairwise;\n    assert_eq!(candidate((1, 5, 7, 8, 10)), (6, 12, 15, 18));\n    assert_eq!(candidate((2, 6, 8, 9, 11)), (8, 14, 17, 20));\n    assert_eq!(candidate((3, 7, 9, 10, 12)), (10, 16, 19, 22));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_471_find_remainder", "language": "rs", "prompt": "/// Write a python function to find the product of the array multiplication modulo n.\nfn find_remainder(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_remainder;\n    assert_eq!(candidate(vec![100, 10, 5, 25, 35, 14], 11), 9);\n    assert_eq!(candidate(vec![1, 1, 1], 1), 0);\n    assert_eq!(candidate(vec![1, 2, 1], 2), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_472_check_Consecutive", "language": "rs", "prompt": "/// Write a python function to check whether the given list contains consecutive numbers or not.\nfn check_Consecutive(l: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_Consecutive;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), true);\n    assert_eq!(candidate(vec![1, 2, 3, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 2, 1]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_474_replace_char", "language": "rs", "prompt": "/// Write a function to replace characters in a string.\nfn replace_char(str1: String, ch: String, newch: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = replace_char;\n    assert_eq!(candidate(String::from(\"polygon\"), String::from(\"y\"), String::from(\"l\")), String::from(\"pollgon\"));\n    assert_eq!(candidate(String::from(\"character\"), String::from(\"c\"), String::from(\"a\")), String::from(\"aharaater\"));\n    assert_eq!(candidate(String::from(\"python\"), String::from(\"l\"), String::from(\"a\")), String::from(\"python\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_475_sort_counter", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to sort a dictionary by value.\nfn sort_counter(dict1: HashMap<String, isize>) -> Vec<(String, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sort_counter;\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 81), (String::from(\"Physics\"), 83), (String::from(\"Chemistry\"), 87)])), vec![(String::from(\"Chemistry\"), 87), (String::from(\"Physics\"), 83), (String::from(\"Math\"), 81)]);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)])), vec![(String::from(\"Math\"), 400), (String::from(\"Physics\"), 300), (String::from(\"Chemistry\"), 250)]);\n    assert_eq!(candidate(HashMap::from([(String::from(\"Math\"), 900), (String::from(\"Physics\"), 1000), (String::from(\"Chemistry\"), 1250)])), vec![(String::from(\"Chemistry\"), 1250), (String::from(\"Physics\"), 1000), (String::from(\"Math\"), 900)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_476_big_sum", "language": "rs", "prompt": "/// Write a python function to find the sum of the largest and smallest value in a given array.\nfn big_sum(nums: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = big_sum;\n    assert_eq!(candidate(vec![1, 2, 3]), 4);\n    assert_eq!(candidate(vec![-1, 2, 3, 4]), 3);\n    assert_eq!(candidate(vec![2, 3, 6]), 8);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_477_is_lower", "language": "rs", "prompt": "/// Write a python function to convert the given string to lower case.\nfn is_lower(string: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_lower;\n    assert_eq!(candidate(String::from(\"InValid\")), String::from(\"invalid\"));\n    assert_eq!(candidate(String::from(\"TruE\")), String::from(\"true\"));\n    assert_eq!(candidate(String::from(\"SenTenCE\")), String::from(\"sentence\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_478_remove_lowercase", "language": "rs", "prompt": "/// Write a function to remove lowercase substrings from a given string.\nfn remove_lowercase(str1: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_lowercase;\n    assert_eq!(candidate(String::from(\"PYTHon\")), String::from(\"PYTH\"));\n    assert_eq!(candidate(String::from(\"FInD\")), String::from(\"FID\"));\n    assert_eq!(candidate(String::from(\"STRinG\")), String::from(\"STRG\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_479_first_Digit", "language": "rs", "prompt": "/// Write a python function to find the first digit of a given number.\nfn first_Digit(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = first_Digit;\n    assert_eq!(candidate(123), 1);\n    assert_eq!(candidate(456), 4);\n    assert_eq!(candidate(12), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_4_heap_queue_largest", "language": "rs", "prompt": "/// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfn heap_queue_largest(nums: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = heap_queue_largest;\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 3), vec![85, 75, 65]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 2), vec![85, 75]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 22, 58], 5), vec![85, 75, 65, 58, 35]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_554_Split", "language": "rs", "prompt": "/// Write a python function which takes a list of integers and only returns the odd ones.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), vec![1, 3, 5]);\n    assert_eq!(candidate(vec![10, 11, 12, 13]), vec![11, 13]);\n    assert_eq!(candidate(vec![7, 8, 9, 1]), vec![7, 9, 1]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_555_difference", "language": "rs", "prompt": "/// Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nfn difference(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = difference;\n    assert_eq!(candidate(3), 30);\n    assert_eq!(candidate(5), 210);\n    assert_eq!(candidate(2), 6);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "rs", "prompt": "/// Write a python function to count the number of pairs whose xor value is odd.\nfn find_Odd_Pair(A: Vec<isize>, N: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Odd_Pair;\n    assert_eq!(candidate(vec![5, 4, 7, 2, 1], 5), 6);\n    assert_eq!(candidate(vec![7, 2, 8, 1, 0, 5, 11], 7), 12);\n    assert_eq!(candidate(vec![1, 2, 3], 3), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_557_toggle_string", "language": "rs", "prompt": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_558_digit_distance_nums", "language": "rs", "prompt": "/// Write a python function to find the sum of the per-digit difference between two integers.\nfn digit_distance_nums(n1: isize, n2: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = digit_distance_nums;\n    assert_eq!(candidate(1, 2), 1);\n    assert_eq!(candidate(23, 56), 6);\n    assert_eq!(candidate(123, 256), 7);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "rs", "prompt": "/// Write a function to find the sum of the largest contiguous sublist in the given list.\nfn max_sub_array_sum(a: Vec<isize>, size: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_sub_array_sum;\n    assert_eq!(candidate(vec![-2, -3, 4, -1, -2, 1, 5, -3], 8), 7);\n    assert_eq!(candidate(vec![-3, -4, 5, -2, -3, 2, 6, -4], 8), 8);\n    assert_eq!(candidate(vec![-4, -5, 6, -3, -4, 3, 7, -5], 8), 10);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_560_union_elements", "language": "rs", "prompt": "/// Write a function to find the union of the elements of two given lists and output them in sorted order.\nfn union_elements(test_tup1: Vec<isize>, test_tup2: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = union_elements;\n    assert_eq!(candidate(vec![3, 4, 5, 6], vec![5, 7, 4, 10]), vec![3, 4, 5, 6, 7, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], vec![3, 4, 5, 6]), vec![1, 2, 3, 4, 5, 6]);\n    assert_eq!(candidate(vec![11, 12, 13, 14], vec![13, 15, 16, 17]), vec![11, 12, 13, 14, 15, 16, 17]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_562_Find_Max_Length", "language": "rs", "prompt": "/// Write a python function to find the length of the longest sublists.\nfn Find_Max_Length(lst: Vec<Vec<isize>>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = Find_Max_Length;\n    assert_eq!(candidate(vec![vec![1], vec![1, 4], vec![5, 6, 7, 8]]), 4);\n    assert_eq!(candidate(vec![vec![0, 1], vec![2, 2], vec![3, 2, 1]]), 3);\n    assert_eq!(candidate(vec![vec![7], vec![22, 23], vec![13, 14, 15], vec![10, 20, 30, 40, 50]]), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_564_count_Pairs", "language": "rs", "prompt": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_565_split", "language": "rs", "prompt": "/// Write a python function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_566_sum_digits", "language": "rs", "prompt": "/// Write a function to get the sum of the digits of a non-negative integer.\nfn sum_digits(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_digits;\n    assert_eq!(candidate(345), 12);\n    assert_eq!(candidate(12), 3);\n    assert_eq!(candidate(97), 16);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_567_issort_list", "language": "rs", "prompt": "/// Write a function to check whether a specified list is sorted or not.\nfn issort_list(list1: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = issort_list;\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 16, 17]), true);\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 12, 14, 20, 17]), false);\n    assert_eq!(candidate(vec![1, 2, 4, 6, 8, 10, 15, 14, 20]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_569_sort_sublists", "language": "rs", "prompt": "/// Write a function to sort each sublist of strings in a given list of lists.\nfn sort_sublists(list1: Vec<Vec<String>>) -> Vec<Vec<String>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sort_sublists;\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"white\"), String::from(\"black\"), String::from(\"orange\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\"), String::from(\"white\")], vec![String::from(\"black\"), String::from(\"orange\"), String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]), vec![vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"black\")], vec![String::from(\"green\"), String::from(\"orange\")], vec![String::from(\"white\")]]);\n    assert_eq!(candidate(vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"d\"), String::from(\"c\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"f\"), String::from(\"e\")]]), vec![vec![String::from(\"a\"), String::from(\"b\")], vec![String::from(\"c\"), String::from(\"d\")], vec![String::from(\"g\"), String::from(\"h\")], vec![String::from(\"e\"), String::from(\"f\")]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_56_checks", "language": "rs", "prompt": "/// Write a python function to check if a given number is one less than twice its reverse.\nfn checks(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = checks;\n    assert_eq!(candidate(70), false);\n    assert_eq!(candidate(23), false);\n    assert_eq!(candidate(73), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_572_two_unique_nums", "language": "rs", "prompt": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_573_unique_product", "language": "rs", "prompt": "/// Write a python function to calculate the product of the unique numbers in a given list.\nfn unique_product(list_data: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = unique_product;\n    assert_eq!(candidate(vec![10, 20, 30, 40, 20, 50, 60, 40]), 720000000);\n    assert_eq!(candidate(vec![1, 2, 3, 1]), 6);\n    assert_eq!(candidate(vec![7, 8, 9, 0, 1, 1]), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "rs", "prompt": "/// Write a function to find the surface area of a cylinder.\nfn surfacearea_cylinder(r: isize, h: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = surfacearea_cylinder;\n    assert_eq!(candidate(10, 5), 942.45);\n    assert_eq!(candidate(4, 5), 226.18800000000002);\n    assert_eq!(candidate(4, 10), 351.848);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_576_is_Sub_Array", "language": "rs", "prompt": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "rs", "prompt": "/// Write a python function to find the last digit in factorial of a given number.\nfn last_Digit_Factorial(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = last_Digit_Factorial;\n    assert_eq!(candidate(4), 4);\n    assert_eq!(candidate(21), 0);\n    assert_eq!(candidate(30), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_578_interleave_lists", "language": "rs", "prompt": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_579_find_dissimilar", "language": "rs", "prompt": "/// Write a function to find the dissimilar elements in the given two tuples.\nfn find_dissimilar(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_dissimilar;\n    assert_eq!(candidate((3, 4, 5, 6), (5, 7, 4, 10)), (3, 6, 7, 10));\n    assert_eq!(candidate((1, 2, 3, 4), (7, 2, 3, 9)), (1, 4, 7, 9));\n    assert_eq!(candidate((21, 11, 25, 26), (26, 34, 21, 36)), (34, 36, 11, 25));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_57_find_Max_Num", "language": "rs", "prompt": "/// Write a python function to find the largest number that can be formed with the given list of digits.\nfn find_Max_Num(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Max_Num;\n    assert_eq!(candidate(vec![1, 2, 3]), 321);\n    assert_eq!(candidate(vec![4, 5, 6, 1]), 6541);\n    assert_eq!(candidate(vec![1, 2, 3, 9]), 9321);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_581_surface_Area", "language": "rs", "prompt": "/// Write a python function to find the surface area of a square pyramid with a given base edge and height.\nfn surface_Area(b: isize, s: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = surface_Area;\n    assert_eq!(candidate(3, 4), 33);\n    assert_eq!(candidate(4, 5), 56);\n    assert_eq!(candidate(1, 2), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_583_catalan_number", "language": "rs", "prompt": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_584_find_adverbs", "language": "rs", "prompt": "/// Write a function to find the first adverb ending with ly and its positions in a given string.\nfn find_adverbs(text: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_adverbs;\n    assert_eq!(candidate(String::from(\"Clearly, he has no excuse for such behavior.\")), String::from(\"0-7: Clearly\"));\n    assert_eq!(candidate(String::from(\"Please handle the situation carefuly\")), String::from(\"28-36: carefuly\"));\n    assert_eq!(candidate(String::from(\"Complete the task quickly\")), String::from(\"18-25: quickly\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_586_split_Arr", "language": "rs", "prompt": "/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfn split_Arr(l: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = split_Arr;\n    assert_eq!(candidate(vec![12, 10, 5, 6, 52, 36], 2), vec![5, 6, 52, 36, 12, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4], 1), vec![2, 3, 4, 1]);\n    assert_eq!(candidate(vec![0, 1, 2, 3, 4, 5, 6, 7], 3), vec![3, 4, 5, 6, 7, 0, 1, 2]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_588_big_diff", "language": "rs", "prompt": "/// Write a python function to find the difference between largest and smallest value in a given list.\nfn big_diff(nums: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = big_diff;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 3);\n    assert_eq!(candidate(vec![4, 5, 12]), 8);\n    assert_eq!(candidate(vec![9, 2, 3]), 7);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_589_perfect_squares", "language": "rs", "prompt": "/// Write a function to find perfect squares between two given numbers.\nfn perfect_squares(a: isize, b: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = perfect_squares;\n    assert_eq!(candidate(1, 30), vec![1, 4, 9, 16, 25]);\n    assert_eq!(candidate(50, 100), vec![64, 81, 100]);\n    assert_eq!(candidate(100, 200), vec![100, 121, 144, 169, 196]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_58_opposite_Signs", "language": "rs", "prompt": "/// Write a python function to check whether the given two integers have opposite sign or not.\nfn opposite_Signs(x: isize, y: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = opposite_Signs;\n    assert_eq!(candidate(1, -2), true);\n    assert_eq!(candidate(3, 2), false);\n    assert_eq!(candidate(-10, -10), false);\n    assert_eq!(candidate(-2, 2), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_591_swap_List", "language": "rs", "prompt": "/// Write a python function to interchange the first and last elements in a list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![12, 35, 9, 56, 24]), vec![24, 35, 9, 56, 12]);\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_592_sum_Of_product", "language": "rs", "prompt": "/// Write a python function to find the sum of the product of consecutive binomial co-efficients.\nfn sum_Of_product(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_Of_product;\n    assert_eq!(candidate(3), 15);\n    assert_eq!(candidate(4), 56);\n    assert_eq!(candidate(1), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_593_removezero_ip", "language": "rs", "prompt": "/// Write a function to remove leading zeroes from an ip address.\nfn removezero_ip(ip: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = removezero_ip;\n    assert_eq!(candidate(String::from(\"216.08.094.196\")), String::from(\"216.8.94.196\"));\n    assert_eq!(candidate(String::from(\"12.01.024\")), String::from(\"12.1.24\"));\n    assert_eq!(candidate(String::from(\"216.08.094.0196\")), String::from(\"216.8.94.196\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_594_diff_even_odd", "language": "rs", "prompt": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_597_find_kth", "language": "rs", "prompt": "/// Write a function to find kth element from the given two sorted arrays.\nfn find_kth(arr1: Vec<isize>, arr2: Vec<isize>, k: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_kth;\n    assert_eq!(candidate(vec![2, 3, 6, 7, 9], vec![1, 4, 8, 10], 5), 6);\n    assert_eq!(candidate(vec![100, 112, 256, 349, 770], vec![72, 86, 113, 119, 265, 445, 892], 7), 256);\n    assert_eq!(candidate(vec![3, 4, 7, 8, 10], vec![2, 5, 9, 11], 6), 8);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_598_armstrong_number", "language": "rs", "prompt": "/// Write a function to check whether the given number is armstrong or not.\nfn armstrong_number(number: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = armstrong_number;\n    assert_eq!(candidate(153), true);\n    assert_eq!(candidate(259), false);\n    assert_eq!(candidate(4458), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_599_sum_average", "language": "rs", "prompt": "/// Write a function to find sum and average of first n natural numbers.\nfn sum_average(number: isize) -> (isize, f64) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_average;\n    assert_eq!(candidate(10), (55, 5.5));\n    assert_eq!(candidate(15), (120, 8.0));\n    assert_eq!(candidate(20), (210, 10.5));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_59_is_octagonal", "language": "rs", "prompt": "/// Write a function to find the nth octagonal number.\nfn is_octagonal(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_octagonal;\n    assert_eq!(candidate(5), 65);\n    assert_eq!(candidate(10), 280);\n    assert_eq!(candidate(15), 645);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_600_is_Even", "language": "rs", "prompt": "/// Write a python function to check whether the given number is even or not.\nfn is_Even(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_Even;\n    assert_eq!(candidate(1), false);\n    assert_eq!(candidate(2), true);\n    assert_eq!(candidate(3), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_602_first_repeated_char", "language": "rs", "prompt": "/// Write a python function to find the first repeated character in a given string.\nfn first_repeated_char(str1: String) -> Option<String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = first_repeated_char;\n    assert_eq!(candidate(String::from(\"abcabc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"abc\")), None);\n    assert_eq!(candidate(String::from(\"123123\")), Some(String::from(\"1\")));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_603_get_ludic", "language": "rs", "prompt": "/// Write a function to get all lucid numbers smaller than or equal to a given integer.\nfn get_ludic(n: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_ludic;\n    assert_eq!(candidate(10), vec![1, 2, 3, 5, 7]);\n    assert_eq!(candidate(25), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);\n    assert_eq!(candidate(45), vec![1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_604_reverse_words", "language": "rs", "prompt": "/// Write a function to reverse words seperated by spaces in a given string.\nfn reverse_words(s: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = reverse_words;\n    assert_eq!(candidate(String::from(\"python program\")), String::from(\"program python\"));\n    assert_eq!(candidate(String::from(\"java language\")), String::from(\"language java\"));\n    assert_eq!(candidate(String::from(\"indian man\")), String::from(\"man indian\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_605_prime_num", "language": "rs", "prompt": "/// Write a function to check if the given integer is a prime number.\nfn prime_num(num: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = prime_num;\n    assert_eq!(candidate(13), true);\n    assert_eq!(candidate(7), true);\n    assert_eq!(candidate(-1010), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_606_radian_degree", "language": "rs", "prompt": "/// Write a function to convert degrees to radians.\nfn radian_degree(degree: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = radian_degree;\n    assert_eq!(candidate(90), 1.5707963267948966);\n    assert_eq!(candidate(60), 1.0471975511965976);\n    assert_eq!(candidate(120), 2.0943951023931953);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_607_find_literals", "language": "rs", "prompt": "/// Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nfn find_literals(text: String, pattern: String) -> (String, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_literals;\n    assert_eq!(candidate(String::from(\"The quick brown fox jumps over the lazy dog.\"), String::from(\"fox\")), (String::from(\"fox\"), 16, 19));\n    assert_eq!(candidate(String::from(\"Its been a very crazy procedure right\"), String::from(\"crazy\")), (String::from(\"crazy\"), 16, 21));\n    assert_eq!(candidate(String::from(\"Hardest choices required strongest will\"), String::from(\"will\")), (String::from(\"will\"), 35, 39));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_608_bell_Number", "language": "rs", "prompt": "/// Write a python function to find nth bell number.\nfn bell_Number(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = bell_Number;\n    assert_eq!(candidate(2), 2);\n    assert_eq!(candidate(3), 5);\n    assert_eq!(candidate(4), 15);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_610_remove_kth_element", "language": "rs", "prompt": "/// Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nfn remove_kth_element(list1: Vec<isize>, L: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_kth_element;\n    assert_eq!(candidate(vec![1, 1, 2, 3, 4, 4, 5, 1], 3), vec![1, 1, 3, 4, 4, 5, 1]);\n    assert_eq!(candidate(vec![0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4), vec![0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);\n    assert_eq!(candidate(vec![10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5), vec![10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_611_max_of_nth", "language": "rs", "prompt": "/// Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\nfn max_of_nth(test_list: Vec<Vec<isize>>, N: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_of_nth;\n    assert_eq!(candidate(vec![vec![5, 6, 7], vec![1, 3, 5], vec![8, 9, 19]], 2), 19);\n    assert_eq!(candidate(vec![vec![6, 7, 8], vec![2, 4, 6], vec![9, 10, 20]], 1), 10);\n    assert_eq!(candidate(vec![vec![7, 8, 9], vec![3, 5, 7], vec![10, 11, 21]], 1), 11);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_614_cummulative_sum", "language": "rs", "prompt": "/// Write a function to find the cumulative sum of all the values that are present in the given list of lists.\nfn cummulative_sum(test_list: Vec<Vec<isize>>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = cummulative_sum;\n    assert_eq!(candidate(vec![vec![1, 3], vec![5, 6, 7], vec![2, 6]]), 30);\n    assert_eq!(candidate(vec![vec![2, 4], vec![6, 7, 8], vec![3, 7]]), 37);\n    assert_eq!(candidate(vec![vec![3, 5], vec![7, 8, 9], vec![4, 8]]), 44);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_615_average_tuple", "language": "rs", "prompt": "/// Write a function which takes a lists of lists and returns the average value for each sublist as a list.\nfn average_tuple(nums: Vec<Vec<isize>>) -> Vec<f64> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = average_tuple;\n    assert_eq!(candidate(vec![vec![10, 10, 10, 12], vec![30, 45, 56, 45], vec![81, 80, 39, 32], vec![1, 2, 3, 4]]), vec![30.5, 34.25, 27.0, 23.25]);\n    assert_eq!(candidate(vec![vec![1, 1, -5], vec![30, -15, 56], vec![81, -60, -39], vec![-10, 2, 3]]), vec![25.5, -18.0, 3.75]);\n    assert_eq!(candidate(vec![vec![100, 100, 100, 120], vec![300, 450, 560, 450], vec![810, 800, 390, 320], vec![10, 20, 30, 40]]), vec![305.0, 342.5, 270.0, 232.5]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_616_tuple_modulo", "language": "rs", "prompt": "/// Write a function which takes two tuples of the same length and performs the element wise modulo.\nfn tuple_modulo(test_tup1: (isize, isize, isize, isize), test_tup2: (isize, isize, isize, isize)) -> (isize, isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = tuple_modulo;\n    assert_eq!(candidate((10, 4, 5, 6), (5, 6, 7, 5)), (0, 4, 5, 1));\n    assert_eq!(candidate((11, 5, 6, 7), (6, 7, 8, 6)), (5, 5, 6, 1));\n    assert_eq!(candidate((12, 6, 7, 8), (7, 8, 9, 7)), (5, 6, 7, 1));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_617_min_Jumps", "language": "rs", "prompt": "/// Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nfn min_Jumps(steps: (isize, isize), d: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = min_Jumps;\n    assert_eq!(candidate((3, 4), 11), 3.5);\n    assert_eq!(candidate((3, 4), 0), 0.0);\n    assert_eq!(candidate((11, 14), 11), 1.0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_618_div_list", "language": "rs", "prompt": "/// Write a function to divide two lists element wise.\nfn div_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<f64> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = div_list;\n    assert_eq!(candidate(vec![4, 5, 6], vec![1, 2, 3]), vec![4.0, 2.5, 2.0]);\n    assert_eq!(candidate(vec![3, 2], vec![1, 4]), vec![3.0, 0.5]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![1.8, 1.7142857142857142]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_619_move_num", "language": "rs", "prompt": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_61_count_Substrings", "language": "rs", "prompt": "/// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfn count_Substrings(s: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_Substrings;\n    assert_eq!(candidate(String::from(\"112112\")), 6);\n    assert_eq!(candidate(String::from(\"111\")), 6);\n    assert_eq!(candidate(String::from(\"1101112\")), 12);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_622_get_median", "language": "rs", "prompt": "/// Write a function to find the median of two sorted lists of same size.\nfn get_median(arr1: Vec<isize>, arr2: Vec<isize>, n: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_median;\n    assert_eq!(candidate(vec![1, 12, 15, 26, 38], vec![2, 13, 17, 30, 45], 5), 16.0);\n    assert_eq!(candidate(vec![2, 4, 8, 9], vec![7, 13, 19, 28], 4), 8.5);\n    assert_eq!(candidate(vec![3, 6, 14, 23, 36, 42], vec![2, 18, 27, 39, 49, 55], 6), 25.0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_623_nth_nums", "language": "rs", "prompt": "/// Write a function to compute the n-th power of each number in a list.\nfn nth_nums(nums: Vec<isize>, n: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = nth_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30], 3), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15], 5), vec![248832, 759375]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_624_is_upper", "language": "rs", "prompt": "/// Write a python function to convert a given string to uppercase.\nfn is_upper(string: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_upper;\n    assert_eq!(candidate(String::from(\"person\")), String::from(\"PERSON\"));\n    assert_eq!(candidate(String::from(\"final\")), String::from(\"FINAL\"));\n    assert_eq!(candidate(String::from(\"Valid\")), String::from(\"VALID\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_625_swap_List", "language": "rs", "prompt": "/// Write a python function to interchange the first and last element in a given list.\nfn swap_List(newList: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = swap_List;\n    assert_eq!(candidate(vec![1, 2, 3]), vec![3, 2, 1]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 4]), vec![4, 2, 3, 4, 1]);\n    assert_eq!(candidate(vec![4, 5, 6]), vec![6, 5, 4]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_626_triangle_area", "language": "rs", "prompt": "/// Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(-1), None);\n    assert_eq!(candidate(0), Some(0));\n    assert_eq!(candidate(2), Some(4));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_627_find_First_Missing", "language": "rs", "prompt": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_628_replace_spaces", "language": "rs", "prompt": "/// Write a function to replace all spaces in the given string with '%20'.\nfn replace_spaces(string: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"My Name is Dawood\")), String::from(\"My%20Name%20is%20Dawood\"));\n    assert_eq!(candidate(String::from(\"I am a Programmer\")), String::from(\"I%20am%20a%20Programmer\"));\n    assert_eq!(candidate(String::from(\"I love Coding\")), String::from(\"I%20love%20Coding\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_629_Split", "language": "rs", "prompt": "/// Write a python function to find even numbers from a list of numbers.\nfn Split(list: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = Split;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![2, 4]);\n    assert_eq!(candidate(vec![4, 5, 6, 7, 8, 0, 1]), vec![4, 6, 8, 0]);\n    assert_eq!(candidate(vec![8, 12, 15, 19]), vec![8, 12]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_62_smallest_num", "language": "rs", "prompt": "/// Write a python function to find smallest number in a list.\nfn smallest_num(xs: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = smallest_num;\n    assert_eq!(candidate(vec![10, 20, 1, 45, 99]), 1);\n    assert_eq!(candidate(vec![1, 2, 3]), 1);\n    assert_eq!(candidate(vec![45, 46, 50, 60]), 45);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_630_get_coordinates", "language": "rs", "prompt": "/// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfn get_coordinates(test_tup: (isize, isize)) -> Vec<Vec<isize>> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_coordinates;\n    assert_eq!(candidate((3, 4)), vec![vec![2, 3], vec![2, 4], vec![2, 5], vec![3, 3], vec![3, 4], vec![3, 5], vec![4, 3], vec![4, 4], vec![4, 5]]);\n    assert_eq!(candidate((4, 5)), vec![vec![3, 4], vec![3, 5], vec![3, 6], vec![4, 4], vec![4, 5], vec![4, 6], vec![5, 4], vec![5, 5], vec![5, 6]]);\n    assert_eq!(candidate((5, 6)), vec![vec![4, 5], vec![4, 6], vec![4, 7], vec![5, 5], vec![5, 6], vec![5, 7], vec![6, 5], vec![6, 6], vec![6, 7]]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_631_replace_spaces", "language": "rs", "prompt": "/// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfn replace_spaces(text: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = replace_spaces;\n    assert_eq!(candidate(String::from(\"Jumanji The Jungle\")), String::from(\"Jumanji_The_Jungle\"));\n    assert_eq!(candidate(String::from(\"The_Avengers\")), String::from(\"The Avengers\"));\n    assert_eq!(candidate(String::from(\"Fast and Furious\")), String::from(\"Fast_and_Furious\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_632_move_zero", "language": "rs", "prompt": "/// Write a python function to move all zeroes to the end of the given list.\nfn move_zero(num_list: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = move_zero;\n    assert_eq!(candidate(vec![1, 0, 2, 0, 3, 4]), vec![1, 2, 3, 4, 0, 0]);\n    assert_eq!(candidate(vec![2, 3, 2, 0, 0, 4, 0, 5, 0]), vec![2, 3, 2, 4, 5, 0, 0, 0, 0]);\n    assert_eq!(candidate(vec![0, 1, 0, 1, 1]), vec![1, 1, 1, 0, 0]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "rs", "prompt": "/// Write a python function to find the sum of xor of all pairs of numbers in the given list.\nfn pair_xor_Sum(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = pair_xor_Sum;\n    assert_eq!(candidate(vec![5, 9, 7, 6], 4), 47);\n    assert_eq!(candidate(vec![7, 3, 5], 3), 12);\n    assert_eq!(candidate(vec![7, 3], 2), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_635_heap_sort", "language": "rs", "prompt": "/// Write a function to sort the given list.\nfn heap_sort(iterable: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = heap_sort;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 9, 2, 4, 6, 8, 0]), vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![25, 35, 22, 85, 14, 65, 75, 25, 58]), vec![14, 22, 25, 25, 35, 58, 65, 75, 85]);\n    assert_eq!(candidate(vec![7, 1, 9, 5]), vec![1, 5, 7, 9]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_637_noprofit_noloss", "language": "rs", "prompt": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_638_wind_chill", "language": "rs", "prompt": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_639_sample_nam", "language": "rs", "prompt": "/// Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nfn sample_nam(sample_names: Vec<String>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sample_nam;\n    assert_eq!(candidate(vec![String::from(\"sally\"), String::from(\"Dylan\"), String::from(\"rebecca\"), String::from(\"Diana\"), String::from(\"Joanne\"), String::from(\"keith\")]), 16);\n    assert_eq!(candidate(vec![String::from(\"php\"), String::from(\"res\"), String::from(\"Python\"), String::from(\"abcd\"), String::from(\"Java\"), String::from(\"aaa\")]), 10);\n    assert_eq!(candidate(vec![String::from(\"abcd\"), String::from(\"Python\"), String::from(\"abba\"), String::from(\"aba\")]), 6);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_63_max_difference", "language": "rs", "prompt": "/// Write a function to find the maximum difference between available pairs in the given tuple list.\nfn max_difference(test_list: Vec<(isize, isize)>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_difference;\n    assert_eq!(candidate(vec![(3, 5), (1, 7), (10, 3), (1, 2)]), 7);\n    assert_eq!(candidate(vec![(4, 6), (2, 17), (9, 13), (11, 12)]), 15);\n    assert_eq!(candidate(vec![(12, 35), (21, 27), (13, 23), (41, 22)]), 23);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_640_remove_parenthesis", "language": "rs", "prompt": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_641_is_nonagonal", "language": "rs", "prompt": "/// Write a function to find the nth nonagonal number.\nfn is_nonagonal(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_nonagonal;\n    assert_eq!(candidate(10), 325);\n    assert_eq!(candidate(15), 750);\n    assert_eq!(candidate(18), 1089);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "rs", "prompt": "/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfn text_match_wordz_middle(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_match_wordz_middle;\n    assert_eq!(candidate(String::from(\"pythonzabc.\")), true);\n    assert_eq!(candidate(String::from(\"zxyabc.\")), false);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "rs", "prompt": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_64_subject_marks", "language": "rs", "prompt": "/// Write a function to sort a list of tuples using the second value of each tuple.\nfn subject_marks(subjectmarks: Vec<(String, isize)>) -> Vec<(String, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = subject_marks;\n    assert_eq!(candidate(vec![(String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97), (String::from(\"Social sciences\"), 82)]), vec![(String::from(\"Social sciences\"), 82), (String::from(\"English\"), 88), (String::from(\"Science\"), 90), (String::from(\"Maths\"), 97)]);\n    assert_eq!(candidate(vec![(String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54), (String::from(\"Social\"), 33)]), vec![(String::from(\"Social\"), 33), (String::from(\"Telugu\"), 49), (String::from(\"Hindhi\"), 54)]);\n    assert_eq!(candidate(vec![(String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97), (String::from(\"Biology\"), 45)]), vec![(String::from(\"Biology\"), 45), (String::from(\"Physics\"), 96), (String::from(\"Chemistry\"), 97)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_66_pos_count", "language": "rs", "prompt": "/// Write a python function to count the number of positive numbers in a list.\nfn pos_count(list: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = pos_count;\n    assert_eq!(candidate(vec![1, -2, 3, -4]), 2);\n    assert_eq!(candidate(vec![3, 4, 5, -1]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_67_bell_number", "language": "rs", "prompt": "/// Write a function to find the number of ways to partition a set of Bell numbers.\nfn bell_number(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = bell_number;\n    assert_eq!(candidate(2), 2);\n    assert_eq!(candidate(10), 115975);\n    assert_eq!(candidate(56), 6775685320645824322581483068371419745979053216268760300);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_68_is_Monotonic", "language": "rs", "prompt": "/// Write a python function to check whether the given array is monotonic or not.\nfn is_Monotonic(A: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_Monotonic;\n    assert_eq!(candidate(vec![6, 5, 4, 4]), true);\n    assert_eq!(candidate(vec![1, 2, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 3, 2]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_69_is_sublist", "language": "rs", "prompt": "/// Write a function to check whether a list contains the given sublist or not.\nfn is_sublist(l: Vec<isize>, s: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_sublist;\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![3, 7]), false);\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![4, 3]), true);\n    assert_eq!(candidate(vec![2, 4, 3, 5, 7], vec![1, 6]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "rs", "prompt": "/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfn differ_At_One_Bit_Pos(a: isize, b: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = differ_At_One_Bit_Pos;\n    assert_eq!(candidate(13, 9), true);\n    assert_eq!(candidate(15, 8), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(2, 3), true);\n    assert_eq!(candidate(5, 1), true);\n    assert_eq!(candidate(1, 5), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_70_get_equal", "language": "rs", "prompt": "/// Write a function to find whether all the given lists have equal length or not.\nfn get_equal(Input: Vec<Vec<isize>>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_equal;\n    assert_eq!(candidate(vec![vec![11, 22, 33], vec![44, 55, 66]]), true);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6, 7]]), false);\n    assert_eq!(candidate(vec![vec![1, 2], vec![3, 4]]), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_71_comb_sort", "language": "rs", "prompt": "/// Write a function to sort a list of elements.\nfn comb_sort(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = comb_sort;\n    assert_eq!(candidate(vec![5, 15, 37, 25, 79]), vec![5, 15, 25, 37, 79]);\n    assert_eq!(candidate(vec![41, 32, 15, 19, 22]), vec![15, 19, 22, 32, 41]);\n    assert_eq!(candidate(vec![99, 15, 13, 47]), vec![13, 15, 47, 99]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to add a dictionary to the tuple. The output should be a tuple.\nfn add_dict_to_tuple(test_tup: (isize, isize, isize), test_dict: HashMap<String, isize>) -> (isize, isize, isize, HashMap<String, isize>) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = add_dict_to_tuple;\n    assert_eq!(candidate((4, 5, 6), HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])), (4, 5, 6, HashMap::from([(String::from(\"MSAM\"), 1), (String::from(\"is\"), 2), (String::from(\"best\"), 3)])));\n    assert_eq!(candidate((1, 2, 3), HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])), (1, 2, 3, HashMap::from([(String::from(\"UTS\"), 2), (String::from(\"is\"), 3), (String::from(\"Worst\"), 4)])));\n    assert_eq!(candidate((8, 9, 10), HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])), (8, 9, 10, HashMap::from([(String::from(\"POS\"), 3), (String::from(\"is\"), 4), (String::from(\"Okay\"), 5)])));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "rs", "prompt": "/// Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfn maxAverageOfPath(cost: Vec<Vec<isize>>) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = maxAverageOfPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![6, 5, 4], vec![7, 3, 9]]), 5.2);\n    assert_eq!(candidate(vec![vec![2, 3, 4], vec![7, 6, 5], vec![8, 4, 10]]), 6.2);\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![8, 7, 6], vec![9, 5, 11]]), 7.2);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]]), 5.8);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_723_count_same_pair", "language": "rs", "prompt": "/// The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nfn count_same_pair(nums1: Vec<isize>, nums2: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_same_pair;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8], vec![2, 2, 3, 1, 2, 6, 7, 9]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 11);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17], vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 1);\n    assert_eq!(candidate(vec![0, 1, 1, 2], vec![0, 1, 2, 2]), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_724_power_base_sum", "language": "rs", "prompt": "/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfn power_base_sum(base: isize, power: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = power_base_sum;\n    assert_eq!(candidate(2, 100), 115);\n    assert_eq!(candidate(8, 10), 37);\n    assert_eq!(candidate(8, 15), 62);\n    assert_eq!(candidate(3, 3), 9);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_728_sum_list", "language": "rs", "prompt": "/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfn sum_list(lst1: Vec<isize>, lst2: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_list;\n    assert_eq!(candidate(vec![10, 20, 30], vec![15, 25, 35]), vec![25, 45, 65]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![5, 6, 7]), vec![6, 8, 10]);\n    assert_eq!(candidate(vec![15, 20, 30], vec![15, 45, 75]), vec![30, 65, 105]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_72_dif_Square", "language": "rs", "prompt": "/// Write a python function to check whether the given number can be represented as the difference of two squares or not.\nfn dif_Square(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = dif_Square;\n    assert_eq!(candidate(5), true);\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(15), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "rs", "prompt": "/// Write a function to find the lateral surface area of a cone given radius r and the height h.\nfn lateralsurface_cone(r: isize, h: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = lateralsurface_cone;\n    assert_eq!(candidate(5, 12), 204.20352248333654);\n    assert_eq!(candidate(10, 15), 566.3586699569488);\n    assert_eq!(candidate(19, 17), 1521.8090132193388);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_732_replace_specialchar", "language": "rs", "prompt": "/// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfn replace_specialchar(text: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = replace_specialchar;\n    assert_eq!(candidate(String::from(\"Python language, Programming language.\")), String::from(\"Python:language::Programming:language:\"));\n    assert_eq!(candidate(String::from(\"a b c,d e f\")), String::from(\"a:b:c:d:e:f\"));\n    assert_eq!(candidate(String::from(\"ram reshma,ram rahim\")), String::from(\"ram:reshma:ram:rahim\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_733_find_first_occurrence", "language": "rs", "prompt": "/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfn find_first_occurrence(A: Vec<isize>, x: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_first_occurrence;\n    assert_eq!(candidate(vec![2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5), 1);\n    assert_eq!(candidate(vec![2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5), 2);\n    assert_eq!(candidate(vec![2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "rs", "prompt": "/// Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nfn sum_Of_Subarray_Prod(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_Of_Subarray_Prod;\n    assert_eq!(candidate(vec![1, 2, 3]), 20);\n    assert_eq!(candidate(vec![1, 2]), 5);\n    assert_eq!(candidate(vec![1, 2, 3, 4]), 84);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "rs", "prompt": "/// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_736_left_insertion", "language": "rs", "prompt": "/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfn left_insertion(a: Vec<isize>, x: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = left_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_737_check_str", "language": "rs", "prompt": "/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfn check_str(string: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_str;\n    assert_eq!(candidate(String::from(\"annie\")), true);\n    assert_eq!(candidate(String::from(\"dawood\")), false);\n    assert_eq!(candidate(String::from(\"Else\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_738_geometric_sum", "language": "rs", "prompt": "/// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\nfn geometric_sum(n: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = geometric_sum;\n    assert_eq!(candidate(7), 1.9921875);\n    assert_eq!(candidate(4), 1.9375);\n    assert_eq!(candidate(8), 1.99609375);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_739_find_Index", "language": "rs", "prompt": "/// Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfn find_Index(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Index;\n    assert_eq!(candidate(2), 4);\n    assert_eq!(candidate(3), 14);\n    assert_eq!(candidate(4), 45);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_740_tuple_to_dict", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfn tuple_to_dict(test_tup: (isize, isize, isize, isize, isize, isize)) -> HashMap<isize, isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = tuple_to_dict;\n    assert_eq!(candidate((1, 5, 7, 10, 13, 5)), HashMap::from([(1, 5), (7, 10), (13, 5)]));\n    assert_eq!(candidate((1, 2, 3, 4, 5, 6)), HashMap::from([(1, 2), (3, 4), (5, 6)]));\n    assert_eq!(candidate((7, 8, 9, 10, 11, 12)), HashMap::from([(7, 8), (9, 10), (11, 12)]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_741_all_Characters_Same", "language": "rs", "prompt": "/// Write a python function to check whether all the characters are same or not.\nfn all_Characters_Same(s: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = all_Characters_Same;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"aaa\")), true);\n    assert_eq!(candidate(String::from(\"data\")), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_742_area_tetrahedron", "language": "rs", "prompt": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_743_rotate_right", "language": "rs", "prompt": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_745_divisible_by_digits", "language": "rs", "prompt": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_746_sector_area", "language": "rs", "prompt": "/// Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\nfn sector_area(r: isize, a: isize) -> Option<f64> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sector_area;\n    assert_eq!(candidate(4, 45), Some(6.283185307179586));\n    assert_eq!(candidate(9, 45), Some(31.808625617596654));\n    assert_eq!(candidate(9, 361), None);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_747_lcs_of_three", "language": "rs", "prompt": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_748_capital_words_spaces", "language": "rs", "prompt": "/// Write a function to put spaces between words starting with capital letters in a given string.\nfn capital_words_spaces(str1: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = capital_words_spaces;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"PythonProgrammingExamples\")), String::from(\"Python Programming Examples\"));\n    assert_eq!(candidate(String::from(\"GetReadyToBeCodingFreak\")), String::from(\"Get Ready To Be Coding Freak\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "rs", "prompt": "/// Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nfn sort_numeric_strings(nums_str: Vec<String>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sort_numeric_strings;\n    assert_eq!(candidate(vec![String::from(\"4\"), String::from(\"12\"), String::from(\"45\"), String::from(\"7\"), String::from(\"0\"), String::from(\"100\"), String::from(\"200\"), String::from(\"-12\"), String::from(\"-500\")]), vec![-500, -12, 0, 4, 7, 12, 45, 100, 200]);\n    assert_eq!(candidate(vec![String::from(\"2\"), String::from(\"3\"), String::from(\"8\"), String::from(\"4\"), String::from(\"7\"), String::from(\"9\"), String::from(\"8\"), String::from(\"2\"), String::from(\"6\"), String::from(\"5\"), String::from(\"1\"), String::from(\"6\"), String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"6\"), String::from(\"9\"), String::from(\"1\"), String::from(\"2\")]), vec![1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);\n    assert_eq!(candidate(vec![String::from(\"1\"), String::from(\"3\"), String::from(\"5\"), String::from(\"7\"), String::from(\"1\"), String::from(\"3\"), String::from(\"13\"), String::from(\"15\"), String::from(\"17\"), String::from(\"5\"), String::from(\"7 \"), String::from(\"9\"), String::from(\"1\"), String::from(\"11\")]), vec![1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_74_is_samepatterns", "language": "rs", "prompt": "/// Write a function to check whether it follows the sequence given in the patterns array.\nfn is_samepatterns(colors: Vec<String>, patterns: Vec<String>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_samepatterns;\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"green\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), true);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\"), String::from(\"b\")]), false);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"green\"), String::from(\"greenn\")], vec![String::from(\"a\"), String::from(\"b\")]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_750_add_tuple", "language": "rs", "prompt": "/// Write a function to add the given tuple to the given list.\nfn add_tuple(test_list: Vec<isize>, test_tup: (isize, isize)) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = add_tuple;\n    assert_eq!(candidate(vec![5, 6, 7], (9, 10)), vec![5, 6, 7, 9, 10]);\n    assert_eq!(candidate(vec![6, 7, 8], (10, 11)), vec![6, 7, 8, 10, 11]);\n    assert_eq!(candidate(vec![7, 8, 9], (11, 12)), vec![7, 8, 9, 11, 12]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_751_check_min_heap", "language": "rs", "prompt": "/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfn check_min_heap(arr: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_min_heap;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 10, 15]), true);\n    assert_eq!(candidate(vec![2, 10, 4, 5, 3, 15]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_752_jacobsthal_num", "language": "rs", "prompt": "/// Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nfn jacobsthal_num(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = jacobsthal_num;\n    assert_eq!(candidate(5), 11);\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(4), 5);\n    assert_eq!(candidate(13), 2731);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_753_min_k", "language": "rs", "prompt": "/// Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nfn min_k(test_list: Vec<(String, isize)>, K: isize) -> Vec<(String, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = min_k;\n    assert_eq!(candidate(vec![(String::from(\"Manjeet\"), 10), (String::from(\"Akshat\"), 4), (String::from(\"Akash\"), 2), (String::from(\"Nikhil\"), 8)], 2), vec![(String::from(\"Akash\"), 2), (String::from(\"Akshat\"), 4)]);\n    assert_eq!(candidate(vec![(String::from(\"Sanjeev\"), 11), (String::from(\"Angat\"), 5), (String::from(\"Akash\"), 3), (String::from(\"Nepin\"), 9)], 3), vec![(String::from(\"Akash\"), 3), (String::from(\"Angat\"), 5), (String::from(\"Nepin\"), 9)]);\n    assert_eq!(candidate(vec![(String::from(\"tanmay\"), 14), (String::from(\"Amer\"), 11), (String::from(\"Ayesha\"), 9), (String::from(\"SKD\"), 16)], 1), vec![(String::from(\"Ayesha\"), 9)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_756_text_match_zero_one", "language": "rs", "prompt": "/// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfn text_match_zero_one(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_match_zero_one;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"dsabbbba\")), true);\n    assert_eq!(candidate(String::from(\"asbbbba\")), false);\n    assert_eq!(candidate(String::from(\"abaaa\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "rs", "prompt": "/// Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nfn count_reverse_pairs(test_list: Vec<String>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_reverse_pairs;\n    assert_eq!(candidate(vec![String::from(\"julia\"), String::from(\"best\"), String::from(\"tseb\"), String::from(\"for\"), String::from(\"ailuj\")]), 2);\n    assert_eq!(candidate(vec![String::from(\"geeks\"), String::from(\"best\"), String::from(\"for\"), String::from(\"skeeg\")]), 1);\n    assert_eq!(candidate(vec![String::from(\"makes\"), String::from(\"best\"), String::from(\"sekam\"), String::from(\"for\"), String::from(\"rof\")]), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_759_is_decimal", "language": "rs", "prompt": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_75_find_tuples", "language": "rs", "prompt": "/// Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nfn find_tuples(test_list: Vec<(isize, isize, isize)>, K: isize) -> Vec<(isize, isize, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_tuples;\n    assert_eq!(candidate(vec![(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6), vec![(6, 24, 12)]);\n    assert_eq!(candidate(vec![(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5), vec![(5, 25, 30)]);\n    assert_eq!(candidate(vec![(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4), vec![(8, 16, 4)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_760_unique_Element", "language": "rs", "prompt": "/// Write a python function to check whether a list of numbers contains only one distinct element or not.\nfn unique_Element(arr: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = unique_Element;\n    assert_eq!(candidate(vec![1, 1, 1]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "rs", "prompt": "/// Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nfn check_monthnumber_number(monthnum3: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_monthnumber_number;\n    assert_eq!(candidate(6), true);\n    assert_eq!(candidate(2), false);\n    assert_eq!(candidate(12), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_763_find_min_diff", "language": "rs", "prompt": "/// Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfn find_min_diff(arr: Vec<isize>, n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_min_diff;\n    assert_eq!(candidate(vec![1, 5, 3, 19, 18, 25], 6), 1);\n    assert_eq!(candidate(vec![4, 3, 2, 6], 4), 1);\n    assert_eq!(candidate(vec![30, 5, 20, 9], 4), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_764_number_ctr", "language": "rs", "prompt": "/// Write a python function to count number of digits in a given string.\nfn number_ctr(str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = number_ctr;\n    assert_eq!(candidate(String::from(\"program2bedone\")), 1);\n    assert_eq!(candidate(String::from(\"3wonders\")), 1);\n    assert_eq!(candidate(String::from(\"123\")), 3);\n    assert_eq!(candidate(String::from(\"3wond-1ers2\")), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_765_is_polite", "language": "rs", "prompt": "/// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfn is_polite(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_polite;\n    assert_eq!(candidate(7), 11);\n    assert_eq!(candidate(4), 7);\n    assert_eq!(candidate(9), 13);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_766_pair_wise", "language": "rs", "prompt": "/// Write a function to return a list of all pairs of consecutive items in a given list.\nfn pair_wise(l1: Vec<isize>) -> Vec<(isize, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = pair_wise;\n    assert_eq!(candidate(vec![1, 1, 2, 3, 3, 4, 4, 5]), vec![(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), vec![(1, 5), (5, 7), (7, 9), (9, 10)]);\n    assert_eq!(candidate(vec![5, 1, 9, 7, 10]), vec![(5, 1), (1, 9), (9, 7), (7, 10)]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_767_get_pairs_count", "language": "rs", "prompt": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_769_Diff", "language": "rs", "prompt": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_770_odd_num_sum", "language": "rs", "prompt": "/// Write a python function to find the sum of fourth power of first n odd natural numbers.\nfn odd_num_sum(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = odd_num_sum;\n    assert_eq!(candidate(2), 82);\n    assert_eq!(candidate(3), 707);\n    assert_eq!(candidate(4), 3108);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_771_check_expression", "language": "rs", "prompt": "/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfn check_expression(exp: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_expression;\n    assert_eq!(candidate(String::from(\"{()}[{}]\")), true);\n    assert_eq!(candidate(String::from(\"{()}[{]\")), false);\n    assert_eq!(candidate(String::from(\"{()}[{}][]({})\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_772_remove_length", "language": "rs", "prompt": "/// Write a function to remove all the words with k length in the given string.\nfn remove_length(test_str: String, K: isize) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_length;\n    assert_eq!(candidate(String::from(\"The person is most value tet\"), 3), String::from(\"person is most value\"));\n    assert_eq!(candidate(String::from(\"If you told me about this ok\"), 4), String::from(\"If you me about ok\"));\n    assert_eq!(candidate(String::from(\"Forces of darkeness is come into the play\"), 4), String::from(\"Forces of darkeness is the\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_773_occurance_substring", "language": "rs", "prompt": "/// Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nfn occurance_substring(text: String, pattern: String) -> Option<(String, isize, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = occurance_substring;\n    assert_eq!(candidate(String::from(\"python programming, python language\"), String::from(\"python\")), Some((String::from(\"python\"), 0, 6)));\n    assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"programming\")), Some((String::from(\"programming\"), 7, 18)));\n    assert_eq!(candidate(String::from(\"python programming,programming language\"), String::from(\"language\")), Some((String::from(\"language\"), 31, 39)));\n    assert_eq!(candidate(String::from(\"c++ programming, c++ language\"), String::from(\"python\")), None);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_775_odd_position", "language": "rs", "prompt": "/// Write a python function to check whether every odd index contains odd numbers of a given list.\nfn odd_position(nums: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = odd_position;\n    assert_eq!(candidate(vec![2, 1, 4, 3, 6, 7, 6, 3]), true);\n    assert_eq!(candidate(vec![4, 1, 2]), true);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_776_count_vowels", "language": "rs", "prompt": "/// Write a function to count those characters which have vowels as their neighbors in the given string.\nfn count_vowels(test_str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_vowels;\n    assert_eq!(candidate(String::from(\"bestinstareels\")), 7);\n    assert_eq!(candidate(String::from(\"partofthejourneyistheend\")), 12);\n    assert_eq!(candidate(String::from(\"amazonprime\")), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_777_find_sum", "language": "rs", "prompt": "/// Write a python function to find the sum of non-repeated elements in a given list.\nfn find_sum(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_sum;\n    assert_eq!(candidate(vec![1, 2, 3, 1, 1, 4, 5, 6]), 21);\n    assert_eq!(candidate(vec![1, 10, 9, 4, 2, 10, 10, 45, 4]), 71);\n    assert_eq!(candidate(vec![12, 10, 9, 45, 2, 10, 10, 45, 10]), 78);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_77_is_Diff", "language": "rs", "prompt": "/// Write a python function to find whether a number is divisible by 11.\nfn is_Diff(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_Diff;\n    assert_eq!(candidate(12345), false);\n    assert_eq!(candidate(1212112), true);\n    assert_eq!(candidate(1212), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_780_find_combinations", "language": "rs", "prompt": "/// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfn find_combinations(test_list: Vec<(isize, isize)>) -> Vec<(isize, isize)> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_combinations;\n    assert_eq!(candidate(vec![(2, 4), (6, 7), (5, 1), (6, 10)]), vec![(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]);\n    assert_eq!(candidate(vec![(3, 5), (7, 8), (6, 2), (7, 11)]), vec![(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]);\n    assert_eq!(candidate(vec![(4, 6), (8, 9), (7, 3), (8, 12)]), vec![(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_781_count_divisors", "language": "rs", "prompt": "/// Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nfn count_divisors(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_divisors;\n    assert_eq!(candidate(10), true);\n    assert_eq!(candidate(100), false);\n    assert_eq!(candidate(125), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_782_odd_length_sum", "language": "rs", "prompt": "/// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfn odd_length_sum(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = odd_length_sum;\n    assert_eq!(candidate(vec![1, 2, 4]), 14);\n    assert_eq!(candidate(vec![1, 2, 1, 2]), 15);\n    assert_eq!(candidate(vec![1, 7]), 8);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "rs", "prompt": "/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfn rgb_to_hsv(r: isize, g: isize, b: isize) -> Vec<f64> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = rgb_to_hsv;\n    assert_eq!(candidate(255, 255, 255), vec![0.0, 0.0, 100.0]);\n    assert_eq!(candidate(0, 215, 0), vec![120.0, 100.0, 84.31372549019608]);\n    assert_eq!(candidate(10, 215, 110), vec![149.26829268292684, 95.34883720930233, 84.31372549019608]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_784_mul_even_odd", "language": "rs", "prompt": "/// Write a function to find the product of first even and odd number of a given list.\nfn mul_even_odd(list1: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = mul_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 10);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_785_tuple_str_int", "language": "rs", "prompt": "/// Write a function to convert tuple string to integer tuple.\nfn tuple_str_int(test_str: String) -> (isize, isize, isize) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = tuple_str_int;\n    assert_eq!(candidate(String::from(\"(7, 8, 9)\")), (7, 8, 9));\n    assert_eq!(candidate(String::from(\"(1, 2, 3)\")), (1, 2, 3));\n    assert_eq!(candidate(String::from(\"(4, 5, 6)\")), (4, 5, 6));\n    assert_eq!(candidate(String::from(\"(7, 81, 19)\")), (7, 81, 19));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_786_right_insertion", "language": "rs", "prompt": "/// Write a function to locate the right insertion point for a specified value in sorted order.\nfn right_insertion(a: Vec<isize>, x: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = right_insertion;\n    assert_eq!(candidate(vec![1, 2, 4, 5], 6), 4);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 3), 2);\n    assert_eq!(candidate(vec![1, 2, 4, 5], 7), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_787_text_match_three", "language": "rs", "prompt": "/// Write a function that matches a string that has an a followed by three 'b'.\nfn text_match_three(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_match_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n    assert_eq!(candidate(String::from(\"caacabbbba\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_788_new_tuple", "language": "rs", "prompt": "/// Write a function to create a new tuple from the given string and list.\nfn new_tuple(test_list: Vec<String>, test_str: String) -> (String, String, String) {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = new_tuple;\n    assert_eq!(candidate(vec![String::from(\"WEB\"), String::from(\"is\")], String::from(\"best\")), (String::from(\"WEB\"), String::from(\"is\"), String::from(\"best\")));\n    assert_eq!(candidate(vec![String::from(\"We\"), String::from(\"are\")], String::from(\"Developers\")), (String::from(\"We\"), String::from(\"are\"), String::from(\"Developers\")));\n    assert_eq!(candidate(vec![String::from(\"Part\"), String::from(\"is\")], String::from(\"Wrong\")), (String::from(\"Part\"), String::from(\"is\"), String::from(\"Wrong\")));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_790_even_position", "language": "rs", "prompt": "/// Write a python function to check whether every even index contains even numbers of a given list.\nfn even_position(nums: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = even_position;\n    assert_eq!(candidate(vec![3, 2, 1]), false);\n    assert_eq!(candidate(vec![1, 2, 3]), false);\n    assert_eq!(candidate(vec![2, 1, 4]), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_792_count_list", "language": "rs", "prompt": "/// Write a python function to count the number of lists in a given number of lists.\nfn count_list(input_list: Vec<Vec<isize>>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_list;\n    assert_eq!(candidate(vec![vec![1, 3], vec![5, 7], vec![9, 11], vec![13, 15, 17]]), 4);\n    assert_eq!(candidate(vec![vec![1, 2], vec![2, 3], vec![4, 5]]), 3);\n    assert_eq!(candidate(vec![vec![1, 0], vec![2, 0]]), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_793_last", "language": "rs", "prompt": "/// Write a python function to find the last position of an element in a sorted array.\nfn last(arr: Vec<isize>, x: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = last;\n    assert_eq!(candidate(vec![1, 2, 3], 1), 0);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 3, 4], 1), 2);\n    assert_eq!(candidate(vec![2, 3, 2, 3, 6, 8, 9], 3), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_794_text_starta_endb", "language": "rs", "prompt": "/// Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nfn text_starta_endb(text: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = text_starta_endb;\n    assert_eq!(candidate(String::from(\"aabbbb\")), true);\n    assert_eq!(candidate(String::from(\"aabAbbbc\")), false);\n    assert_eq!(candidate(String::from(\"accddbbjjj\")), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_796_return_sum", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write function to find the sum of all items in the given dictionary.\nfn return_sum(dict: HashMap<String, isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = return_sum;\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 100), (String::from(\"b\"), 200), (String::from(\"c\"), 300)])), 600);\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 25), (String::from(\"b\"), 18), (String::from(\"c\"), 45)])), 88);\n    assert_eq!(candidate(HashMap::from([(String::from(\"a\"), 36), (String::from(\"b\"), 39), (String::from(\"c\"), 49)])), 124);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_797_sum_in_range", "language": "rs", "prompt": "/// Write a python function to find the sum of all odd natural numbers within the range l and r.\nfn sum_in_range(l: isize, r: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sum_in_range;\n    assert_eq!(candidate(2, 5), 8);\n    assert_eq!(candidate(5, 7), 12);\n    assert_eq!(candidate(7, 13), 40);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_798__sum", "language": "rs", "prompt": "/// Write a python function to find the sum of an array.\nfn _sum(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = _sum;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![15, 12, 13, 10]), 50);\n    assert_eq!(candidate(vec![0, 1, 2]), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_799_left_rotate", "language": "rs", "prompt": "/// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfn left_rotate(n: isize, d: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = left_rotate;\n    assert_eq!(candidate(16, 2), 64);\n    assert_eq!(candidate(10, 2), 40);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(99, 3), 792);\n    assert_eq!(candidate(1, 3), 8);\n    assert_eq!(candidate(5, 3), 40);\n    assert_eq!(candidate(29, 3), 232);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_79_word_len", "language": "rs", "prompt": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_800_remove_all_spaces", "language": "rs", "prompt": "/// Write a function to remove all whitespaces from a string.\nfn remove_all_spaces(text: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = remove_all_spaces;\n    assert_eq!(candidate(String::from(\"python  program\")), String::from(\"pythonprogram\"));\n    assert_eq!(candidate(String::from(\"python   programming    language\")), String::from(\"pythonprogramminglanguage\"));\n    assert_eq!(candidate(String::from(\"python                     program\")), String::from(\"pythonprogram\"));\n    assert_eq!(candidate(String::from(\"   python                     program\")), String::from(\"pythonprogram\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_801_test_three_equal", "language": "rs", "prompt": "/// Write a python function to count the number of equal numbers from three given integers.\nfn test_three_equal(x: isize, y: isize, z: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = test_three_equal;\n    assert_eq!(candidate(1, 1, 1), 3);\n    assert_eq!(candidate(-1, -2, -3), 0);\n    assert_eq!(candidate(1, 2, 2), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_802_count_rotation", "language": "rs", "prompt": "/// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfn count_rotation(arr: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = count_rotation;\n    assert_eq!(candidate(vec![3, 2, 1]), 1);\n    assert_eq!(candidate(vec![4, 5, 1, 2, 3]), 2);\n    assert_eq!(candidate(vec![7, 8, 9, 1, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 2, 3]), 0);\n    assert_eq!(candidate(vec![1, 3, 2]), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_803_is_perfect_square", "language": "rs", "prompt": "/// Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nfn is_perfect_square(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_perfect_square;\n    assert_eq!(candidate(10), false);\n    assert_eq!(candidate(36), true);\n    assert_eq!(candidate(14), false);\n    assert_eq!(candidate(196), true);\n    assert_eq!(candidate(125), false);\n    assert_eq!(candidate(15625), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_804_is_product_even", "language": "rs", "prompt": "/// Write a function to check whether the product of numbers in a list is even or not.\nfn is_product_even(arr: Vec<isize>) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_product_even;\n    assert_eq!(candidate(vec![1, 2, 3]), true);\n    assert_eq!(candidate(vec![1, 2, 1, 4]), true);\n    assert_eq!(candidate(vec![1, 1]), false);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_805_max_sum_list", "language": "rs", "prompt": "/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfn max_sum_list(lists: Vec<Vec<isize>>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_sum_list;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![10, 11, 12], vec![7, 8, 9]]), vec![10, 11, 12]);\n    assert_eq!(candidate(vec![vec![3, 2, 1], vec![6, 5, 4], vec![12, 11, 10]]), vec![12, 11, 10]);\n    assert_eq!(candidate(vec![vec![2, 3, 1]]), vec![2, 3, 1]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_806_max_run_uppercase", "language": "rs", "prompt": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_807_first_odd", "language": "rs", "prompt": "/// Write a python function to find the first odd number in a given list of numbers.\nfn first_odd(nums: Vec<isize>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = first_odd;\n    assert_eq!(candidate(vec![1, 3, 5]), 1);\n    assert_eq!(candidate(vec![2, 4, 1, 3]), 1);\n    assert_eq!(candidate(vec![8, 9, 1]), 9);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_808_check_K", "language": "rs", "prompt": "/// Write a function to check if the given tuples contain the k or not.\nfn check_K(test_tup: Vec<isize>, K: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_K;\n    assert_eq!(candidate(vec![10, 4, 5, 6, 8], 6), true);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 7), false);\n    assert_eq!(candidate(vec![7, 8, 9, 44, 11, 12], 11), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_809_check_smaller", "language": "rs", "prompt": "/// Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nfn check_smaller(test_tup1: (isize, isize, isize), test_tup2: (isize, isize, isize)) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = check_smaller;\n    assert_eq!(candidate((1, 2, 3), (2, 3, 4)), false);\n    assert_eq!(candidate((4, 5, 6), (3, 4, 5)), true);\n    assert_eq!(candidate((11, 12, 13), (10, 11, 12)), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_80_tetrahedral_number", "language": "rs", "prompt": "/// Write a function to find the nth tetrahedral number.\nfn tetrahedral_number(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = tetrahedral_number;\n    assert_eq!(candidate(5), 35);\n    assert_eq!(candidate(6), 56);\n    assert_eq!(candidate(7), 84);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_83_get_Char", "language": "rs", "prompt": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_84_sequence", "language": "rs", "prompt": "/// Write a function to find the nth number in the newman conway sequence.\nfn sequence(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = sequence;\n    assert_eq!(candidate(10), 6);\n    assert_eq!(candidate(2), 1);\n    assert_eq!(candidate(3), 2);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "rs", "prompt": "/// Write a function to find nth centered hexagonal number.\nfn centered_hexagonal_number(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = centered_hexagonal_number;\n    assert_eq!(candidate(10), 271);\n    assert_eq!(candidate(2), 7);\n    assert_eq!(candidate(9), 217);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to merge three dictionaries into a single dictionary.\nfn merge_dictionaries_three(dict1: HashMap<String, String>, dict2: HashMap<String, String>, dict3: HashMap<String, String>) -> HashMap<String, String> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = merge_dictionaries_three;\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"O\"), String::from(\"Orange\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"B\"), String::from(\"Black\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\")), (String::from(\"O\"), String::from(\"Orange\"))]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))])), HashMap::from([(String::from(\"W\"), String::from(\"White\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\"))]));\n    assert_eq!(candidate(HashMap::from([(String::from(\"R\"), String::from(\"Red\")), (String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\"))]), HashMap::from([(String::from(\"L\"), String::from(\"lavender\")), (String::from(\"B\"), String::from(\"Blue\"))]), HashMap::from([(String::from(\"G\"), String::from(\"Green\")), (String::from(\"W\"), String::from(\"White\"))])), HashMap::from([(String::from(\"B\"), String::from(\"Black\")), (String::from(\"P\"), String::from(\"Pink\")), (String::from(\"R\"), String::from(\"Red\")), (String::from(\"G\"), String::from(\"Green\")), (String::from(\"L\"), String::from(\"lavender\")), (String::from(\"W\"), String::from(\"White\"))]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_88_freq_count", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to get the frequency of all the elements in a list, returned as a dictionary.\nfn freq_count(list1: Vec<isize>) -> HashMap<isize, isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = freq_count;\n    assert_eq!(candidate(vec![10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]), HashMap::from([(10, 4), (20, 4), (40, 2), (50, 2), (30, 1)]));\n    assert_eq!(candidate(vec![1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]), HashMap::from([(1, 3), (2, 2), (3, 3), (4, 3)]));\n    assert_eq!(candidate(vec![5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]), HashMap::from([(10, 1), (5, 3), (6, 2), (7, 2), (4, 2), (9, 2)]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_89_closest_num", "language": "rs", "prompt": "/// Write a function to find the closest smaller number than n.\nfn closest_num(N: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = closest_num;\n    assert_eq!(candidate(11), 10);\n    assert_eq!(candidate(7), 6);\n    assert_eq!(candidate(12), 11);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_8_square_nums", "language": "rs", "prompt": "/// Write a function to find squares of individual elements in a list.\nfn square_nums(nums: Vec<isize>) -> Vec<isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = square_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![100, 400, 900]);\n    assert_eq!(candidate(vec![12, 15]), vec![144, 225]);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_90_len_log", "language": "rs", "prompt": "/// Write a python function to find the length of the longest word.\nfn len_log(list1: Vec<String>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = len_log;\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"PHP\"), String::from(\"bigdata\")]), 7);\n    assert_eq!(candidate(vec![String::from(\"a\"), String::from(\"ab\"), String::from(\"abc\")]), 3);\n    assert_eq!(candidate(vec![String::from(\"small\"), String::from(\"big\"), String::from(\"tall\")]), 5);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_91_find_substring", "language": "rs", "prompt": "/// Write a function to check if a string is present as a substring in a given list of string values.\nfn find_substring(str1: Vec<String>, sub_str: String) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_substring;\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ack\")), true);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"abc\")), false);\n    assert_eq!(candidate(vec![String::from(\"red\"), String::from(\"black\"), String::from(\"white\"), String::from(\"green\"), String::from(\"orange\")], String::from(\"ange\")), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_92_is_undulating", "language": "rs", "prompt": "/// Write a function to check whether the given number is undulating or not.\nfn is_undulating(n: isize) -> bool {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = is_undulating;\n    assert_eq!(candidate(1212121), true);\n    assert_eq!(candidate(1991), false);\n    assert_eq!(candidate(121), true);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_93_power", "language": "rs", "prompt": "/// Write a function to calculate the value of 'a' to the power 'b'.\nfn power(a: isize, b: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = power;\n    assert_eq!(candidate(3, 4), 81);\n    assert_eq!(candidate(2, 3), 8);\n    assert_eq!(candidate(5, 5), 3125);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_94_index_minimum", "language": "rs", "prompt": "/// Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nfn index_minimum(test_list: Vec<(String, isize)>) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = index_minimum;\n    assert_eq!(candidate(vec![(String::from(\"Rash\"), 143), (String::from(\"Manjeet\"), 200), (String::from(\"Varsha\"), 100)]), String::from(\"Varsha\"));\n    assert_eq!(candidate(vec![(String::from(\"Yash\"), 185), (String::from(\"Dawood\"), 125), (String::from(\"Sanya\"), 175)]), String::from(\"Dawood\"));\n    assert_eq!(candidate(vec![(String::from(\"Sai\"), 345), (String::from(\"Salman\"), 145), (String::from(\"Ayesha\"), 96)]), String::from(\"Ayesha\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_95_Find_Min_Length", "language": "rs", "prompt": "/// Write a python function to find the length of the smallest list in a list of lists.\nfn Find_Min_Length(lst: Vec<Vec<isize>>) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = Find_Min_Length;\n    assert_eq!(candidate(vec![vec![1], vec![1, 2]]), 1);\n    assert_eq!(candidate(vec![vec![1, 2], vec![1, 2, 3], vec![1, 2, 3, 4]]), 2);\n    assert_eq!(candidate(vec![vec![3, 3, 3], vec![4, 4, 4, 4]]), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_96_divisor", "language": "rs", "prompt": "/// Write a python function to find the number of divisors of a given integer.\nfn divisor(n: isize) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = divisor;\n    assert_eq!(candidate(15), 4);\n    assert_eq!(candidate(12), 6);\n    assert_eq!(candidate(9), 3);\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_97_frequency_lists", "language": "rs", "prompt": "use std::collections::HashMap;\n\n/// Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nfn frequency_lists(list1: Vec<Vec<isize>>) -> HashMap<isize, isize> {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = frequency_lists;\n    assert_eq!(candidate(vec![vec![1, 2, 3, 2], vec![4, 5, 6, 2], vec![7, 8, 9, 5]]), HashMap::from([(1, 1), (2, 3), (3, 1), (4, 1), (5, 2), (6, 1), (7, 1), (8, 1), (9, 1)]));\n    assert_eq!(candidate(vec![vec![1, 2, 3, 4], vec![5, 6, 7, 8], vec![9, 10, 11, 12]]), HashMap::from([(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (11, 1), (12, 1)]));\n    assert_eq!(candidate(vec![vec![20, 30, 40, 17], vec![18, 16, 14, 13], vec![10, 20, 30, 40]]), HashMap::from([(20, 2), (30, 2), (40, 2), (17, 1), (18, 1), (16, 1), (14, 1), (13, 1), (10, 1)]));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_99_decimal_to_binary", "language": "rs", "prompt": "/// Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfn decimal_to_binary(n: isize) -> String {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(8), String::from(\"1000\"));\n    assert_eq!(candidate(18), String::from(\"10010\"));\n    assert_eq!(candidate(7), String::from(\"111\"));\n}\n", "stop_tokens": ["\n}"]}
{"name": "mbpp_9_find_Rotations", "language": "rs", "prompt": "/// Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nfn find_Rotations(str: String) -> isize {\n", "doctests": "keep", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "verbatim", "tests": "}\n\nfn main() {\n    let candidate = find_Rotations;\n    assert_eq!(candidate(String::from(\"aaaa\")), 1);\n    assert_eq!(candidate(String::from(\"ab\")), 2);\n    assert_eq!(candidate(String::from(\"abc\")), 3);\n}\n", "stop_tokens": ["\n}"]}
