{"name": "mbpp_100_next_smallest_palindrome", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    def nextSmallestPalindrome(num : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallestPalindrome((99l)) == (101l));\n    assert(nextSmallestPalindrome((1221l)) == (1331l));\n    assert(nextSmallestPalindrome((120l)) == (121l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_101_kth_element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the kth element in the given list using 1-based indexing.\n    def kthElement(arr : List[Long], k : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(kthElement((List[Long](12l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 19l.toLong)), (2l)) == (3l));\n    assert(kthElement((List[Long](17l.toLong, 24l.toLong, 8l.toLong, 23l.toLong)), (3l)) == (8l));\n    assert(kthElement((List[Long](16l.toLong, 21l.toLong, 25l.toLong, 36l.toLong, 4l.toLong)), (4l)) == (36l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_102_snake_to_camel", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_103_eulerian_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the Eulerian number a(n, m).\n    def eulerianNum(n : Long, m : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(eulerianNum((3l), (1l)) == (4l));\n    assert(eulerianNum((4l), (1l)) == (11l));\n    assert(eulerianNum((5l), (3l)) == (26l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_104_sort_sublists", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(input_list : List[List[String]]) : List[List[String]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\" red \", \"green\"), List[String](\"blue \", \" black\"), List[String](\" orange\", \"brown\")))).equals((List[List[String]](List[String](\" red \", \"green\"), List[String](\" black\", \"blue \"), List[String](\" orange\", \"brown\")))));\n    assert(sortSublists((List[List[String]](List[String](\"zilver\", \"gold\"), List[String](\"magnesium\", \"aluminium\"), List[String](\"steel\", \"bronze\")))).equals((List[List[String]](List[String](\"gold\", \"zilver\"), List[String](\"aluminium\", \"magnesium\"), List[String](\"bronze\", \"steel\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_105_count", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count true booleans in the given list.\n    def count(lst : List[Boolean]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(count((List[Boolean](true.toBoolean, false.toBoolean, true.toBoolean))) == (2l));\n    assert(count((List[Boolean](false.toBoolean, false.toBoolean))) == (0l));\n    assert(count((List[Boolean](true.toBoolean, true.toBoolean, true.toBoolean))) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_106_add_lists", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to append the given list to the given tuples.\n    def addLists(test_list : List[Long], test_tup : Tuple2[Long, Long]) : Tuple2[Long, Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addLists((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), ((9l, 10l))).equals(((9l, 10l, 5l, 6l, 7l))));\n    assert(addLists((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), ((10l, 11l))).equals(((10l, 11l, 6l, 7l, 8l))));\n    assert(addLists((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), ((11l, 12l))).equals(((11l, 12l, 7l, 8l, 9l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_108_merge_sorted_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three lists into a single sorted list.\n    def mergeSortedList(num1 : List[Long], num2 : List[Long], num3 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mergeSortedList((List[Long](25l.toLong, 24l.toLong, 15l.toLong, 4l.toLong, 5l.toLong, 29l.toLong, 110l.toLong)), (List[Long](19l.toLong, 20l.toLong, 11l.toLong, 56l.toLong, 25l.toLong, 233l.toLong, 154l.toLong)), (List[Long](24l.toLong, 26l.toLong, 54l.toLong, 48l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 11l.toLong, 15l.toLong, 19l.toLong, 20l.toLong, 24l.toLong, 24l.toLong, 25l.toLong, 25l.toLong, 26l.toLong, 29l.toLong, 48l.toLong, 54l.toLong, 56l.toLong, 110l.toLong, 154l.toLong, 233l.toLong))));\n    assert(mergeSortedList((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (List[Long](2l.toLong, 5l.toLong, 7l.toLong, 11l.toLong)), (List[Long](1l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 12l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    assert(mergeSortedList((List[Long](18l.toLong, 14l.toLong, 10l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong)), (List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong)), (List[Long](12l.toLong, 74l.toLong, 9l.toLong, 50l.toLong, 61l.toLong, 41l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 14l.toLong, 18l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 41l.toLong, 50l.toLong, 58l.toLong, 61l.toLong, 65l.toLong, 74l.toLong, 75l.toLong, 85l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_109_odd_Equivalent", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    def oddEquivalent(s : String, n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddEquivalent((\"011001\"), (6l)) == (3l));\n    assert(oddEquivalent((\"11011\"), (5l)) == (4l));\n    assert(oddEquivalent((\"1010\"), (4l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_113_check_integer", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if a string represents an integer or not.\n    def checkInteger(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkInteger((\"python\")) == (false));\n    assert(checkInteger((\"1\")) == (true));\n    assert(checkInteger((\"12345\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_115_empty_dit", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether all dictionaries in a list are empty or not.\n    def emptyDit(list1 : Any) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_115_empty_dit.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(emptyDit((Any(Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))) == (true));\n    assert(emptyDit((Any())) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_116_tuple_to_int", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a given tuple of positive integers into a single integer.\n    def tupleToInt(nums : Tuple2[Long, Long, Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToInt(((1l, 2l, 3l))) == (123l));\n    assert(tupleToInt(((4l, 5l, 6l))) == (456l));\n    assert(tupleToInt(((5l, 6l, 7l))) == (567l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_117_list_to_float", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert all possible convertible elements in a list of lists to floats.\n    def listToFloat(test_list : List[Tuple2[String, String]]) : List[Tuple2[Float, Float]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(listToFloat((List[Tuple2[String, String]]((\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")))).equals((List[Tuple2[Float, Float]]((3.0f, 4.0f), (1.0f, 26.45f), (7.32f, 8.0f), (4.0f, 8.0f)))));\n    assert(listToFloat((List[Tuple2[String, String]]((\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")))).equals((List[Tuple2[Float, Float]]((4.0f, 4.0f), (2.0f, 27.0f), (4.12f, 9.0f), (7.0f, 11.0f)))));\n    assert(listToFloat((List[Tuple2[String, String]]((\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")))).equals((List[Tuple2[Float, Float]]((6.0f, 78.0f), (5.0f, 26.45f), (1.33f, 4.0f), (82.0f, 13.0f)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_118_string_to_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a string to a list of strings split on the space character.\n    def stringToList(string : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringToList((\"python programming\")).equals((List[String](\"python\", \"programming\"))));\n    assert(stringToList((\"lists tuples strings\")).equals((List[String](\"lists\", \"tuples\", \"strings\"))));\n    assert(stringToList((\"write a program\")).equals((List[String](\"write\", \"a\", \"program\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_119_search", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_11_remove_Occ", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_120_max_product_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    def maxProductTuple(list1 : List[Tuple2[Long, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProductTuple((List[Tuple2[Long, Long]]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (36l));\n    assert(maxProductTuple((List[Tuple2[Long, Long]]((10l, 20l), (15l, 2l), (5l, 10l)))) == (200l));\n    assert(maxProductTuple((List[Tuple2[Long, Long]]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (484l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_123_amicable_numbers_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum all amicable numbers from 1 to a specified number.\n    def amicableNumbersSum(limit : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(amicableNumbersSum((999l)) == (504l));\n    assert(amicableNumbersSum((9999l)) == (31626l));\n    assert(amicableNumbersSum((99l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_125_find_length", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    def findLength(string : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLength((\"11000010001\")) == (6l));\n    assert(findLength((\"10111\")) == (1l));\n    assert(findLength((\"11011101100101\")) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_126_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_127_multiply_int", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_128_long_words", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find words that are longer than n characters from a given list of words.\n    def longWords(n : Long, str : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(longWords((3l), (\"python is a programming language\")).equals((List[String](\"python\", \"programming\", \"language\"))));\n    assert(longWords((2l), (\"writing a program\")).equals((List[String](\"writing\", \"program\"))));\n    assert(longWords((5l), (\"sorting list\")).equals((List[String](\"sorting\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_129_magic_square_test", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate whether the matrix is a magic square.\n    def magicSquareTest(my_matrix : List[List[Long]]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(magicSquareTest((List[List[Long]](List[Long](7l.toLong, 12l.toLong, 1l.toLong, 14l.toLong), List[Long](2l.toLong, 13l.toLong, 8l.toLong, 11l.toLong), List[Long](16l.toLong, 3l.toLong, 10l.toLong, 5l.toLong), List[Long](9l.toLong, 6l.toLong, 15l.toLong, 4l.toLong)))) == (true));\n    assert(magicSquareTest((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 1l.toLong), List[Long](4l.toLong, 3l.toLong, 8l.toLong)))) == (true));\n    assert(magicSquareTest((List[List[Long]](List[Long](2l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 1l.toLong), List[Long](4l.toLong, 3l.toLong, 7l.toLong)))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_12_sort_matrix", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    def sortMatrix(M : List[List[Long]]) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortMatrix((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong, 5l.toLong)))));\n    assert(sortMatrix((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](-2l.toLong, 4l.toLong, -5l.toLong), List[Long](1l.toLong, -1l.toLong, 1l.toLong)))).equals((List[List[Long]](List[Long](-2l.toLong, 4l.toLong, -5l.toLong), List[Long](1l.toLong, -1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))));\n    assert(sortMatrix((List[List[Long]](List[Long](5l.toLong, 8l.toLong, 9l.toLong), List[Long](6l.toLong, 4l.toLong, 3l.toLong), List[Long](2l.toLong, 1l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](2l.toLong, 1l.toLong, 4l.toLong), List[Long](6l.toLong, 4l.toLong, 3l.toLong), List[Long](5l.toLong, 8l.toLong, 9l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_130_max_occurrences", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the item with maximum frequency in a given list.\n    def maxOccurrences(nums : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 2l.toLong, 6l.toLong, 5l.toLong, 1l.toLong, 6l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 9l.toLong, 1l.toLong, 2l.toLong))) == (2l));\n    assert(maxOccurrences((List[Long](2l.toLong, 3l.toLong, 8l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 15l.toLong, 14l.toLong, 10l.toLong, 12l.toLong, 13l.toLong, 16l.toLong, 18l.toLong))) == (8l));\n    assert(maxOccurrences((List[Long](10l.toLong, 20l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 90l.toLong, 80l.toLong, 50l.toLong, 30l.toLong, 20l.toLong, 50l.toLong, 10l.toLong))) == (20l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_131_reverse_vowels", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse only the vowels of a given string (where y is not a vowel).\n    def reverseVowels(str1 : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseVowels((\"Python\")).equals((\"Python\")));\n    assert(reverseVowels((\"USA\")).equals((\"ASU\")));\n    assert(reverseVowels((\"ab\")).equals((\"ab\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_132_tup_string", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a list to a string.\n    def tupString(tup1 : List[String]) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupString((List[String](\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"))).equals((\"exercises\")));\n    assert(tupString((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))).equals((\"python\")));\n    assert(tupString((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))).equals((\"program\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_133_sum_negativenum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_135_hexagonal_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth hexagonal number.\n    def hexagonalNum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(hexagonalNum((10l)) == (190l));\n    assert(hexagonalNum((5l)) == (45l));\n    assert(hexagonalNum((7l)) == (91l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    def isSumOfPowersOfTwo(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSumOfPowersOfTwo((10l)) == (true));\n    assert(isSumOfPowersOfTwo((7l)) == (false));\n    assert(isSumOfPowersOfTwo((14l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_141_pancake_sort", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def pancakeSort(nums : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pancakeSort((List[Long](15l.toLong, 79l.toLong, 25l.toLong, 38l.toLong, 69l.toLong))).equals((List[Long](15l.toLong, 25l.toLong, 38l.toLong, 69l.toLong, 79l.toLong))));\n    assert(pancakeSort((List[Long](98l.toLong, 12l.toLong, 54l.toLong, 36l.toLong, 85l.toLong))).equals((List[Long](12l.toLong, 36l.toLong, 54l.toLong, 85l.toLong, 98l.toLong))));\n    assert(pancakeSort((List[Long](41l.toLong, 42l.toLong, 32l.toLong, 12l.toLong, 23l.toLong))).equals((List[Long](12l.toLong, 23l.toLong, 32l.toLong, 41l.toLong, 42l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_142_count_samepair", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count number items that are identical in the same position of three given lists.\n    def countSamepair(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (3l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (4l));\n    assert(countSamepair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_143_find_lists", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find number of lists present in the given list.\n    def findLists(Input : List[Any]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLists((List[Any](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (2l));\n    assert(findLists((List[Any](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (3l));\n    assert(findLists((List[Any](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_145_max_Abs_Diff", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum difference between any two elements in a given list.\n    def maxAbsDiff(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAbsDiff((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 3l.toLong))) == (4l));\n    assert(maxAbsDiff((List[Long](9l.toLong, 3l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (8l));\n    assert(maxAbsDiff((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_14_find_Volume", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the volume of a triangular prism.\n    def findVolume(l : Long, b : Long, h : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findVolume((10l), (8l), (6l)) == (240l));\n    assert(findVolume((3l), (2l), (2l)) == (6l));\n    assert(findVolume((1l), (2l), (1l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_160_find_solution", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    def findSolution(a : Long, b : Long, n : Long) : Option[Tuple2[Long, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSolution((2l), (3l), (7l)).equals(Some((2l, 1l))));\n    assert(findSolution((4l), (2l), (7l)).equals(None));\n    assert(findSolution((1l), (13l), (17l)).equals(Some((4l, 1l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_161_remove_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_162_sum_series", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    def sumSeries(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumSeries((6l)) == (12l));\n    assert(sumSeries((10l)) == (30l));\n    assert(sumSeries((9l)) == (25l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_164_are_equivalent", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to determine if the sum of the divisors of two integers are the same.\n    def areEquivalent(num1 : Long, num2 : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(areEquivalent((36l), (57l)) == (false));\n    assert(areEquivalent((2l), (4l)) == (false));\n    assert(areEquivalent((23l), (47l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_165_count_char_position", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    def countCharPosition(str1 : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countCharPosition((\"xbcefg\")) == (2l));\n    assert(countCharPosition((\"ABcED\")) == (3l));\n    assert(countCharPosition((\"AbgdeF\")) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_166_find_even_pair", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_167_next_power_of_2", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the smallest power of 2 greater than or equal to n.\n    def nextPowerOf2(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextPowerOf2((0l)) == (1l));\n    assert(nextPowerOf2((5l)) == (8l));\n    assert(nextPowerOf2((17l)) == (32l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_168_frequency", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_16_text_lowercase_underscore", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    def textLowercaseUnderscore(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textLowercaseUnderscore((\"aab_cbbbc\")) == (true));\n    assert(textLowercaseUnderscore((\"aab_Abbbc\")) == (false));\n    assert(textLowercaseUnderscore((\"Aaab_abbbc\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_170_sum_range_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of numbers in a list within a range specified by two indices.\n    def sumRangeList(list1 : List[Long], m : Long, n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (8l), (10l)) == (29l));\n    assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (5l), (7l)) == (16l));\n    assert(sumRangeList((List[Long](2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 3l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 8l.toLong, 12l.toLong)), (7l), (10l)) == (38l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_171_perimeter_pentagon", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    def perimeterPentagon(a : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(perimeterPentagon((5l)) == (25l));\n    assert(perimeterPentagon((10l)) == (50l));\n    assert(perimeterPentagon((15l)) == (75l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_172_count_occurance", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurence of the string 'std' in a given string.\n    def countOccurance(s : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurance((\"letstdlenstdporstd\")) == (3l));\n    assert(countOccurance((\"truststdsolensporsd\")) == (1l));\n    assert(countOccurance((\"makestdsostdworthit\")) == (2l));\n    assert(countOccurance((\"stds\")) == (1l));\n    assert(countOccurance((\"\")) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_17_square_perimeter", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns the perimeter of a square given its side length as input.\n    def squarePerimeter(a : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squarePerimeter((10l)) == (40l));\n    assert(squarePerimeter((5l)) == (20l));\n    assert(squarePerimeter((4l)) == (16l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_18_remove_dirty_chars", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    def removeDirtyChars(string : String, second_string : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));\n    assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));\n    assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_19_test_duplicate", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find whether a given list of integers contains any duplicate element.\n    def testDuplicate(arraynums : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(testDuplicate((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(testDuplicate((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_20_is_woodall", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given number is woodball or not.\n    def isWoodall(x : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isWoodall((383l)) == (true));\n    assert(isWoodall((254l)) == (false));\n    assert(isWoodall((200l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_222_check_type", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all the elements in tuple have same data type or not.\n    def checkType(test_tuple : Any) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkType((Any((5l, 6l, 7l, 3l, 5l, 6l)))) == (true));\n    assert(checkType((Any((1l, 2l, \"4\")))) == (false));\n    assert(checkType((Any((3l, 2l, 1l, 4l, 5l)))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_223_is_majority", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_224_count_Set_Bits", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_226_odd_values_string", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove the characters which have odd index values of a given string.\n    def oddValuesString(str : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddValuesString((\"abcdef\")).equals((\"ace\")));\n    assert(oddValuesString((\"python\")).equals((\"pto\")));\n    assert(oddValuesString((\"data\")).equals((\"dt\")));\n    assert(oddValuesString((\"lambs\")).equals((\"lms\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_227_min_of_three", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum of three numbers.\n    def minOfThree(a : Long, b : Long, c : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minOfThree((10l), (20l), (0l)) == (0l));\n    assert(minOfThree((19l), (15l), (18l)) == (15l));\n    assert(minOfThree((-10l), (-20l), (-30l)) == (-30l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether all the bits are unset in the given range or not.\n    def allBitsSetInTheGivenRange(n : Long, l : Long, r : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allBitsSetInTheGivenRange((4l), (1l), (2l)) == (true));\n    assert(allBitsSetInTheGivenRange((17l), (2l), (4l)) == (true));\n    assert(allBitsSetInTheGivenRange((39l), (4l), (6l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_229_re_arrange_array", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    def reArrangeArray(arr : List[Long], n : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reArrangeArray((List[Long](-1l.toLong, 2l.toLong, -3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, -7l.toLong, 8l.toLong, 9l.toLong)), (9l)).equals((List[Long](-1l.toLong, -3l.toLong, -7l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(reArrangeArray((List[Long](12l.toLong, -14l.toLong, -26l.toLong, 13l.toLong, 15l.toLong)), (5l)).equals((List[Long](-14l.toLong, -26l.toLong, 12l.toLong, 13l.toLong, 15l.toLong))));\n    assert(reArrangeArray((List[Long](10l.toLong, 24l.toLong, 36l.toLong, -42l.toLong, -39l.toLong, -78l.toLong, 85l.toLong)), (7l)).equals((List[Long](-42l.toLong, -39l.toLong, -78l.toLong, 10l.toLong, 24l.toLong, 36l.toLong, 85l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_230_replace_blank", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    def replaceBlank(str1 : String, char : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));\n    assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));\n    assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_234_volume_cube", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the volume of a cube given its side length.\n    def volumeCube(l : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(volumeCube((3l)) == (27l));\n    assert(volumeCube((2l)) == (8l));\n    assert(volumeCube((5l)) == (125l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_237_check_occurences", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a map mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Tuple2[Long, Long]]) : Map[Tuple2[Long, Long],Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Tuple2[Long, Long]]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Tuple2[Long, Long],Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Tuple2[Long, Long]]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Tuple2[Long, Long],Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Tuple2[Long, Long]]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Tuple2[Long, Long],Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_238_number_of_substrings", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of non-empty substrings of a given string.\n    def numberOfSubstrings(str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numberOfSubstrings((\"abc\")) == (6l));\n    assert(numberOfSubstrings((\"abcd\")) == (10l));\n    assert(numberOfSubstrings((\"abcde\")) == (15l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    def getTotalNumberOfSequences(m : Long, n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getTotalNumberOfSequences((10l), (4l)) == (4l));\n    assert(getTotalNumberOfSequences((5l), (2l)) == (6l));\n    assert(getTotalNumberOfSequences((16l), (3l)) == (84l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_240_replace_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    def replaceList(list1 : List[Any], list2 : List[Any]) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceList((List[Any](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong)), (List[Any](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Any](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))));\n    assert(replaceList((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(replaceList((List[Any](\"red\", \"blue\", \"green\")), (List[Any](\"yellow\"))).equals((List[Any](\"red\", \"blue\", \"yellow\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_242_count_charac", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the total number of characters in a string.\n    def countCharac(str1 : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countCharac((\"python programming\")) == (18l));\n    assert(countCharac((\"language\")) == (8l));\n    assert(countCharac((\"words\")) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_244_next_Perfect_Square", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the next perfect square greater than a given number.\n    def nextPerfectSquare(N : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextPerfectSquare((35l)) == (36l));\n    assert(nextPerfectSquare((6l)) == (9l));\n    assert(nextPerfectSquare((9l)) == (16l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_245_max_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\n    def maxSum(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSum((List[Long](1l.toLong, 15l.toLong, 51l.toLong, 45l.toLong, 33l.toLong, 100l.toLong, 12l.toLong, 18l.toLong, 9l.toLong))) == (194l));\n    assert(maxSum((List[Long](80l.toLong, 60l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 10l.toLong))) == (210l));\n    assert(maxSum((List[Long](2l.toLong, 3l.toLong, 14l.toLong, 16l.toLong, 21l.toLong, 23l.toLong, 29l.toLong, 30l.toLong))) == (138l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_247_lps", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the length of the longest palindromic subsequence in the given string.\n    def lps(str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lps((\"TENS FOR TENS\")) == (5l));\n    assert(lps((\"CARDIO FOR CARDS\")) == (7l));\n    assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_249_intersection_array", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the intersection of two lists.\n    def intersectionArray(array_nums1 : List[Long], array_nums2 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 8l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(intersectionArray((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Long](10l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_250_count_X", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a tuple and an element and counts the occcurences of the element in the list.\n    def countX(tup : List[Long], x : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (4l)) == (0l));\n    assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (10l)) == (3l));\n    assert(countX((List[Long](10l.toLong, 8l.toLong, 5l.toLong, 2l.toLong, 10l.toLong, 15l.toLong, 10l.toLong, 8l.toLong, 5l.toLong, 8l.toLong, 8l.toLong, 2l.toLong)), (8l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_251_insert_element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    def insertElement(list : List[String], element : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(insertElement((List[String](\"Red\", \"Green\", \"Black\")), (\"c\")).equals((List[String](\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"))));\n    assert(insertElement((List[String](\"python\", \"java\")), (\"program\")).equals((List[String](\"program\", \"python\", \"program\", \"java\"))));\n    assert(insertElement((List[String](\"happy\", \"sad\")), (\"laugh\")).equals((List[String](\"laugh\", \"happy\", \"laugh\", \"sad\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_252_convert", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to convert complex numbers to polar coordinates.\n    def convert(numbers : Long) : Tuple2[Float, Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(convert((1l)).equals(((1.0f, 0.0f))));\n    assert(convert((4l)).equals(((4.0f, 0.0f))));\n    assert(convert((5l)).equals(((5.0f, 0.0f))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_255_combinations_colors", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n    def combinationsColors(l : List[String], n : Long) : List[List[String]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (1l)).equals((List[List[String]](List[String](\"Red\"), List[String](\"Green\"), List[String](\"Blue\")))));\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (2l)).equals((List[List[String]](List[String](\"Red\", \"Red\"), List[String](\"Red\", \"Green\"), List[String](\"Red\", \"Blue\"), List[String](\"Green\", \"Green\"), List[String](\"Green\", \"Blue\"), List[String](\"Blue\", \"Blue\")))));\n    assert(combinationsColors((List[String](\"Red\", \"Green\", \"Blue\")), (3l)).equals((List[List[String]](List[String](\"Red\", \"Red\", \"Red\"), List[String](\"Red\", \"Red\", \"Green\"), List[String](\"Red\", \"Red\", \"Blue\"), List[String](\"Red\", \"Green\", \"Green\"), List[String](\"Red\", \"Green\", \"Blue\"), List[String](\"Red\", \"Blue\", \"Blue\"), List[String](\"Green\", \"Green\", \"Green\"), List[String](\"Green\", \"Green\", \"Blue\"), List[String](\"Green\", \"Blue\", \"Blue\"), List[String](\"Blue\", \"Blue\", \"Blue\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_256_count_Primes_nums", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    def countPrimesNums(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPrimesNums((5l)) == (2l));\n    assert(countPrimesNums((10l)) == (4l));\n    assert(countPrimesNums((100l)) == (25l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_257_swap_numbers", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two numbers and returns a list with the second number and then the first number.\n    def swapNumbers(a : Long, b : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapNumbers((10l), (20l)).equals((List[Long](20l.toLong, 10l.toLong))));\n    assert(swapNumbers((15l), (17l)).equals((List[Long](17l.toLong, 15l.toLong))));\n    assert(swapNumbers((100l), (200l)).equals((List[Long](200l.toLong, 100l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_259_maximize_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to maximize the given two lists.\n    def maximizeElements(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maximizeElements((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 9l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](7l.toLong, 10l.toLong)))));\n    assert(maximizeElements((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](5l.toLong, 10l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](8l.toLong, 11l.toLong)))));\n    assert(maximizeElements((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](6l.toLong, 11l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](9l.toLong, 12l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_260_newman_prime", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    def newmanPrime(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(newmanPrime((3l)) == (7l));\n    assert(newmanPrime((4l)) == (17l));\n    assert(newmanPrime((5l)) == (41l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_261_division_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    def divisionElements(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisionElements(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((2l, 2l, 2l, 3l))));\n    assert(divisionElements(((12l, 6l, 8l, 16l)), ((6l, 3l, 4l, 4l))).equals(((2l, 2l, 2l, 4l))));\n    assert(divisionElements(((20l, 14l, 36l, 18l)), ((5l, 7l, 6l, 9l))).equals(((4l, 2l, 6l, 2l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_262_split_two_parts", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    def splitTwoParts(list1 : List[Any], L : Long) : Any = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(splitTwoParts((List[Any](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((Any(1l.toLong, 1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)))));\n    assert(splitTwoParts((List[Any](\"a\", \"b\", \"c\", \"d\")), (2l)).equals((Any(\"a\", \"b\"), List[String](\"c\", \"d\")))));\n    assert(splitTwoParts((List[Any](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")), (4l)).equals((Any(\"p\", \"y\", \"t\", \"h\"), List[String](\"o\", \"n\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_264_dog_age", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate a dog's age in dog's years.\n    def dogAge(h_age : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dogAge((12l)) == (61l));\n    assert(dogAge((15l)) == (73l));\n    assert(dogAge((24l)) == (109l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_265_list_split", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : List[Any], step : Long) : List[List[Any]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(listSplit((List[Any](\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((List[List[Any]](List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((List[List[Any]](List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((List[Any](\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((List[List[Any]](List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_266_lateralsurface_cube", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the lateral surface area of a cube given its side length.\n    def lateralsurfaceCube(l : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lateralsurfaceCube((5l)) == (100l));\n    assert(lateralsurfaceCube((9l)) == (324l));\n    assert(lateralsurfaceCube((10l)) == (400l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_267_square_Sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_268_find_star_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n'th star number.\n    def findStarNum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findStarNum((3l)) == (37l));\n    assert(findStarNum((4l)) == (73l));\n    assert(findStarNum((5l)) == (121l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_269_ascii_value", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ascii value of a character.\n    def asciiValue(k : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(asciiValue((\"A\")) == (65l));\n    assert(asciiValue((\"R\")) == (82l));\n    assert(asciiValue((\"S\")) == (83l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_270_sum_even_and_even_index", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of even numbers at even positions of a list.\n    def sumEvenAndEvenIndex(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumEvenAndEvenIndex((List[Long](5l.toLong, 6l.toLong, 12l.toLong, 1l.toLong, 18l.toLong, 8l.toLong))) == (30l));\n    assert(sumEvenAndEvenIndex((List[Long](3l.toLong, 20l.toLong, 17l.toLong, 9l.toLong, 2l.toLong, 10l.toLong, 18l.toLong, 13l.toLong, 6l.toLong, 18l.toLong))) == (26l));\n    assert(sumEvenAndEvenIndex((List[Long](5l.toLong, 6l.toLong, 12l.toLong, 1l.toLong))) == (12l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_271_even_Power_Sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    def evenPowerSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenPowerSum((2l)) == (1056l));\n    assert(evenPowerSum((3l)) == (8832l));\n    assert(evenPowerSum((1l)) == (32l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_272_rear_extract", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    def rearExtract(test_list : List[Tuple2[Long, String, Long]]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Rash\", 21l), (2l, \"Varsha\", 20l), (3l, \"Kil\", 19l)))).equals((List[Long](21l.toLong, 20l.toLong, 19l.toLong))));\n    assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Sai\", 36l), (2l, \"Ayesha\", 25l), (3l, \"Salman\", 45l)))).equals((List[Long](36l.toLong, 25l.toLong, 45l.toLong))));\n    assert(rearExtract((List[Tuple2[Long, String, Long]]((1l, \"Sudeep\", 14l), (2l, \"Vandana\", 36l), (3l, \"Dawood\", 56l)))).equals((List[Long](14l.toLong, 36l.toLong, 56l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_273_substract_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    def substractElements(test_tup1 : Tuple2[Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long]) : Tuple2[Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(substractElements(((10l, 4l, 5l)), ((2l, 5l, 18l))).equals(((8l, -1l, -13l))));\n    assert(substractElements(((11l, 2l, 3l)), ((24l, 45l, 16l))).equals(((-13l, -43l, -13l))));\n    assert(substractElements(((7l, 18l, 9l)), ((10l, 11l, 12l))).equals(((-3l, 7l, -3l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    def evenBinomialCoeffSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenBinomialCoeffSum((4l)) == (8l));\n    assert(evenBinomialCoeffSum((6l)) == (32l));\n    assert(evenBinomialCoeffSum((2l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_277_dict_filter", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\n    def dictFilter(dict : Map[String,Long], n : Long) : Map[String,Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (170l)).equals((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (180l)).equals((Map[String,Long](\"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (190l)).equals((Map[String,Long](\"Pierre Cox\" -> 190l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_278_count_first_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of elements that occurs before the list element in the given tuple.\n    def countFirstElements(test_tup : List[Either[Long, Tuple2[Long, Long]]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](1l, 5l, 7l, (4l, 6l), 10l))) == (3l));\n    assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](2l, 9l, (5l, 7l), 11l))) == (2l));\n    assert(countFirstElements((List[Either[Long, Tuple2[Long, Long]]](11l, 15l, 5l, 8l, (2l, 3l), 8l))) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_279_is_num_decagonal", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth decagonal number.\n    def isNumDecagonal(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNumDecagonal((3l)) == (27l));\n    assert(isNumDecagonal((7l)) == (175l));\n    assert(isNumDecagonal((10l)) == (370l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_280_sequential_search", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and element and returns a tuple containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n    def sequentialSearch(dlist : List[Long], item : Long) : Tuple2[Boolean, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sequentialSearch((List[Long](11l.toLong, 23l.toLong, 58l.toLong, 31l.toLong, 56l.toLong, 77l.toLong, 43l.toLong, 12l.toLong, 65l.toLong, 19l.toLong)), (31l)).equals(((true, 3l))));\n    assert(sequentialSearch((List[Long](12l.toLong, 32l.toLong, 45l.toLong, 62l.toLong, 35l.toLong, 47l.toLong, 44l.toLong, 61l.toLong)), (61l)).equals(((true, 7l))));\n    assert(sequentialSearch((List[Long](9l.toLong, 10l.toLong, 17l.toLong, 19l.toLong, 22l.toLong, 39l.toLong, 48l.toLong, 56l.toLong)), (48l)).equals(((true, 6l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_281_all_unique", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if the elements of a given list are unique or not.\n    def allUnique(test_list : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(allUnique((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_282_sub_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_283_validate", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_284_check_element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    def checkElement(list : List[Any], element : Any) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkElement((List[Any](\"green\", \"orange\", \"black\", \"white\")), (Any(\"blue\"))) == (false));\n    assert(checkElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (Any(7l))) == (false));\n    assert(checkElement((List[Any](\"green\", \"green\", \"green\", \"green\")), (Any(\"green\"))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_285_text_match_two_three", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    def textMatchTwoThree(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchTwoThree((\"ac\")) == (false));\n    assert(textMatchTwoThree((\"dc\")) == (false));\n    assert(textMatchTwoThree((\"abbbba\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the largest sum of a contiguous list in the modified list which is formed by repeating the given list k times.\n    def maxSubArraySumRepeated(a : List[Long], n : Long, k : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySumRepeated((List[Long](10l.toLong, 20l.toLong, -30l.toLong, -1l.toLong)), (4l), (3l)) == (30l));\n    assert(maxSubArraySumRepeated((List[Long](-1l.toLong, 10l.toLong, 20l.toLong)), (3l), (2l)) == (59l));\n    assert(maxSubArraySumRepeated((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)), (3l), (3l)) == (-1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_287_square_Sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    def squareSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (20l));\n    assert(squareSum((3l)) == (56l));\n    assert(squareSum((4l)) == (120l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_290_max_length", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Tuple2[Long, List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals(((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong)))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals(((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals(((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_291_count_no_of_ways", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    def countNoOfWays(n : Long, k : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_292_find", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_293_otherside_rightangle", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the third side of a right angled triangle.\n    def othersideRightangle(w : Long, h : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(othersideRightangle((7l), (8l)) == (10.63014581273465f));\n    assert(othersideRightangle((3l), (4l)) == 5l);\n    assert(othersideRightangle((7l), (15l)) == (16.55294535724685f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_294_max_val", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum value in a given heterogeneous list.\n    def maxVal(listval : List[Either[String, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (5l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (25l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (50l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_295_sum_div", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return the sum of all divisors of a number.\n    def sumDiv(number : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumDiv((8l)) == (7l));\n    assert(sumDiv((12l)) == (16l));\n    assert(sumDiv((7l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_296_get_Inv_Count", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_297_flatten_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : List[Either[Long, List[Long]]]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(flattenList((List[Either[Long, List[Long]]](0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((List[Either[Long, List[Long]]](List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((List[Either[Long, List[Long]]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_299_max_aggregate", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Tuple2[String, Long]]) : Tuple2[String, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals(((\"Juan Whelan\", 212l))));\n    assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals(((\"Juan Whelan\", 72l))));\n    assert(maxAggregate((List[Tuple2[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals(((\"Sabah Colley\", 70l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_304_find_Element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find element at a given index after number of rotations.\n    def findElement(arr : List[Long], ranges : List[List[Long]], rotations : Long, index : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[List[Long]](List[Long](0l.toLong, 2l.toLong), List[Long](0l.toLong, 3l.toLong))), (2l), (1l)) == (3l));\n    assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](0l.toLong, 2l.toLong))), (1l), (2l)) == (3l));\n    assert(findElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](0l.toLong, 2l.toLong))), (1l), (1l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_305_start_withp", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return two words from a list of words starting with letter 'p'.\n    def startWithp(words : List[String]) : Tuple2[String, String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(startWithp((List[String](\"Python PHP\", \"Java JavaScript\", \"c c++\"))).equals(((\"Python\", \"PHP\"))));\n    assert(startWithp((List[String](\"Python Programming\", \"Java Programming\"))).equals(((\"Python\", \"Programming\"))));\n    assert(startWithp((List[String](\"Pqrst Pqr\", \"qrstuv\"))).equals(((\"Pqrst\", \"Pqr\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    def maxSumIncreasingSubseq(a : List[Long], n : Long, index : Long, k : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (4l), (6l)) == (11l));\n    assert(maxSumIncreasingSubseq((List[Long](1l.toLong, 101l.toLong, 2l.toLong, 3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong)), (7l), (2l), (5l)) == (7l));\n    assert(maxSumIncreasingSubseq((List[Long](11l.toLong, 15l.toLong, 19l.toLong, 21l.toLong, 26l.toLong, 28l.toLong, 31l.toLong)), (7l), (2l), (4l)) == (71l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_308_large_product", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    def largeProduct(nums1 : List[Long], nums2 : List[Long], N : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (3l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong))));\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (4l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong))));\n    assert(largeProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 6l.toLong)), (5l)).equals((List[Long](60l.toLong, 54l.toLong, 50l.toLong, 48l.toLong, 45l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_309_maximum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the maximum of two numbers.\n    def maximum(a : Long, b : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maximum((5l), (10l)) == (10l));\n    assert(maximum((-1l), (-2l)) == (-1l));\n    assert(maximum((9l), (7l)) == (9l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_310_string_to_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a given string to a list of characters.\n    def stringToTuple(str1 : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(stringToTuple((\"python 3.0\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"))));\n    assert(stringToTuple((\"item1\")).equals((List[String](\"i\", \"t\", \"e\", \"m\", \"1\"))));\n    assert(stringToTuple((\"15.10\")).equals((List[String](\"1\", \"5\", \".\", \"1\", \"0\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_388_highest_Power_of_2", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the highest power of 2 that is less than or equal to n.\n    def highestPowerOf2(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(highestPowerOf2((10l)) == (8l));\n    assert(highestPowerOf2((19l)) == (16l));\n    assert(highestPowerOf2((32l)) == (32l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_389_find_lucas", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n'th lucas number.\n    def findLucas(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLucas((9l)) == (76l));\n    assert(findLucas((4l)) == (7l));\n    assert(findLucas((3l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_390_add_string", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to apply a given format string to all of the elements in a list.\n    def addString(list_ : List[Any], string : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addString((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (\"temp{0}\")).equals((List[String](\"temp1\", \"temp2\", \"temp3\", \"temp4\"))));\n    assert(addString((List[Any](\"a\", \"b\", \"c\", \"d\")), (\"python{0}\")).equals((List[String](\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"))));\n    assert(addString((List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (\"string{0}\")).equals((List[String](\"string5\", \"string6\", \"string7\", \"string8\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_391_convert_list_dictionary", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert more than one list to nested map.\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Long]) : List[Map[String,Map[String,Long]]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(convertListDictionary((List[String](\"S001\", \"S002\", \"S003\", \"S004\")), (List[String](\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\")), (List[Long](85l.toLong, 98l.toLong, 89l.toLong, 92l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"S001\" -> Map[String,Long](\"Adina Park\" -> 85l)), Map[String,Map[String,Long]](\"S002\" -> Map[String,Long](\"Leyton Marsh\" -> 98l)), Map[String,Map[String,Long]](\"S003\" -> Map[String,Long](\"Duncan Boyle\" -> 89l)), Map[String,Map[String,Long]](\"S004\" -> Map[String,Long](\"Saim Richards\" -> 92l))))));\n    assert(convertListDictionary((List[String](\"abc\", \"def\", \"ghi\", \"jkl\")), (List[String](\"python\", \"program\", \"language\", \"programs\")), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"abc\" -> Map[String,Long](\"python\" -> 100l)), Map[String,Map[String,Long]](\"def\" -> Map[String,Long](\"program\" -> 200l)), Map[String,Map[String,Long]](\"ghi\" -> Map[String,Long](\"language\" -> 300l)), Map[String,Map[String,Long]](\"jkl\" -> Map[String,Long](\"programs\" -> 400l))))));\n    assert(convertListDictionary((List[String](\"A1\", \"A2\", \"A3\", \"A4\")), (List[String](\"java\", \"C\", \"C++\", \"DBMS\")), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"A1\" -> Map[String,Long](\"java\" -> 10l)), Map[String,Map[String,Long]](\"A2\" -> Map[String,Long](\"C\" -> 20l)), Map[String,Map[String,Long]](\"A3\" -> Map[String,Long](\"C++\" -> 30l)), Map[String,Map[String,Long]](\"A4\" -> Map[String,Long](\"DBMS\" -> 40l))))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_392_get_max_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_393_max_length_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list with maximum length.\n    def maxLengthList(input_list : List[List[Long]]) : Tuple2[Long, List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxLengthList((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals(((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong)))));\n    assert(maxLengthList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong)))).equals(((5l, List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))));\n    assert(maxLengthList((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong)))).equals(((4l, List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_394_check_distinct", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if given list contains no duplicates.\n    def checkDistinct(test_tup : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkDistinct((List[Long](1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong, 4l.toLong))) == (false));\n    assert(checkDistinct((List[Long](1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(checkDistinct((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_395_first_non_repeating_character", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first non-repeated character in a given string.\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(Some(\"a\")));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(Some(\"c\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_396_check_char", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given string starts and ends with the same character or not.\n    def checkChar(string : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkChar((\"abba\")).equals((\"Valid\")));\n    assert(checkChar((\"a\")).equals((\"Valid\")));\n    assert(checkChar((\"abcd\")).equals((\"Invalid\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_397_median_numbers", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of three numbers.\n    def medianNumbers(a : Long, b : Long, c : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianNumbers((25l), (55l), (65l)) == (55.0f));\n    assert(medianNumbers((20l), (10l), (30l)) == (20.0f));\n    assert(medianNumbers((15l), (45l), (75l)) == (45.0f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_398_sum_of_digits", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the sum of digits of each number of a given list.\n    def sumOfDigits(nums : List[Any]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfDigits((List[Any](10l.toLong, 2l.toLong, 56l.toLong))) == (14l));\n    assert(sumOfDigits((List[Any](List[Any](10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))) == (19l));\n    assert(sumOfDigits((List[Any](10l.toLong, 20l.toLong, -4l.toLong, 5l.toLong, -70l.toLong))) == (19l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_399_bitwise_xor", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((15l, 6l, 5l, 10l))));\n    assert(bitwiseXor(((11l, 5l, 7l, 10l)), ((6l, 3l, 4l, 4l))).equals(((13l, 6l, 3l, 14l))));\n    assert(bitwiseXor(((12l, 6l, 8l, 11l)), ((7l, 4l, 5l, 6l))).equals(((11l, 2l, 13l, 13l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_3_is_not_prime", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_400_extract_freq", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Tuple2[Long, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Tuple2[Long, Long]]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Tuple2[Long, Long]]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Tuple2[Long, Long]]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_401_add_nested_tuples", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise addition of list elements in the given two nested lists.\n    def addNestedTuples(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addNestedTuples((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](7l.toLong, 10l.toLong), List[Long](7l.toLong, 14l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](8l.toLong, 13l.toLong)))));\n    assert(addNestedTuples((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](9l.toLong, 12l.toLong), List[Long](9l.toLong, 16l.toLong), List[Long](5l.toLong, 12l.toLong), List[Long](10l.toLong, 15l.toLong)))));\n    assert(addNestedTuples((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](11l.toLong, 14l.toLong), List[Long](11l.toLong, 18l.toLong), List[Long](7l.toLong, 14l.toLong), List[Long](12l.toLong, 17l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_404_minimum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum of two numbers.\n    def minimum(a : Long, b : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minimum((1l), (2l)) == (1l));\n    assert(minimum((-5l), (-4l)) == (-5l));\n    assert(minimum((0l), (0l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_405_check_tuplex", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether an element exists within a tuple.\n    def checkTuplex(tuplex : List[Either[String, Long]], tuple1 : Any) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(\"r\"))) == (true));\n    assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(\"5\"))) == (false));\n    assert(checkTuplex((List[Either[String, Long]](\"w\", 3l, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")), (Any(3l))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_406_find_Parity", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find whether the parity of a given number is odd.\n    def findParity(x : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findParity((12l)) == (false));\n    assert(findParity((7l)) == (true));\n    assert(findParity((10l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_407_rearrange_bigger", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_408_k_smallest_pairs", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find k number of smallest pairs which consist of one element from the first list and one element from the second list.\n    def kSmallestPairs(nums1 : List[Long], nums2 : List[Long], k : Long) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (2l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 4l.toLong)))));\n    assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (1l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong)))));\n    assert(kSmallestPairs((List[Long](1l.toLong, 3l.toLong, 7l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong)), (7l)).equals((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 4l.toLong), List[Long](3l.toLong, 2l.toLong), List[Long](1l.toLong, 6l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](7l.toLong, 2l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_409_min_product_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum product from the pairs of tuples within a given list.\n    def minProductTuple(list1 : List[Tuple2[Long, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minProductTuple((List[Tuple2[Long, Long]]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (8l));\n    assert(minProductTuple((List[Tuple2[Long, Long]]((10l, 20l), (15l, 2l), (5l, 10l)))) == (30l));\n    assert(minProductTuple((List[Tuple2[Long, Long]]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (100l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_410_min_val", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum value in a given heterogeneous list.\n    def minVal(listval : List[Either[String, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (2l));\n    assert(minVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (15l));\n    assert(minVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (20l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_411_snake_to_camel", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));\n    assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));\n    assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_412_remove_odd", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_413_extract_nth_element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the nth element from a given list of tuples.\n    def extractNthElement(list1 : List[Tuple2[String, Long, Long]], n : Long) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (0l)).equals((List[Any](\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"))));\n    assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (2l)).equals((List[Any](99l.toLong, 96l.toLong, 94l.toLong, 98l.toLong))));\n    assert(extractNthElement((List[Tuple2[String, Long, Long]]((\"Greyson Fulton\", 98l, 99l), (\"Brady Kent\", 97l, 96l), (\"Wyatt Knott\", 91l, 94l), (\"Beau Turnbull\", 94l, 98l))), (1l)).equals((List[Any](98l.toLong, 97l.toLong, 91l.toLong, 94l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_414_overlapping", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether any value in a sequence exists in a sequence or not.\n    def overlapping(list1 : List[Long], list2 : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))) == (false));\n    assert(overlapping((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(overlapping((List[Long](1l.toLong, 4l.toLong, 5l.toLong)), (List[Long](1l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_415_max_Product", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find a pair with highest product from a given list of integers.\n    def maxProduct(arr : List[Long]) : Tuple2[Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 0l.toLong, 8l.toLong, 4l.toLong))).equals(((7l, 8l))));\n    assert(maxProduct((List[Long](0l.toLong, -1l.toLong, -2l.toLong, -4l.toLong, 5l.toLong, 0l.toLong, -6l.toLong))).equals(((-4l, -6l))));\n    assert(maxProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals(((2l, 3l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_417_group_tuples", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find common first element in given list of lists.\n    def groupTuples(Input : List[List[String]]) : List[List[String]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(groupTuples((List[List[String]](List[String](\"x\", \"y\"), List[String](\"x\", \"z\"), List[String](\"w\", \"t\")))).equals((List[List[String]](List[String](\"x\", \"y\", \"z\"), List[String](\"w\", \"t\")))));\n    assert(groupTuples((List[List[String]](List[String](\"a\", \"b\"), List[String](\"a\", \"c\"), List[String](\"d\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\", \"c\"), List[String](\"d\", \"e\")))));\n    assert(groupTuples((List[List[String]](List[String](\"f\", \"g\"), List[String](\"f\", \"g\"), List[String](\"h\", \"i\")))).equals((List[List[String]](List[String](\"f\", \"g\", \"g\"), List[String](\"h\", \"i\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_418_Find_Max", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element of a list having maximum length.\n    def FindMax(lst : List[List[Any]]) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMax((List[List[Any]](List[String](\"A\"), List[String](\"A\", \"B\"), List[String](\"A\", \"B\", \"C\")))).equals((List[Any](\"A\", \"B\", \"C\"))));\n    assert(FindMax((List[List[Any]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Any](1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(FindMax((List[List[Any]](List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong)))).equals((List[Any](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_419_round_and_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    def roundAndSum(list1 : List[Either[Float, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(roundAndSum((List[Either[Float, Long]](22.4f.toFloat, 4.0f.toFloat, -16.22f.toFloat, -9.1f.toFloat, 11.0f.toFloat, -12.22f.toFloat, 14.2f.toFloat, -5.2f.toFloat, 17.5f.toFloat))) == (243l));\n    assert(roundAndSum((List[Either[Float, Long]](5l.toLong, 2l.toLong, 9l.toLong, 24.3f.toLong, 29l.toLong))) == (345l));\n    assert(roundAndSum((List[Either[Float, Long]](25.0f.toFloat, 56.7f.toFloat, 89.2f.toFloat))) == (513l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_420_cube_Sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the cube sum of first n even natural numbers.\n    def cubeSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(cubeSum((2l)) == (72l));\n    assert(cubeSum((3l)) == (288l));\n    assert(cubeSum((4l)) == (800l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_421_concatenate_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to concatenate each element of tuple by the delimiter.\n    def concatenateTuple(test_tup : Tuple2[String, String, Long, String]) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(concatenateTuple(((\"ID\", \"is\", 4l, \"UTS\"))).equals((\"ID-is-4-UTS\")));\n    assert(concatenateTuple(((\"QWE\", \"is\", 4l, \"RTY\"))).equals((\"QWE-is-4-RTY\")));\n    assert(concatenateTuple(((\"ZEN\", \"is\", 4l, \"OP\"))).equals((\"ZEN-is-4-OP\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the average of cubes of first n natural numbers.\n    def findAverageOfCube(n : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAverageOfCube((2l)) == (4.5f));\n    assert(findAverageOfCube((3l)) == 12l);\n    assert(findAverageOfCube((1l)) == 1l);\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_424_extract_rear", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract only the rear index element of each string in the given tuple.\n    def extractRear(test_tuple : Tuple2[String, String, String]) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractRear(((\"Mers\", \"for\", \"Vers\"))).equals((List[String](\"s\", \"r\", \"s\"))));\n    assert(extractRear(((\"Avenge\", \"for\", \"People\"))).equals((List[String](\"e\", \"r\", \"e\"))));\n    assert(extractRear(((\"Gotta\", \"get\", \"go\"))).equals((List[String](\"a\", \"t\", \"o\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_425_count_element_in_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of sublists containing a particular element.\n    def countElementInList(list1 : List[List[Any]], x : Any) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countElementInList((List[List[Any]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 11l.toLong), List[Long](1l.toLong, 15l.toLong, 7l.toLong))), (Any(1l))) == (3l));\n    assert(countElementInList((List[List[Any]](List[String](\"A\", \"B\"), List[String](\"A\", \"C\"), List[String](\"A\", \"D\", \"E\"), List[String](\"B\", \"C\", \"D\"))), (Any(\"A\"))) == (3l));\n    assert(countElementInList((List[List[Any]](List[String](\"A\", \"B\"), List[String](\"A\", \"C\"), List[String](\"A\", \"D\", \"E\"), List[String](\"B\", \"C\", \"D\"))), (Any(\"E\"))) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_426_filter_oddnumbers", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to filter odd numbers.\n    def filterOddnumbers(nums : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterOddnumbers((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    assert(filterOddnumbers((List[Long](10l.toLong, 20l.toLong, 45l.toLong, 67l.toLong, 84l.toLong, 93l.toLong))).equals((List[Long](45l.toLong, 67l.toLong, 93l.toLong))));\n    assert(filterOddnumbers((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 8l.toLong, 6l.toLong, 4l.toLong, 3l.toLong))).equals((List[Long](5l.toLong, 7l.toLong, 9l.toLong, 3l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_427_change_date_format", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    def changeDateFormat(dt : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(changeDateFormat((\"2026-01-02\")).equals((\"02-01-2026\")));\n    assert(changeDateFormat((\"2020-11-13\")).equals((\"13-11-2020\")));\n    assert(changeDateFormat((\"2021-04-26\")).equals((\"26-04-2021\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_428_shell_sort", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given list by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_429_and_tuples", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(andTuples(((10l, 4l, 6l, 9l)), ((5l, 2l, 3l, 3l))).equals(((0l, 0l, 2l, 1l))));\n    assert(andTuples(((1l, 2l, 3l, 4l)), ((5l, 6l, 7l, 8l))).equals(((1l, 2l, 3l, 0l))));\n    assert(andTuples(((8l, 9l, 11l, 12l)), ((7l, 13l, 14l, 17l))).equals(((0l, 9l, 10l, 0l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_430_parabola_directrix", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the directrix of a parabola.\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_431_common_element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    def commonElement(list1 : List[Any], list2 : List[Any]) : Option[Boolean] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(commonElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(Some(true)));\n    assert(commonElement((List[Any](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Any](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(None));\n    assert(commonElement((List[Any](\"a\", \"b\", \"c\")), (List[Any](\"d\", \"b\", \"e\"))).equals(Some(true)));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_432_median_trapezium", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median length of a trapezium.\n    def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianTrapezium((15l), (25l), (35l)) == 20l);\n    assert(medianTrapezium((10l), (20l), (30l)) == 15l);\n    assert(medianTrapezium((6l), (9l), (4l)) == (7.5f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_433_check_greater", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the entered number is greater than the elements of the given list.\n    def checkGreater(arr : List[Long], number : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkGreater((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (4l)) == (false));\n    assert(checkGreater((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (8l)) == (true));\n    assert(checkGreater((List[Long](9l.toLong, 7l.toLong, 4l.toLong, 8l.toLong, 6l.toLong, 1l.toLong)), (11l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_434_text_match_one", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an a followed by one or more b's.\n    def textMatchOne(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchOne((\"ac\")) == (false));\n    assert(textMatchOne((\"dc\")) == (false));\n    assert(textMatchOne((\"abba\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_435_last_Digit", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last digit of a given number.\n    def lastDigit(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigit((123l)) == (3l));\n    assert(lastDigit((25l)) == (5l));\n    assert(lastDigit((30l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_436_neg_nos", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_437_remove_odd", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove odd characters in a string.\n    def removeOdd(str1 : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((\"python\")).equals((\"yhn\")));\n    assert(removeOdd((\"program\")).equals((\"rga\")));\n    assert(removeOdd((\"language\")).equals((\"agae\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_438_count_bidirectional", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count bidirectional tuple pairs.\n    def countBidirectional(test_list : List[Tuple2[Long, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (3l));\n    assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 3l), (6l, 5l), (9l, 1l), (6l, 5l), (2l, 1l)))) == (2l));\n    assert(countBidirectional((List[Tuple2[Long, Long]]((5l, 6l), (1l, 2l), (6l, 5l), (9l, 2l), (6l, 5l), (2l, 1l)))) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_439_multiple_to_single", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to join a list of multiple integers into a single integer.\n    def multipleToSingle(L : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multipleToSingle((List[Long](11l.toLong, 33l.toLong, 50l.toLong))) == (113350l));\n    assert(multipleToSingle((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (-123456l));\n    assert(multipleToSingle((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong))) == (10152025l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_440_find_adverb_position", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb and their positions in a given sentence.\n    def findAdverbPosition(text : String) : Tuple2[Long, Long, String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals(((0l, 7l, \"clearly\"))));\n    assert(findAdverbPosition((\"seriously!! there are many roses\")).equals(((0l, 9l, \"seriously\"))));\n    assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals(((0l, 13l, \"unfortunately\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_441_surfacearea_cube", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the surface area of a cube of a given size.\n    def surfaceareaCube(l : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceareaCube((5l)) == (150l));\n    assert(surfaceareaCube((3l)) == (54l));\n    assert(surfaceareaCube((10l)) == (600l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_442_positive_count", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in a list of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_443_largest_neg", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest negative number from the given list.\n    def largestNeg(list1 : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -4l.toLong, -6l.toLong))) == (-6l));\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -8l.toLong, -9l.toLong))) == (-9l));\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_444_trim_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to trim each list by k in the given lists.\n    def trimTuple(test_list : List[List[Long]], K : Long) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(trimTuple((List[List[Long]](List[Long](5l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 4l.toLong), List[Long](3l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 1l.toLong), List[Long](9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong), List[Long](4l.toLong, 8l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))), (2l)).equals((List[List[Long]](List[Long](2l.toLong), List[Long](9l.toLong), List[Long](2l.toLong), List[Long](2l.toLong)))));\n    assert(trimTuple((List[List[Long]](List[Long](5l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 4l.toLong), List[Long](3l.toLong, 4l.toLong, 9l.toLong, 2l.toLong, 1l.toLong), List[Long](9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong), List[Long](4l.toLong, 8l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))), (1l)).equals((List[List[Long]](List[Long](3l.toLong, 2l.toLong, 1l.toLong), List[Long](4l.toLong, 9l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](8l.toLong, 2l.toLong, 1l.toLong)))));\n    assert(trimTuple((List[List[Long]](List[Long](7l.toLong, 8l.toLong, 4l.toLong, 9l.toLong), List[Long](11l.toLong, 8l.toLong, 12l.toLong, 4l.toLong), List[Long](4l.toLong, 1l.toLong, 7l.toLong, 8l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 7l.toLong))), (1l)).equals((List[List[Long]](List[Long](8l.toLong, 4l.toLong), List[Long](8l.toLong, 12l.toLong), List[Long](1l.toLong, 7l.toLong), List[Long](6l.toLong, 9l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_445_index_multiplication", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise multiplication of list elements in the given two lists.\n    def indexMultiplication(test_tup1 : List[List[Long]], test_tup2 : List[List[Long]]) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(indexMultiplication((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](1l.toLong, 10l.toLong))), (List[List[Long]](List[Long](6l.toLong, 7l.toLong), List[Long](3l.toLong, 9l.toLong), List[Long](1l.toLong, 1l.toLong), List[Long](7l.toLong, 3l.toLong)))).equals((List[List[Long]](List[Long](6l.toLong, 21l.toLong), List[Long](12l.toLong, 45l.toLong), List[Long](2l.toLong, 9l.toLong), List[Long](7l.toLong, 30l.toLong)))));\n    assert(indexMultiplication((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](3l.toLong, 10l.toLong), List[Long](2l.toLong, 11l.toLong))), (List[List[Long]](List[Long](7l.toLong, 8l.toLong), List[Long](4l.toLong, 10l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](8l.toLong, 4l.toLong)))).equals((List[List[Long]](List[Long](14l.toLong, 32l.toLong), List[Long](20l.toLong, 60l.toLong), List[Long](6l.toLong, 20l.toLong), List[Long](16l.toLong, 44l.toLong)))));\n    assert(indexMultiplication((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong), List[Long](4l.toLong, 11l.toLong), List[Long](3l.toLong, 12l.toLong))), (List[List[Long]](List[Long](8l.toLong, 9l.toLong), List[Long](5l.toLong, 11l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](9l.toLong, 5l.toLong)))).equals((List[List[Long]](List[Long](24l.toLong, 45l.toLong), List[Long](30l.toLong, 77l.toLong), List[Long](12l.toLong, 33l.toLong), List[Long](27l.toLong, 60l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_446_count_Occurrence", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the occurence of all elements of list in a tuple.\n    def countOccurrence(tup : Any, lst : List[Any]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countOccurrence((Any((\"a\", \"a\", \"c\", \"b\", \"d\"))), (List[Any](\"a\", \"b\"))) == (3l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l))), (List[Any](1l.toLong, 4l.toLong, 7l.toLong))) == (6l));\n    assert(countOccurrence((Any((1l, 2l, 3l, 4l, 5l, 6l))), (List[Any](1l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_447_cube_nums", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find cubes of individual elements in a list.\n    def cubeNums(nums : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(cubeNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 27l.toLong, 64l.toLong, 125l.toLong, 216l.toLong, 343l.toLong, 512l.toLong, 729l.toLong, 1000l.toLong))));\n    assert(cubeNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(cubeNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](1728l.toLong, 3375l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_448_cal_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of perrin numbers.\n    def calSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(calSum((9l)) == (49l));\n    assert(calSum((10l)) == (66l));\n    assert(calSum((11l)) == (88l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_450_extract_string", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_451_remove_whitespaces", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all whitespaces from the given string.\n    def removeWhitespaces(text1 : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeWhitespaces((\" Google    Flutter \")).equals((\"GoogleFlutter\")));\n    assert(removeWhitespaces((\" Google    Dart \")).equals((\"GoogleDart\")));\n    assert(removeWhitespaces((\" iOS    Swift \")).equals((\"iOSSwift\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_452_loss_amount", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    def lossAmount(actual_cost : Long, sale_amount : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lossAmount((1500l), (1200l)) == (0l));\n    assert(lossAmount((100l), (200l)) == (100l));\n    assert(lossAmount((2000l), (5000l)) == (3000l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_453_sumofFactors", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of even factors of a number.\n    def sumofFactors(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumofFactors((18l)) == (26l));\n    assert(sumofFactors((30l)) == (48l));\n    assert(sumofFactors((6l)) == (8l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_454_text_match_wordz", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a word containing 'z'.\n    def textMatchWordz(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordz((\"pythonz.\")) == (true));\n    assert(textMatchWordz((\"xyz.\")) == (true));\n    assert(textMatchWordz((\"  lang  .\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_455_check_monthnumb_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given month number contains 31 days or not.\n    def checkMonthnumbNumber(monthnum2 : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkMonthnumbNumber((5l)) == (true));\n    assert(checkMonthnumbNumber((2l)) == (false));\n    assert(checkMonthnumbNumber((6l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_456_reverse_string_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse each string in a given list of string values.\n    def reverseStringList(stringlist : List[String]) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseStringList((List[String](\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"))).equals((List[String](\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"))));\n    assert(reverseStringList((List[String](\"john\", \"amal\", \"joel\", \"george\"))).equals((List[String](\"nhoj\", \"lama\", \"leoj\", \"egroeg\"))));\n    assert(reverseStringList((List[String](\"jack\", \"john\", \"mary\"))).equals((List[String](\"kcaj\", \"nhoj\", \"yram\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_457_Find_Min", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sublist having minimum length.\n    def FindMin(lst : List[List[Any]]) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMin((List[List[Any]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Any](1l.toLong))));\n    assert(FindMin((List[List[Any]](List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 7l.toLong, 8l.toLong)))).equals((List[Any](1l.toLong, 1l.toLong))));\n    assert(FindMin((List[List[Any]](List[String](\"x\"), List[String](\"x\", \"y\"), List[String](\"x\", \"y\", \"z\")))).equals((List[Any](\"x\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_458_rectangle_area", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the area of a rectangle.\n    def rectangleArea(l : Long, b : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rectangleArea((10l), (20l)) == (200l));\n    assert(rectangleArea((10l), (5l)) == (50l));\n    assert(rectangleArea((4l), (2l)) == (8l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_459_remove_uppercase", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uppercase substrings from a given string.\n    def removeUppercase(str1 : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeUppercase((\"cAstyoUrFavoRitETVshoWs\")).equals((\"cstyoravoitshos\")));\n    assert(removeUppercase((\"wAtchTheinTernEtrAdIo\")).equals((\"wtchheinerntrdo\")));\n    assert(removeUppercase((\"VoicESeaRchAndreComMendaTionS\")).equals((\"oiceachndreomendaion\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_460_Extract", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to get the first element of each sublist.\n    def Extract(lst : List[List[Long]]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 3l.toLong, 6l.toLong))));\n    assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))).equals((List[Long](1l.toLong, 4l.toLong))));\n    assert(Extract((List[List[Long]](List[Long](9l.toLong, 8l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong)))).equals((List[Long](9l.toLong, 1l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_461_upper_ctr", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the upper case characters in a given string.\n    def upperCtr(str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(upperCtr((\"PYthon\")) == (1l));\n    assert(upperCtr((\"BigData\")) == (1l));\n    assert(upperCtr((\"program\")) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_462_combinations_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find all possible combinations of the elements of a given list.\n    def combinationsList(list1 : List[String]) : List[Either[List[None], List[String]]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combinationsList((List[String](\"orange\", \"red\", \"green\", \"blue\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"orange\"), List[String](\"red\"), List[String](\"red\", \"orange\"), List[String](\"green\"), List[String](\"green\", \"orange\"), List[String](\"green\", \"red\"), List[String](\"green\", \"red\", \"orange\"), List[String](\"blue\"), List[String](\"blue\", \"orange\"), List[String](\"blue\", \"red\"), List[String](\"blue\", \"red\", \"orange\"), List[String](\"blue\", \"green\"), List[String](\"blue\", \"green\", \"orange\"), List[String](\"blue\", \"green\", \"red\"), List[String](\"blue\", \"green\", \"red\", \"orange\")))));\n    assert(combinationsList((List[String](\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"red\"), List[String](\"green\"), List[String](\"green\", \"red\"), List[String](\"blue\"), List[String](\"blue\", \"red\"), List[String](\"blue\", \"green\"), List[String](\"blue\", \"green\", \"red\"), List[String](\"white\"), List[String](\"white\", \"red\"), List[String](\"white\", \"green\"), List[String](\"white\", \"green\", \"red\"), List[String](\"white\", \"blue\"), List[String](\"white\", \"blue\", \"red\"), List[String](\"white\", \"blue\", \"green\"), List[String](\"white\", \"blue\", \"green\", \"red\"), List[String](\"black\"), List[String](\"black\", \"red\"), List[String](\"black\", \"green\"), List[String](\"black\", \"green\", \"red\"), List[String](\"black\", \"blue\"), List[String](\"black\", \"blue\", \"red\"), List[String](\"black\", \"blue\", \"green\"), List[String](\"black\", \"blue\", \"green\", \"red\"), List[String](\"black\", \"white\"), List[String](\"black\", \"white\", \"red\"), List[String](\"black\", \"white\", \"green\"), List[String](\"black\", \"white\", \"green\", \"red\"), List[String](\"black\", \"white\", \"blue\"), List[String](\"black\", \"white\", \"blue\", \"red\"), List[String](\"black\", \"white\", \"blue\", \"green\"), List[String](\"black\", \"white\", \"blue\", \"green\", \"red\"), List[String](\"orange\"), List[String](\"orange\", \"red\"), List[String](\"orange\", \"green\"), List[String](\"orange\", \"green\", \"red\"), List[String](\"orange\", \"blue\"), List[String](\"orange\", \"blue\", \"red\"), List[String](\"orange\", \"blue\", \"green\"), List[String](\"orange\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"white\"), List[String](\"orange\", \"white\", \"red\"), List[String](\"orange\", \"white\", \"green\"), List[String](\"orange\", \"white\", \"green\", \"red\"), List[String](\"orange\", \"white\", \"blue\"), List[String](\"orange\", \"white\", \"blue\", \"red\"), List[String](\"orange\", \"white\", \"blue\", \"green\"), List[String](\"orange\", \"white\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"black\"), List[String](\"orange\", \"black\", \"red\"), List[String](\"orange\", \"black\", \"green\"), List[String](\"orange\", \"black\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"blue\"), List[String](\"orange\", \"black\", \"blue\", \"red\"), List[String](\"orange\", \"black\", \"blue\", \"green\"), List[String](\"orange\", \"black\", \"blue\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"white\"), List[String](\"orange\", \"black\", \"white\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"green\"), List[String](\"orange\", \"black\", \"white\", \"green\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"blue\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"red\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"green\"), List[String](\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\")))));\n    assert(combinationsList((List[String](\"red\", \"green\", \"black\", \"orange\"))).equals((List[Either[List[None], List[String]]](List[Long](), List[String](\"red\"), List[String](\"green\"), List[String](\"green\", \"red\"), List[String](\"black\"), List[String](\"black\", \"red\"), List[String](\"black\", \"green\"), List[String](\"black\", \"green\", \"red\"), List[String](\"orange\"), List[String](\"orange\", \"red\"), List[String](\"orange\", \"green\"), List[String](\"orange\", \"green\", \"red\"), List[String](\"orange\", \"black\"), List[String](\"orange\", \"black\", \"red\"), List[String](\"orange\", \"black\", \"green\"), List[String](\"orange\", \"black\", \"green\", \"red\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_463_max_subarray_product", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product sublist of the given list.\n    def maxSubarrayProduct(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubarrayProduct((List[Long](1l.toLong, -2l.toLong, -3l.toLong, 0l.toLong, 7l.toLong, -8l.toLong, -2l.toLong))) == (112l));\n    assert(maxSubarrayProduct((List[Long](6l.toLong, -3l.toLong, -10l.toLong, 0l.toLong, 2l.toLong))) == (180l));\n    assert(maxSubarrayProduct((List[Long](-2l.toLong, -40l.toLong, 0l.toLong, -2l.toLong, -3l.toLong))) == (80l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_464_check_value", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if all values are same in a map.\n    def checkValue(dict : Map[String,Long], n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (10l)) == (false));\n    assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (12l)) == (true));\n    assert(checkValue((Map[String,Long](\"Cierra Vega\" -> 12l, \"Alden Cantrell\" -> 12l, \"Kierra Gentry\" -> 12l, \"Pierre Cox\" -> 12l)), (5l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_465_drop_empty", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given map.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_468_max_product", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n    def maxProduct(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong, 150l.toLong, 6l.toLong))) == (3000l));\n    assert(maxProduct((List[Long](4l.toLong, 42l.toLong, 55l.toLong, 68l.toLong, 80l.toLong))) == (50265600l));\n    assert(maxProduct((List[Long](10l.toLong, 22l.toLong, 9l.toLong, 33l.toLong, 21l.toLong, 50l.toLong, 41l.toLong, 60l.toLong))) == (2460l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_470_add_pairwise", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    def addPairwise(test_tup : Tuple2[Long, Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addPairwise(((1l, 5l, 7l, 8l, 10l))).equals(((6l, 12l, 15l, 18l))));\n    assert(addPairwise(((2l, 6l, 8l, 9l, 11l))).equals(((8l, 14l, 17l, 20l))));\n    assert(addPairwise(((3l, 7l, 9l, 10l, 12l))).equals(((10l, 16l, 19l, 22l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_471_find_remainder", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the product of the list multiplication modulo n.\n    def findRemainder(arr : List[Long], n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findRemainder((List[Long](100l.toLong, 10l.toLong, 5l.toLong, 25l.toLong, 35l.toLong, 14l.toLong)), (11l)) == (9l));\n    assert(findRemainder((List[Long](1l.toLong, 1l.toLong, 1l.toLong)), (1l)) == (0l));\n    assert(findRemainder((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (2l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_472_check_Consecutive", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given list contains consecutive numbers or not.\n    def checkConsecutive(l : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (true));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 6l.toLong))) == (false));\n    assert(checkConsecutive((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_474_replace_char", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace characters in a string.\n    def replaceChar(str1 : String, ch : String, newch : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceChar((\"polygon\"), (\"y\"), (\"l\")).equals((\"pollgon\")));\n    assert(replaceChar((\"character\"), (\"c\"), (\"a\")).equals((\"aharaater\")));\n    assert(replaceChar((\"python\"), (\"l\"), (\"a\")).equals((\"python\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_475_sort_counter", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a map by value.\n    def sortCounter(dict1 : Map[String,Long]) : List[Tuple2[String, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortCounter((Map[String,Long](\"Math\" -> 81l, \"Physics\" -> 83l, \"Chemistry\" -> 87l))).equals((List[Tuple2[String, Long]]((\"Chemistry\", 87l), (\"Physics\", 83l), (\"Math\", 81l)))));\n    assert(sortCounter((Map[String,Long](\"Math\" -> 400l, \"Physics\" -> 300l, \"Chemistry\" -> 250l))).equals((List[Tuple2[String, Long]]((\"Math\", 400l), (\"Physics\", 300l), (\"Chemistry\", 250l)))));\n    assert(sortCounter((Map[String,Long](\"Math\" -> 900l, \"Physics\" -> 1000l, \"Chemistry\" -> 1250l))).equals((List[Tuple2[String, Long]]((\"Chemistry\", 1250l), (\"Physics\", 1000l), (\"Math\", 900l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_476_big_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the largest and smallest value in a given list.\n    def bigSum(nums : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bigSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (4l));\n    assert(bigSum((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(bigSum((List[Long](2l.toLong, 3l.toLong, 6l.toLong))) == (8l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_477_is_lower", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to convert the given string to lower case.\n    def isLower(string : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isLower((\"InValid\")).equals((\"invalid\")));\n    assert(isLower((\"TruE\")).equals((\"true\")));\n    assert(isLower((\"SenTenCE\")).equals((\"sentence\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_478_remove_lowercase", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove lowercase substrings from a given string.\n    def removeLowercase(str1 : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeLowercase((\"PYTHon\")).equals((\"PYTH\")));\n    assert(removeLowercase((\"FInD\")).equals((\"FID\")));\n    assert(removeLowercase((\"STRinG\")).equals((\"STRG\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_479_first_Digit", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first digit of a given number.\n    def firstDigit(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstDigit((123l)) == (1l));\n    assert(firstDigit((456l)) == (4l));\n    assert(firstDigit((12l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_4_heap_queue_largest", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    def heapQueueLargest(nums : List[Long], n : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (3l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong))));\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (2l)).equals((List[Long](85l.toLong, 75l.toLong))));\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (5l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong, 58l.toLong, 35l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_554_Split", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of integers and only returns the odd ones.\n    def Split(list : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong))));\n    assert(Split((List[Long](10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong))).equals((List[Long](11l.toLong, 13l.toLong))));\n    assert(Split((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](7l.toLong, 9l.toLong, 1l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_555_difference", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    def difference(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(difference((3l)) == (30l));\n    assert(difference((5l)) == (210l));\n    assert(difference((2l)) == (6l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_556_find_Odd_Pair", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose xor value is odd.\n    def findOddPair(A : List[Long], N : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findOddPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong)), (5l)) == (6l));\n    assert(findOddPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong)), (7l)) == (12l));\n    assert(findOddPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (3l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_557_toggle_string", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to toggle the case of all characters in a string.\n    def toggleString(string : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(toggleString((\"Python\")).equals((\"pYTHON\")));\n    assert(toggleString((\"Pangram\")).equals((\"pANGRAM\")));\n    assert(toggleString((\"LIttLE\")).equals((\"liTTle\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_558_digit_distance_nums", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the per-digit difference between two integers.\n    def digitDistanceNums(n1 : Long, n2 : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(digitDistanceNums((1l), (2l)) == (1l));\n    assert(digitDistanceNums((23l), (56l)) == (6l));\n    assert(digitDistanceNums((123l), (256l)) == (7l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_559_max_sub_array_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the sum of the largest contiguous sublist in the given list.\n    def maxSubArraySum(a : List[Long], size : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSubArraySum((List[Long](-2l.toLong, -3l.toLong, 4l.toLong, -1l.toLong, -2l.toLong, 1l.toLong, 5l.toLong, -3l.toLong)), (8l)) == (7l));\n    assert(maxSubArraySum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong, -2l.toLong, -3l.toLong, 2l.toLong, 6l.toLong, -4l.toLong)), (8l)) == (8l));\n    assert(maxSubArraySum((List[Long](-4l.toLong, -5l.toLong, 6l.toLong, -3l.toLong, -4l.toLong, 3l.toLong, 7l.toLong, -5l.toLong)), (8l)) == (10l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_560_union_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the union of the elements of two given lists and output them in sorted order.\n    def unionElements(test_tup1 : List[Long], test_tup2 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(unionElements((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](5l.toLong, 7l.toLong, 4l.toLong, 10l.toLong))).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 10l.toLong))));\n    assert(unionElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))));\n    assert(unionElements((List[Long](11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (List[Long](13l.toLong, 15l.toLong, 16l.toLong, 17l.toLong))).equals((List[Long](11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong, 15l.toLong, 16l.toLong, 17l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_562_Find_Max_Length", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the length of the longest sublists.\n    def FindMaxLength(lst : List[List[Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMaxLength((List[List[Long]](List[Long](1l.toLong), List[Long](1l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)))) == (4l));\n    assert(FindMaxLength((List[List[Long]](List[Long](0l.toLong, 1l.toLong), List[Long](2l.toLong, 2l.toLong), List[Long](3l.toLong, 2l.toLong, 1l.toLong)))) == (3l));\n    assert(FindMaxLength((List[List[Long]](List[Long](7l.toLong), List[Long](22l.toLong, 23l.toLong), List[Long](13l.toLong, 14l.toLong, 15l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong)))) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_563_extract_values", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract values between quotation marks from a string.\n    def extractValues(text : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((List[String](\"Python\", \"PHP\", \"Java\"))));\n    assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((List[String](\"python\", \"program\", \"language\"))));\n    assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((List[String](\"red\", \"blue\", \"green\", \"yellow\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_564_count_Pairs", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    def countPairs(arr : List[Long], n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (3l)) == (2l));\n    assert(countPairs((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (4l)) == (0l));\n    assert(countPairs((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (5l)) == (10l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_565_split", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to split a string into characters.\n    def split(word : String) : List[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_566_sum_digits", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get the sum of the digits of a non-negative integer.\n    def sumDigits(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumDigits((345l)) == (12l));\n    assert(sumDigits((12l)) == (3l));\n    assert(sumDigits((97l)) == (16l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_567_issort_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a specified list is sorted or not.\n    def issortList(list1 : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 17l.toLong))) == (true));\n    assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 20l.toLong, 17l.toLong))) == (false));\n    assert(issortList((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 10l.toLong, 15l.toLong, 14l.toLong, 20l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_568_empty_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create a list of N empty dictionaries.\n    def emptyList(length : Long) : List[Map[None,None]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(emptyList((5l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));\n    assert(emptyList((6l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));\n    assert(emptyList((7l)).equals((List[Map[None,None]](Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long](), Map[Long,Long]()))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_569_sort_sublists", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_56_checks", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check if a given number is one less than twice its reverse.\n    def checks(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_572_two_unique_nums", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove duplicate numbers from a given number of lists.\n    def twoUniqueNums(nums : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 5l.toLong))));\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(twoUniqueNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_573_unique_product", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_574_surfacearea_cylinder", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the surface area of a cylinder.\n    def surfaceareaCylinder(r : Long, h : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceareaCylinder((10l), (5l)) == (942.45f));\n    assert(surfaceareaCylinder((4l), (5l)) == (226.18800000000002f));\n    assert(surfaceareaCylinder((4l), (10l)) == (351.848f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_576_is_Sub_Array", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list is sublist of another or not.\n    def isSubArray(A : List[Long], B : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSubArray((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)), (List[Long](1l.toLong, 2l.toLong))) == (false));\n    assert(isSubArray((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (true));\n    assert(isSubArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong)), (List[Long](2l.toLong, 2l.toLong, 0l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_577_last_Digit_Factorial", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last digit in factorial of a given number.\n    def lastDigitFactorial(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigitFactorial((4l)) == (4l));\n    assert(lastDigitFactorial((21l)) == (0l));\n    assert(lastDigitFactorial((30l)) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_578_interleave_lists", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to interleave 3 lists of the same length into a single flat list.\n    def interleaveLists(list1 : List[Long], list2 : List[Long], list3 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(interleaveLists((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong)), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong, 500l.toLong, 600l.toLong, 700l.toLong))).equals((List[Long](1l.toLong, 10l.toLong, 100l.toLong, 2l.toLong, 20l.toLong, 200l.toLong, 3l.toLong, 30l.toLong, 300l.toLong, 4l.toLong, 40l.toLong, 400l.toLong, 5l.toLong, 50l.toLong, 500l.toLong, 6l.toLong, 60l.toLong, 600l.toLong, 7l.toLong, 70l.toLong, 700l.toLong))));\n    assert(interleaveLists((List[Long](10l.toLong, 20l.toLong)), (List[Long](15l.toLong, 2l.toLong)), (List[Long](5l.toLong, 10l.toLong))).equals((List[Long](10l.toLong, 15l.toLong, 5l.toLong, 20l.toLong, 2l.toLong, 10l.toLong))));\n    assert(interleaveLists((List[Long](11l.toLong, 44l.toLong)), (List[Long](10l.toLong, 15l.toLong)), (List[Long](20l.toLong, 5l.toLong))).equals((List[Long](11l.toLong, 10l.toLong, 20l.toLong, 44l.toLong, 15l.toLong, 5l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_579_find_dissimilar", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the dissimilar elements in the given two tuples.\n    def findDissimilar(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findDissimilar(((3l, 4l, 5l, 6l)), ((5l, 7l, 4l, 10l))).equals(((3l, 6l, 7l, 10l))));\n    assert(findDissimilar(((1l, 2l, 3l, 4l)), ((7l, 2l, 3l, 9l))).equals(((1l, 4l, 7l, 9l))));\n    assert(findDissimilar(((21l, 11l, 25l, 26l)), ((26l, 34l, 21l, 36l))).equals(((34l, 36l, 11l, 25l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_57_find_Max_Num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest number that can be formed with the given list of digits.\n    def findMaxNum(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));\n    assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_580_extract_even", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Tuple2[Long, Long, Tuple2[Long, Long, Tuple2[Long, Long]], Long, Long]) : Any = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractEven(((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l))).equals((Any(6l, (2l, 4l)), 6l, 8l))));\n    assert(extractEven(((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l))).equals((Any(8l, (4l, 8l))))));\n    assert(extractEven(((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l))).equals((Any(8l, (4l, 6l)), 8l, 10l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_581_surface_Area", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the surface area of a square scalaramid with a given base edge and height.\n    def surfaceArea(b : Long, s : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(surfaceArea((3l), (4l)) == (33l));\n    assert(surfaceArea((4l), (5l)) == (56l));\n    assert(surfaceArea((1l), (2l)) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_583_catalan_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which returns nth catalan number.\n    def catalanNumber(num : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(catalanNumber((10l)) == (16796l));\n    assert(catalanNumber((9l)) == (4862l));\n    assert(catalanNumber((7l)) == (429l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_584_find_adverbs", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the first adverb ending with ly and its positions in a given string.\n    def findAdverbs(text : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findAdverbs((\"Clearly, he has no excuse for such behavior.\")).equals((\"0-7: Clearly\")));\n    assert(findAdverbs((\"Please handle the situation carefuly\")).equals((\"28-36: carefuly\")));\n    assert(findAdverbs((\"Complete the task quickly\")).equals((\"18-25: quickly\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_585_expensive_items", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n most expensive items in a given dataset.\n    def expensiveItems(items : List[Map[String,Either[String, Float]]], n : Long) : List[Map[String,Either[String, Float]]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f))), (2l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f)))));\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f), Map[String,String](\"name\" -> \"Item-4\", \"price\" -> 22.75f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_586_split_Arr", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to split a list at the nth eelment and add the first part to the end.\n    def splitArr(l : List[Long], n : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(splitArr((List[Long](12l.toLong, 10l.toLong, 5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong)), (2l)).equals((List[Long](5l.toLong, 6l.toLong, 52l.toLong, 36l.toLong, 12l.toLong, 10l.toLong))));\n    assert(splitArr((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(splitArr((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (3l)).equals((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 0l.toLong, 1l.toLong, 2l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_587_list_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a list to a tuple.\n    def listTuple(listx : List[Long]) : Any = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(listTuple((List[Long](5l.toLong, 10l.toLong, 7l.toLong, 4l.toLong, 15l.toLong, 3l.toLong))).equals((Any((5l, 10l, 7l, 4l, 15l, 3l)))));\n    assert(listTuple((List[Long](2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 7l.toLong))).equals((Any((2l, 4l, 5l, 6l, 2l, 3l, 4l, 4l, 7l)))));\n    assert(listTuple((List[Long](58l.toLong, 44l.toLong, 56l.toLong))).equals((Any((58l, 44l, 56l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_588_big_diff", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the difference between largest and smallest value in a given list.\n    def bigDiff(nums : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bigDiff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (3l));\n    assert(bigDiff((List[Long](4l.toLong, 5l.toLong, 12l.toLong))) == (8l));\n    assert(bigDiff((List[Long](9l.toLong, 2l.toLong, 3l.toLong))) == (7l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_589_perfect_squares", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find perfect squares between two given numbers.\n    def perfectSquares(a : Long, b : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(perfectSquares((1l), (30l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong))));\n    assert(perfectSquares((50l), (100l)).equals((List[Long](64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(perfectSquares((100l), (200l)).equals((List[Long](100l.toLong, 121l.toLong, 144l.toLong, 169l.toLong, 196l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_58_opposite_Signs", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given two integers have opposite sign or not.\n    def oppositeSigns(x : Long, y : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oppositeSigns((1l), (-2l)) == (true));\n    assert(oppositeSigns((3l), (2l)) == (false));\n    assert(oppositeSigns((-10l), (-10l)) == (false));\n    assert(oppositeSigns((-2l), (2l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_591_swap_List", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last elements in a list.\n    def swapList(newList : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](12l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 24l.toLong))).equals((List[Long](24l.toLong, 35l.toLong, 9l.toLong, 56l.toLong, 12l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_592_sum_Of_product", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of the product of consecutive binomial co-efficients.\n    def sumOfProduct(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfProduct((3l)) == (15l));\n    assert(sumOfProduct((4l)) == (56l));\n    assert(sumOfProduct((1l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_593_removezero_ip", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove leading zeroes from an ip address.\n    def removezeroIp(ip : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));\n    assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));\n    assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_594_diff_even_odd", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the difference of the first even and first odd number of a given list.\n    def diffEvenOdd(list1 : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(diffEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (3l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (1l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (9l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_595_min_Swaps", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    def minSwaps(str1 : String, str2 : String) : Any = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minSwaps((\"1101\"), (\"1110\")).equals((Any(1l))));\n    assert(minSwaps((\"111\"), (\"000\")).equals((Any(\"Not Possible\"))));\n    assert(minSwaps((\"111\"), (\"110\")).equals((Any(\"Not Possible\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_597_find_kth", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find kth element from the given two sorted lists.\n    def findKth(arr1 : List[Long], arr2 : List[Long], k : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findKth((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 9l.toLong)), (List[Long](1l.toLong, 4l.toLong, 8l.toLong, 10l.toLong)), (5l)) == (6l));\n    assert(findKth((List[Long](100l.toLong, 112l.toLong, 256l.toLong, 349l.toLong, 770l.toLong)), (List[Long](72l.toLong, 86l.toLong, 113l.toLong, 119l.toLong, 265l.toLong, 445l.toLong, 892l.toLong)), (7l)) == (256l));\n    assert(findKth((List[Long](3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 10l.toLong)), (List[Long](2l.toLong, 5l.toLong, 9l.toLong, 11l.toLong)), (6l)) == (8l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_598_armstrong_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is armstrong or not.\n    def armstrongNumber(number : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(armstrongNumber((153l)) == (true));\n    assert(armstrongNumber((259l)) == (false));\n    assert(armstrongNumber((4458l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_599_sum_average", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find sum and average of first n natural numbers.\n    def sumAverage(number : Long) : Tuple2[Long, Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumAverage((10l)).equals(((55l, 5.5f))));\n    assert(sumAverage((15l)).equals(((120l, 8.0f))));\n    assert(sumAverage((20l)).equals(((210l, 10.5f))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_59_is_octagonal", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth octagonal number.\n    def isOctagonal(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_600_is_Even", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number is even or not.\n    def isEven(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isEven((1l)) == (false));\n    assert(isEven((2l)) == (true));\n    assert(isEven((3l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_602_first_repeated_char", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first repeated character in a given string.\n    def firstRepeatedChar(str1 : String) : Option[String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstRepeatedChar((\"abcabc\")).equals(Some(\"a\")));\n    assert(firstRepeatedChar((\"abc\")).equals(None));\n    assert(firstRepeatedChar((\"123123\")).equals(Some(\"1\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_603_get_ludic", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get all lucid numbers smaller than or equal to a given integer.\n    def getLudic(n : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getLudic((10l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))));\n    assert(getLudic((25l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 23l.toLong, 25l.toLong))));\n    assert(getLudic((45l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 23l.toLong, 25l.toLong, 29l.toLong, 37l.toLong, 41l.toLong, 43l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_604_reverse_words", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to reverse words seperated by spaces in a given string.\n    def reverseWords(s : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseWords((\"python program\")).equals((\"program python\")));\n    assert(reverseWords((\"java language\")).equals((\"language java\")));\n    assert(reverseWords((\"indian man\")).equals((\"man indian\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_605_prime_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given integer is a prime number.\n    def primeNum(num : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(primeNum((13l)) == (true));\n    assert(primeNum((7l)) == (true));\n    assert(primeNum((-1010l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_606_radian_degree", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert degrees to radians.\n    def radianDegree(degree : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(radianDegree((90l)) == (1.5707963267948966f));\n    assert(radianDegree((60l)) == (1.0471975511965976f));\n    assert(radianDegree((120l)) == (2.0943951023931953f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_607_find_literals", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Tuple2[String, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals(((\"fox\", 16l, 19l))));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals(((\"crazy\", 16l, 21l))));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals(((\"will\", 35l, 39l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_608_bell_Number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find nth bell number.\n    def bellNumber(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((3l)) == (5l));\n    assert(bellNumber((4l)) == (15l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_610_remove_kth_element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list and returns a list with the same elements, but the k'th element removed.\n    def removeKthElement(list1 : List[Long], L : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeKthElement((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))));\n    assert(removeKthElement((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong)), (4l)).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))));\n    assert(removeKthElement((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong)), (5l)).equals((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_611_max_of_nth", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    def maxOfNth(test_list : List[List[Long]], N : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxOfNth((List[List[Long]](List[Long](5l.toLong, 6l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong, 5l.toLong), List[Long](8l.toLong, 9l.toLong, 19l.toLong))), (2l)) == (19l));\n    assert(maxOfNth((List[List[Long]](List[Long](6l.toLong, 7l.toLong, 8l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong), List[Long](9l.toLong, 10l.toLong, 20l.toLong))), (1l)) == (10l));\n    assert(maxOfNth((List[List[Long]](List[Long](7l.toLong, 8l.toLong, 9l.toLong), List[Long](3l.toLong, 5l.toLong, 7l.toLong), List[Long](10l.toLong, 11l.toLong, 21l.toLong))), (1l)) == (11l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_612_merge", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    def merge(lst : List[List[Any]]) : List[List[Any]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(merge((List[List[Any]](List[String](\"x\", \"y\"), List[String](\"a\", \"b\"), List[String](\"m\", \"n\")))).equals((List[List[Any]](List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\")))));\n    assert(merge((List[List[Any]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong)))).equals((List[List[Any]](List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)))));\n    assert(merge((List[List[Any]](List[String](\"x\", \"y\", \"z\"), List[String](\"a\", \"b\", \"c\"), List[String](\"m\", \"n\", \"o\")))).equals((List[List[Any]](List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\"), List[String](\"z\", \"c\", \"o\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_614_cummulative_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the cumulative sum of all the values that are present in the given list of lists.\n    def cummulativeSum(test_list : List[List[Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(cummulativeSum((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong), List[Long](2l.toLong, 6l.toLong)))) == (30l));\n    assert(cummulativeSum((List[List[Long]](List[Long](2l.toLong, 4l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong), List[Long](3l.toLong, 7l.toLong)))) == (37l));\n    assert(cummulativeSum((List[List[Long]](List[Long](3l.toLong, 5l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong), List[Long](4l.toLong, 8l.toLong)))) == (44l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_615_average_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a lists of lists and returns the average value for each sublist as a list.\n    def averageTuple(nums : List[List[Long]]) : List[Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(averageTuple((List[List[Long]](List[Long](10l.toLong, 10l.toLong, 10l.toLong, 12l.toLong), List[Long](30l.toLong, 45l.toLong, 56l.toLong, 45l.toLong), List[Long](81l.toLong, 80l.toLong, 39l.toLong, 32l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple((List[List[Long]](List[Long](1l.toLong, 1l.toLong, -5l.toLong), List[Long](30l.toLong, -15l.toLong, 56l.toLong), List[Long](81l.toLong, -60l.toLong, -39l.toLong), List[Long](-10l.toLong, 2l.toLong, 3l.toLong)))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple((List[List[Long]](List[Long](100l.toLong, 100l.toLong, 100l.toLong, 120l.toLong), List[Long](300l.toLong, 450l.toLong, 560l.toLong, 450l.toLong), List[Long](810l.toLong, 800l.toLong, 390l.toLong, 320l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_616_tuple_modulo", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes two tuples of the same length and performs the element wise modulo.\n    def tupleModulo(test_tup1 : Tuple2[Long, Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long, Long]) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleModulo(((10l, 4l, 5l, 6l)), ((5l, 6l, 7l, 5l))).equals(((0l, 4l, 5l, 1l))));\n    assert(tupleModulo(((11l, 5l, 6l, 7l)), ((6l, 7l, 8l, 6l))).equals(((5l, 5l, 6l, 1l))));\n    assert(tupleModulo(((12l, 6l, 7l, 8l)), ((7l, 8l, 9l, 7l))).equals(((5l, 6l, 7l, 1l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_617_min_Jumps", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    def minJumps(steps : Tuple2[Long, Long], d : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minJumps(((3l, 4l)), (11l)) == (3.5f));\n    assert(minJumps(((3l, 4l)), (0l)) == 0l);\n    assert(minJumps(((11l, 14l)), (11l)) == 1l);\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_618_div_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to divide two lists element wise.\n    def divList(nums1 : List[Long], nums2 : List[Long]) : List[Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divList((List[Long](4l.toLong, 5l.toLong, 6l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Float](4.0f.toFloat, 2.5f.toFloat, 2.0f.toFloat))));\n    assert(divList((List[Long](3l.toLong, 2l.toLong)), (List[Long](1l.toLong, 4l.toLong))).equals((List[Float](3.0f.toFloat, 0.5f.toFloat))));\n    assert(divList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Float](1.8f.toFloat, 1.7142857142857142f.toFloat))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_619_move_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    def moveNum(test_str : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));\n    assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));\n    assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_61_count_Substrings", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of substrings with the sum of digits equal to their length.\n    def countSubstrings(s : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSubstrings((\"112112\")) == (6l));\n    assert(countSubstrings((\"111\")) == (6l));\n    assert(countSubstrings((\"1101112\")) == (12l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_622_get_median", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median of two sorted lists of same size.\n    def getMedian(arr1 : List[Long], arr2 : List[Long], n : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMedian((List[Long](1l.toLong, 12l.toLong, 15l.toLong, 26l.toLong, 38l.toLong)), (List[Long](2l.toLong, 13l.toLong, 17l.toLong, 30l.toLong, 45l.toLong)), (5l)) == (16.0f));\n    assert(getMedian((List[Long](2l.toLong, 4l.toLong, 8l.toLong, 9l.toLong)), (List[Long](7l.toLong, 13l.toLong, 19l.toLong, 28l.toLong)), (4l)) == (8.5f));\n    assert(getMedian((List[Long](3l.toLong, 6l.toLong, 14l.toLong, 23l.toLong, 36l.toLong, 42l.toLong)), (List[Long](2l.toLong, 18l.toLong, 27l.toLong, 39l.toLong, 49l.toLong, 55l.toLong)), (6l)) == (25.0f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_623_nth_nums", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the n-th power of each number in a list.\n    def nthNums(nums : List[Long], n : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nthNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(nthNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (3l)).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(nthNums((List[Long](12l.toLong, 15l.toLong)), (5l)).equals((List[Long](248832l.toLong, 759375l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_624_is_upper", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to convert a given string to uppercase.\n    def isUpper(string : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isUpper((\"person\")).equals((\"PERSON\")));\n    assert(isUpper((\"final\")).equals((\"FINAL\")));\n    assert(isUpper((\"Valid\")).equals((\"VALID\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_625_swap_List", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to interchange the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))).equals((List[Long](4l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_626_triangle_area", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    def triangleArea(r : Long) : Option[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((-1l)).equals(None));\n    assert(triangleArea((0l)).equals(Some(0l)));\n    assert(triangleArea((2l)).equals(Some(4l)));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_627_find_First_Missing", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the smallest missing number from a sorted list of natural numbers.\n    def findFirstMissing(array : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (4l));\n    assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 9l.toLong))) == (3l));\n    assert(findFirstMissing((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 9l.toLong))) == (0l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_628_replace_spaces", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace all spaces in the given string with '%20'.\n    def replaceSpaces(string : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceSpaces((\"My Name is Dawood\")).equals((\"My%20Name%20is%20Dawood\")));\n    assert(replaceSpaces((\"I am a Programmer\")).equals((\"I%20am%20a%20Programmer\")));\n    assert(replaceSpaces((\"I love Coding\")).equals((\"I%20love%20Coding\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_629_Split", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find even numbers from a list of numbers.\n    def Split(list : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Split((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](2l.toLong, 4l.toLong))));\n    assert(Split((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 0l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))));\n    assert(Split((List[Long](8l.toLong, 12l.toLong, 15l.toLong, 19l.toLong))).equals((List[Long](8l.toLong, 12l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_62_smallest_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find smallest number in a list.\n    def smallestNum(xs : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(smallestNum((List[Long](10l.toLong, 20l.toLong, 1l.toLong, 45l.toLong, 99l.toLong))) == (1l));\n    assert(smallestNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    assert(smallestNum((List[Long](45l.toLong, 46l.toLong, 50l.toLong, 60l.toLong))) == (45l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_630_get_coordinates", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    def getCoordinates(test_tup : Tuple2[Long, Long]) : List[List[Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getCoordinates(((3l, 4l))).equals((List[List[Long]](List[Long](2l.toLong, 3l.toLong), List[Long](2l.toLong, 4l.toLong), List[Long](2l.toLong, 5l.toLong), List[Long](3l.toLong, 3l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](4l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong)))));\n    assert(getCoordinates(((4l, 5l))).equals((List[List[Long]](List[Long](3l.toLong, 4l.toLong), List[Long](3l.toLong, 5l.toLong), List[Long](3l.toLong, 6l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](5l.toLong, 4l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong)))));\n    assert(getCoordinates(((5l, 6l))).equals((List[List[Long]](List[Long](4l.toLong, 5l.toLong), List[Long](4l.toLong, 6l.toLong), List[Long](4l.toLong, 7l.toLong), List[Long](5l.toLong, 5l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](6l.toLong, 5l.toLong), List[Long](6l.toLong, 6l.toLong), List[Long](6l.toLong, 7l.toLong)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_631_replace_spaces", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    def replaceSpaces(text : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceSpaces((\"Jumanji The Jungle\")).equals((\"Jumanji_The_Jungle\")));\n    assert(replaceSpaces((\"The_Avengers\")).equals((\"The Avengers\")));\n    assert(replaceSpaces((\"Fast and Furious\")).equals((\"Fast_and_Furious\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_632_move_zero", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to move all zeroes to the end of the given list.\n    def moveZero(num_list : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveZero((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 0l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 0l.toLong, 0l.toLong, 4l.toLong, 0l.toLong, 5l.toLong, 0l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong))));\n    assert(moveZero((List[Long](0l.toLong, 1l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_633_pair_xor_Sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of xor of all pairs of numbers in the given list.\n    def pairXorSum(arr : List[Long], n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairXorSum((List[Long](5l.toLong, 9l.toLong, 7l.toLong, 6l.toLong)), (4l)) == (47l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong, 5l.toLong)), (3l)) == (12l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong)), (2l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_635_heap_sort", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given list.\n    def heapSort(iterable : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(heapSort((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(heapSort((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong))).equals((List[Long](14l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 58l.toLong, 65l.toLong, 75l.toLong, 85l.toLong))));\n    assert(heapSort((List[Long](7l.toLong, 1l.toLong, 9l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_637_noprofit_noloss", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given amount has no profit and no loss\n    def noprofitNoloss(actual_cost : Long, sale_amount : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(noprofitNoloss((1500l), (1200l)) == (false));\n    assert(noprofitNoloss((100l), (100l)) == (true));\n    assert(noprofitNoloss((2000l), (5000l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_638_wind_chill", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    def windChill(v : Long, t : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(windChill((120l), (35l)) == (40l));\n    assert(windChill((40l), (20l)) == (19l));\n    assert(windChill((10l), (8l)) == (6l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_639_sample_nam", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    def sampleNam(sample_names : List[String]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sampleNam((List[String](\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"))) == (16l));\n    assert(sampleNam((List[String](\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"))) == (10l));\n    assert(sampleNam((List[String](\"abcd\", \"Python\", \"abba\", \"aba\"))) == (6l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_63_max_difference", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum difference between available pairs in the given tuple list.\n    def maxDifference(test_list : List[Tuple2[Long, Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxDifference((List[Tuple2[Long, Long]]((3l, 5l), (1l, 7l), (10l, 3l), (1l, 2l)))) == (7l));\n    assert(maxDifference((List[Tuple2[Long, Long]]((4l, 6l), (2l, 17l), (9l, 13l), (11l, 12l)))) == (15l));\n    assert(maxDifference((List[Tuple2[Long, Long]]((12l, 35l), (21l, 27l), (13l, 23l), (41l, 22l)))) == (23l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_640_remove_parenthesis", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    def removeParenthesis(items : List[String]) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeParenthesis((List[String](\"python (chrome)\"))).equals((\"python\")));\n    assert(removeParenthesis((List[String](\"string(.abc)\"))).equals((\"string\")));\n    assert(removeParenthesis((List[String](\"alpha(num)\"))).equals((\"alpha\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_641_is_nonagonal", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth nonagonal number.\n    def isNonagonal(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNonagonal((10l)) == (325l));\n    assert(isNonagonal((15l)) == (750l));\n    assert(isNonagonal((18l)) == (1089l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_643_text_match_wordz_middle", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    def textMatchWordzMiddle(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));\n    assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));\n    assert(textMatchWordzMiddle((\"  lang  .\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to reverse a list upto a given position.\n    def reverseArrayUptoK(input : List[Long], k : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(reverseArrayUptoK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (4l)).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))));\n    assert(reverseArrayUptoK((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (2l)).equals((List[Long](5l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))));\n    assert(reverseArrayUptoK((List[Long](9l.toLong, 8l.toLong, 7l.toLong, 6l.toLong, 5l.toLong)), (3l)).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 6l.toLong, 5l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_64_subject_marks", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of tuples using the second value of each tuple.\n    def subjectMarks(subjectmarks : List[Tuple2[String, Long]]) : List[Tuple2[String, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(subjectMarks((List[Tuple2[String, Long]]((\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l), (\"Social sciences\", 82l)))).equals((List[Tuple2[String, Long]]((\"Social sciences\", 82l), (\"English\", 88l), (\"Science\", 90l), (\"Maths\", 97l)))));\n    assert(subjectMarks((List[Tuple2[String, Long]]((\"Telugu\", 49l), (\"Hindhi\", 54l), (\"Social\", 33l)))).equals((List[Tuple2[String, Long]]((\"Social\", 33l), (\"Telugu\", 49l), (\"Hindhi\", 54l)))));\n    assert(subjectMarks((List[Tuple2[String, Long]]((\"Physics\", 96l), (\"Chemistry\", 97l), (\"Biology\", 45l)))).equals((List[Tuple2[String, Long]]((\"Biology\", 45l), (\"Physics\", 96l), (\"Chemistry\", 97l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_65_recursive_list_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_66_pos_count", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of positive numbers in a list.\n    def posCount(list : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(posCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong, -4l.toLong))) == (2l));\n    assert(posCount((List[Long](3l.toLong, 4l.toLong, 5l.toLong, -1l.toLong))) == (3l));\n    assert(posCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_67_bell_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of ways to partition a set of Bell numbers.\n    def bellNumber(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((10l)) == (115975l));\n    assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_68_is_Monotonic", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given list is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_69_is_sublist", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a list contains the given sublist or not.\n    def isSublist(l : List[Long], s : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](3l.toLong, 7l.toLong))) == (false));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](4l.toLong, 3l.toLong))) == (true));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](1l.toLong, 6l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_70_get_equal", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find whether all the given lists have equal length or not.\n    def getEqual(Input : List[List[Long]]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getEqual((List[List[Long]](List[Long](11l.toLong, 22l.toLong, 33l.toLong), List[Long](44l.toLong, 55l.toLong, 66l.toLong)))) == (true));\n    assert(getEqual((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))) == (false));\n    assert(getEqual((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong)))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_71_comb_sort", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_720_add_dict_to_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Tuple2[Long, Long, Long], test_dict : Map[String,Long]) : Tuple2[Long, Long, Long, Map[String,Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple(((4l, 5l, 6l)), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals(((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l)))));\n    assert(addDictToTuple(((1l, 2l, 3l)), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals(((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l)))));\n    assert(addDictToTuple(((8l, 9l, 10l)), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals(((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_721_maxAverageOfPath", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    def maxAverageOfPath(cost : List[List[Long]]) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAverageOfPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](6l.toLong, 5l.toLong, 4l.toLong), List[Long](7l.toLong, 3l.toLong, 9l.toLong)))) == (5.2f));\n    assert(maxAverageOfPath((List[List[Long]](List[Long](2l.toLong, 3l.toLong, 4l.toLong), List[Long](7l.toLong, 6l.toLong, 5l.toLong), List[Long](8l.toLong, 4l.toLong, 10l.toLong)))) == (6.2f));\n    assert(maxAverageOfPath((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](8l.toLong, 7l.toLong, 6l.toLong), List[Long](9l.toLong, 5l.toLong, 11l.toLong)))) == (7.2f));\n    assert(maxAverageOfPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))) == (5.8f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_722_filter_data", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Tuple2[Float, Long]], h : Float, w : Long) : Map[String,Tuple2[Float, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Tuple2[Float, Long]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_723_count_same_pair", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    def countSamePair(nums1 : List[Long], nums2 : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSamePair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (4l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (11l));\n    assert(countSamePair((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (1l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_724_power_base_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    def powerBaseSum(base : Long, power : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(powerBaseSum((2l), (100l)) == (115l));\n    assert(powerBaseSum((8l), (10l)) == (37l));\n    assert(powerBaseSum((8l), (15l)) == (62l));\n    assert(powerBaseSum((3l), (3l)) == (9l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_725_extract_quotation", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract values between quotation marks \" \" of the given string.\n    def extractQuotation(text1 : String) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).equals((List[Any](\"A53\", \"multi\", \"Processor\"))));\n    assert(extractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).equals((List[Any](\"favorite\", \"apps\"))));\n    assert(extractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).equals((List[Any](\"4k Ultra HD\", \"HDR 10\"))));\n    assert(extractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).equals((List[Any]())));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_726_multiply_elements", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    def multiplyElements(test_tup : List[Long]) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyElements((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 8l.toLong, 10l.toLong))).equals((List[Any](5l.toLong, 35l.toLong, 56l.toLong, 80l.toLong))));\n    assert(multiplyElements((List[Long](2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Any](8l.toLong, 20l.toLong, 30l.toLong, 42l.toLong))));\n    assert(multiplyElements((List[Long](12l.toLong, 13l.toLong, 14l.toLong, 9l.toLong, 15l.toLong))).equals((List[Any](156l.toLong, 182l.toLong, 126l.toLong, 135l.toLong))));\n    assert(multiplyElements((List[Long](12l.toLong))).equals((List[Any]())));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_728_sum_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    def sumList(lst1 : List[Long], lst2 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumList((List[Long](10l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 25l.toLong, 35l.toLong))).equals((List[Long](25l.toLong, 45l.toLong, 65l.toLong))));\n    assert(sumList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](5l.toLong, 6l.toLong, 7l.toLong))).equals((List[Long](6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(sumList((List[Long](15l.toLong, 20l.toLong, 30l.toLong)), (List[Long](15l.toLong, 45l.toLong, 75l.toLong))).equals((List[Long](30l.toLong, 65l.toLong, 105l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_72_dif_Square", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number can be represented as the difference of two squares or not.\n    def difSquare(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(difSquare((5l)) == (true));\n    assert(difSquare((10l)) == (false));\n    assert(difSquare((15l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_730_consecutive_duplicates", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    def consecutiveDuplicates(nums : List[Any]) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(consecutiveDuplicates((List[Any](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((List[Any](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong))));\n    assert(consecutiveDuplicates((List[Any](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((List[Any](10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    assert(consecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((List[Any](\"a\", \"b\", \"c\", \"d\"))));\n    assert(consecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"))).equals((List[Any](\"a\", \"b\", \"c\", \"d\", \"a\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_731_lateralsurface_cone", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the lateral surface area of a cone given radius r and the height h.\n    def lateralsurfaceCone(r : Long, h : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lateralsurfaceCone((5l), (12l)) == (204.20352248333654f));\n    assert(lateralsurfaceCone((10l), (15l)) == (566.3586699569488f));\n    assert(lateralsurfaceCone((19l), (17l)) == (1521.8090132193388f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_732_replace_specialchar", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    def replaceSpecialchar(text : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(replaceSpecialchar((\"Python language, Programming language.\")).equals((\"Python:language::Programming:language:\")));\n    assert(replaceSpecialchar((\"a b c,d e f\")).equals((\"a:b:c:d:e:f\")));\n    assert(replaceSpecialchar((\"ram reshma,ram rahim\")).equals((\"ram:reshma:ram:rahim\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_733_find_first_occurrence", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-sublists/\n    def sumOfSubarrayProd(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (20l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong))) == (5l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (84l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_735_toggle_middle_bits", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    def toggleMiddleBits(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(toggleMiddleBits((9l)) == (15l));\n    assert(toggleMiddleBits((10l)) == (12l));\n    assert(toggleMiddleBits((11l)) == (13l));\n    assert(toggleMiddleBits((65l)) == (127l));\n    assert(toggleMiddleBits((77l)) == (115l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_736_left_insertion", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_737_check_str", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given string is starting with a vowel or not using regex.\n    def checkStr(string : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkStr((\"annie\")) == (true));\n    assert(checkStr((\"dawood\")) == (false));\n    assert(checkStr((\"Else\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_738_geometric_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/scalathon-exercises/data-structures-and-algorithms/scalathon-recursion-exercise-9.php\n    def geometricSum(n : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(geometricSum((7l)) == (1.9921875f));\n    assert(geometricSum((4l)) == (1.9375f));\n    assert(geometricSum((8l)) == (1.99609375f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_739_find_Index", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    def findIndex(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findIndex((2l)) == (4l));\n    assert(findIndex((3l)) == (14l));\n    assert(findIndex((4l)) == (45l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_740_tuple_to_dict", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/scalathon-convert-tuple-to-adjacent-pair-map/\n    def tupleToDict(test_tup : Tuple2[Long, Long, Long, Long, Long, Long]) : Map[Long,Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict(((1l, 5l, 7l, 10l, 13l, 5l))).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict(((1l, 2l, 3l, 4l, 5l, 6l))).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict(((7l, 8l, 9l, 10l, 11l, 12l))).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_741_all_Characters_Same", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether all the characters are same or not.\n    def allCharactersSame(s : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(allCharactersSame((\"python\")) == (false));\n    assert(allCharactersSame((\"aaa\")) == (true));\n    assert(allCharactersSame((\"data\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_742_area_tetrahedron", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to caluclate the area of a tetrahedron.\n    def areaTetrahedron(side : Long) : Float = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(areaTetrahedron((3l)) == (15.588457268119894f));\n    assert(areaTetrahedron((20l)) == (692.8203230275509f));\n    assert(areaTetrahedron((10l)) == (173.20508075688772f));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_743_rotate_right", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/scalathon-program-right-rotate-list-n/\n    def rotateRight(list : List[Long], m : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (3l)).equals((List[Long](8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (5l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_744_check_none", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuple has any none value or not.\n    def checkNone(test_tup : Any) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkNone((Any(10l), Some(4l), Some(5l), Some(6l), Some(None)))) == (true));\n    assert(checkNone((Any((7l, 8l, 9l, 11l, 14l)))) == (false));\n    assert(checkNone((Any(1l), Some(2l), Some(3l), Some(4l), Some(None)))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_745_divisible_by_digits", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/scalathon-exercises/lambda/scalathon-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_746_sector_area", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    def sectorArea(r : Long, a : Long) : Option[Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sectorArea((4l), (45l)).equals(Some(6.283185307179586f)));\n    assert(sectorArea((9l), (45l)).equals(Some(31.808625617596654f)));\n    assert(sectorArea((9l), (361l)).equals(None));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_747_lcs_of_three", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    def lcsOfThree(X : String, Y : String, Z : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));\n    assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));\n    assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_748_capital_words_spaces", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to put spaces between words starting with capital letters in a given string.\n    def capitalWordsSpaces(str1 : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(capitalWordsSpaces((\"Python\")).equals((\"Python\")));\n    assert(capitalWordsSpaces((\"PythonProgrammingExamples\")).equals((\"Python Programming Examples\")));\n    assert(capitalWordsSpaces((\"GetReadyToBeCodingFreak\")).equals((\"Get Ready To Be Coding Freak\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_749_sort_numeric_strings", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_74_is_samepatterns", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether it follows the sequence given in the patterns list.\n    def isSamepatterns(colors : List[String], patterns : List[String]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"green\")), (List[String](\"a\", \"b\", \"b\"))) == (true));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\", \"b\"))) == (false));\n    assert(isSamepatterns((List[String](\"red\", \"green\", \"greenn\")), (List[String](\"a\", \"b\"))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_750_add_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add the given tuple to the given list.\n    def addTuple(test_list : List[Long], test_tup : Tuple2[Long, Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addTuple((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), ((9l, 10l))).equals((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(addTuple((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), ((10l, 11l))).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 10l.toLong, 11l.toLong))));\n    assert(addTuple((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), ((11l, 12l))).equals((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_751_check_min_heap", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-list-represents-a-binary-heap/\n    def checkMinHeap(arr : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkMinHeap((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(checkMinHeap((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 10l.toLong, 15l.toLong))) == (true));\n    assert(checkMinHeap((List[Long](2l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 15l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_752_jacobsthal_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    def jacobsthalNum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(jacobsthalNum((5l)) == (11l));\n    assert(jacobsthalNum((2l)) == (1l));\n    assert(jacobsthalNum((4l)) == (5l));\n    assert(jacobsthalNum((13l)) == (2731l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_753_min_k", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/scalathon-find-minimum-k-records-from-tuple-list/ - in this case a verbatim coscala of test cases\n    def minK(test_list : List[Tuple2[String, Long]], K : Long) : List[Tuple2[String, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Tuple2[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Tuple2[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Tuple2[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Tuple2[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Tuple2[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Tuple2[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_754_extract_index_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : List[Any] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any](1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((List[Any]())));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_755_second_smallest", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the second smallest number in a list.\n    def secondSmallest(numbers : List[Either[Long, Float]]) : Option[Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(secondSmallest((List[Either[Long, Float]](1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(Some(-2l)));\n    assert(secondSmallest((List[Either[Long, Float]](1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(Some(-0.5f)));\n    assert(secondSmallest((List[Either[Long, Float]](2l.toLong, 2l.toLong))).equals(None));\n    assert(secondSmallest((List[Either[Long, Float]](2l.toLong, 2l.toLong, 2l.toLong))).equals(None));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_756_text_match_zero_one", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/scalathon-exercises/re/scalathon-re-exercise-3.php\n    def textMatchZeroOne(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchZeroOne((\"ac\")) == (false));\n    assert(textMatchZeroOne((\"dc\")) == (false));\n    assert(textMatchZeroOne((\"abbbba\")) == (true));\n    assert(textMatchZeroOne((\"dsabbbba\")) == (true));\n    assert(textMatchZeroOne((\"asbbbba\")) == (false));\n    assert(textMatchZeroOne((\"abaaa\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_757_count_reverse_pairs", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/scalathon-program-to-count-the-pairs-of-reverse-strings/\n    def countReversePairs(test_list : List[String]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countReversePairs((List[String](\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"))) == (2l));\n    assert(countReversePairs((List[String](\"geeks\", \"best\", \"for\", \"skeeg\"))) == (1l));\n    assert(countReversePairs((List[String](\"makes\", \"best\", \"sekam\", \"for\", \"rof\"))) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_759_is_decimal", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_75_find_tuples", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Tuple2[Long, Long, Long]], K : Long) : List[Tuple2[Long, Long, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Tuple2[Long, Long, Long]]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Tuple2[Long, Long, Long]]((6l, 24l, 12l)))));\n    assert(findTuples((List[Tuple2[Long, Long, Long]]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Tuple2[Long, Long, Long]]((5l, 25l, 30l)))));\n    assert(findTuples((List[Tuple2[Long, Long, Long]]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Tuple2[Long, Long, Long]]((8l, 16l, 4l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_760_unique_Element", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list of numbers contains only one distinct element or not.\n    def uniqueElement(arr : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueElement((List[Long](1l.toLong, 1l.toLong, 1l.toLong))) == (true));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_762_check_monthnumber_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    def checkMonthnumberNumber(monthnum3 : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkMonthnumberNumber((6l)) == (true));\n    assert(checkMonthnumberNumber((2l)) == (false));\n    assert(checkMonthnumberNumber((12l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_763_find_min_diff", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    def findMinDiff(arr : List[Long], n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMinDiff((List[Long](1l.toLong, 5l.toLong, 3l.toLong, 19l.toLong, 18l.toLong, 25l.toLong)), (6l)) == (1l));\n    assert(findMinDiff((List[Long](4l.toLong, 3l.toLong, 2l.toLong, 6l.toLong)), (4l)) == (1l));\n    assert(findMinDiff((List[Long](30l.toLong, 5l.toLong, 20l.toLong, 9l.toLong)), (4l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_764_number_ctr", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count number of digits in a given string.\n    def numberCtr(str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(numberCtr((\"program2bedone\")) == (1l));\n    assert(numberCtr((\"3wonders\")) == (1l));\n    assert(numberCtr((\"123\")) == (3l));\n    assert(numberCtr((\"3wond-1ers2\")) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_765_is_polite", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    def isPolite(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPolite((7l)) == (11l));\n    assert(isPolite((4l)) == (7l));\n    assert(isPolite((9l)) == (13l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_766_pair_wise", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to return a list of all pairs of consecutive items in a given list.\n    def pairWise(l1 : List[Long]) : List[Tuple2[Long, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairWise((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 1l), (1l, 2l), (2l, 3l), (3l, 3l), (3l, 4l), (4l, 4l), (4l, 5l)))));\n    assert(pairWise((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 5l), (5l, 7l), (7l, 9l), (9l, 10l)))));\n    assert(pairWise((List[Long](5l.toLong, 1l.toLong, 9l.toLong, 7l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((5l, 1l), (1l, 9l), (9l, 7l), (7l, 10l)))));\n    assert(pairWise((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Tuple2[Long, Long]]((1l, 2l), (2l, 3l), (3l, 4l), (4l, 5l), (5l, 6l), (6l, 7l), (7l, 8l), (8l, 9l), (9l, 10l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_767_get_pairs_count", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    def getPairsCount(arr : List[Long], sum : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getPairsCount((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (2l)) == (6l));\n    assert(getPairsCount((List[Long](1l.toLong, 5l.toLong, 7l.toLong, -1l.toLong, 5l.toLong)), (6l)) == (3l));\n    assert(getPairsCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong)), (1l)) == (1l));\n    assert(getPairsCount((List[Long](-1l.toLong, -2l.toLong, 3l.toLong)), (-3l)) == (1l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_769_Diff", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to get the difference between two lists.\n    def Diff(li1 : List[Long], li2 : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Diff((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong, 30l.toLong, 35l.toLong, 40l.toLong)), (List[Long](25l.toLong, 40l.toLong, 35l.toLong))).equals((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 15l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_770_odd_num_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of fourth power of first n odd natural numbers.\n    def oddNumSum(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddNumSum((2l)) == (82l));\n    assert(oddNumSum((3l)) == (707l));\n    assert(oddNumSum((4l)) == (3108l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_771_check_expression", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    def checkExpression(exp : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkExpression((\"{()}[{}]\")) == (true));\n    assert(checkExpression((\"{()}[{]\")) == (false));\n    assert(checkExpression((\"{()}[{}][]({})\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_772_remove_length", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all the words with k length in the given string.\n    def removeLength(test_str : String, K : Long) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));\n    assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));\n    assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_773_occurance_substring", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    def occuranceSubstring(text : String, pattern : String) : Option[Tuple2[String, Long, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals(Some((\"python\", 0l, 6l))));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals(Some((\"programming\", 7l, 18l))));\n    assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals(Some((\"language\", 31l, 39l))));\n    assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(None));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_775_odd_position", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_776_count_vowels", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count those characters which have vowels as their neighbors in the given string.\n    def countVowels(test_str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countVowels((\"bestinstareels\")) == (7l));\n    assert(countVowels((\"partofthejourneyistheend\")) == (12l));\n    assert(countVowels((\"amazonprime\")) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_777_find_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of non-repeated elements in a given list.\n    def findSum(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (21l));\n    assert(findSum((List[Long](1l.toLong, 10l.toLong, 9l.toLong, 4l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 4l.toLong))) == (71l));\n    assert(findSum((List[Long](12l.toLong, 10l.toLong, 9l.toLong, 45l.toLong, 2l.toLong, 10l.toLong, 10l.toLong, 45l.toLong, 10l.toLong))) == (78l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to pack consecutive duplicates of a given list elements into sublists.\n    def packConsecutiveDuplicates(list1 : List[Any]) : List[List[Any]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(packConsecutiveDuplicates((List[Any](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((List[List[Any]](List[Long](0l.toLong, 0l.toLong), List[Long](1l.toLong), List[Long](2l.toLong), List[Long](3l.toLong), List[Long](4l.toLong, 4l.toLong), List[Long](5l.toLong), List[Long](6l.toLong, 6l.toLong, 6l.toLong), List[Long](7l.toLong), List[Long](8l.toLong), List[Long](9l.toLong), List[Long](4l.toLong, 4l.toLong)))));\n    assert(packConsecutiveDuplicates((List[Any](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((List[List[Any]](List[Long](10l.toLong, 10l.toLong), List[Long](15l.toLong), List[Long](19l.toLong), List[Long](18l.toLong, 18l.toLong), List[Long](17l.toLong), List[Long](26l.toLong, 26l.toLong), List[Long](17l.toLong), List[Long](18l.toLong), List[Long](10l.toLong)))));\n    assert(packConsecutiveDuplicates((List[Any](\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((List[List[Any]](List[String](\"a\", \"a\"), List[String](\"b\"), List[String](\"c\"), List[String](\"d\", \"d\")))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_77_is_Diff", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find whether a number is divisible by 11.\n    def isDiff(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDiff((12345l)) == (false));\n    assert(isDiff((1212112l)) == (true));\n    assert(isDiff((1212l)) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_780_find_combinations", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/scalathon-combinations-of-sum-with-tuples-in-tuple-list/\n    def findCombinations(test_list : List[Tuple2[Long, Long]]) : List[Tuple2[Long, Long]] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findCombinations((List[Tuple2[Long, Long]]((2l, 4l), (6l, 7l), (5l, 1l), (6l, 10l)))).equals((List[Tuple2[Long, Long]]((8l, 11l), (7l, 5l), (8l, 14l), (11l, 8l), (12l, 17l), (11l, 11l)))));\n    assert(findCombinations((List[Tuple2[Long, Long]]((3l, 5l), (7l, 8l), (6l, 2l), (7l, 11l)))).equals((List[Tuple2[Long, Long]]((10l, 13l), (9l, 7l), (10l, 16l), (13l, 10l), (14l, 19l), (13l, 13l)))));\n    assert(findCombinations((List[Tuple2[Long, Long]]((4l, 6l), (8l, 9l), (7l, 3l), (8l, 12l)))).equals((List[Tuple2[Long, Long]]((12l, 15l), (11l, 9l), (12l, 18l), (15l, 12l), (16l, 21l), (15l, 15l)))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_781_count_divisors", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the count of divisors is even. https://www.w3resource.com/scalathon-exercises/basic/scalathon-basic-1-exercise-24.php\n    def countDivisors(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countDivisors((10l)) == (true));\n    assert(countDivisors((100l)) == (false));\n    assert(countDivisors((125l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_782_odd_length_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd length sublists. https://www.geeksforgeeks.org/sum-of-all-odd-length-sublists/\n    def oddLengthSum(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 4l.toLong))) == (14l));\n    assert(oddLengthSum((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (15l));\n    assert(oddLengthSum((List[Long](1l.toLong, 7l.toLong))) == (8l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_783_rgb_to_hsv", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    def rgbToHsv(r : Long, g : Long, b : Long) : List[Float] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rgbToHsv((255l), (255l), (255l)).equals((List[Float](0.0f.toFloat, 0.0f.toFloat, 100.0f.toFloat))));\n    assert(rgbToHsv((0l), (215l), (0l)).equals((List[Float](120.0f.toFloat, 100.0f.toFloat, 84.31372549019608f.toFloat))));\n    assert(rgbToHsv((10l), (215l), (110l)).equals((List[Float](149.26829268292684f.toFloat, 95.34883720930233f.toFloat, 84.31372549019608f.toFloat))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_784_mul_even_odd", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_785_tuple_str_int", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert tuple string to integer tuple.\n    def tupleStrInt(test_str : String) : Tuple2[Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleStrInt((\"(7, 8, 9)\")).equals(((7l, 8l, 9l))));\n    assert(tupleStrInt((\"(1, 2, 3)\")).equals(((1l, 2l, 3l))));\n    assert(tupleStrInt((\"(4, 5, 6)\")).equals(((4l, 5l, 6l))));\n    assert(tupleStrInt((\"(7, 81, 19)\")).equals(((7l, 81l, 19l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_786_right_insertion", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the right insertion point for a specified value in sorted order.\n    def rightInsertion(a : List[Long], x : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(rightInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_787_text_match_three", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an a followed by three 'b'.\n    def textMatchThree(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textMatchThree((\"ac\")) == (false));\n    assert(textMatchThree((\"dc\")) == (false));\n    assert(textMatchThree((\"abbbba\")) == (true));\n    assert(textMatchThree((\"caacabbbba\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_788_new_tuple", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create a new tuple from the given string and list.\n    def newTuple(test_list : List[String], test_str : String) : Tuple2[String, String, String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(newTuple((List[String](\"WEB\", \"is\")), (\"best\")).equals(((\"WEB\", \"is\", \"best\"))));\n    assert(newTuple((List[String](\"We\", \"are\")), (\"Developers\")).equals(((\"We\", \"are\", \"Developers\"))));\n    assert(newTuple((List[String](\"Part\", \"is\")), (\"Wrong\")).equals(((\"Part\", \"is\", \"Wrong\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_790_even_position", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether every even index contains even numbers of a given list.\n    def evenPosition(nums : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(evenPosition((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (false));\n    assert(evenPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    assert(evenPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_791_remove_nested", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Any) : Tuple2[Long, Long, Long, Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeNested((Any(4l, 6l), 10l))).equals(((1l, 5l, 7l, 10l))));\n    assert(removeNested((Any(5l, 7l), 11l))).equals(((2l, 6l, 8l, 11l))));\n    assert(removeNested((Any(6l, 8l), 12l))).equals(((3l, 7l, 9l, 12l))));\n    assert(removeNested((Any(6l, 8l), (5l, 12l), 12l))).equals(((3l, 7l, 9l, 12l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_792_count_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of lists in a given number of lists.\n    def countList(input_list : List[List[Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countList((List[List[Long]](List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))) == (4l));\n    assert(countList((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))) == (3l));\n    assert(countList((List[List[Long]](List[Long](1l.toLong, 0l.toLong), List[Long](2l.toLong, 0l.toLong)))) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_793_last", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_794_text_starta_endb", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    def textStartaEndb(text : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(textStartaEndb((\"aabbbb\")) == (true));\n    assert(textStartaEndb((\"aabAbbbc\")) == (false));\n    assert(textStartaEndb((\"accddbbjjj\")) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_796_return_sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write function to find the sum of all items in the given map.\n    def returnSum(dict : Map[String,Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(returnSum((Map[String,Long](\"a\" -> 100l, \"b\" -> 200l, \"c\" -> 300l))) == (600l));\n    assert(returnSum((Map[String,Long](\"a\" -> 25l, \"b\" -> 18l, \"c\" -> 45l))) == (88l));\n    assert(returnSum((Map[String,Long](\"a\" -> 36l, \"b\" -> 39l, \"c\" -> 49l))) == (124l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_797_sum_in_range", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of all odd natural numbers within the range l and r.\n    def sumInRange(l : Long, r : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumInRange((2l), (5l)) == (8l));\n    assert(sumInRange((5l), (7l)) == (12l));\n    assert(sumInRange((7l), (13l)) == (40l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_798__sum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of a list.\n    def Sum(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Sum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (6l));\n    assert(Sum((List[Long](15l.toLong, 12l.toLong, 13l.toLong, 10l.toLong))) == (50l));\n    assert(Sum((List[Long](0l.toLong, 1l.toLong, 2l.toLong))) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_799_left_rotate", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    def leftRotate(n : Long, d : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(leftRotate((16l), (2l)) == (64l));\n    assert(leftRotate((10l), (2l)) == (40l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((99l), (3l)) == (792l));\n    assert(leftRotate((1l), (3l)) == (8l));\n    assert(leftRotate((5l), (3l)) == (40l));\n    assert(leftRotate((29l), (3l)) == (232l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_79_word_len", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the length of the word is odd or not.\n    def wordLen(s : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(wordLen((\"Hadoop\")) == (false));\n    assert(wordLen((\"great\")) == (true));\n    assert(wordLen((\"structure\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_800_remove_all_spaces", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all whitespaces from a string.\n    def removeAllSpaces(text : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeAllSpaces((\"python  program\")).equals((\"pythonprogram\")));\n    assert(removeAllSpaces((\"python   programming    language\")).equals((\"pythonprogramminglanguage\")));\n    assert(removeAllSpaces((\"python                     program\")).equals((\"pythonprogram\")));\n    assert(removeAllSpaces((\"   python                     program\")).equals((\"pythonprogram\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_801_test_three_equal", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of equal numbers from three given integers.\n    def testThreeEqual(x : Long, y : Long, z : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(testThreeEqual((1l), (1l), (1l)) == (3l));\n    assert(testThreeEqual((-1l), (-2l), (-3l)) == (0l));\n    assert(testThreeEqual((1l), (2l), (2l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_802_count_rotation", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of rotations required to generate a sorted list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-list/\n    def countRotation(arr : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countRotation((List[Long](3l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(countRotation((List[Long](4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (2l));\n    assert(countRotation((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(countRotation((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (0l));\n    assert(countRotation((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_803_is_perfect_square", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    def isPerfectSquare(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isPerfectSquare((10l)) == (false));\n    assert(isPerfectSquare((36l)) == (true));\n    assert(isPerfectSquare((14l)) == (false));\n    assert(isPerfectSquare((196l)) == (true));\n    assert(isPerfectSquare((125l)) == (false));\n    assert(isPerfectSquare((15625l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_804_is_product_even", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the product of numbers in a list is even or not.\n    def isProductEven(arr : List[Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 4l.toLong))) == (true));\n    assert(isProductEven((List[Long](1l.toLong, 1l.toLong))) == (false));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_805_max_sum_list", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    def maxSumList(lists : List[List[Long]]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxSumList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](10l.toLong, 11l.toLong, 12l.toLong))));\n    assert(maxSumList((List[List[Long]](List[Long](3l.toLong, 2l.toLong, 1l.toLong), List[Long](6l.toLong, 5l.toLong, 4l.toLong), List[Long](12l.toLong, 11l.toLong, 10l.toLong)))).equals((List[Long](12l.toLong, 11l.toLong, 10l.toLong))));\n    assert(maxSumList((List[List[Long]](List[Long](2l.toLong, 3l.toLong, 1l.toLong)))).equals((List[Long](2l.toLong, 3l.toLong, 1l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_806_max_run_uppercase", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_807_first_odd", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the first odd number in a given list of numbers.\n    def firstOdd(nums : List[Long]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong))) == (1l));\n    assert(firstOdd((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong))) == (1l));\n    assert(firstOdd((List[Long](8l.toLong, 9l.toLong, 1l.toLong))) == (9l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_808_check_K", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuples contain the k or not.\n    def checkK(test_tup : List[Long], K : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkK((List[Long](10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 8l.toLong)), (6l)) == (true));\n    assert(checkK((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)), (7l)) == (false));\n    assert(checkK((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 44l.toLong, 11l.toLong, 12l.toLong)), (11l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_809_check_smaller", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    def checkSmaller(test_tup1 : Tuple2[Long, Long, Long], test_tup2 : Tuple2[Long, Long, Long]) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkSmaller(((1l, 2l, 3l)), ((2l, 3l, 4l))) == (false));\n    assert(checkSmaller(((4l, 5l, 6l)), ((3l, 4l, 5l))) == (true));\n    assert(checkSmaller(((11l, 12l, 13l)), ((10l, 11l, 12l))) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_80_tetrahedral_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth tetrahedral number.\n    def tetrahedralNumber(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tetrahedralNumber((5l)) == (35l));\n    assert(tetrahedralNumber((6l)) == (56l));\n    assert(tetrahedralNumber((7l)) == (84l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_83_get_Char", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    def getChar(strr : String) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getChar((\"abc\")).equals((\"f\")));\n    assert(getChar((\"gfg\")).equals((\"t\")));\n    assert(getChar((\"ab\")).equals((\"c\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_84_sequence", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth number in the newman conway sequence.\n    def sequence(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sequence((10l)) == (6l));\n    assert(sequence((2l)) == (1l));\n    assert(sequence((3l)) == (2l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_86_centered_hexagonal_number", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find nth centered hexagonal number.\n    def centeredHexagonalNumber(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(centeredHexagonalNumber((10l)) == (271l));\n    assert(centeredHexagonalNumber((2l)) == (7l));\n    assert(centeredHexagonalNumber((9l)) == (217l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_87_merge_dictionaries_three", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three dictionaries into a single map.\n    def mergeDictionariesThree(dict1 : Map[String,String], dict2 : Map[String,String], dict3 : Map[String,String]) : Map[String,String] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"O\" -> \"Orange\", \"W\" -> \"White\", \"B\" -> \"Black\"))).equals((Map[String,String](\"B\" -> \"Black\", \"R\" -> \"Red\", \"P\" -> \"Pink\", \"G\" -> \"Green\", \"W\" -> \"White\", \"O\" -> \"Orange\"))));\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\"))).equals((Map[String,String](\"W\" -> \"White\", \"P\" -> \"Pink\", \"B\" -> \"Black\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\"))));\n    assert(mergeDictionariesThree((Map[String,String](\"R\" -> \"Red\", \"B\" -> \"Black\", \"P\" -> \"Pink\")), (Map[String,String](\"L\" -> \"lavender\", \"B\" -> \"Blue\")), (Map[String,String](\"G\" -> \"Green\", \"W\" -> \"White\"))).equals((Map[String,String](\"B\" -> \"Black\", \"P\" -> \"Pink\", \"R\" -> \"Red\", \"G\" -> \"Green\", \"L\" -> \"lavender\", \"W\" -> \"White\"))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_88_freq_count", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to get the frequency of all the elements in a list, returned as a map.\n    def freqCount(list1 : List[Long]) : Map[Long,Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(freqCount((List[Long](10l.toLong, 10l.toLong, 10l.toLong, 10l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 20l.toLong, 40l.toLong, 40l.toLong, 50l.toLong, 50l.toLong, 30l.toLong))).equals((Map[Long,Long](10l -> 4l, 20l -> 4l, 40l -> 2l, 50l -> 2l, 30l -> 1l))));\n    assert(freqCount((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 1l.toLong, 4l.toLong))).equals((Map[Long,Long](1l -> 3l, 2l -> 2l, 3l -> 3l, 4l -> 3l))));\n    assert(freqCount((List[Long](5l.toLong, 6l.toLong, 7l.toLong, 4l.toLong, 9l.toLong, 10l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 9l.toLong, 5l.toLong))).equals((Map[Long,Long](10l -> 1l, 5l -> 3l, 6l -> 2l, 7l -> 2l, 4l -> 2l, 9l -> 2l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_89_closest_num", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the closest smaller number than n.\n    def closestNum(N : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(closestNum((11l)) == (10l));\n    assert(closestNum((7l)) == (6l));\n    assert(closestNum((12l)) == (11l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_8_square_nums", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find squares of individual elements in a list.\n    def squareNums(nums : List[Long]) : List[Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squareNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong, 36l.toLong, 49l.toLong, 64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(squareNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](100l.toLong, 400l.toLong, 900l.toLong))));\n    assert(squareNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](144l.toLong, 225l.toLong))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_90_len_log", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the length of the longest word.\n    def lenLog(list1 : List[String]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lenLog((List[String](\"python\", \"PHP\", \"bigdata\"))) == (7l));\n    assert(lenLog((List[String](\"a\", \"ab\", \"abc\"))) == (3l));\n    assert(lenLog((List[String](\"small\", \"big\", \"tall\"))) == (5l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_91_find_substring", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if a string is present as a substring in a given list of string values.\n    def findSubstring(str1 : List[String], sub_str : String) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ack\")) == (true));\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"abc\")) == (false));\n    assert(findSubstring((List[String](\"red\", \"black\", \"white\", \"green\", \"orange\")), (\"ange\")) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_92_is_undulating", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether the given number is undulating or not.\n    def isUndulating(n : Long) : Boolean = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isUndulating((1212121l)) == (true));\n    assert(isUndulating((1991l)) == (false));\n    assert(isUndulating((121l)) == (true));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_93_power", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the value of 'a' to the power 'b'.\n    def power(a : Long, b : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(power((3l), (4l)) == (81l));\n    assert(power((2l), (3l)) == (8l));\n    assert(power((5l), (5l)) == (3125l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_94_index_minimum", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    def indexMinimum(test_list : List[Tuple2[String, Long]]) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(indexMinimum((List[Tuple2[String, Long]]((\"Rash\", 143l), (\"Manjeet\", 200l), (\"Varsha\", 100l)))).equals((\"Varsha\")));\n    assert(indexMinimum((List[Tuple2[String, Long]]((\"Yash\", 185l), (\"Dawood\", 125l), (\"Sanya\", 175l)))).equals((\"Dawood\")));\n    assert(indexMinimum((List[Tuple2[String, Long]]((\"Sai\", 345l), (\"Salman\", 145l), (\"Ayesha\", 96l)))).equals((\"Ayesha\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_95_Find_Min_Length", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the length of the smallest list in a list of lists.\n    def FindMinLength(lst : List[List[Long]]) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMinLength((List[List[Long]](List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong)))) == (1l));\n    assert(FindMinLength((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))) == (2l));\n    assert(FindMinLength((List[List[Long]](List[Long](3l.toLong, 3l.toLong, 3l.toLong), List[Long](4l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_96_divisor", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the number of divisors of a given integer.\n    def divisor(n : Long) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisor((15l)) == (4l));\n    assert(divisor((12l)) == (6l));\n    assert(divisor((9l)) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_97_frequency_lists", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find frequency of each element in a flattened list of lists, returned in a map.\n    def frequencyLists(list1 : List[List[Long]]) : Map[Long,Long] = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong, 2l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong, 5l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 3l, 3l -> 1l, 4l -> 1l, 5l -> 2l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong), List[Long](9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong)))).equals((Map[Long,Long](1l -> 1l, 2l -> 1l, 3l -> 1l, 4l -> 1l, 5l -> 1l, 6l -> 1l, 7l -> 1l, 8l -> 1l, 9l -> 1l, 10l -> 1l, 11l -> 1l, 12l -> 1l))));\n    assert(frequencyLists((List[List[Long]](List[Long](20l.toLong, 30l.toLong, 40l.toLong, 17l.toLong), List[Long](18l.toLong, 16l.toLong, 14l.toLong, 13l.toLong), List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong)))).equals((Map[Long,Long](20l -> 2l, 30l -> 2l, 40l -> 2l, 17l -> 1l, 18l -> 1l, 16l -> 1l, 14l -> 1l, 13l -> 1l, 10l -> 1l))));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_99_decimal_to_binary", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    def decimalToBinary(n : Long) : String = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((8l)).equals((\"1000\")));\n    assert(decimalToBinary((18l)).equals((\"10010\")));\n    assert(decimalToBinary((7l)).equals((\"111\")));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
{"name": "mbpp_9_find_Rotations", "language": "scala", "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum number of rotations (greater than 0) required to get the same string.\n    def findRotations(str : String) : Long = {\n", "doctests": "transform", "original": "/home/arjun/repos/nuprl/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findRotations((\"aaaa\")) == (1l));\n    assert(findRotations((\"ab\")) == (2l));\n    assert(findRotations((\"abc\")) == (3l));\n    }\n\n}\n", "stop_tokens": ["\n    }\n"]}
